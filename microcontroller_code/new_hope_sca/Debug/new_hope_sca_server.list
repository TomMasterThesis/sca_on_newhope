
new_hope_sca_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000797c  08000200  08000200  00010200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b8  08007b7c  08007b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009434  08009434  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009434  08009434  00019434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800943c  0800943c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800943c  0800943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08009450  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08009450  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e29  00000000  00000000  0002d81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00030e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebc5  00000000  00000000  00031b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f40d  00000000  00000000  0005074d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb1dd  00000000  00000000  0005fb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ad37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001578  00000000  00000000  0011ad8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00005f26  00000000  00000000  0011c304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b64 	.word	0x08007b64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	08007b64 	.word	0x08007b64
	...

08000300 <KeccakF1600_Initialize>:
@ void KeccakF1600_Initialize( void )
@
.align 8
.global   KeccakF1600_Initialize
KeccakF1600_Initialize:
	bx		lr
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	f3af 8000 	nop.w
 8000308:	f3af 8000 	nop.w
 800030c:	f3af 8000 	nop.w
 8000310:	f3af 8000 	nop.w
 8000314:	f3af 8000 	nop.w
 8000318:	f3af 8000 	nop.w
 800031c:	f3af 8000 	nop.w
 8000320:	f3af 8000 	nop.w
 8000324:	f3af 8000 	nop.w
 8000328:	f3af 8000 	nop.w
 800032c:	f3af 8000 	nop.w
 8000330:	f3af 8000 	nop.w
 8000334:	f3af 8000 	nop.w
 8000338:	f3af 8000 	nop.w
 800033c:	f3af 8000 	nop.w
	...

08000400 <KeccakF1600_StateInitialize>:
@ void KeccakF1600_StateInitialize(void *state)
@
.align 8
.global   KeccakF1600_StateInitialize
KeccakF1600_StateInitialize:
	push	{r4 - r5}
 8000400:	b430      	push	{r4, r5}

	movs	r1, #0
 8000402:	2100      	movs	r1, #0
	movs	r2, #0
 8000404:	2200      	movs	r2, #0
	movs	r3, #0
 8000406:	2300      	movs	r3, #0
	movs	r4, #0
 8000408:	2400      	movs	r4, #0
	movs	r5, #0
 800040a:	2500      	movs	r5, #0
	stmia	r0!, { r1 - r5 }
 800040c:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800040e:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000410:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000412:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000414:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000416:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000418:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800041a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800041c:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800041e:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}

	pop		{r4 - r5}
 8000420:	bc30      	pop	{r4, r5}
	bx		lr
 8000422:	4770      	bx	lr
 8000424:	f3af 8000 	nop.w
 8000428:	f3af 8000 	nop.w
 800042c:	f3af 8000 	nop.w
 8000430:	f3af 8000 	nop.w
 8000434:	f3af 8000 	nop.w
 8000438:	f3af 8000 	nop.w
 800043c:	f3af 8000 	nop.w
	...

08000500 <KeccakF1600_StateComplementBit>:
@	void KeccakF1600_StateComplementBit(void *state, unsigned int position)
@
.align 8
.global   KeccakF1600_StateComplementBit
KeccakF1600_StateComplementBit:
	push	{r4, lr}
 8000500:	b510      	push	{r4, lr}
	movs	r3, #1
 8000502:	2301      	movs	r3, #1
	ands	r3, r3, r1
 8000504:	400b      	ands	r3, r1
	lsrs	r2, r1, #6
 8000506:	098a      	lsrs	r2, r1, #6
	lsls	r4, r3, #2
 8000508:	009c      	lsls	r4, r3, #2
	adds	r0, r0, r4
 800050a:	1900      	adds	r0, r0, r4
	lsls	r4, r2, #3
 800050c:	00d4      	lsls	r4, r2, #3
	adds	r0, r0, r4
 800050e:	1900      	adds	r0, r0, r4
	lsls	r3, r1, #32-6
 8000510:	068b      	lsls	r3, r1, #26
	lsrs	r3, r3, #32-5
 8000512:	0edb      	lsrs	r3, r3, #27
	movs	r2, #1
 8000514:	2201      	movs	r2, #1
	lsls	r2, r2, r3
 8000516:	409a      	lsls	r2, r3
	ldr		r3, [r0]
 8000518:	6803      	ldr	r3, [r0, #0]
	eors	r3, r3, r2
 800051a:	4053      	eors	r3, r2
	str		r3, [r0]
 800051c:	6003      	str	r3, [r0, #0]
	pop		{r4, pc}
 800051e:	bd10      	pop	{r4, pc}
	bx		lr
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	f3af 8000 	nop.w
 8000528:	f3af 8000 	nop.w
 800052c:	f3af 8000 	nop.w
 8000530:	f3af 8000 	nop.w
 8000534:	f3af 8000 	nop.w
 8000538:	f3af 8000 	nop.w
 800053c:	f3af 8000 	nop.w
	...

08000600 <KeccakF1600_StateXORBytes>:
@ void KeccakF1600_StateXORBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateXORBytes
KeccakF1600_StateXORBytes:
	cmp		r3, #0									@ .if length != 0
 8000600:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateXORBytes_Exit1
 8000602:	d02b      	beq.n	800065c <KeccakF1600_StateXORBytes_Exit1>
	push	{r4 - r6, lr}							@ then
 8000604:	b570      	push	{r4, r5, r6, lr}
	mov		r4, r8
 8000606:	4644      	mov	r4, r8
	mov		r5, r9
 8000608:	464d      	mov	r5, r9
	mov		r6, r10
 800060a:	4656      	mov	r6, sl
	push	{r4 - r7}
 800060c:	b4f0      	push	{r4, r5, r6, r7}
	lsrs	r4, r2, #3								@ offset &= ~7
 800060e:	08d4      	lsrs	r4, r2, #3
	lsls	r4, r4, #3
 8000610:	00e4      	lsls	r4, r4, #3
	adds	r0, r0, r4								@ add whole lane offset to state pointer
 8000612:	1900      	adds	r0, r0, r4
	lsls	r2, r2, #29								@ offset &= 7 (part not lane aligned)
 8000614:	0752      	lsls	r2, r2, #29
	lsrs	r2, r2, #29
 8000616:	0f52      	lsrs	r2, r2, #29
	beq		KeccakF1600_StateXORBytes_CheckLanes	@ .if offset != 0
 8000618:	d00c      	beq.n	8000634 <KeccakF1600_StateXORBytes_CheckLanes>
	movs	r4, r3									@ then, do remaining bytes in first lane
 800061a:	001c      	movs	r4, r3
	movs	r5, #8
 800061c:	2508      	movs	r5, #8
	subs	r5, r2									@ max size in lane = 8 - offset
 800061e:	1aad      	subs	r5, r5, r2
	cmp		r4, r5
 8000620:	42ac      	cmp	r4, r5
	ble		KeccakF1600_StateXORBytes_BytesAlign
 8000622:	dd00      	ble.n	8000626 <KeccakF1600_StateXORBytes_BytesAlign>
	movs	r4, r5
 8000624:	002c      	movs	r4, r5

08000626 <KeccakF1600_StateXORBytes_BytesAlign>:
KeccakF1600_StateXORBytes_BytesAlign:
	subs	r3, r3, r4								@ size left
 8000626:	1b1b      	subs	r3, r3, r4
	mov		r10, r3
 8000628:	469a      	mov	sl, r3
	movs	r3, r4
 800062a:	0023      	movs	r3, r4
	adr		r7, KeccakF1600_StateXORBytes_ToBitInterleavingConstants
 800062c:	a70c      	add	r7, pc, #48	; (adr r7, 8000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>)
	bl		__KeccakF1600_StateXORBytesInLane
 800062e:	f000 f967 	bl	8000900 <__KeccakF1600_StateXORBytesInLane>
	mov		r3, r10
 8000632:	4653      	mov	r3, sl

08000634 <KeccakF1600_StateXORBytes_CheckLanes>:
KeccakF1600_StateXORBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
 8000634:	08da      	lsrs	r2, r3, #3
	beq		KeccakF1600_StateXORBytes_Bytes
 8000636:	d006      	beq.n	8000646 <KeccakF1600_StateXORBytes_Bytes>
	mov		r10, r3
 8000638:	469a      	mov	sl, r3
	adr		r3, KeccakF1600_StateXORBytes_ToBitInterleavingConstants
 800063a:	a309      	add	r3, pc, #36	; (adr r3, 8000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>)
	bl		__KeccakF1600_StateXORLanes
 800063c:	f000 f860 	bl	8000700 <__KeccakF1600_StateXORLanes>
	mov		r3, r10
 8000640:	4653      	mov	r3, sl
	lsls	r3, r3, #29
 8000642:	075b      	lsls	r3, r3, #29
	lsrs	r3, r3, #29
 8000644:	0f5b      	lsrs	r3, r3, #29

08000646 <KeccakF1600_StateXORBytes_Bytes>:
KeccakF1600_StateXORBytes_Bytes:
	cmp		r3, #0
 8000646:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateXORBytes_Exit
 8000648:	d003      	beq.n	8000652 <KeccakF1600_StateXORBytes_Exit>
	movs	r2, #0
 800064a:	2200      	movs	r2, #0
	adr		r7, KeccakF1600_StateXORBytes_ToBitInterleavingConstants
 800064c:	a704      	add	r7, pc, #16	; (adr r7, 8000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>)
	bl		__KeccakF1600_StateXORBytesInLane
 800064e:	f000 f957 	bl	8000900 <__KeccakF1600_StateXORBytesInLane>

08000652 <KeccakF1600_StateXORBytes_Exit>:
KeccakF1600_StateXORBytes_Exit:
	pop		{r4 - r7}
 8000652:	bcf0      	pop	{r4, r5, r6, r7}
	mov		r8, r4
 8000654:	46a0      	mov	r8, r4
	mov		r9, r5
 8000656:	46a9      	mov	r9, r5
	mov		r10, r6
 8000658:	46b2      	mov	sl, r6
	pop		{r4 - r6, pc}
 800065a:	bd70      	pop	{r4, r5, r6, pc}

0800065c <KeccakF1600_StateXORBytes_Exit1>:
KeccakF1600_StateXORBytes_Exit1:
	bx		lr
 800065c:	4770      	bx	lr
	nop
 800065e:	bf00      	nop

08000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>:
 8000660:	55555555 	.word	0x55555555
 8000664:	33333333 	.word	0x33333333
 8000668:	0f0f0f0f 	.word	0x0f0f0f0f
 800066c:	00ff00ff 	.word	0x00ff00ff
 8000670:	aaaaaaaa 	.word	0xaaaaaaaa
 8000674:	cccccccc 	.word	0xcccccccc
 8000678:	f0f0f0f0 	.word	0xf0f0f0f0
 800067c:	ff00ff00 	.word	0xff00ff00
	...

08000700 <__KeccakF1600_StateXORLanes>:
@
@  Changed: r2-r9
@
.align 8
__KeccakF1600_StateXORLanes:
	lsls	r4, r1, #30
 8000700:	078c      	lsls	r4, r1, #30
	bne		__KeccakF1600_StateXORLanes_LoopUnaligned
 8000702:	d156      	bne.n	80007b2 <__KeccakF1600_StateXORLanes_LoopUnaligned>

08000704 <__KeccakF1600_StateXORLanes_LoopAligned>:
__KeccakF1600_StateXORLanes_LoopAligned:
	ldmia	r1!, {r6,r7}
 8000704:	c9c0      	ldmia	r1!, {r6, r7}
	mov		r8, r6
 8000706:	46b0      	mov	r8, r6
	mov		r9, r7
 8000708:	46b9      	mov	r9, r7
	toBitInterleaving	r8, r9, r6, r7, r5, r4, r3
 800070a:	4646      	mov	r6, r8
 800070c:	681d      	ldr	r5, [r3, #0]
 800070e:	402e      	ands	r6, r5
 8000710:	0875      	lsrs	r5, r6, #1
 8000712:	432e      	orrs	r6, r5
 8000714:	685d      	ldr	r5, [r3, #4]
 8000716:	402e      	ands	r6, r5
 8000718:	08b5      	lsrs	r5, r6, #2
 800071a:	432e      	orrs	r6, r5
 800071c:	689d      	ldr	r5, [r3, #8]
 800071e:	402e      	ands	r6, r5
 8000720:	0935      	lsrs	r5, r6, #4
 8000722:	432e      	orrs	r6, r5
 8000724:	68dd      	ldr	r5, [r3, #12]
 8000726:	402e      	ands	r6, r5
 8000728:	0a35      	lsrs	r5, r6, #8
 800072a:	432e      	orrs	r6, r5
 800072c:	464f      	mov	r7, r9
 800072e:	681d      	ldr	r5, [r3, #0]
 8000730:	402f      	ands	r7, r5
 8000732:	087d      	lsrs	r5, r7, #1
 8000734:	432f      	orrs	r7, r5
 8000736:	685d      	ldr	r5, [r3, #4]
 8000738:	402f      	ands	r7, r5
 800073a:	08bd      	lsrs	r5, r7, #2
 800073c:	432f      	orrs	r7, r5
 800073e:	689d      	ldr	r5, [r3, #8]
 8000740:	402f      	ands	r7, r5
 8000742:	093d      	lsrs	r5, r7, #4
 8000744:	432f      	orrs	r7, r5
 8000746:	68dd      	ldr	r5, [r3, #12]
 8000748:	402f      	ands	r7, r5
 800074a:	0a3d      	lsrs	r5, r7, #8
 800074c:	432f      	orrs	r7, r5
 800074e:	0436      	lsls	r6, r6, #16
 8000750:	0c36      	lsrs	r6, r6, #16
 8000752:	043f      	lsls	r7, r7, #16
 8000754:	433e      	orrs	r6, r7
 8000756:	4647      	mov	r7, r8
 8000758:	691d      	ldr	r5, [r3, #16]
 800075a:	402f      	ands	r7, r5
 800075c:	007d      	lsls	r5, r7, #1
 800075e:	432f      	orrs	r7, r5
 8000760:	695d      	ldr	r5, [r3, #20]
 8000762:	402f      	ands	r7, r5
 8000764:	00bd      	lsls	r5, r7, #2
 8000766:	432f      	orrs	r7, r5
 8000768:	699d      	ldr	r5, [r3, #24]
 800076a:	402f      	ands	r7, r5
 800076c:	013d      	lsls	r5, r7, #4
 800076e:	432f      	orrs	r7, r5
 8000770:	69dd      	ldr	r5, [r3, #28]
 8000772:	402f      	ands	r7, r5
 8000774:	023d      	lsls	r5, r7, #8
 8000776:	432f      	orrs	r7, r5
 8000778:	464c      	mov	r4, r9
 800077a:	691d      	ldr	r5, [r3, #16]
 800077c:	402c      	ands	r4, r5
 800077e:	0065      	lsls	r5, r4, #1
 8000780:	432c      	orrs	r4, r5
 8000782:	695d      	ldr	r5, [r3, #20]
 8000784:	402c      	ands	r4, r5
 8000786:	00a5      	lsls	r5, r4, #2
 8000788:	432c      	orrs	r4, r5
 800078a:	699d      	ldr	r5, [r3, #24]
 800078c:	402c      	ands	r4, r5
 800078e:	0125      	lsls	r5, r4, #4
 8000790:	432c      	orrs	r4, r5
 8000792:	69dd      	ldr	r5, [r3, #28]
 8000794:	402c      	ands	r4, r5
 8000796:	0225      	lsls	r5, r4, #8
 8000798:	432c      	orrs	r4, r5
 800079a:	0c3f      	lsrs	r7, r7, #16
 800079c:	0c24      	lsrs	r4, r4, #16
 800079e:	0424      	lsls	r4, r4, #16
 80007a0:	4327      	orrs	r7, r4
	ldr     r5, [r0]
 80007a2:	6805      	ldr	r5, [r0, #0]
	eors	r6, r6, r5
 80007a4:	406e      	eors	r6, r5
	ldr     r5, [r0, #4]
 80007a6:	6845      	ldr	r5, [r0, #4]
	eors	r7, r7, r5
 80007a8:	406f      	eors	r7, r5
	stmia	r0!, {r6,r7}
 80007aa:	c0c0      	stmia	r0!, {r6, r7}
	subs	r2, r2, #1
 80007ac:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateXORLanes_LoopAligned
 80007ae:	d1a9      	bne.n	8000704 <__KeccakF1600_StateXORLanes_LoopAligned>
	bx		lr
 80007b0:	4770      	bx	lr

080007b2 <__KeccakF1600_StateXORLanes_LoopUnaligned>:
__KeccakF1600_StateXORLanes_LoopUnaligned:
	ldrb	r6, [r1, #0]
 80007b2:	780e      	ldrb	r6, [r1, #0]
	ldrb	r4, [r1, #1]
 80007b4:	784c      	ldrb	r4, [r1, #1]
	lsls	r4, r4, #8
 80007b6:	0224      	lsls	r4, r4, #8
	orrs	r6, r6, r4
 80007b8:	4326      	orrs	r6, r4
	ldrb	r4, [r1, #2]
 80007ba:	788c      	ldrb	r4, [r1, #2]
	lsls	r4, r4, #16
 80007bc:	0424      	lsls	r4, r4, #16
	orrs	r6, r6, r4
 80007be:	4326      	orrs	r6, r4
	ldrb	r4, [r1, #3]
 80007c0:	78cc      	ldrb	r4, [r1, #3]
	lsls	r4, r4, #24
 80007c2:	0624      	lsls	r4, r4, #24
	orrs	r6, r6, r4
 80007c4:	4326      	orrs	r6, r4
	ldrb	r7, [r1, #4]
 80007c6:	790f      	ldrb	r7, [r1, #4]
	ldrb	r4, [r1, #5]
 80007c8:	794c      	ldrb	r4, [r1, #5]
	lsls	r4, r4, #8
 80007ca:	0224      	lsls	r4, r4, #8
	orrs	r7, r7, r4
 80007cc:	4327      	orrs	r7, r4
	ldrb	r4, [r1, #6]
 80007ce:	798c      	ldrb	r4, [r1, #6]
	lsls	r4, r4, #16
 80007d0:	0424      	lsls	r4, r4, #16
	orrs	r7, r7, r4
 80007d2:	4327      	orrs	r7, r4
	ldrb	r4, [r1, #7]
 80007d4:	79cc      	ldrb	r4, [r1, #7]
	lsls	r4, r4, #24
 80007d6:	0624      	lsls	r4, r4, #24
	orrs	r7, r7, r4
 80007d8:	4327      	orrs	r7, r4
	adds	r1, r1, #8
 80007da:	3108      	adds	r1, #8
	mov		r8, r6
 80007dc:	46b0      	mov	r8, r6
	mov		r9, r7
 80007de:	46b9      	mov	r9, r7
	toBitInterleaving	r8, r9, r6, r7, r5, r4, r3
 80007e0:	4646      	mov	r6, r8
 80007e2:	681d      	ldr	r5, [r3, #0]
 80007e4:	402e      	ands	r6, r5
 80007e6:	0875      	lsrs	r5, r6, #1
 80007e8:	432e      	orrs	r6, r5
 80007ea:	685d      	ldr	r5, [r3, #4]
 80007ec:	402e      	ands	r6, r5
 80007ee:	08b5      	lsrs	r5, r6, #2
 80007f0:	432e      	orrs	r6, r5
 80007f2:	689d      	ldr	r5, [r3, #8]
 80007f4:	402e      	ands	r6, r5
 80007f6:	0935      	lsrs	r5, r6, #4
 80007f8:	432e      	orrs	r6, r5
 80007fa:	68dd      	ldr	r5, [r3, #12]
 80007fc:	402e      	ands	r6, r5
 80007fe:	0a35      	lsrs	r5, r6, #8
 8000800:	432e      	orrs	r6, r5
 8000802:	464f      	mov	r7, r9
 8000804:	681d      	ldr	r5, [r3, #0]
 8000806:	402f      	ands	r7, r5
 8000808:	087d      	lsrs	r5, r7, #1
 800080a:	432f      	orrs	r7, r5
 800080c:	685d      	ldr	r5, [r3, #4]
 800080e:	402f      	ands	r7, r5
 8000810:	08bd      	lsrs	r5, r7, #2
 8000812:	432f      	orrs	r7, r5
 8000814:	689d      	ldr	r5, [r3, #8]
 8000816:	402f      	ands	r7, r5
 8000818:	093d      	lsrs	r5, r7, #4
 800081a:	432f      	orrs	r7, r5
 800081c:	68dd      	ldr	r5, [r3, #12]
 800081e:	402f      	ands	r7, r5
 8000820:	0a3d      	lsrs	r5, r7, #8
 8000822:	432f      	orrs	r7, r5
 8000824:	0436      	lsls	r6, r6, #16
 8000826:	0c36      	lsrs	r6, r6, #16
 8000828:	043f      	lsls	r7, r7, #16
 800082a:	433e      	orrs	r6, r7
 800082c:	4647      	mov	r7, r8
 800082e:	691d      	ldr	r5, [r3, #16]
 8000830:	402f      	ands	r7, r5
 8000832:	007d      	lsls	r5, r7, #1
 8000834:	432f      	orrs	r7, r5
 8000836:	695d      	ldr	r5, [r3, #20]
 8000838:	402f      	ands	r7, r5
 800083a:	00bd      	lsls	r5, r7, #2
 800083c:	432f      	orrs	r7, r5
 800083e:	699d      	ldr	r5, [r3, #24]
 8000840:	402f      	ands	r7, r5
 8000842:	013d      	lsls	r5, r7, #4
 8000844:	432f      	orrs	r7, r5
 8000846:	69dd      	ldr	r5, [r3, #28]
 8000848:	402f      	ands	r7, r5
 800084a:	023d      	lsls	r5, r7, #8
 800084c:	432f      	orrs	r7, r5
 800084e:	464c      	mov	r4, r9
 8000850:	691d      	ldr	r5, [r3, #16]
 8000852:	402c      	ands	r4, r5
 8000854:	0065      	lsls	r5, r4, #1
 8000856:	432c      	orrs	r4, r5
 8000858:	695d      	ldr	r5, [r3, #20]
 800085a:	402c      	ands	r4, r5
 800085c:	00a5      	lsls	r5, r4, #2
 800085e:	432c      	orrs	r4, r5
 8000860:	699d      	ldr	r5, [r3, #24]
 8000862:	402c      	ands	r4, r5
 8000864:	0125      	lsls	r5, r4, #4
 8000866:	432c      	orrs	r4, r5
 8000868:	69dd      	ldr	r5, [r3, #28]
 800086a:	402c      	ands	r4, r5
 800086c:	0225      	lsls	r5, r4, #8
 800086e:	432c      	orrs	r4, r5
 8000870:	0c3f      	lsrs	r7, r7, #16
 8000872:	0c24      	lsrs	r4, r4, #16
 8000874:	0424      	lsls	r4, r4, #16
 8000876:	4327      	orrs	r7, r4
	ldr     r5, [r0]
 8000878:	6805      	ldr	r5, [r0, #0]
	eors	r6, r6, r5
 800087a:	406e      	eors	r6, r5
	ldr     r5, [r0, #4]
 800087c:	6845      	ldr	r5, [r0, #4]
	eors	r7, r7, r5
 800087e:	406f      	eors	r7, r5
	stmia	r0!, {r6, r7}
 8000880:	c0c0      	stmia	r0!, {r6, r7}
	subs	r2, r2, #1
 8000882:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateXORLanes_LoopUnaligned
 8000884:	d195      	bne.n	80007b2 <__KeccakF1600_StateXORLanes_LoopUnaligned>
	bx		lr
 8000886:	4770      	bx	lr
 8000888:	f3af 8000 	nop.w
 800088c:	f3af 8000 	nop.w
 8000890:	f3af 8000 	nop.w
 8000894:	f3af 8000 	nop.w
 8000898:	f3af 8000 	nop.w
 800089c:	f3af 8000 	nop.w
 80008a0:	f3af 8000 	nop.w
 80008a4:	f3af 8000 	nop.w
 80008a8:	f3af 8000 	nop.w
 80008ac:	f3af 8000 	nop.w
 80008b0:	f3af 8000 	nop.w
 80008b4:	f3af 8000 	nop.w
 80008b8:	f3af 8000 	nop.w
 80008bc:	f3af 8000 	nop.w
	...

08000900 <__KeccakF1600_StateXORBytesInLane>:
@
@  Changed: r2-r9
@
.align 8
__KeccakF1600_StateXORBytesInLane:
	movs	r4, #0
 8000900:	2400      	movs	r4, #0
	movs	r5, #0
 8000902:	2500      	movs	r5, #0
	push	{ r4 - r5 }
 8000904:	b430      	push	{r4, r5}
	add		r2, r2, sp
 8000906:	446a      	add	r2, sp

08000908 <__KeccakF1600_StateXORBytesInLane_Loop>:
__KeccakF1600_StateXORBytesInLane_Loop:
	ldrb	r5, [r1]
 8000908:	780d      	ldrb	r5, [r1, #0]
	strb	r5, [r2]
 800090a:	7015      	strb	r5, [r2, #0]
	adds	r1, r1, #1
 800090c:	3101      	adds	r1, #1
	adds	r2, r2, #1
 800090e:	3201      	adds	r2, #1
	subs	r3, r3, #1
 8000910:	3b01      	subs	r3, #1
	bne		__KeccakF1600_StateXORBytesInLane_Loop
 8000912:	d1f9      	bne.n	8000908 <__KeccakF1600_StateXORBytesInLane_Loop>
	pop		{ r4 - r5 }
 8000914:	bc30      	pop	{r4, r5}
	mov		r8, r4
 8000916:	46a0      	mov	r8, r4
	mov		r9, r5
 8000918:	46a9      	mov	r9, r5
	toBitInterleaving	r8, r9, r4, r5, r6, r2, r7
 800091a:	4644      	mov	r4, r8
 800091c:	683e      	ldr	r6, [r7, #0]
 800091e:	4034      	ands	r4, r6
 8000920:	0866      	lsrs	r6, r4, #1
 8000922:	4334      	orrs	r4, r6
 8000924:	687e      	ldr	r6, [r7, #4]
 8000926:	4034      	ands	r4, r6
 8000928:	08a6      	lsrs	r6, r4, #2
 800092a:	4334      	orrs	r4, r6
 800092c:	68be      	ldr	r6, [r7, #8]
 800092e:	4034      	ands	r4, r6
 8000930:	0926      	lsrs	r6, r4, #4
 8000932:	4334      	orrs	r4, r6
 8000934:	68fe      	ldr	r6, [r7, #12]
 8000936:	4034      	ands	r4, r6
 8000938:	0a26      	lsrs	r6, r4, #8
 800093a:	4334      	orrs	r4, r6
 800093c:	464d      	mov	r5, r9
 800093e:	683e      	ldr	r6, [r7, #0]
 8000940:	4035      	ands	r5, r6
 8000942:	086e      	lsrs	r6, r5, #1
 8000944:	4335      	orrs	r5, r6
 8000946:	687e      	ldr	r6, [r7, #4]
 8000948:	4035      	ands	r5, r6
 800094a:	08ae      	lsrs	r6, r5, #2
 800094c:	4335      	orrs	r5, r6
 800094e:	68be      	ldr	r6, [r7, #8]
 8000950:	4035      	ands	r5, r6
 8000952:	092e      	lsrs	r6, r5, #4
 8000954:	4335      	orrs	r5, r6
 8000956:	68fe      	ldr	r6, [r7, #12]
 8000958:	4035      	ands	r5, r6
 800095a:	0a2e      	lsrs	r6, r5, #8
 800095c:	4335      	orrs	r5, r6
 800095e:	0424      	lsls	r4, r4, #16
 8000960:	0c24      	lsrs	r4, r4, #16
 8000962:	042d      	lsls	r5, r5, #16
 8000964:	432c      	orrs	r4, r5
 8000966:	4645      	mov	r5, r8
 8000968:	693e      	ldr	r6, [r7, #16]
 800096a:	4035      	ands	r5, r6
 800096c:	006e      	lsls	r6, r5, #1
 800096e:	4335      	orrs	r5, r6
 8000970:	697e      	ldr	r6, [r7, #20]
 8000972:	4035      	ands	r5, r6
 8000974:	00ae      	lsls	r6, r5, #2
 8000976:	4335      	orrs	r5, r6
 8000978:	69be      	ldr	r6, [r7, #24]
 800097a:	4035      	ands	r5, r6
 800097c:	012e      	lsls	r6, r5, #4
 800097e:	4335      	orrs	r5, r6
 8000980:	69fe      	ldr	r6, [r7, #28]
 8000982:	4035      	ands	r5, r6
 8000984:	022e      	lsls	r6, r5, #8
 8000986:	4335      	orrs	r5, r6
 8000988:	464a      	mov	r2, r9
 800098a:	693e      	ldr	r6, [r7, #16]
 800098c:	4032      	ands	r2, r6
 800098e:	0056      	lsls	r6, r2, #1
 8000990:	4332      	orrs	r2, r6
 8000992:	697e      	ldr	r6, [r7, #20]
 8000994:	4032      	ands	r2, r6
 8000996:	0096      	lsls	r6, r2, #2
 8000998:	4332      	orrs	r2, r6
 800099a:	69be      	ldr	r6, [r7, #24]
 800099c:	4032      	ands	r2, r6
 800099e:	0116      	lsls	r6, r2, #4
 80009a0:	4332      	orrs	r2, r6
 80009a2:	69fe      	ldr	r6, [r7, #28]
 80009a4:	4032      	ands	r2, r6
 80009a6:	0216      	lsls	r6, r2, #8
 80009a8:	4332      	orrs	r2, r6
 80009aa:	0c2d      	lsrs	r5, r5, #16
 80009ac:	0c12      	lsrs	r2, r2, #16
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	4315      	orrs	r5, r2
	ldr     r6, [r0]
 80009b2:	6806      	ldr	r6, [r0, #0]
	eors	r4, r4, r6
 80009b4:	4074      	eors	r4, r6
	ldr     r6, [r0, #4]
 80009b6:	6846      	ldr	r6, [r0, #4]
	eors	r5, r5, r6
 80009b8:	4075      	eors	r5, r6
	stmia	r0!, { r4, r5 }
 80009ba:	c030      	stmia	r0!, {r4, r5}
	bx		lr
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
	...

08000a00 <KeccakF1600_StateExtractBytes>:
@ void KeccakF1600_StateExtractBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateExtractBytes
KeccakF1600_StateExtractBytes:
	cmp		r3, #0									@ .if length != 0
 8000a00:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateExtractBytes_Exit1
 8000a02:	d027      	beq.n	8000a54 <KeccakF1600_StateExtractBytes_Exit1>
	push	{r4 - r6, lr}							@ then
 8000a04:	b570      	push	{r4, r5, r6, lr}
	mov		r4, r8
 8000a06:	4644      	mov	r4, r8
	push	{r4, r7}
 8000a08:	b490      	push	{r4, r7}
	lsrs	r4, r2, #3								@ offset &= ~7
 8000a0a:	08d4      	lsrs	r4, r2, #3
	lsls	r4, r4, #3
 8000a0c:	00e4      	lsls	r4, r4, #3
	adds	r0, r0, r4								@ add whole lane offset to state pointer
 8000a0e:	1900      	adds	r0, r0, r4
	lsls	r2, r2, #29								@ offset &= 7 (part not lane aligned)
 8000a10:	0752      	lsls	r2, r2, #29
	lsrs	r2, r2, #29
 8000a12:	0f52      	lsrs	r2, r2, #29
	beq		KeccakF1600_StateExtractBytes_CheckLanes	@ .if offset != 0
 8000a14:	d00c      	beq.n	8000a30 <KeccakF1600_StateExtractBytes_CheckLanes>
	movs	r4, r3									@ then, do remaining bytes in first lane
 8000a16:	001c      	movs	r4, r3
	movs	r5, #8
 8000a18:	2508      	movs	r5, #8
	subs	r5, r2									@ max size in lane = 8 - offset
 8000a1a:	1aad      	subs	r5, r5, r2
	cmp		r4, r5
 8000a1c:	42ac      	cmp	r4, r5
	ble		KeccakF1600_StateExtractBytes_BytesAlign
 8000a1e:	dd00      	ble.n	8000a22 <KeccakF1600_StateExtractBytes_BytesAlign>
	movs	r4, r5
 8000a20:	002c      	movs	r4, r5

08000a22 <KeccakF1600_StateExtractBytes_BytesAlign>:
KeccakF1600_StateExtractBytes_BytesAlign:
	subs	r3, r3, r4								@ size left
 8000a22:	1b1b      	subs	r3, r3, r4
	mov		r8, r3
 8000a24:	4698      	mov	r8, r3
	movs	r3, r4
 8000a26:	0023      	movs	r3, r4
	adr		r7, KeccakF1600_StateExtractBytes_FromBitInterleavingConstants
 8000a28:	a70b      	add	r7, pc, #44	; (adr r7, 8000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>)
	bl		__KeccakF1600_StateExtractBytesInLane
 8000a2a:	f000 f969 	bl	8000d00 <__KeccakF1600_StateExtractBytesInLane>
	mov		r3, r8
 8000a2e:	4643      	mov	r3, r8

08000a30 <KeccakF1600_StateExtractBytes_CheckLanes>:
KeccakF1600_StateExtractBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
 8000a30:	08da      	lsrs	r2, r3, #3
	beq		KeccakF1600_StateExtractBytes_Bytes
 8000a32:	d006      	beq.n	8000a42 <KeccakF1600_StateExtractBytes_Bytes>
	mov		r8, r3
 8000a34:	4698      	mov	r8, r3
	adr		r3, KeccakF1600_StateExtractBytes_FromBitInterleavingConstants
 8000a36:	a308      	add	r3, pc, #32	; (adr r3, 8000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>)
	bl		__KeccakF1600_StateExtractLanes
 8000a38:	f000 f862 	bl	8000b00 <__KeccakF1600_StateExtractLanes>
	mov		r3, r8
 8000a3c:	4643      	mov	r3, r8
	lsls	r3, r3, #29
 8000a3e:	075b      	lsls	r3, r3, #29
	lsrs	r3, r3, #29
 8000a40:	0f5b      	lsrs	r3, r3, #29

08000a42 <KeccakF1600_StateExtractBytes_Bytes>:
KeccakF1600_StateExtractBytes_Bytes:
	cmp		r3, #0
 8000a42:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateExtractBytes_Exit
 8000a44:	d003      	beq.n	8000a4e <KeccakF1600_StateExtractBytes_Exit>
	movs	r2, #0
 8000a46:	2200      	movs	r2, #0
	adr		r7, KeccakF1600_StateExtractBytes_FromBitInterleavingConstants
 8000a48:	a703      	add	r7, pc, #12	; (adr r7, 8000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>)
	bl		__KeccakF1600_StateExtractBytesInLane
 8000a4a:	f000 f959 	bl	8000d00 <__KeccakF1600_StateExtractBytesInLane>

08000a4e <KeccakF1600_StateExtractBytes_Exit>:
KeccakF1600_StateExtractBytes_Exit:
	pop		{r4,r7}
 8000a4e:	bc90      	pop	{r4, r7}
	mov		r8, r4
 8000a50:	46a0      	mov	r8, r4
	pop		{r4 - r6, pc}
 8000a52:	bd70      	pop	{r4, r5, r6, pc}

08000a54 <KeccakF1600_StateExtractBytes_Exit1>:
KeccakF1600_StateExtractBytes_Exit1:
	bx		lr
 8000a54:	4770      	bx	lr
	nop
 8000a56:	bf00      	nop

08000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>:
 8000a58:	0000ff00 	.word	0x0000ff00
 8000a5c:	00f000f0 	.word	0x00f000f0
 8000a60:	0c0c0c0c 	.word	0x0c0c0c0c
 8000a64:	22222222 	.word	0x22222222
 8000a68:	f3af 8000 	nop.w
 8000a6c:	f3af 8000 	nop.w
 8000a70:	f3af 8000 	nop.w
 8000a74:	f3af 8000 	nop.w
 8000a78:	f3af 8000 	nop.w
 8000a7c:	f3af 8000 	nop.w
	...

08000b00 <__KeccakF1600_StateExtractLanes>:
@
@  Changed: r2-r7
@
.align 8
__KeccakF1600_StateExtractLanes:
	lsls	r4, r1, #30
 8000b00:	078c      	lsls	r4, r1, #30
	bne		__KeccakF1600_StateExtractLanes_LoopUnaligned
 8000b02:	d145      	bne.n	8000b90 <__KeccakF1600_StateExtractLanes_LoopUnaligned>

08000b04 <__KeccakF1600_StateExtractLanes_LoopAligned>:
__KeccakF1600_StateExtractLanes_LoopAligned:
	ldmia	r0!, {r6,r7}
 8000b04:	c8c0      	ldmia	r0!, {r6, r7}
	fromBitInterleaving	r6, r7, r5, r4, r3
 8000b06:	0035      	movs	r5, r6
 8000b08:	0436      	lsls	r6, r6, #16
 8000b0a:	0c36      	lsrs	r6, r6, #16
 8000b0c:	043c      	lsls	r4, r7, #16
 8000b0e:	4326      	orrs	r6, r4
 8000b10:	0c3f      	lsrs	r7, r7, #16
 8000b12:	043f      	lsls	r7, r7, #16
 8000b14:	0c2d      	lsrs	r5, r5, #16
 8000b16:	432f      	orrs	r7, r5
 8000b18:	0a35      	lsrs	r5, r6, #8
 8000b1a:	4075      	eors	r5, r6
 8000b1c:	681c      	ldr	r4, [r3, #0]
 8000b1e:	4025      	ands	r5, r4
 8000b20:	406e      	eors	r6, r5
 8000b22:	022d      	lsls	r5, r5, #8
 8000b24:	406e      	eors	r6, r5
 8000b26:	0935      	lsrs	r5, r6, #4
 8000b28:	4075      	eors	r5, r6
 8000b2a:	685c      	ldr	r4, [r3, #4]
 8000b2c:	4025      	ands	r5, r4
 8000b2e:	406e      	eors	r6, r5
 8000b30:	012d      	lsls	r5, r5, #4
 8000b32:	406e      	eors	r6, r5
 8000b34:	08b5      	lsrs	r5, r6, #2
 8000b36:	4075      	eors	r5, r6
 8000b38:	689c      	ldr	r4, [r3, #8]
 8000b3a:	4025      	ands	r5, r4
 8000b3c:	406e      	eors	r6, r5
 8000b3e:	00ad      	lsls	r5, r5, #2
 8000b40:	406e      	eors	r6, r5
 8000b42:	0875      	lsrs	r5, r6, #1
 8000b44:	4075      	eors	r5, r6
 8000b46:	68dc      	ldr	r4, [r3, #12]
 8000b48:	4025      	ands	r5, r4
 8000b4a:	406e      	eors	r6, r5
 8000b4c:	006d      	lsls	r5, r5, #1
 8000b4e:	406e      	eors	r6, r5
 8000b50:	0a3d      	lsrs	r5, r7, #8
 8000b52:	407d      	eors	r5, r7
 8000b54:	681c      	ldr	r4, [r3, #0]
 8000b56:	4025      	ands	r5, r4
 8000b58:	406f      	eors	r7, r5
 8000b5a:	022d      	lsls	r5, r5, #8
 8000b5c:	406f      	eors	r7, r5
 8000b5e:	093d      	lsrs	r5, r7, #4
 8000b60:	407d      	eors	r5, r7
 8000b62:	685c      	ldr	r4, [r3, #4]
 8000b64:	4025      	ands	r5, r4
 8000b66:	406f      	eors	r7, r5
 8000b68:	012d      	lsls	r5, r5, #4
 8000b6a:	406f      	eors	r7, r5
 8000b6c:	08bd      	lsrs	r5, r7, #2
 8000b6e:	407d      	eors	r5, r7
 8000b70:	689c      	ldr	r4, [r3, #8]
 8000b72:	4025      	ands	r5, r4
 8000b74:	406f      	eors	r7, r5
 8000b76:	00ad      	lsls	r5, r5, #2
 8000b78:	406f      	eors	r7, r5
 8000b7a:	087d      	lsrs	r5, r7, #1
 8000b7c:	407d      	eors	r5, r7
 8000b7e:	68dc      	ldr	r4, [r3, #12]
 8000b80:	4025      	ands	r5, r4
 8000b82:	406f      	eors	r7, r5
 8000b84:	006d      	lsls	r5, r5, #1
 8000b86:	406f      	eors	r7, r5
	stmia	r1!, {r6,r7}
 8000b88:	c1c0      	stmia	r1!, {r6, r7}
	subs	r2, r2, #1
 8000b8a:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateExtractLanes_LoopAligned
 8000b8c:	d1ba      	bne.n	8000b04 <__KeccakF1600_StateExtractLanes_LoopAligned>
	bx		lr
 8000b8e:	4770      	bx	lr

08000b90 <__KeccakF1600_StateExtractLanes_LoopUnaligned>:
__KeccakF1600_StateExtractLanes_LoopUnaligned:
	ldmia	r0!, {r6,r7}
 8000b90:	c8c0      	ldmia	r0!, {r6, r7}
	fromBitInterleaving	r6, r7, r5, r4, r3
 8000b92:	0035      	movs	r5, r6
 8000b94:	0436      	lsls	r6, r6, #16
 8000b96:	0c36      	lsrs	r6, r6, #16
 8000b98:	043c      	lsls	r4, r7, #16
 8000b9a:	4326      	orrs	r6, r4
 8000b9c:	0c3f      	lsrs	r7, r7, #16
 8000b9e:	043f      	lsls	r7, r7, #16
 8000ba0:	0c2d      	lsrs	r5, r5, #16
 8000ba2:	432f      	orrs	r7, r5
 8000ba4:	0a35      	lsrs	r5, r6, #8
 8000ba6:	4075      	eors	r5, r6
 8000ba8:	681c      	ldr	r4, [r3, #0]
 8000baa:	4025      	ands	r5, r4
 8000bac:	406e      	eors	r6, r5
 8000bae:	022d      	lsls	r5, r5, #8
 8000bb0:	406e      	eors	r6, r5
 8000bb2:	0935      	lsrs	r5, r6, #4
 8000bb4:	4075      	eors	r5, r6
 8000bb6:	685c      	ldr	r4, [r3, #4]
 8000bb8:	4025      	ands	r5, r4
 8000bba:	406e      	eors	r6, r5
 8000bbc:	012d      	lsls	r5, r5, #4
 8000bbe:	406e      	eors	r6, r5
 8000bc0:	08b5      	lsrs	r5, r6, #2
 8000bc2:	4075      	eors	r5, r6
 8000bc4:	689c      	ldr	r4, [r3, #8]
 8000bc6:	4025      	ands	r5, r4
 8000bc8:	406e      	eors	r6, r5
 8000bca:	00ad      	lsls	r5, r5, #2
 8000bcc:	406e      	eors	r6, r5
 8000bce:	0875      	lsrs	r5, r6, #1
 8000bd0:	4075      	eors	r5, r6
 8000bd2:	68dc      	ldr	r4, [r3, #12]
 8000bd4:	4025      	ands	r5, r4
 8000bd6:	406e      	eors	r6, r5
 8000bd8:	006d      	lsls	r5, r5, #1
 8000bda:	406e      	eors	r6, r5
 8000bdc:	0a3d      	lsrs	r5, r7, #8
 8000bde:	407d      	eors	r5, r7
 8000be0:	681c      	ldr	r4, [r3, #0]
 8000be2:	4025      	ands	r5, r4
 8000be4:	406f      	eors	r7, r5
 8000be6:	022d      	lsls	r5, r5, #8
 8000be8:	406f      	eors	r7, r5
 8000bea:	093d      	lsrs	r5, r7, #4
 8000bec:	407d      	eors	r5, r7
 8000bee:	685c      	ldr	r4, [r3, #4]
 8000bf0:	4025      	ands	r5, r4
 8000bf2:	406f      	eors	r7, r5
 8000bf4:	012d      	lsls	r5, r5, #4
 8000bf6:	406f      	eors	r7, r5
 8000bf8:	08bd      	lsrs	r5, r7, #2
 8000bfa:	407d      	eors	r5, r7
 8000bfc:	689c      	ldr	r4, [r3, #8]
 8000bfe:	4025      	ands	r5, r4
 8000c00:	406f      	eors	r7, r5
 8000c02:	00ad      	lsls	r5, r5, #2
 8000c04:	406f      	eors	r7, r5
 8000c06:	087d      	lsrs	r5, r7, #1
 8000c08:	407d      	eors	r5, r7
 8000c0a:	68dc      	ldr	r4, [r3, #12]
 8000c0c:	4025      	ands	r5, r4
 8000c0e:	406f      	eors	r7, r5
 8000c10:	006d      	lsls	r5, r5, #1
 8000c12:	406f      	eors	r7, r5
	strb	r6, [r1, #0]
 8000c14:	700e      	strb	r6, [r1, #0]
	lsrs	r6, r6, #8
 8000c16:	0a36      	lsrs	r6, r6, #8
	strb	r6, [r1, #1]
 8000c18:	704e      	strb	r6, [r1, #1]
	lsrs	r6, r6, #8
 8000c1a:	0a36      	lsrs	r6, r6, #8
	strb	r6, [r1, #2]
 8000c1c:	708e      	strb	r6, [r1, #2]
	lsrs	r6, r6, #8
 8000c1e:	0a36      	lsrs	r6, r6, #8
	strb	r6, [r1, #3]
 8000c20:	70ce      	strb	r6, [r1, #3]
	strb	r7, [r1, #4]
 8000c22:	710f      	strb	r7, [r1, #4]
	lsrs	r7, r7, #8
 8000c24:	0a3f      	lsrs	r7, r7, #8
	strb	r7, [r1, #5]
 8000c26:	714f      	strb	r7, [r1, #5]
	lsrs	r7, r7, #8
 8000c28:	0a3f      	lsrs	r7, r7, #8
	strb	r7, [r1, #6]
 8000c2a:	718f      	strb	r7, [r1, #6]
	lsrs	r7, r7, #8
 8000c2c:	0a3f      	lsrs	r7, r7, #8
	strb	r7, [r1, #7]
 8000c2e:	71cf      	strb	r7, [r1, #7]
	adds	r1, r1, #8
 8000c30:	3108      	adds	r1, #8
	subs	r2, r2, #1
 8000c32:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateExtractLanes_LoopUnaligned
 8000c34:	d1ac      	bne.n	8000b90 <__KeccakF1600_StateExtractLanes_LoopUnaligned>
	bx		lr
 8000c36:	4770      	bx	lr
 8000c38:	f3af 8000 	nop.w
 8000c3c:	f3af 8000 	nop.w
	...

08000d00 <__KeccakF1600_StateExtractBytesInLane>:
@
@  Changed: r2-r7
@
.align 8
__KeccakF1600_StateExtractBytesInLane:
	ldmia	r0!, {r4,r5}
 8000d00:	c830      	ldmia	r0!, {r4, r5}
	push	{r0, r3}
 8000d02:	b409      	push	{r0, r3}
	fromBitInterleaving	r4, r5, r0, r3, r7
 8000d04:	0020      	movs	r0, r4
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c24      	lsrs	r4, r4, #16
 8000d0a:	042b      	lsls	r3, r5, #16
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	0c2d      	lsrs	r5, r5, #16
 8000d10:	042d      	lsls	r5, r5, #16
 8000d12:	0c00      	lsrs	r0, r0, #16
 8000d14:	4305      	orrs	r5, r0
 8000d16:	0a20      	lsrs	r0, r4, #8
 8000d18:	4060      	eors	r0, r4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	4018      	ands	r0, r3
 8000d1e:	4044      	eors	r4, r0
 8000d20:	0200      	lsls	r0, r0, #8
 8000d22:	4044      	eors	r4, r0
 8000d24:	0920      	lsrs	r0, r4, #4
 8000d26:	4060      	eors	r0, r4
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4018      	ands	r0, r3
 8000d2c:	4044      	eors	r4, r0
 8000d2e:	0100      	lsls	r0, r0, #4
 8000d30:	4044      	eors	r4, r0
 8000d32:	08a0      	lsrs	r0, r4, #2
 8000d34:	4060      	eors	r0, r4
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	4018      	ands	r0, r3
 8000d3a:	4044      	eors	r4, r0
 8000d3c:	0080      	lsls	r0, r0, #2
 8000d3e:	4044      	eors	r4, r0
 8000d40:	0860      	lsrs	r0, r4, #1
 8000d42:	4060      	eors	r0, r4
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4018      	ands	r0, r3
 8000d48:	4044      	eors	r4, r0
 8000d4a:	0040      	lsls	r0, r0, #1
 8000d4c:	4044      	eors	r4, r0
 8000d4e:	0a28      	lsrs	r0, r5, #8
 8000d50:	4068      	eors	r0, r5
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	4018      	ands	r0, r3
 8000d56:	4045      	eors	r5, r0
 8000d58:	0200      	lsls	r0, r0, #8
 8000d5a:	4045      	eors	r5, r0
 8000d5c:	0928      	lsrs	r0, r5, #4
 8000d5e:	4068      	eors	r0, r5
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4018      	ands	r0, r3
 8000d64:	4045      	eors	r5, r0
 8000d66:	0100      	lsls	r0, r0, #4
 8000d68:	4045      	eors	r5, r0
 8000d6a:	08a8      	lsrs	r0, r5, #2
 8000d6c:	4068      	eors	r0, r5
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4018      	ands	r0, r3
 8000d72:	4045      	eors	r5, r0
 8000d74:	0080      	lsls	r0, r0, #2
 8000d76:	4045      	eors	r5, r0
 8000d78:	0868      	lsrs	r0, r5, #1
 8000d7a:	4068      	eors	r0, r5
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4018      	ands	r0, r3
 8000d80:	4045      	eors	r5, r0
 8000d82:	0040      	lsls	r0, r0, #1
 8000d84:	4045      	eors	r5, r0
	pop		{r0, r3}
 8000d86:	bc09      	pop	{r0, r3}
	push	{r4, r5}
 8000d88:	b430      	push	{r4, r5}
	mov		r4, sp
 8000d8a:	466c      	mov	r4, sp
	adds	r4, r4, r2
 8000d8c:	18a4      	adds	r4, r4, r2

08000d8e <__KeccakF1600_StateExtractBytesInLane_Loop>:
__KeccakF1600_StateExtractBytesInLane_Loop:
	ldrb	r2, [r4]
 8000d8e:	7822      	ldrb	r2, [r4, #0]
	adds	r4, r4, #1
 8000d90:	3401      	adds	r4, #1
	strb	r2, [r1]
 8000d92:	700a      	strb	r2, [r1, #0]
	adds	r1, r1, #1
 8000d94:	3101      	adds	r1, #1
	subs	r3, r3, #1
 8000d96:	3b01      	subs	r3, #1
	bne		__KeccakF1600_StateExtractBytesInLane_Loop
 8000d98:	d1f9      	bne.n	8000d8e <__KeccakF1600_StateExtractBytesInLane_Loop>
	add		sp, #8
 8000d9a:	b002      	add	sp, #8
	bx		lr
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	f3af 8000 	nop.w
 8000da4:	f3af 8000 	nop.w
 8000da8:	f3af 8000 	nop.w
 8000dac:	f3af 8000 	nop.w
 8000db0:	f3af 8000 	nop.w
 8000db4:	f3af 8000 	nop.w
 8000db8:	f3af 8000 	nop.w
 8000dbc:	f3af 8000 	nop.w
	...

08000e00 <KeccakF1600_StatePermute>:
@ void KeccakF1600_StatePermute( void *state )
@
.align 8
.global   KeccakF1600_StatePermute
KeccakF1600_StatePermute:
	adr		r1, KeccakF1600_StatePermute_RoundConstantsWithTerminator
 8000e00:	a13f      	add	r1, pc, #252	; (adr r1, 8000f00 <KeccakF1600_StatePermute_RoundConstantsWithTerminator>)
	b		KeccakP1600_StatePermute
 8000e02:	e0fd      	b.n	8001000 <KeccakP1600_StatePermute>
 8000e04:	f3af 8000 	nop.w
 8000e08:	f3af 8000 	nop.w
 8000e0c:	f3af 8000 	nop.w
 8000e10:	f3af 8000 	nop.w
 8000e14:	f3af 8000 	nop.w
 8000e18:	f3af 8000 	nop.w
 8000e1c:	f3af 8000 	nop.w
 8000e20:	f3af 8000 	nop.w
 8000e24:	f3af 8000 	nop.w
 8000e28:	f3af 8000 	nop.w
 8000e2c:	f3af 8000 	nop.w
 8000e30:	f3af 8000 	nop.w
 8000e34:	f3af 8000 	nop.w
 8000e38:	f3af 8000 	nop.w
 8000e3c:	f3af 8000 	nop.w
	...

08000f00 <KeccakF1600_StatePermute_RoundConstantsWithTerminator>:
 8000f00:	00000001 	.word	0x00000001
	...
 8000f0c:	00000089 	.word	0x00000089
 8000f10:	00000000 	.word	0x00000000
 8000f14:	8000008b 	.word	0x8000008b
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	80008080 	.word	0x80008080
 8000f20:	00000001 	.word	0x00000001
 8000f24:	0000008b 	.word	0x0000008b
 8000f28:	00000001 	.word	0x00000001
 8000f2c:	00008000 	.word	0x00008000
 8000f30:	00000001 	.word	0x00000001
 8000f34:	80008088 	.word	0x80008088
 8000f38:	00000001 	.word	0x00000001
 8000f3c:	80000082 	.word	0x80000082
 8000f40:	00000000 	.word	0x00000000
 8000f44:	0000000b 	.word	0x0000000b
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	0000000a 	.word	0x0000000a
 8000f50:	00000001 	.word	0x00000001
 8000f54:	00008082 	.word	0x00008082
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	00008003 	.word	0x00008003
 8000f60:	00000001 	.word	0x00000001
 8000f64:	0000808b 	.word	0x0000808b
 8000f68:	00000001 	.word	0x00000001
 8000f6c:	8000000b 	.word	0x8000000b
 8000f70:	00000001 	.word	0x00000001
 8000f74:	8000008a 	.word	0x8000008a
 8000f78:	00000001 	.word	0x00000001
 8000f7c:	80000081 	.word	0x80000081
 8000f80:	00000000 	.word	0x00000000
 8000f84:	80000081 	.word	0x80000081
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	80000008 	.word	0x80000008
 8000f90:	00000000 	.word	0x00000000
 8000f94:	00000083 	.word	0x00000083
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	80008003 	.word	0x80008003
 8000fa0:	00000001 	.word	0x00000001
 8000fa4:	80008088 	.word	0x80008088
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	80000088 	.word	0x80000088
 8000fb0:	00000001 	.word	0x00000001
 8000fb4:	00008000 	.word	0x00008000
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	80008082 	.word	0x80008082
 8000fc0:	000000ff 	.word	0x000000ff
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	f3af 8000 	nop.w
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	f3af 8000 	nop.w
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	f3af 8000 	nop.w
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	f3af 8000 	nop.w
 8000fec:	f3af 8000 	nop.w
 8000ff0:	f3af 8000 	nop.w
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	f3af 8000 	nop.w

08001000 <KeccakP1600_StatePermute>:
@
@ void KeccakP1600_StatePermute( void *state, void * rc )
@
.align 8
KeccakP1600_StatePermute:
	push	{ r4 - r6, lr }
 8001000:	b570      	push	{r4, r5, r6, lr}
	mov		r2, r8
 8001002:	4642      	mov	r2, r8
	mov		r3, r9
 8001004:	464b      	mov	r3, r9
	mov		r4, r10
 8001006:	4654      	mov	r4, sl
	mov		r5, r11
 8001008:	465d      	mov	r5, fp
	mov		r6, r12
 800100a:	4666      	mov	r6, ip
	push	{ r2 - r7 }
 800100c:	b4fc      	push	{r2, r3, r4, r5, r6, r7}
	sub		sp, #mSize
 800100e:	b086      	sub	sp, #24
	str		r1, [sp, #mRC]
 8001010:	9105      	str	r1, [sp, #20]

08001012 <KeccakP1600_StatePermute_RoundLoop>:
KeccakP1600_StatePermute_RoundLoop:
	KeccakRound0
 8001012:	221f      	movs	r2, #31
 8001014:	6a03      	ldr	r3, [r0, #32]
 8001016:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001018:	404b      	eors	r3, r1
 800101a:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800101c:	404b      	eors	r3, r1
 800101e:	3080      	adds	r0, #128	; 0x80
 8001020:	6981      	ldr	r1, [r0, #24]
 8001022:	404b      	eors	r3, r1
 8001024:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001026:	3880      	subs	r0, #128	; 0x80
 8001028:	404b      	eors	r3, r1
 800102a:	68c7      	ldr	r7, [r0, #12]
 800102c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800102e:	404f      	eors	r7, r1
 8001030:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001032:	404f      	eors	r7, r1
 8001034:	3080      	adds	r0, #128	; 0x80
 8001036:	6841      	ldr	r1, [r0, #4]
 8001038:	404f      	eors	r7, r1
 800103a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800103c:	3880      	subs	r0, #128	; 0x80
 800103e:	404f      	eors	r7, r1
 8001040:	003e      	movs	r6, r7
 8001042:	41d6      	rors	r6, r2
 8001044:	405e      	eors	r6, r3
 8001046:	9600      	str	r6, [sp, #0]
 8001048:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800104a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800104c:	404e      	eors	r6, r1
 800104e:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8001050:	404e      	eors	r6, r1
 8001052:	3080      	adds	r0, #128	; 0x80
 8001054:	69c1      	ldr	r1, [r0, #28]
 8001056:	404e      	eors	r6, r1
 8001058:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800105a:	3880      	subs	r0, #128	; 0x80
 800105c:	404e      	eors	r6, r1
 800105e:	6885      	ldr	r5, [r0, #8]
 8001060:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001062:	404d      	eors	r5, r1
 8001064:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001066:	404d      	eors	r5, r1
 8001068:	3080      	adds	r0, #128	; 0x80
 800106a:	6801      	ldr	r1, [r0, #0]
 800106c:	404d      	eors	r5, r1
 800106e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001070:	3880      	subs	r0, #128	; 0x80
 8001072:	404d      	eors	r5, r1
 8001074:	4629      	mov	r1, r5
 8001076:	4071      	eors	r1, r6
 8001078:	4688      	mov	r8, r1
 800107a:	46ae      	mov	lr, r5
 800107c:	9101      	str	r1, [sp, #4]
 800107e:	6905      	ldr	r5, [r0, #16]
 8001080:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001082:	404d      	eors	r5, r1
 8001084:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001086:	404d      	eors	r5, r1
 8001088:	3080      	adds	r0, #128	; 0x80
 800108a:	6881      	ldr	r1, [r0, #8]
 800108c:	404d      	eors	r5, r1
 800108e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001090:	3880      	subs	r0, #128	; 0x80
 8001092:	404d      	eors	r5, r1
 8001094:	41d6      	rors	r6, r2
 8001096:	406e      	eors	r6, r5
 8001098:	9602      	str	r6, [sp, #8]
 800109a:	6944      	ldr	r4, [r0, #20]
 800109c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800109e:	404c      	eors	r4, r1
 80010a0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80010a2:	404c      	eors	r4, r1
 80010a4:	3080      	adds	r0, #128	; 0x80
 80010a6:	68c1      	ldr	r1, [r0, #12]
 80010a8:	404c      	eors	r4, r1
 80010aa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80010ac:	3880      	subs	r0, #128	; 0x80
 80010ae:	404c      	eors	r4, r1
 80010b0:	4063      	eors	r3, r4
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80010b8:	404b      	eors	r3, r1
 80010ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80010bc:	404b      	eors	r3, r1
 80010be:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80010c0:	404b      	eors	r3, r1
 80010c2:	3080      	adds	r0, #128	; 0x80
 80010c4:	6a01      	ldr	r1, [r0, #32]
 80010c6:	3880      	subs	r0, #128	; 0x80
 80010c8:	404b      	eors	r3, r1
 80010ca:	41d4      	rors	r4, r2
 80010cc:	405c      	eors	r4, r3
 80010ce:	46a2      	mov	sl, r4
 80010d0:	6846      	ldr	r6, [r0, #4]
 80010d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80010d4:	404e      	eors	r6, r1
 80010d6:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80010d8:	404e      	eors	r6, r1
 80010da:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80010dc:	404e      	eors	r6, r1
 80010de:	3080      	adds	r0, #128	; 0x80
 80010e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80010e2:	3880      	subs	r0, #128	; 0x80
 80010e4:	404e      	eors	r6, r1
 80010e6:	4629      	mov	r1, r5
 80010e8:	4071      	eors	r1, r6
 80010ea:	468b      	mov	fp, r1
 80010ec:	69c4      	ldr	r4, [r0, #28]
 80010ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80010f0:	404c      	eors	r4, r1
 80010f2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80010f4:	404c      	eors	r4, r1
 80010f6:	3080      	adds	r0, #128	; 0x80
 80010f8:	6941      	ldr	r1, [r0, #20]
 80010fa:	404c      	eors	r4, r1
 80010fc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010fe:	3880      	subs	r0, #128	; 0x80
 8001100:	404c      	eors	r4, r1
 8001102:	4671      	mov	r1, lr
 8001104:	0025      	movs	r5, r4
 8001106:	41d5      	rors	r5, r2
 8001108:	404d      	eors	r5, r1
 800110a:	9504      	str	r5, [sp, #16]
 800110c:	6985      	ldr	r5, [r0, #24]
 800110e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001110:	404d      	eors	r5, r1
 8001112:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001114:	404d      	eors	r5, r1
 8001116:	3080      	adds	r0, #128	; 0x80
 8001118:	6901      	ldr	r1, [r0, #16]
 800111a:	404d      	eors	r5, r1
 800111c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800111e:	3880      	subs	r0, #128	; 0x80
 8001120:	404d      	eors	r5, r1
 8001122:	406f      	eors	r7, r5
 8001124:	41d6      	rors	r6, r2
 8001126:	406e      	eors	r6, r5
 8001128:	46b4      	mov	ip, r6
 800112a:	405c      	eors	r4, r3
 800112c:	46a6      	mov	lr, r4
 800112e:	003a      	movs	r2, r7
 8001130:	9902      	ldr	r1, [sp, #8]
 8001132:	4689      	mov	r9, r1
 8001134:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8001136:	3080      	adds	r0, #128	; 0x80
 8001138:	6846      	ldr	r6, [r0, #4]
 800113a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800113c:	3880      	subs	r0, #128	; 0x80
 800113e:	6983      	ldr	r3, [r0, #24]
 8001140:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001142:	4641      	mov	r1, r8
 8001144:	404d      	eors	r5, r1
 8001146:	4057      	eors	r7, r2
 8001148:	4659      	mov	r1, fp
 800114a:	404e      	eors	r6, r1
 800114c:	4649      	mov	r1, r9
 800114e:	404b      	eors	r3, r1
 8001150:	4661      	mov	r1, ip
 8001152:	404c      	eors	r4, r1
 8001154:	211e      	movs	r1, #30
 8001156:	41cd      	rors	r5, r1
 8001158:	2109      	movs	r1, #9
 800115a:	41ce      	rors	r6, r1
 800115c:	2101      	movs	r1, #1
 800115e:	41cf      	rors	r7, r1
 8001160:	2112      	movs	r1, #18
 8001162:	41cb      	rors	r3, r1
 8001164:	2116      	movs	r1, #22
 8001166:	41cc      	rors	r4, r1
 8001168:	0029      	movs	r1, r5
 800116a:	43a1      	bics	r1, r4
 800116c:	4059      	eors	r1, r3
 800116e:	6541      	str	r1, [r0, #84]	; 0x54
 8001170:	0031      	movs	r1, r6
 8001172:	43a9      	bics	r1, r5
 8001174:	4061      	eors	r1, r4
 8001176:	3080      	adds	r0, #128	; 0x80
 8001178:	6041      	str	r1, [r0, #4]
 800117a:	439c      	bics	r4, r3
 800117c:	407c      	eors	r4, r7
 800117e:	3880      	subs	r0, #128	; 0x80
 8001180:	6484      	str	r4, [r0, #72]	; 0x48
 8001182:	43bb      	bics	r3, r7
 8001184:	4073      	eors	r3, r6
 8001186:	6183      	str	r3, [r0, #24]
 8001188:	43b7      	bics	r7, r6
 800118a:	406f      	eors	r7, r5
 800118c:	3080      	adds	r0, #128	; 0x80
 800118e:	6347      	str	r7, [r0, #52]	; 0x34
 8001190:	3880      	subs	r0, #128	; 0x80
 8001192:	3080      	adds	r0, #128	; 0x80
 8001194:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001196:	3880      	subs	r0, #128	; 0x80
 8001198:	6883      	ldr	r3, [r0, #8]
 800119a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800119c:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800119e:	3080      	adds	r0, #128	; 0x80
 80011a0:	69c6      	ldr	r6, [r0, #28]
 80011a2:	4641      	mov	r1, r8
 80011a4:	404f      	eors	r7, r1
 80011a6:	4054      	eors	r4, r2
 80011a8:	4651      	mov	r1, sl
 80011aa:	404b      	eors	r3, r1
 80011ac:	4649      	mov	r1, r9
 80011ae:	404d      	eors	r5, r1
 80011b0:	4671      	mov	r1, lr
 80011b2:	404e      	eors	r6, r1
 80011b4:	2117      	movs	r1, #23
 80011b6:	41cf      	rors	r7, r1
 80011b8:	211d      	movs	r1, #29
 80011ba:	41cc      	rors	r4, r1
 80011bc:	2114      	movs	r1, #20
 80011be:	41cd      	rors	r5, r1
 80011c0:	211c      	movs	r1, #28
 80011c2:	41ce      	rors	r6, r1
 80011c4:	0029      	movs	r1, r5
 80011c6:	43a1      	bics	r1, r4
 80011c8:	4059      	eors	r1, r3
 80011ca:	6241      	str	r1, [r0, #36]	; 0x24
 80011cc:	0031      	movs	r1, r6
 80011ce:	43a9      	bics	r1, r5
 80011d0:	4061      	eors	r1, r4
 80011d2:	3880      	subs	r0, #128	; 0x80
 80011d4:	6081      	str	r1, [r0, #8]
 80011d6:	439c      	bics	r4, r3
 80011d8:	407c      	eors	r4, r7
 80011da:	3080      	adds	r0, #128	; 0x80
 80011dc:	61c4      	str	r4, [r0, #28]
 80011de:	43bb      	bics	r3, r7
 80011e0:	4073      	eors	r3, r6
 80011e2:	3880      	subs	r0, #128	; 0x80
 80011e4:	6683      	str	r3, [r0, #104]	; 0x68
 80011e6:	43b7      	bics	r7, r6
 80011e8:	406f      	eors	r7, r5
 80011ea:	63c7      	str	r7, [r0, #60]	; 0x3c
 80011ec:	9900      	ldr	r1, [sp, #0]
 80011ee:	4688      	mov	r8, r1
 80011f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011f2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80011f4:	3080      	adds	r0, #128	; 0x80
 80011f6:	68c6      	ldr	r6, [r0, #12]
 80011f8:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80011fa:	3880      	subs	r0, #128	; 0x80
 80011fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011fe:	4641      	mov	r1, r8
 8001200:	404c      	eors	r4, r1
 8001202:	4056      	eors	r6, r2
 8001204:	4651      	mov	r1, sl
 8001206:	404d      	eors	r5, r1
 8001208:	4649      	mov	r1, r9
 800120a:	404f      	eors	r7, r1
 800120c:	4671      	mov	r1, lr
 800120e:	404b      	eors	r3, r1
 8001210:	210e      	movs	r1, #14
 8001212:	41cc      	rors	r4, r1
 8001214:	211b      	movs	r1, #27
 8001216:	41cd      	rors	r5, r1
 8001218:	2118      	movs	r1, #24
 800121a:	41ce      	rors	r6, r1
 800121c:	2104      	movs	r1, #4
 800121e:	41cf      	rors	r7, r1
 8001220:	2112      	movs	r1, #18
 8001222:	41cb      	rors	r3, r1
 8001224:	0029      	movs	r1, r5
 8001226:	43a1      	bics	r1, r4
 8001228:	4059      	eors	r1, r3
 800122a:	6281      	str	r1, [r0, #40]	; 0x28
 800122c:	0031      	movs	r1, r6
 800122e:	43a9      	bics	r1, r5
 8001230:	4061      	eors	r1, r4
 8001232:	6581      	str	r1, [r0, #88]	; 0x58
 8001234:	439c      	bics	r4, r3
 8001236:	407c      	eors	r4, r7
 8001238:	6244      	str	r4, [r0, #36]	; 0x24
 800123a:	43bb      	bics	r3, r7
 800123c:	4073      	eors	r3, r6
 800123e:	3080      	adds	r0, #128	; 0x80
 8001240:	6383      	str	r3, [r0, #56]	; 0x38
 8001242:	43b7      	bics	r7, r6
 8001244:	406f      	eors	r7, r5
 8001246:	60c7      	str	r7, [r0, #12]
 8001248:	3880      	subs	r0, #128	; 0x80
 800124a:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800124c:	3080      	adds	r0, #128	; 0x80
 800124e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001250:	3880      	subs	r0, #128	; 0x80
 8001252:	6943      	ldr	r3, [r0, #20]
 8001254:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001256:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8001258:	4641      	mov	r1, r8
 800125a:	404e      	eors	r6, r1
 800125c:	4053      	eors	r3, r2
 800125e:	4659      	mov	r1, fp
 8001260:	404f      	eors	r7, r1
 8001262:	4649      	mov	r1, r9
 8001264:	404c      	eors	r4, r1
 8001266:	4661      	mov	r1, ip
 8001268:	404d      	eors	r5, r1
 800126a:	210c      	movs	r1, #12
 800126c:	41ce      	rors	r6, r1
 800126e:	211f      	movs	r1, #31
 8001270:	41cf      	rors	r7, r1
 8001272:	2101      	movs	r1, #1
 8001274:	41cb      	rors	r3, r1
 8001276:	2105      	movs	r1, #5
 8001278:	41cc      	rors	r4, r1
 800127a:	210d      	movs	r1, #13
 800127c:	41cd      	rors	r5, r1
 800127e:	0029      	movs	r1, r5
 8001280:	43a1      	bics	r1, r4
 8001282:	4059      	eors	r1, r3
 8001284:	6781      	str	r1, [r0, #120]	; 0x78
 8001286:	0031      	movs	r1, r6
 8001288:	43a9      	bics	r1, r5
 800128a:	4061      	eors	r1, r4
 800128c:	3080      	adds	r0, #128	; 0x80
 800128e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001290:	439c      	bics	r4, r3
 8001292:	407c      	eors	r4, r7
 8001294:	3880      	subs	r0, #128	; 0x80
 8001296:	6704      	str	r4, [r0, #112]	; 0x70
 8001298:	43bb      	bics	r3, r7
 800129a:	4073      	eors	r3, r6
 800129c:	6403      	str	r3, [r0, #64]	; 0x40
 800129e:	43b7      	bics	r7, r6
 80012a0:	406f      	eors	r7, r5
 80012a2:	6147      	str	r7, [r0, #20]
 80012a4:	9903      	ldr	r1, [sp, #12]
 80012a6:	4689      	mov	r9, r1
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012ac:	6e45      	ldr	r5, [r0, #100]	; 0x64
 80012ae:	3080      	adds	r0, #128	; 0x80
 80012b0:	6946      	ldr	r6, [r0, #20]
 80012b2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80012b4:	4641      	mov	r1, r8
 80012b6:	404b      	eors	r3, r1
 80012b8:	4055      	eors	r5, r2
 80012ba:	4651      	mov	r1, sl
 80012bc:	404c      	eors	r4, r1
 80012be:	4649      	mov	r1, r9
 80012c0:	404e      	eors	r6, r1
 80012c2:	4661      	mov	r1, ip
 80012c4:	404f      	eors	r7, r1
 80012c6:	210a      	movs	r1, #10
 80012c8:	41cc      	rors	r4, r1
 80012ca:	210a      	movs	r1, #10
 80012cc:	41cd      	rors	r5, r1
 80012ce:	2115      	movs	r1, #21
 80012d0:	41ce      	rors	r6, r1
 80012d2:	2119      	movs	r1, #25
 80012d4:	41cf      	rors	r7, r1
 80012d6:	0031      	movs	r1, r6
 80012d8:	43a9      	bics	r1, r5
 80012da:	4061      	eors	r1, r4
 80012dc:	3880      	subs	r0, #128	; 0x80
 80012de:	6301      	str	r1, [r0, #48]	; 0x30
 80012e0:	0039      	movs	r1, r7
 80012e2:	43b1      	bics	r1, r6
 80012e4:	4069      	eors	r1, r5
 80012e6:	6641      	str	r1, [r0, #100]	; 0x64
 80012e8:	0019      	movs	r1, r3
 80012ea:	43b9      	bics	r1, r7
 80012ec:	4071      	eors	r1, r6
 80012ee:	3080      	adds	r0, #128	; 0x80
 80012f0:	6141      	str	r1, [r0, #20]
 80012f2:	0021      	movs	r1, r4
 80012f4:	4399      	bics	r1, r3
 80012f6:	4079      	eors	r1, r7
 80012f8:	6401      	str	r1, [r0, #64]	; 0x40
 80012fa:	3880      	subs	r0, #128	; 0x80
 80012fc:	9905      	ldr	r1, [sp, #20]
 80012fe:	43a5      	bics	r5, r4
 8001300:	680c      	ldr	r4, [r1, #0]
 8001302:	406b      	eors	r3, r5
 8001304:	4063      	eors	r3, r4
 8001306:	6003      	str	r3, [r0, #0]
 8001308:	9a04      	ldr	r2, [sp, #16]
 800130a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800130c:	3080      	adds	r0, #128	; 0x80
 800130e:	6806      	ldr	r6, [r0, #0]
 8001310:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001312:	3880      	subs	r0, #128	; 0x80
 8001314:	69c3      	ldr	r3, [r0, #28]
 8001316:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001318:	4641      	mov	r1, r8
 800131a:	404d      	eors	r5, r1
 800131c:	4057      	eors	r7, r2
 800131e:	4651      	mov	r1, sl
 8001320:	404e      	eors	r6, r1
 8001322:	4649      	mov	r1, r9
 8001324:	404b      	eors	r3, r1
 8001326:	4671      	mov	r1, lr
 8001328:	404c      	eors	r4, r1
 800132a:	211f      	movs	r1, #31
 800132c:	41cd      	rors	r5, r1
 800132e:	210a      	movs	r1, #10
 8001330:	41ce      	rors	r6, r1
 8001332:	2102      	movs	r1, #2
 8001334:	41cf      	rors	r7, r1
 8001336:	2112      	movs	r1, #18
 8001338:	41cb      	rors	r3, r1
 800133a:	2116      	movs	r1, #22
 800133c:	41cc      	rors	r4, r1
 800133e:	0029      	movs	r1, r5
 8001340:	43a1      	bics	r1, r4
 8001342:	4059      	eors	r1, r3
 8001344:	6501      	str	r1, [r0, #80]	; 0x50
 8001346:	0031      	movs	r1, r6
 8001348:	43a9      	bics	r1, r5
 800134a:	4061      	eors	r1, r4
 800134c:	3080      	adds	r0, #128	; 0x80
 800134e:	6001      	str	r1, [r0, #0]
 8001350:	439c      	bics	r4, r3
 8001352:	407c      	eors	r4, r7
 8001354:	3880      	subs	r0, #128	; 0x80
 8001356:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001358:	43bb      	bics	r3, r7
 800135a:	4073      	eors	r3, r6
 800135c:	61c3      	str	r3, [r0, #28]
 800135e:	43b7      	bics	r7, r6
 8001360:	406f      	eors	r7, r5
 8001362:	3080      	adds	r0, #128	; 0x80
 8001364:	6307      	str	r7, [r0, #48]	; 0x30
 8001366:	3880      	subs	r0, #128	; 0x80
 8001368:	3080      	adds	r0, #128	; 0x80
 800136a:	6a07      	ldr	r7, [r0, #32]
 800136c:	3880      	subs	r0, #128	; 0x80
 800136e:	68c3      	ldr	r3, [r0, #12]
 8001370:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001372:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8001374:	3080      	adds	r0, #128	; 0x80
 8001376:	6986      	ldr	r6, [r0, #24]
 8001378:	4641      	mov	r1, r8
 800137a:	404f      	eors	r7, r1
 800137c:	4054      	eors	r4, r2
 800137e:	4659      	mov	r1, fp
 8001380:	404b      	eors	r3, r1
 8001382:	4649      	mov	r1, r9
 8001384:	404d      	eors	r5, r1
 8001386:	4661      	mov	r1, ip
 8001388:	404e      	eors	r6, r1
 800138a:	2117      	movs	r1, #23
 800138c:	41cf      	rors	r7, r1
 800138e:	211f      	movs	r1, #31
 8001390:	41cb      	rors	r3, r1
 8001392:	211d      	movs	r1, #29
 8001394:	41cc      	rors	r4, r1
 8001396:	2113      	movs	r1, #19
 8001398:	41cd      	rors	r5, r1
 800139a:	211c      	movs	r1, #28
 800139c:	41ce      	rors	r6, r1
 800139e:	0029      	movs	r1, r5
 80013a0:	43a1      	bics	r1, r4
 80013a2:	4059      	eors	r1, r3
 80013a4:	6201      	str	r1, [r0, #32]
 80013a6:	0031      	movs	r1, r6
 80013a8:	43a9      	bics	r1, r5
 80013aa:	4061      	eors	r1, r4
 80013ac:	3880      	subs	r0, #128	; 0x80
 80013ae:	60c1      	str	r1, [r0, #12]
 80013b0:	439c      	bics	r4, r3
 80013b2:	407c      	eors	r4, r7
 80013b4:	3080      	adds	r0, #128	; 0x80
 80013b6:	6184      	str	r4, [r0, #24]
 80013b8:	43bb      	bics	r3, r7
 80013ba:	4073      	eors	r3, r6
 80013bc:	3880      	subs	r0, #128	; 0x80
 80013be:	66c3      	str	r3, [r0, #108]	; 0x6c
 80013c0:	43b7      	bics	r7, r6
 80013c2:	406f      	eors	r7, r5
 80013c4:	6387      	str	r7, [r0, #56]	; 0x38
 80013c6:	9901      	ldr	r1, [sp, #4]
 80013c8:	4688      	mov	r8, r1
 80013ca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013cc:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80013ce:	3080      	adds	r0, #128	; 0x80
 80013d0:	6886      	ldr	r6, [r0, #8]
 80013d2:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80013d4:	3880      	subs	r0, #128	; 0x80
 80013d6:	6a03      	ldr	r3, [r0, #32]
 80013d8:	4641      	mov	r1, r8
 80013da:	404c      	eors	r4, r1
 80013dc:	4056      	eors	r6, r2
 80013de:	4659      	mov	r1, fp
 80013e0:	404d      	eors	r5, r1
 80013e2:	4649      	mov	r1, r9
 80013e4:	404f      	eors	r7, r1
 80013e6:	4661      	mov	r1, ip
 80013e8:	404b      	eors	r3, r1
 80013ea:	210e      	movs	r1, #14
 80013ec:	41cc      	rors	r4, r1
 80013ee:	211b      	movs	r1, #27
 80013f0:	41cd      	rors	r5, r1
 80013f2:	2119      	movs	r1, #25
 80013f4:	41ce      	rors	r6, r1
 80013f6:	2104      	movs	r1, #4
 80013f8:	41cf      	rors	r7, r1
 80013fa:	2113      	movs	r1, #19
 80013fc:	41cb      	rors	r3, r1
 80013fe:	0029      	movs	r1, r5
 8001400:	43a1      	bics	r1, r4
 8001402:	4059      	eors	r1, r3
 8001404:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001406:	0031      	movs	r1, r6
 8001408:	43a9      	bics	r1, r5
 800140a:	4061      	eors	r1, r4
 800140c:	65c1      	str	r1, [r0, #92]	; 0x5c
 800140e:	439c      	bics	r4, r3
 8001410:	407c      	eors	r4, r7
 8001412:	6204      	str	r4, [r0, #32]
 8001414:	43bb      	bics	r3, r7
 8001416:	4073      	eors	r3, r6
 8001418:	3080      	adds	r0, #128	; 0x80
 800141a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800141c:	43b7      	bics	r7, r6
 800141e:	406f      	eors	r7, r5
 8001420:	6087      	str	r7, [r0, #8]
 8001422:	3880      	subs	r0, #128	; 0x80
 8001424:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
 8001426:	3080      	adds	r0, #128	; 0x80
 8001428:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800142a:	3880      	subs	r0, #128	; 0x80
 800142c:	6903      	ldr	r3, [r0, #16]
 800142e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001430:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001432:	4641      	mov	r1, r8
 8001434:	404e      	eors	r6, r1
 8001436:	4053      	eors	r3, r2
 8001438:	4651      	mov	r1, sl
 800143a:	404f      	eors	r7, r1
 800143c:	4649      	mov	r1, r9
 800143e:	404c      	eors	r4, r1
 8001440:	4671      	mov	r1, lr
 8001442:	404d      	eors	r5, r1
 8001444:	210b      	movs	r1, #11
 8001446:	41ce      	rors	r6, r1
 8001448:	211f      	movs	r1, #31
 800144a:	41cf      	rors	r7, r1
 800144c:	2101      	movs	r1, #1
 800144e:	41cb      	rors	r3, r1
 8001450:	2104      	movs	r1, #4
 8001452:	41cc      	rors	r4, r1
 8001454:	210c      	movs	r1, #12
 8001456:	41cd      	rors	r5, r1
 8001458:	0029      	movs	r1, r5
 800145a:	43a1      	bics	r1, r4
 800145c:	4059      	eors	r1, r3
 800145e:	67c1      	str	r1, [r0, #124]	; 0x7c
 8001460:	0031      	movs	r1, r6
 8001462:	43a9      	bics	r1, r5
 8001464:	4061      	eors	r1, r4
 8001466:	3080      	adds	r0, #128	; 0x80
 8001468:	6281      	str	r1, [r0, #40]	; 0x28
 800146a:	439c      	bics	r4, r3
 800146c:	407c      	eors	r4, r7
 800146e:	3880      	subs	r0, #128	; 0x80
 8001470:	6744      	str	r4, [r0, #116]	; 0x74
 8001472:	43bb      	bics	r3, r7
 8001474:	4073      	eors	r3, r6
 8001476:	6443      	str	r3, [r0, #68]	; 0x44
 8001478:	43b7      	bics	r7, r6
 800147a:	406f      	eors	r7, r5
 800147c:	6107      	str	r7, [r0, #16]
 800147e:	9902      	ldr	r1, [sp, #8]
 8001480:	4689      	mov	r9, r1
 8001482:	6843      	ldr	r3, [r0, #4]
 8001484:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001486:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8001488:	3080      	adds	r0, #128	; 0x80
 800148a:	6906      	ldr	r6, [r0, #16]
 800148c:	6c47      	ldr	r7, [r0, #68]	; 0x44
 800148e:	4641      	mov	r1, r8
 8001490:	404b      	eors	r3, r1
 8001492:	4055      	eors	r5, r2
 8001494:	4659      	mov	r1, fp
 8001496:	404c      	eors	r4, r1
 8001498:	4649      	mov	r1, r9
 800149a:	404e      	eors	r6, r1
 800149c:	4671      	mov	r1, lr
 800149e:	404f      	eors	r7, r1
 80014a0:	210a      	movs	r1, #10
 80014a2:	41cc      	rors	r4, r1
 80014a4:	210b      	movs	r1, #11
 80014a6:	41cd      	rors	r5, r1
 80014a8:	2116      	movs	r1, #22
 80014aa:	41ce      	rors	r6, r1
 80014ac:	2119      	movs	r1, #25
 80014ae:	41cf      	rors	r7, r1
 80014b0:	0031      	movs	r1, r6
 80014b2:	43a9      	bics	r1, r5
 80014b4:	4061      	eors	r1, r4
 80014b6:	3880      	subs	r0, #128	; 0x80
 80014b8:	6341      	str	r1, [r0, #52]	; 0x34
 80014ba:	0039      	movs	r1, r7
 80014bc:	43b1      	bics	r1, r6
 80014be:	4069      	eors	r1, r5
 80014c0:	6601      	str	r1, [r0, #96]	; 0x60
 80014c2:	0019      	movs	r1, r3
 80014c4:	43b9      	bics	r1, r7
 80014c6:	4071      	eors	r1, r6
 80014c8:	3080      	adds	r0, #128	; 0x80
 80014ca:	6101      	str	r1, [r0, #16]
 80014cc:	0021      	movs	r1, r4
 80014ce:	4399      	bics	r1, r3
 80014d0:	4079      	eors	r1, r7
 80014d2:	6441      	str	r1, [r0, #68]	; 0x44
 80014d4:	3880      	subs	r0, #128	; 0x80
 80014d6:	9905      	ldr	r1, [sp, #20]
 80014d8:	43a5      	bics	r5, r4
 80014da:	684c      	ldr	r4, [r1, #4]
 80014dc:	406b      	eors	r3, r5
 80014de:	4063      	eors	r3, r4
 80014e0:	6043      	str	r3, [r0, #4]
	KeccakRound1
 80014e2:	221f      	movs	r2, #31
 80014e4:	3080      	adds	r0, #128	; 0x80
 80014e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014e8:	3880      	subs	r0, #128	; 0x80
 80014ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80014ec:	404b      	eors	r3, r1
 80014ee:	3080      	adds	r0, #128	; 0x80
 80014f0:	6981      	ldr	r1, [r0, #24]
 80014f2:	404b      	eors	r3, r1
 80014f4:	3880      	subs	r0, #128	; 0x80
 80014f6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80014f8:	404b      	eors	r3, r1
 80014fa:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80014fc:	404b      	eors	r3, r1
 80014fe:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8001500:	3080      	adds	r0, #128	; 0x80
 8001502:	6801      	ldr	r1, [r0, #0]
 8001504:	404f      	eors	r7, r1
 8001506:	3880      	subs	r0, #128	; 0x80
 8001508:	6881      	ldr	r1, [r0, #8]
 800150a:	404f      	eors	r7, r1
 800150c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800150e:	404f      	eors	r7, r1
 8001510:	3080      	adds	r0, #128	; 0x80
 8001512:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001514:	3880      	subs	r0, #128	; 0x80
 8001516:	404f      	eors	r7, r1
 8001518:	003e      	movs	r6, r7
 800151a:	41d6      	rors	r6, r2
 800151c:	405e      	eors	r6, r3
 800151e:	9600      	str	r6, [sp, #0]
 8001520:	3080      	adds	r0, #128	; 0x80
 8001522:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001524:	3880      	subs	r0, #128	; 0x80
 8001526:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001528:	404e      	eors	r6, r1
 800152a:	3080      	adds	r0, #128	; 0x80
 800152c:	69c1      	ldr	r1, [r0, #28]
 800152e:	404e      	eors	r6, r1
 8001530:	3880      	subs	r0, #128	; 0x80
 8001532:	6a01      	ldr	r1, [r0, #32]
 8001534:	404e      	eors	r6, r1
 8001536:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8001538:	404e      	eors	r6, r1
 800153a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800153c:	3080      	adds	r0, #128	; 0x80
 800153e:	6841      	ldr	r1, [r0, #4]
 8001540:	404d      	eors	r5, r1
 8001542:	3880      	subs	r0, #128	; 0x80
 8001544:	68c1      	ldr	r1, [r0, #12]
 8001546:	404d      	eors	r5, r1
 8001548:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800154a:	404d      	eors	r5, r1
 800154c:	3080      	adds	r0, #128	; 0x80
 800154e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001550:	3880      	subs	r0, #128	; 0x80
 8001552:	404d      	eors	r5, r1
 8001554:	4629      	mov	r1, r5
 8001556:	4071      	eors	r1, r6
 8001558:	4688      	mov	r8, r1
 800155a:	46ae      	mov	lr, r5
 800155c:	9101      	str	r1, [sp, #4]
 800155e:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8001560:	3080      	adds	r0, #128	; 0x80
 8001562:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001564:	404d      	eors	r5, r1
 8001566:	3880      	subs	r0, #128	; 0x80
 8001568:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800156a:	404d      	eors	r5, r1
 800156c:	3080      	adds	r0, #128	; 0x80
 800156e:	68c1      	ldr	r1, [r0, #12]
 8001570:	404d      	eors	r5, r1
 8001572:	3880      	subs	r0, #128	; 0x80
 8001574:	6901      	ldr	r1, [r0, #16]
 8001576:	404d      	eors	r5, r1
 8001578:	41d6      	rors	r6, r2
 800157a:	406e      	eors	r6, r5
 800157c:	9602      	str	r6, [sp, #8]
 800157e:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001580:	3080      	adds	r0, #128	; 0x80
 8001582:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001584:	404c      	eors	r4, r1
 8001586:	3880      	subs	r0, #128	; 0x80
 8001588:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800158a:	404c      	eors	r4, r1
 800158c:	3080      	adds	r0, #128	; 0x80
 800158e:	6881      	ldr	r1, [r0, #8]
 8001590:	404c      	eors	r4, r1
 8001592:	3880      	subs	r0, #128	; 0x80
 8001594:	6941      	ldr	r1, [r0, #20]
 8001596:	404c      	eors	r4, r1
 8001598:	4063      	eors	r3, r4
 800159a:	9303      	str	r3, [sp, #12]
 800159c:	6803      	ldr	r3, [r0, #0]
 800159e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80015a0:	404b      	eors	r3, r1
 80015a2:	3080      	adds	r0, #128	; 0x80
 80015a4:	6a01      	ldr	r1, [r0, #32]
 80015a6:	404b      	eors	r3, r1
 80015a8:	3880      	subs	r0, #128	; 0x80
 80015aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80015ac:	404b      	eors	r3, r1
 80015ae:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80015b0:	404b      	eors	r3, r1
 80015b2:	41d4      	rors	r4, r2
 80015b4:	405c      	eors	r4, r3
 80015b6:	46a2      	mov	sl, r4
 80015b8:	6846      	ldr	r6, [r0, #4]
 80015ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80015bc:	404e      	eors	r6, r1
 80015be:	3080      	adds	r0, #128	; 0x80
 80015c0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80015c2:	404e      	eors	r6, r1
 80015c4:	3880      	subs	r0, #128	; 0x80
 80015c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80015c8:	404e      	eors	r6, r1
 80015ca:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80015cc:	404e      	eors	r6, r1
 80015ce:	4629      	mov	r1, r5
 80015d0:	4071      	eors	r1, r6
 80015d2:	468b      	mov	fp, r1
 80015d4:	3080      	adds	r0, #128	; 0x80
 80015d6:	6904      	ldr	r4, [r0, #16]
 80015d8:	3880      	subs	r0, #128	; 0x80
 80015da:	69c1      	ldr	r1, [r0, #28]
 80015dc:	404c      	eors	r4, r1
 80015de:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80015e0:	404c      	eors	r4, r1
 80015e2:	3080      	adds	r0, #128	; 0x80
 80015e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80015e6:	404c      	eors	r4, r1
 80015e8:	3880      	subs	r0, #128	; 0x80
 80015ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80015ec:	404c      	eors	r4, r1
 80015ee:	4671      	mov	r1, lr
 80015f0:	0025      	movs	r5, r4
 80015f2:	41d5      	rors	r5, r2
 80015f4:	404d      	eors	r5, r1
 80015f6:	9504      	str	r5, [sp, #16]
 80015f8:	3080      	adds	r0, #128	; 0x80
 80015fa:	6945      	ldr	r5, [r0, #20]
 80015fc:	3880      	subs	r0, #128	; 0x80
 80015fe:	6981      	ldr	r1, [r0, #24]
 8001600:	404d      	eors	r5, r1
 8001602:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001604:	404d      	eors	r5, r1
 8001606:	3080      	adds	r0, #128	; 0x80
 8001608:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800160a:	404d      	eors	r5, r1
 800160c:	3880      	subs	r0, #128	; 0x80
 800160e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001610:	404d      	eors	r5, r1
 8001612:	406f      	eors	r7, r5
 8001614:	41d6      	rors	r6, r2
 8001616:	406e      	eors	r6, r5
 8001618:	46b4      	mov	ip, r6
 800161a:	405c      	eors	r4, r3
 800161c:	46a6      	mov	lr, r4
 800161e:	003a      	movs	r2, r7
 8001620:	9902      	ldr	r1, [sp, #8]
 8001622:	4689      	mov	r9, r1
 8001624:	3080      	adds	r0, #128	; 0x80
 8001626:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001628:	3880      	subs	r0, #128	; 0x80
 800162a:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800162c:	6947      	ldr	r7, [r0, #20]
 800162e:	3080      	adds	r0, #128	; 0x80
 8001630:	6943      	ldr	r3, [r0, #20]
 8001632:	3880      	subs	r0, #128	; 0x80
 8001634:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001636:	4641      	mov	r1, r8
 8001638:	404d      	eors	r5, r1
 800163a:	4057      	eors	r7, r2
 800163c:	4659      	mov	r1, fp
 800163e:	404e      	eors	r6, r1
 8001640:	4649      	mov	r1, r9
 8001642:	404b      	eors	r3, r1
 8001644:	4661      	mov	r1, ip
 8001646:	404c      	eors	r4, r1
 8001648:	211e      	movs	r1, #30
 800164a:	41cd      	rors	r5, r1
 800164c:	2109      	movs	r1, #9
 800164e:	41ce      	rors	r6, r1
 8001650:	2101      	movs	r1, #1
 8001652:	41cf      	rors	r7, r1
 8001654:	2112      	movs	r1, #18
 8001656:	41cb      	rors	r3, r1
 8001658:	2116      	movs	r1, #22
 800165a:	41cc      	rors	r4, r1
 800165c:	0029      	movs	r1, r5
 800165e:	43a1      	bics	r1, r4
 8001660:	4059      	eors	r1, r3
 8001662:	3080      	adds	r0, #128	; 0x80
 8001664:	6241      	str	r1, [r0, #36]	; 0x24
 8001666:	0031      	movs	r1, r6
 8001668:	43a9      	bics	r1, r5
 800166a:	4061      	eors	r1, r4
 800166c:	3880      	subs	r0, #128	; 0x80
 800166e:	65c1      	str	r1, [r0, #92]	; 0x5c
 8001670:	439c      	bics	r4, r3
 8001672:	407c      	eors	r4, r7
 8001674:	6484      	str	r4, [r0, #72]	; 0x48
 8001676:	43bb      	bics	r3, r7
 8001678:	4073      	eors	r3, r6
 800167a:	3080      	adds	r0, #128	; 0x80
 800167c:	6143      	str	r3, [r0, #20]
 800167e:	43b7      	bics	r7, r6
 8001680:	406f      	eors	r7, r5
 8001682:	3880      	subs	r0, #128	; 0x80
 8001684:	6147      	str	r7, [r0, #20]
 8001686:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8001688:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800168a:	3080      	adds	r0, #128	; 0x80
 800168c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800168e:	3880      	subs	r0, #128	; 0x80
 8001690:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8001692:	6a06      	ldr	r6, [r0, #32]
 8001694:	4641      	mov	r1, r8
 8001696:	404f      	eors	r7, r1
 8001698:	4054      	eors	r4, r2
 800169a:	4651      	mov	r1, sl
 800169c:	404b      	eors	r3, r1
 800169e:	4649      	mov	r1, r9
 80016a0:	404d      	eors	r5, r1
 80016a2:	4671      	mov	r1, lr
 80016a4:	404e      	eors	r6, r1
 80016a6:	2117      	movs	r1, #23
 80016a8:	41cf      	rors	r7, r1
 80016aa:	211d      	movs	r1, #29
 80016ac:	41cc      	rors	r4, r1
 80016ae:	2114      	movs	r1, #20
 80016b0:	41cd      	rors	r5, r1
 80016b2:	211c      	movs	r1, #28
 80016b4:	41ce      	rors	r6, r1
 80016b6:	0029      	movs	r1, r5
 80016b8:	43a1      	bics	r1, r4
 80016ba:	4059      	eors	r1, r3
 80016bc:	6781      	str	r1, [r0, #120]	; 0x78
 80016be:	0031      	movs	r1, r6
 80016c0:	43a9      	bics	r1, r5
 80016c2:	4061      	eors	r1, r4
 80016c4:	6301      	str	r1, [r0, #48]	; 0x30
 80016c6:	439c      	bics	r4, r3
 80016c8:	407c      	eors	r4, r7
 80016ca:	6204      	str	r4, [r0, #32]
 80016cc:	43bb      	bics	r3, r7
 80016ce:	4073      	eors	r3, r6
 80016d0:	66c3      	str	r3, [r0, #108]	; 0x6c
 80016d2:	43b7      	bics	r7, r6
 80016d4:	406f      	eors	r7, r5
 80016d6:	3080      	adds	r0, #128	; 0x80
 80016d8:	6307      	str	r7, [r0, #48]	; 0x30
 80016da:	3880      	subs	r0, #128	; 0x80
 80016dc:	9900      	ldr	r1, [sp, #0]
 80016de:	4688      	mov	r8, r1
 80016e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80016e2:	68c5      	ldr	r5, [r0, #12]
 80016e4:	3080      	adds	r0, #128	; 0x80
 80016e6:	6886      	ldr	r6, [r0, #8]
 80016e8:	3880      	subs	r0, #128	; 0x80
 80016ea:	6c47      	ldr	r7, [r0, #68]	; 0x44
 80016ec:	3080      	adds	r0, #128	; 0x80
 80016ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016f0:	4641      	mov	r1, r8
 80016f2:	404c      	eors	r4, r1
 80016f4:	4056      	eors	r6, r2
 80016f6:	4651      	mov	r1, sl
 80016f8:	404d      	eors	r5, r1
 80016fa:	4649      	mov	r1, r9
 80016fc:	404f      	eors	r7, r1
 80016fe:	4671      	mov	r1, lr
 8001700:	404b      	eors	r3, r1
 8001702:	210e      	movs	r1, #14
 8001704:	41cc      	rors	r4, r1
 8001706:	211b      	movs	r1, #27
 8001708:	41cd      	rors	r5, r1
 800170a:	2118      	movs	r1, #24
 800170c:	41ce      	rors	r6, r1
 800170e:	2104      	movs	r1, #4
 8001710:	41cf      	rors	r7, r1
 8001712:	2112      	movs	r1, #18
 8001714:	41cb      	rors	r3, r1
 8001716:	0029      	movs	r1, r5
 8001718:	43a1      	bics	r1, r4
 800171a:	4059      	eors	r1, r3
 800171c:	3880      	subs	r0, #128	; 0x80
 800171e:	6541      	str	r1, [r0, #84]	; 0x54
 8001720:	0031      	movs	r1, r6
 8001722:	43a9      	bics	r1, r5
 8001724:	4061      	eors	r1, r4
 8001726:	60c1      	str	r1, [r0, #12]
 8001728:	439c      	bics	r4, r3
 800172a:	407c      	eors	r4, r7
 800172c:	3080      	adds	r0, #128	; 0x80
 800172e:	6444      	str	r4, [r0, #68]	; 0x44
 8001730:	43bb      	bics	r3, r7
 8001732:	4073      	eors	r3, r6
 8001734:	3880      	subs	r0, #128	; 0x80
 8001736:	6443      	str	r3, [r0, #68]	; 0x44
 8001738:	43b7      	bics	r7, r6
 800173a:	406f      	eors	r7, r5
 800173c:	3080      	adds	r0, #128	; 0x80
 800173e:	6087      	str	r7, [r0, #8]
 8001740:	3880      	subs	r0, #128	; 0x80
 8001742:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001744:	3080      	adds	r0, #128	; 0x80
 8001746:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001748:	3880      	subs	r0, #128	; 0x80
 800174a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800174c:	6984      	ldr	r4, [r0, #24]
 800174e:	3080      	adds	r0, #128	; 0x80
 8001750:	6985      	ldr	r5, [r0, #24]
 8001752:	4641      	mov	r1, r8
 8001754:	404e      	eors	r6, r1
 8001756:	4053      	eors	r3, r2
 8001758:	4659      	mov	r1, fp
 800175a:	404f      	eors	r7, r1
 800175c:	4649      	mov	r1, r9
 800175e:	404c      	eors	r4, r1
 8001760:	4661      	mov	r1, ip
 8001762:	404d      	eors	r5, r1
 8001764:	210c      	movs	r1, #12
 8001766:	41ce      	rors	r6, r1
 8001768:	211f      	movs	r1, #31
 800176a:	41cf      	rors	r7, r1
 800176c:	2101      	movs	r1, #1
 800176e:	41cb      	rors	r3, r1
 8001770:	2105      	movs	r1, #5
 8001772:	41cc      	rors	r4, r1
 8001774:	210d      	movs	r1, #13
 8001776:	41cd      	rors	r5, r1
 8001778:	0029      	movs	r1, r5
 800177a:	43a1      	bics	r1, r4
 800177c:	4059      	eors	r1, r3
 800177e:	3880      	subs	r0, #128	; 0x80
 8001780:	6281      	str	r1, [r0, #40]	; 0x28
 8001782:	0031      	movs	r1, r6
 8001784:	43a9      	bics	r1, r5
 8001786:	4061      	eors	r1, r4
 8001788:	3080      	adds	r0, #128	; 0x80
 800178a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800178c:	439c      	bics	r4, r3
 800178e:	407c      	eors	r4, r7
 8001790:	6184      	str	r4, [r0, #24]
 8001792:	43bb      	bics	r3, r7
 8001794:	4073      	eors	r3, r6
 8001796:	3880      	subs	r0, #128	; 0x80
 8001798:	6183      	str	r3, [r0, #24]
 800179a:	43b7      	bics	r7, r6
 800179c:	406f      	eors	r7, r5
 800179e:	6607      	str	r7, [r0, #96]	; 0x60
 80017a0:	9903      	ldr	r1, [sp, #12]
 80017a2:	4689      	mov	r9, r1
 80017a4:	6803      	ldr	r3, [r0, #0]
 80017a6:	3080      	adds	r0, #128	; 0x80
 80017a8:	6844      	ldr	r4, [r0, #4]
 80017aa:	3880      	subs	r0, #128	; 0x80
 80017ac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80017ae:	3080      	adds	r0, #128	; 0x80
 80017b0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80017b2:	3880      	subs	r0, #128	; 0x80
 80017b4:	6f47      	ldr	r7, [r0, #116]	; 0x74
 80017b6:	4641      	mov	r1, r8
 80017b8:	404b      	eors	r3, r1
 80017ba:	4055      	eors	r5, r2
 80017bc:	4651      	mov	r1, sl
 80017be:	404c      	eors	r4, r1
 80017c0:	4649      	mov	r1, r9
 80017c2:	404e      	eors	r6, r1
 80017c4:	4661      	mov	r1, ip
 80017c6:	404f      	eors	r7, r1
 80017c8:	210a      	movs	r1, #10
 80017ca:	41cc      	rors	r4, r1
 80017cc:	210a      	movs	r1, #10
 80017ce:	41cd      	rors	r5, r1
 80017d0:	2115      	movs	r1, #21
 80017d2:	41ce      	rors	r6, r1
 80017d4:	2119      	movs	r1, #25
 80017d6:	41cf      	rors	r7, r1
 80017d8:	0031      	movs	r1, r6
 80017da:	43a9      	bics	r1, r5
 80017dc:	4061      	eors	r1, r4
 80017de:	3080      	adds	r0, #128	; 0x80
 80017e0:	6041      	str	r1, [r0, #4]
 80017e2:	0039      	movs	r1, r7
 80017e4:	43b1      	bics	r1, r6
 80017e6:	4069      	eors	r1, r5
 80017e8:	3880      	subs	r0, #128	; 0x80
 80017ea:	63c1      	str	r1, [r0, #60]	; 0x3c
 80017ec:	0019      	movs	r1, r3
 80017ee:	43b9      	bics	r1, r7
 80017f0:	4071      	eors	r1, r6
 80017f2:	3080      	adds	r0, #128	; 0x80
 80017f4:	63c1      	str	r1, [r0, #60]	; 0x3c
 80017f6:	0021      	movs	r1, r4
 80017f8:	4399      	bics	r1, r3
 80017fa:	4079      	eors	r1, r7
 80017fc:	3880      	subs	r0, #128	; 0x80
 80017fe:	6741      	str	r1, [r0, #116]	; 0x74
 8001800:	9905      	ldr	r1, [sp, #20]
 8001802:	43a5      	bics	r5, r4
 8001804:	688c      	ldr	r4, [r1, #8]
 8001806:	406b      	eors	r3, r5
 8001808:	4063      	eors	r3, r4
 800180a:	6003      	str	r3, [r0, #0]
 800180c:	9a04      	ldr	r2, [sp, #16]
 800180e:	3080      	adds	r0, #128	; 0x80
 8001810:	6a05      	ldr	r5, [r0, #32]
 8001812:	3880      	subs	r0, #128	; 0x80
 8001814:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001816:	6907      	ldr	r7, [r0, #16]
 8001818:	3080      	adds	r0, #128	; 0x80
 800181a:	6903      	ldr	r3, [r0, #16]
 800181c:	3880      	subs	r0, #128	; 0x80
 800181e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001820:	4641      	mov	r1, r8
 8001822:	404d      	eors	r5, r1
 8001824:	4057      	eors	r7, r2
 8001826:	4651      	mov	r1, sl
 8001828:	404e      	eors	r6, r1
 800182a:	4649      	mov	r1, r9
 800182c:	404b      	eors	r3, r1
 800182e:	4671      	mov	r1, lr
 8001830:	404c      	eors	r4, r1
 8001832:	211f      	movs	r1, #31
 8001834:	41cd      	rors	r5, r1
 8001836:	210a      	movs	r1, #10
 8001838:	41ce      	rors	r6, r1
 800183a:	2102      	movs	r1, #2
 800183c:	41cf      	rors	r7, r1
 800183e:	2112      	movs	r1, #18
 8001840:	41cb      	rors	r3, r1
 8001842:	2116      	movs	r1, #22
 8001844:	41cc      	rors	r4, r1
 8001846:	0029      	movs	r1, r5
 8001848:	43a1      	bics	r1, r4
 800184a:	4059      	eors	r1, r3
 800184c:	3080      	adds	r0, #128	; 0x80
 800184e:	6201      	str	r1, [r0, #32]
 8001850:	0031      	movs	r1, r6
 8001852:	43a9      	bics	r1, r5
 8001854:	4061      	eors	r1, r4
 8001856:	3880      	subs	r0, #128	; 0x80
 8001858:	6581      	str	r1, [r0, #88]	; 0x58
 800185a:	439c      	bics	r4, r3
 800185c:	407c      	eors	r4, r7
 800185e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001860:	43bb      	bics	r3, r7
 8001862:	4073      	eors	r3, r6
 8001864:	3080      	adds	r0, #128	; 0x80
 8001866:	6103      	str	r3, [r0, #16]
 8001868:	43b7      	bics	r7, r6
 800186a:	406f      	eors	r7, r5
 800186c:	3880      	subs	r0, #128	; 0x80
 800186e:	6107      	str	r7, [r0, #16]
 8001870:	6fc7      	ldr	r7, [r0, #124]	; 0x7c
 8001872:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001874:	3080      	adds	r0, #128	; 0x80
 8001876:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001878:	3880      	subs	r0, #128	; 0x80
 800187a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800187c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800187e:	4641      	mov	r1, r8
 8001880:	404f      	eors	r7, r1
 8001882:	4054      	eors	r4, r2
 8001884:	4659      	mov	r1, fp
 8001886:	404b      	eors	r3, r1
 8001888:	4649      	mov	r1, r9
 800188a:	404d      	eors	r5, r1
 800188c:	4661      	mov	r1, ip
 800188e:	404e      	eors	r6, r1
 8001890:	2117      	movs	r1, #23
 8001892:	41cf      	rors	r7, r1
 8001894:	211f      	movs	r1, #31
 8001896:	41cb      	rors	r3, r1
 8001898:	211d      	movs	r1, #29
 800189a:	41cc      	rors	r4, r1
 800189c:	2113      	movs	r1, #19
 800189e:	41cd      	rors	r5, r1
 80018a0:	211c      	movs	r1, #28
 80018a2:	41ce      	rors	r6, r1
 80018a4:	0029      	movs	r1, r5
 80018a6:	43a1      	bics	r1, r4
 80018a8:	4059      	eors	r1, r3
 80018aa:	67c1      	str	r1, [r0, #124]	; 0x7c
 80018ac:	0031      	movs	r1, r6
 80018ae:	43a9      	bics	r1, r5
 80018b0:	4061      	eors	r1, r4
 80018b2:	6341      	str	r1, [r0, #52]	; 0x34
 80018b4:	439c      	bics	r4, r3
 80018b6:	407c      	eors	r4, r7
 80018b8:	6244      	str	r4, [r0, #36]	; 0x24
 80018ba:	43bb      	bics	r3, r7
 80018bc:	4073      	eors	r3, r6
 80018be:	6683      	str	r3, [r0, #104]	; 0x68
 80018c0:	43b7      	bics	r7, r6
 80018c2:	406f      	eors	r7, r5
 80018c4:	3080      	adds	r0, #128	; 0x80
 80018c6:	6347      	str	r7, [r0, #52]	; 0x34
 80018c8:	3880      	subs	r0, #128	; 0x80
 80018ca:	9901      	ldr	r1, [sp, #4]
 80018cc:	4688      	mov	r8, r1
 80018ce:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80018d0:	6885      	ldr	r5, [r0, #8]
 80018d2:	3080      	adds	r0, #128	; 0x80
 80018d4:	68c6      	ldr	r6, [r0, #12]
 80018d6:	3880      	subs	r0, #128	; 0x80
 80018d8:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80018da:	3080      	adds	r0, #128	; 0x80
 80018dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018de:	4641      	mov	r1, r8
 80018e0:	404c      	eors	r4, r1
 80018e2:	4056      	eors	r6, r2
 80018e4:	4659      	mov	r1, fp
 80018e6:	404d      	eors	r5, r1
 80018e8:	4649      	mov	r1, r9
 80018ea:	404f      	eors	r7, r1
 80018ec:	4661      	mov	r1, ip
 80018ee:	404b      	eors	r3, r1
 80018f0:	210e      	movs	r1, #14
 80018f2:	41cc      	rors	r4, r1
 80018f4:	211b      	movs	r1, #27
 80018f6:	41cd      	rors	r5, r1
 80018f8:	2119      	movs	r1, #25
 80018fa:	41ce      	rors	r6, r1
 80018fc:	2104      	movs	r1, #4
 80018fe:	41cf      	rors	r7, r1
 8001900:	2113      	movs	r1, #19
 8001902:	41cb      	rors	r3, r1
 8001904:	0029      	movs	r1, r5
 8001906:	43a1      	bics	r1, r4
 8001908:	4059      	eors	r1, r3
 800190a:	3880      	subs	r0, #128	; 0x80
 800190c:	6501      	str	r1, [r0, #80]	; 0x50
 800190e:	0031      	movs	r1, r6
 8001910:	43a9      	bics	r1, r5
 8001912:	4061      	eors	r1, r4
 8001914:	6081      	str	r1, [r0, #8]
 8001916:	439c      	bics	r4, r3
 8001918:	407c      	eors	r4, r7
 800191a:	3080      	adds	r0, #128	; 0x80
 800191c:	6404      	str	r4, [r0, #64]	; 0x40
 800191e:	43bb      	bics	r3, r7
 8001920:	4073      	eors	r3, r6
 8001922:	3880      	subs	r0, #128	; 0x80
 8001924:	6403      	str	r3, [r0, #64]	; 0x40
 8001926:	43b7      	bics	r7, r6
 8001928:	406f      	eors	r7, r5
 800192a:	3080      	adds	r0, #128	; 0x80
 800192c:	60c7      	str	r7, [r0, #12]
 800192e:	3880      	subs	r0, #128	; 0x80
 8001930:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001932:	3080      	adds	r0, #128	; 0x80
 8001934:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8001936:	3880      	subs	r0, #128	; 0x80
 8001938:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800193a:	69c4      	ldr	r4, [r0, #28]
 800193c:	3080      	adds	r0, #128	; 0x80
 800193e:	69c5      	ldr	r5, [r0, #28]
 8001940:	4641      	mov	r1, r8
 8001942:	404e      	eors	r6, r1
 8001944:	4053      	eors	r3, r2
 8001946:	4651      	mov	r1, sl
 8001948:	404f      	eors	r7, r1
 800194a:	4649      	mov	r1, r9
 800194c:	404c      	eors	r4, r1
 800194e:	4671      	mov	r1, lr
 8001950:	404d      	eors	r5, r1
 8001952:	210b      	movs	r1, #11
 8001954:	41ce      	rors	r6, r1
 8001956:	211f      	movs	r1, #31
 8001958:	41cf      	rors	r7, r1
 800195a:	2101      	movs	r1, #1
 800195c:	41cb      	rors	r3, r1
 800195e:	2104      	movs	r1, #4
 8001960:	41cc      	rors	r4, r1
 8001962:	210c      	movs	r1, #12
 8001964:	41cd      	rors	r5, r1
 8001966:	0029      	movs	r1, r5
 8001968:	43a1      	bics	r1, r4
 800196a:	4059      	eors	r1, r3
 800196c:	3880      	subs	r0, #128	; 0x80
 800196e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001970:	0031      	movs	r1, r6
 8001972:	43a9      	bics	r1, r5
 8001974:	4061      	eors	r1, r4
 8001976:	3080      	adds	r0, #128	; 0x80
 8001978:	6281      	str	r1, [r0, #40]	; 0x28
 800197a:	439c      	bics	r4, r3
 800197c:	407c      	eors	r4, r7
 800197e:	61c4      	str	r4, [r0, #28]
 8001980:	43bb      	bics	r3, r7
 8001982:	4073      	eors	r3, r6
 8001984:	3880      	subs	r0, #128	; 0x80
 8001986:	61c3      	str	r3, [r0, #28]
 8001988:	43b7      	bics	r7, r6
 800198a:	406f      	eors	r7, r5
 800198c:	6647      	str	r7, [r0, #100]	; 0x64
 800198e:	9902      	ldr	r1, [sp, #8]
 8001990:	4689      	mov	r9, r1
 8001992:	6843      	ldr	r3, [r0, #4]
 8001994:	3080      	adds	r0, #128	; 0x80
 8001996:	6804      	ldr	r4, [r0, #0]
 8001998:	3880      	subs	r0, #128	; 0x80
 800199a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800199c:	3080      	adds	r0, #128	; 0x80
 800199e:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80019a0:	3880      	subs	r0, #128	; 0x80
 80019a2:	6f07      	ldr	r7, [r0, #112]	; 0x70
 80019a4:	4641      	mov	r1, r8
 80019a6:	404b      	eors	r3, r1
 80019a8:	4055      	eors	r5, r2
 80019aa:	4659      	mov	r1, fp
 80019ac:	404c      	eors	r4, r1
 80019ae:	4649      	mov	r1, r9
 80019b0:	404e      	eors	r6, r1
 80019b2:	4671      	mov	r1, lr
 80019b4:	404f      	eors	r7, r1
 80019b6:	210a      	movs	r1, #10
 80019b8:	41cc      	rors	r4, r1
 80019ba:	210b      	movs	r1, #11
 80019bc:	41cd      	rors	r5, r1
 80019be:	2116      	movs	r1, #22
 80019c0:	41ce      	rors	r6, r1
 80019c2:	2119      	movs	r1, #25
 80019c4:	41cf      	rors	r7, r1
 80019c6:	0031      	movs	r1, r6
 80019c8:	43a9      	bics	r1, r5
 80019ca:	4061      	eors	r1, r4
 80019cc:	3080      	adds	r0, #128	; 0x80
 80019ce:	6001      	str	r1, [r0, #0]
 80019d0:	0039      	movs	r1, r7
 80019d2:	43b1      	bics	r1, r6
 80019d4:	4069      	eors	r1, r5
 80019d6:	3880      	subs	r0, #128	; 0x80
 80019d8:	6381      	str	r1, [r0, #56]	; 0x38
 80019da:	0019      	movs	r1, r3
 80019dc:	43b9      	bics	r1, r7
 80019de:	4071      	eors	r1, r6
 80019e0:	3080      	adds	r0, #128	; 0x80
 80019e2:	6381      	str	r1, [r0, #56]	; 0x38
 80019e4:	0021      	movs	r1, r4
 80019e6:	4399      	bics	r1, r3
 80019e8:	4079      	eors	r1, r7
 80019ea:	3880      	subs	r0, #128	; 0x80
 80019ec:	6701      	str	r1, [r0, #112]	; 0x70
 80019ee:	9905      	ldr	r1, [sp, #20]
 80019f0:	43a5      	bics	r5, r4
 80019f2:	68cc      	ldr	r4, [r1, #12]
 80019f4:	406b      	eors	r3, r5
 80019f6:	4063      	eors	r3, r4
 80019f8:	6043      	str	r3, [r0, #4]
	KeccakRound2
 80019fa:	221f      	movs	r2, #31
 80019fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80019fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a00:	404b      	eors	r3, r1
 8001a02:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001a04:	404b      	eors	r3, r1
 8001a06:	3080      	adds	r0, #128	; 0x80
 8001a08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a0a:	404b      	eors	r3, r1
 8001a0c:	69c1      	ldr	r1, [r0, #28]
 8001a0e:	3880      	subs	r0, #128	; 0x80
 8001a10:	404b      	eors	r3, r1
 8001a12:	3080      	adds	r0, #128	; 0x80
 8001a14:	6807      	ldr	r7, [r0, #0]
 8001a16:	3880      	subs	r0, #128	; 0x80
 8001a18:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001a1a:	404f      	eors	r7, r1
 8001a1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a1e:	404f      	eors	r7, r1
 8001a20:	6881      	ldr	r1, [r0, #8]
 8001a22:	404f      	eors	r7, r1
 8001a24:	3080      	adds	r0, #128	; 0x80
 8001a26:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a28:	3880      	subs	r0, #128	; 0x80
 8001a2a:	404f      	eors	r7, r1
 8001a2c:	003e      	movs	r6, r7
 8001a2e:	41d6      	rors	r6, r2
 8001a30:	405e      	eors	r6, r3
 8001a32:	9600      	str	r6, [sp, #0]
 8001a34:	6f06      	ldr	r6, [r0, #112]	; 0x70
 8001a36:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001a38:	404e      	eors	r6, r1
 8001a3a:	6a01      	ldr	r1, [r0, #32]
 8001a3c:	404e      	eors	r6, r1
 8001a3e:	3080      	adds	r0, #128	; 0x80
 8001a40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a42:	404e      	eors	r6, r1
 8001a44:	6981      	ldr	r1, [r0, #24]
 8001a46:	3880      	subs	r0, #128	; 0x80
 8001a48:	404e      	eors	r6, r1
 8001a4a:	3080      	adds	r0, #128	; 0x80
 8001a4c:	6845      	ldr	r5, [r0, #4]
 8001a4e:	3880      	subs	r0, #128	; 0x80
 8001a50:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001a52:	404d      	eors	r5, r1
 8001a54:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a56:	404d      	eors	r5, r1
 8001a58:	68c1      	ldr	r1, [r0, #12]
 8001a5a:	404d      	eors	r5, r1
 8001a5c:	3080      	adds	r0, #128	; 0x80
 8001a5e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a60:	3880      	subs	r0, #128	; 0x80
 8001a62:	404d      	eors	r5, r1
 8001a64:	4629      	mov	r1, r5
 8001a66:	4071      	eors	r1, r6
 8001a68:	4688      	mov	r8, r1
 8001a6a:	46ae      	mov	lr, r5
 8001a6c:	9101      	str	r1, [sp, #4]
 8001a6e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001a70:	6941      	ldr	r1, [r0, #20]
 8001a72:	404d      	eors	r5, r1
 8001a74:	3080      	adds	r0, #128	; 0x80
 8001a76:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a78:	404d      	eors	r5, r1
 8001a7a:	6881      	ldr	r1, [r0, #8]
 8001a7c:	404d      	eors	r5, r1
 8001a7e:	3880      	subs	r0, #128	; 0x80
 8001a80:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001a82:	404d      	eors	r5, r1
 8001a84:	41d6      	rors	r6, r2
 8001a86:	406e      	eors	r6, r5
 8001a88:	9602      	str	r6, [sp, #8]
 8001a8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a8c:	6901      	ldr	r1, [r0, #16]
 8001a8e:	404c      	eors	r4, r1
 8001a90:	3080      	adds	r0, #128	; 0x80
 8001a92:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a94:	404c      	eors	r4, r1
 8001a96:	68c1      	ldr	r1, [r0, #12]
 8001a98:	404c      	eors	r4, r1
 8001a9a:	3880      	subs	r0, #128	; 0x80
 8001a9c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001a9e:	404c      	eors	r4, r1
 8001aa0:	4063      	eors	r3, r4
 8001aa2:	9303      	str	r3, [sp, #12]
 8001aa4:	6803      	ldr	r3, [r0, #0]
 8001aa6:	3080      	adds	r0, #128	; 0x80
 8001aa8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001aaa:	404b      	eors	r3, r1
 8001aac:	3880      	subs	r0, #128	; 0x80
 8001aae:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8001ab0:	404b      	eors	r3, r1
 8001ab2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001ab4:	404b      	eors	r3, r1
 8001ab6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ab8:	404b      	eors	r3, r1
 8001aba:	41d4      	rors	r4, r2
 8001abc:	405c      	eors	r4, r3
 8001abe:	46a2      	mov	sl, r4
 8001ac0:	6846      	ldr	r6, [r0, #4]
 8001ac2:	3080      	adds	r0, #128	; 0x80
 8001ac4:	6a01      	ldr	r1, [r0, #32]
 8001ac6:	404e      	eors	r6, r1
 8001ac8:	3880      	subs	r0, #128	; 0x80
 8001aca:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8001acc:	404e      	eors	r6, r1
 8001ace:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001ad0:	404e      	eors	r6, r1
 8001ad2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001ad4:	404e      	eors	r6, r1
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	4071      	eors	r1, r6
 8001ada:	468b      	mov	fp, r1
 8001adc:	3080      	adds	r0, #128	; 0x80
 8001ade:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ae0:	6901      	ldr	r1, [r0, #16]
 8001ae2:	404c      	eors	r4, r1
 8001ae4:	3880      	subs	r0, #128	; 0x80
 8001ae6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001ae8:	404c      	eors	r4, r1
 8001aea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001aec:	404c      	eors	r4, r1
 8001aee:	6981      	ldr	r1, [r0, #24]
 8001af0:	404c      	eors	r4, r1
 8001af2:	4671      	mov	r1, lr
 8001af4:	0025      	movs	r5, r4
 8001af6:	41d5      	rors	r5, r2
 8001af8:	404d      	eors	r5, r1
 8001afa:	9504      	str	r5, [sp, #16]
 8001afc:	3080      	adds	r0, #128	; 0x80
 8001afe:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001b00:	6941      	ldr	r1, [r0, #20]
 8001b02:	404d      	eors	r5, r1
 8001b04:	3880      	subs	r0, #128	; 0x80
 8001b06:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001b08:	404d      	eors	r5, r1
 8001b0a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b0c:	404d      	eors	r5, r1
 8001b0e:	69c1      	ldr	r1, [r0, #28]
 8001b10:	404d      	eors	r5, r1
 8001b12:	406f      	eors	r7, r5
 8001b14:	41d6      	rors	r6, r2
 8001b16:	406e      	eors	r6, r5
 8001b18:	46b4      	mov	ip, r6
 8001b1a:	405c      	eors	r4, r3
 8001b1c:	46a6      	mov	lr, r4
 8001b1e:	003a      	movs	r2, r7
 8001b20:	9902      	ldr	r1, [sp, #8]
 8001b22:	4689      	mov	r9, r1
 8001b24:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8001b26:	6886      	ldr	r6, [r0, #8]
 8001b28:	6e07      	ldr	r7, [r0, #96]	; 0x60
 8001b2a:	3080      	adds	r0, #128	; 0x80
 8001b2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001b2e:	3880      	subs	r0, #128	; 0x80
 8001b30:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001b32:	4641      	mov	r1, r8
 8001b34:	404d      	eors	r5, r1
 8001b36:	4057      	eors	r7, r2
 8001b38:	4659      	mov	r1, fp
 8001b3a:	404e      	eors	r6, r1
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	404b      	eors	r3, r1
 8001b40:	4661      	mov	r1, ip
 8001b42:	404c      	eors	r4, r1
 8001b44:	211e      	movs	r1, #30
 8001b46:	41cd      	rors	r5, r1
 8001b48:	2109      	movs	r1, #9
 8001b4a:	41ce      	rors	r6, r1
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	41cf      	rors	r7, r1
 8001b50:	2112      	movs	r1, #18
 8001b52:	41cb      	rors	r3, r1
 8001b54:	2116      	movs	r1, #22
 8001b56:	41cc      	rors	r4, r1
 8001b58:	0029      	movs	r1, r5
 8001b5a:	43a1      	bics	r1, r4
 8001b5c:	4059      	eors	r1, r3
 8001b5e:	6781      	str	r1, [r0, #120]	; 0x78
 8001b60:	0031      	movs	r1, r6
 8001b62:	43a9      	bics	r1, r5
 8001b64:	4061      	eors	r1, r4
 8001b66:	6081      	str	r1, [r0, #8]
 8001b68:	439c      	bics	r4, r3
 8001b6a:	407c      	eors	r4, r7
 8001b6c:	6484      	str	r4, [r0, #72]	; 0x48
 8001b6e:	43bb      	bics	r3, r7
 8001b70:	4073      	eors	r3, r6
 8001b72:	3080      	adds	r0, #128	; 0x80
 8001b74:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001b76:	43b7      	bics	r7, r6
 8001b78:	406f      	eors	r7, r5
 8001b7a:	3880      	subs	r0, #128	; 0x80
 8001b7c:	6607      	str	r7, [r0, #96]	; 0x60
 8001b7e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8001b80:	3080      	adds	r0, #128	; 0x80
 8001b82:	6843      	ldr	r3, [r0, #4]
 8001b84:	3880      	subs	r0, #128	; 0x80
 8001b86:	6904      	ldr	r4, [r0, #16]
 8001b88:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8001b8a:	3080      	adds	r0, #128	; 0x80
 8001b8c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001b8e:	4641      	mov	r1, r8
 8001b90:	404f      	eors	r7, r1
 8001b92:	4054      	eors	r4, r2
 8001b94:	4651      	mov	r1, sl
 8001b96:	404b      	eors	r3, r1
 8001b98:	4649      	mov	r1, r9
 8001b9a:	404d      	eors	r5, r1
 8001b9c:	4671      	mov	r1, lr
 8001b9e:	404e      	eors	r6, r1
 8001ba0:	2117      	movs	r1, #23
 8001ba2:	41cf      	rors	r7, r1
 8001ba4:	211d      	movs	r1, #29
 8001ba6:	41cc      	rors	r4, r1
 8001ba8:	2114      	movs	r1, #20
 8001baa:	41cd      	rors	r5, r1
 8001bac:	211c      	movs	r1, #28
 8001bae:	41ce      	rors	r6, r1
 8001bb0:	0029      	movs	r1, r5
 8001bb2:	43a1      	bics	r1, r4
 8001bb4:	4059      	eors	r1, r3
 8001bb6:	3880      	subs	r0, #128	; 0x80
 8001bb8:	6281      	str	r1, [r0, #40]	; 0x28
 8001bba:	0031      	movs	r1, r6
 8001bbc:	43a9      	bics	r1, r5
 8001bbe:	4061      	eors	r1, r4
 8001bc0:	3080      	adds	r0, #128	; 0x80
 8001bc2:	6041      	str	r1, [r0, #4]
 8001bc4:	439c      	bics	r4, r3
 8001bc6:	407c      	eors	r4, r7
 8001bc8:	6404      	str	r4, [r0, #64]	; 0x40
 8001bca:	43bb      	bics	r3, r7
 8001bcc:	4073      	eors	r3, r6
 8001bce:	3880      	subs	r0, #128	; 0x80
 8001bd0:	6683      	str	r3, [r0, #104]	; 0x68
 8001bd2:	43b7      	bics	r7, r6
 8001bd4:	406f      	eors	r7, r5
 8001bd6:	6107      	str	r7, [r0, #16]
 8001bd8:	9900      	ldr	r1, [sp, #0]
 8001bda:	4688      	mov	r8, r1
 8001bdc:	3080      	adds	r0, #128	; 0x80
 8001bde:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001be0:	3880      	subs	r0, #128	; 0x80
 8001be2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001be4:	3080      	adds	r0, #128	; 0x80
 8001be6:	68c6      	ldr	r6, [r0, #12]
 8001be8:	3880      	subs	r0, #128	; 0x80
 8001bea:	69c7      	ldr	r7, [r0, #28]
 8001bec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001bee:	4641      	mov	r1, r8
 8001bf0:	404c      	eors	r4, r1
 8001bf2:	4056      	eors	r6, r2
 8001bf4:	4651      	mov	r1, sl
 8001bf6:	404d      	eors	r5, r1
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	404f      	eors	r7, r1
 8001bfc:	4671      	mov	r1, lr
 8001bfe:	404b      	eors	r3, r1
 8001c00:	210e      	movs	r1, #14
 8001c02:	41cc      	rors	r4, r1
 8001c04:	211b      	movs	r1, #27
 8001c06:	41cd      	rors	r5, r1
 8001c08:	2118      	movs	r1, #24
 8001c0a:	41ce      	rors	r6, r1
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	41cf      	rors	r7, r1
 8001c10:	2112      	movs	r1, #18
 8001c12:	41cb      	rors	r3, r1
 8001c14:	0029      	movs	r1, r5
 8001c16:	43a1      	bics	r1, r4
 8001c18:	4059      	eors	r1, r3
 8001c1a:	3080      	adds	r0, #128	; 0x80
 8001c1c:	6241      	str	r1, [r0, #36]	; 0x24
 8001c1e:	0031      	movs	r1, r6
 8001c20:	43a9      	bics	r1, r5
 8001c22:	4061      	eors	r1, r4
 8001c24:	3880      	subs	r0, #128	; 0x80
 8001c26:	6341      	str	r1, [r0, #52]	; 0x34
 8001c28:	439c      	bics	r4, r3
 8001c2a:	407c      	eors	r4, r7
 8001c2c:	6704      	str	r4, [r0, #112]	; 0x70
 8001c2e:	43bb      	bics	r3, r7
 8001c30:	4073      	eors	r3, r6
 8001c32:	61c3      	str	r3, [r0, #28]
 8001c34:	43b7      	bics	r7, r6
 8001c36:	406f      	eors	r7, r5
 8001c38:	3080      	adds	r0, #128	; 0x80
 8001c3a:	60c7      	str	r7, [r0, #12]
 8001c3c:	3880      	subs	r0, #128	; 0x80
 8001c3e:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8001c40:	3080      	adds	r0, #128	; 0x80
 8001c42:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001c44:	3880      	subs	r0, #128	; 0x80
 8001c46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c48:	3080      	adds	r0, #128	; 0x80
 8001c4a:	6944      	ldr	r4, [r0, #20]
 8001c4c:	3880      	subs	r0, #128	; 0x80
 8001c4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001c50:	4641      	mov	r1, r8
 8001c52:	404e      	eors	r6, r1
 8001c54:	4053      	eors	r3, r2
 8001c56:	4659      	mov	r1, fp
 8001c58:	404f      	eors	r7, r1
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	404c      	eors	r4, r1
 8001c5e:	4661      	mov	r1, ip
 8001c60:	404d      	eors	r5, r1
 8001c62:	210c      	movs	r1, #12
 8001c64:	41ce      	rors	r6, r1
 8001c66:	211f      	movs	r1, #31
 8001c68:	41cf      	rors	r7, r1
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	41cb      	rors	r3, r1
 8001c6e:	2105      	movs	r1, #5
 8001c70:	41cc      	rors	r4, r1
 8001c72:	210d      	movs	r1, #13
 8001c74:	41cd      	rors	r5, r1
 8001c76:	0029      	movs	r1, r5
 8001c78:	43a1      	bics	r1, r4
 8001c7a:	4059      	eors	r1, r3
 8001c7c:	6541      	str	r1, [r0, #84]	; 0x54
 8001c7e:	0031      	movs	r1, r6
 8001c80:	43a9      	bics	r1, r5
 8001c82:	4061      	eors	r1, r4
 8001c84:	3080      	adds	r0, #128	; 0x80
 8001c86:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001c88:	439c      	bics	r4, r3
 8001c8a:	407c      	eors	r4, r7
 8001c8c:	3880      	subs	r0, #128	; 0x80
 8001c8e:	6244      	str	r4, [r0, #36]	; 0x24
 8001c90:	43bb      	bics	r3, r7
 8001c92:	4073      	eors	r3, r6
 8001c94:	3080      	adds	r0, #128	; 0x80
 8001c96:	6143      	str	r3, [r0, #20]
 8001c98:	43b7      	bics	r7, r6
 8001c9a:	406f      	eors	r7, r5
 8001c9c:	3880      	subs	r0, #128	; 0x80
 8001c9e:	6387      	str	r7, [r0, #56]	; 0x38
 8001ca0:	9903      	ldr	r1, [sp, #12]
 8001ca2:	4689      	mov	r9, r1
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001ca8:	3080      	adds	r0, #128	; 0x80
 8001caa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001cac:	3880      	subs	r0, #128	; 0x80
 8001cae:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001cb0:	3080      	adds	r0, #128	; 0x80
 8001cb2:	69c7      	ldr	r7, [r0, #28]
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	404b      	eors	r3, r1
 8001cb8:	4055      	eors	r5, r2
 8001cba:	4651      	mov	r1, sl
 8001cbc:	404c      	eors	r4, r1
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	404e      	eors	r6, r1
 8001cc2:	4661      	mov	r1, ip
 8001cc4:	404f      	eors	r7, r1
 8001cc6:	210a      	movs	r1, #10
 8001cc8:	41cc      	rors	r4, r1
 8001cca:	210a      	movs	r1, #10
 8001ccc:	41cd      	rors	r5, r1
 8001cce:	2115      	movs	r1, #21
 8001cd0:	41ce      	rors	r6, r1
 8001cd2:	2119      	movs	r1, #25
 8001cd4:	41cf      	rors	r7, r1
 8001cd6:	0031      	movs	r1, r6
 8001cd8:	43a9      	bics	r1, r5
 8001cda:	4061      	eors	r1, r4
 8001cdc:	3880      	subs	r0, #128	; 0x80
 8001cde:	65c1      	str	r1, [r0, #92]	; 0x5c
 8001ce0:	0039      	movs	r1, r7
 8001ce2:	43b1      	bics	r1, r6
 8001ce4:	4069      	eors	r1, r5
 8001ce6:	3080      	adds	r0, #128	; 0x80
 8001ce8:	6301      	str	r1, [r0, #48]	; 0x30
 8001cea:	0019      	movs	r1, r3
 8001cec:	43b9      	bics	r1, r7
 8001cee:	4071      	eors	r1, r6
 8001cf0:	3880      	subs	r0, #128	; 0x80
 8001cf2:	6401      	str	r1, [r0, #64]	; 0x40
 8001cf4:	0021      	movs	r1, r4
 8001cf6:	4399      	bics	r1, r3
 8001cf8:	4079      	eors	r1, r7
 8001cfa:	3080      	adds	r0, #128	; 0x80
 8001cfc:	61c1      	str	r1, [r0, #28]
 8001cfe:	3880      	subs	r0, #128	; 0x80
 8001d00:	9905      	ldr	r1, [sp, #20]
 8001d02:	43a5      	bics	r5, r4
 8001d04:	690c      	ldr	r4, [r1, #16]
 8001d06:	406b      	eors	r3, r5
 8001d08:	4063      	eors	r3, r4
 8001d0a:	6003      	str	r3, [r0, #0]
 8001d0c:	9a04      	ldr	r2, [sp, #16]
 8001d0e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8001d10:	68c6      	ldr	r6, [r0, #12]
 8001d12:	6e47      	ldr	r7, [r0, #100]	; 0x64
 8001d14:	3080      	adds	r0, #128	; 0x80
 8001d16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d18:	3880      	subs	r0, #128	; 0x80
 8001d1a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	404d      	eors	r5, r1
 8001d20:	4057      	eors	r7, r2
 8001d22:	4651      	mov	r1, sl
 8001d24:	404e      	eors	r6, r1
 8001d26:	4649      	mov	r1, r9
 8001d28:	404b      	eors	r3, r1
 8001d2a:	4671      	mov	r1, lr
 8001d2c:	404c      	eors	r4, r1
 8001d2e:	211f      	movs	r1, #31
 8001d30:	41cd      	rors	r5, r1
 8001d32:	210a      	movs	r1, #10
 8001d34:	41ce      	rors	r6, r1
 8001d36:	2102      	movs	r1, #2
 8001d38:	41cf      	rors	r7, r1
 8001d3a:	2112      	movs	r1, #18
 8001d3c:	41cb      	rors	r3, r1
 8001d3e:	2116      	movs	r1, #22
 8001d40:	41cc      	rors	r4, r1
 8001d42:	0029      	movs	r1, r5
 8001d44:	43a1      	bics	r1, r4
 8001d46:	4059      	eors	r1, r3
 8001d48:	67c1      	str	r1, [r0, #124]	; 0x7c
 8001d4a:	0031      	movs	r1, r6
 8001d4c:	43a9      	bics	r1, r5
 8001d4e:	4061      	eors	r1, r4
 8001d50:	60c1      	str	r1, [r0, #12]
 8001d52:	439c      	bics	r4, r3
 8001d54:	407c      	eors	r4, r7
 8001d56:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001d58:	43bb      	bics	r3, r7
 8001d5a:	4073      	eors	r3, r6
 8001d5c:	3080      	adds	r0, #128	; 0x80
 8001d5e:	6383      	str	r3, [r0, #56]	; 0x38
 8001d60:	43b7      	bics	r7, r6
 8001d62:	406f      	eors	r7, r5
 8001d64:	3880      	subs	r0, #128	; 0x80
 8001d66:	6647      	str	r7, [r0, #100]	; 0x64
 8001d68:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001d6a:	3080      	adds	r0, #128	; 0x80
 8001d6c:	6803      	ldr	r3, [r0, #0]
 8001d6e:	3880      	subs	r0, #128	; 0x80
 8001d70:	6944      	ldr	r4, [r0, #20]
 8001d72:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8001d74:	3080      	adds	r0, #128	; 0x80
 8001d76:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001d78:	4641      	mov	r1, r8
 8001d7a:	404f      	eors	r7, r1
 8001d7c:	4054      	eors	r4, r2
 8001d7e:	4659      	mov	r1, fp
 8001d80:	404b      	eors	r3, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	404d      	eors	r5, r1
 8001d86:	4661      	mov	r1, ip
 8001d88:	404e      	eors	r6, r1
 8001d8a:	2117      	movs	r1, #23
 8001d8c:	41cf      	rors	r7, r1
 8001d8e:	211f      	movs	r1, #31
 8001d90:	41cb      	rors	r3, r1
 8001d92:	211d      	movs	r1, #29
 8001d94:	41cc      	rors	r4, r1
 8001d96:	2113      	movs	r1, #19
 8001d98:	41cd      	rors	r5, r1
 8001d9a:	211c      	movs	r1, #28
 8001d9c:	41ce      	rors	r6, r1
 8001d9e:	0029      	movs	r1, r5
 8001da0:	43a1      	bics	r1, r4
 8001da2:	4059      	eors	r1, r3
 8001da4:	3880      	subs	r0, #128	; 0x80
 8001da6:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001da8:	0031      	movs	r1, r6
 8001daa:	43a9      	bics	r1, r5
 8001dac:	4061      	eors	r1, r4
 8001dae:	3080      	adds	r0, #128	; 0x80
 8001db0:	6001      	str	r1, [r0, #0]
 8001db2:	439c      	bics	r4, r3
 8001db4:	407c      	eors	r4, r7
 8001db6:	6444      	str	r4, [r0, #68]	; 0x44
 8001db8:	43bb      	bics	r3, r7
 8001dba:	4073      	eors	r3, r6
 8001dbc:	3880      	subs	r0, #128	; 0x80
 8001dbe:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001dc0:	43b7      	bics	r7, r6
 8001dc2:	406f      	eors	r7, r5
 8001dc4:	6147      	str	r7, [r0, #20]
 8001dc6:	9901      	ldr	r1, [sp, #4]
 8001dc8:	4688      	mov	r8, r1
 8001dca:	3080      	adds	r0, #128	; 0x80
 8001dcc:	6a04      	ldr	r4, [r0, #32]
 8001dce:	3880      	subs	r0, #128	; 0x80
 8001dd0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001dd2:	3080      	adds	r0, #128	; 0x80
 8001dd4:	6886      	ldr	r6, [r0, #8]
 8001dd6:	3880      	subs	r0, #128	; 0x80
 8001dd8:	6987      	ldr	r7, [r0, #24]
 8001dda:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001ddc:	4641      	mov	r1, r8
 8001dde:	404c      	eors	r4, r1
 8001de0:	4056      	eors	r6, r2
 8001de2:	4659      	mov	r1, fp
 8001de4:	404d      	eors	r5, r1
 8001de6:	4649      	mov	r1, r9
 8001de8:	404f      	eors	r7, r1
 8001dea:	4661      	mov	r1, ip
 8001dec:	404b      	eors	r3, r1
 8001dee:	210e      	movs	r1, #14
 8001df0:	41cc      	rors	r4, r1
 8001df2:	211b      	movs	r1, #27
 8001df4:	41cd      	rors	r5, r1
 8001df6:	2119      	movs	r1, #25
 8001df8:	41ce      	rors	r6, r1
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	41cf      	rors	r7, r1
 8001dfe:	2113      	movs	r1, #19
 8001e00:	41cb      	rors	r3, r1
 8001e02:	0029      	movs	r1, r5
 8001e04:	43a1      	bics	r1, r4
 8001e06:	4059      	eors	r1, r3
 8001e08:	3080      	adds	r0, #128	; 0x80
 8001e0a:	6201      	str	r1, [r0, #32]
 8001e0c:	0031      	movs	r1, r6
 8001e0e:	43a9      	bics	r1, r5
 8001e10:	4061      	eors	r1, r4
 8001e12:	3880      	subs	r0, #128	; 0x80
 8001e14:	6301      	str	r1, [r0, #48]	; 0x30
 8001e16:	439c      	bics	r4, r3
 8001e18:	407c      	eors	r4, r7
 8001e1a:	6744      	str	r4, [r0, #116]	; 0x74
 8001e1c:	43bb      	bics	r3, r7
 8001e1e:	4073      	eors	r3, r6
 8001e20:	6183      	str	r3, [r0, #24]
 8001e22:	43b7      	bics	r7, r6
 8001e24:	406f      	eors	r7, r5
 8001e26:	3080      	adds	r0, #128	; 0x80
 8001e28:	6087      	str	r7, [r0, #8]
 8001e2a:	3880      	subs	r0, #128	; 0x80
 8001e2c:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8001e2e:	3080      	adds	r0, #128	; 0x80
 8001e30:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8001e32:	3880      	subs	r0, #128	; 0x80
 8001e34:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001e36:	3080      	adds	r0, #128	; 0x80
 8001e38:	6904      	ldr	r4, [r0, #16]
 8001e3a:	3880      	subs	r0, #128	; 0x80
 8001e3c:	6a05      	ldr	r5, [r0, #32]
 8001e3e:	4641      	mov	r1, r8
 8001e40:	404e      	eors	r6, r1
 8001e42:	4053      	eors	r3, r2
 8001e44:	4651      	mov	r1, sl
 8001e46:	404f      	eors	r7, r1
 8001e48:	4649      	mov	r1, r9
 8001e4a:	404c      	eors	r4, r1
 8001e4c:	4671      	mov	r1, lr
 8001e4e:	404d      	eors	r5, r1
 8001e50:	210b      	movs	r1, #11
 8001e52:	41ce      	rors	r6, r1
 8001e54:	211f      	movs	r1, #31
 8001e56:	41cf      	rors	r7, r1
 8001e58:	2101      	movs	r1, #1
 8001e5a:	41cb      	rors	r3, r1
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	41cc      	rors	r4, r1
 8001e60:	210c      	movs	r1, #12
 8001e62:	41cd      	rors	r5, r1
 8001e64:	0029      	movs	r1, r5
 8001e66:	43a1      	bics	r1, r4
 8001e68:	4059      	eors	r1, r3
 8001e6a:	6501      	str	r1, [r0, #80]	; 0x50
 8001e6c:	0031      	movs	r1, r6
 8001e6e:	43a9      	bics	r1, r5
 8001e70:	4061      	eors	r1, r4
 8001e72:	3080      	adds	r0, #128	; 0x80
 8001e74:	6281      	str	r1, [r0, #40]	; 0x28
 8001e76:	439c      	bics	r4, r3
 8001e78:	407c      	eors	r4, r7
 8001e7a:	3880      	subs	r0, #128	; 0x80
 8001e7c:	6204      	str	r4, [r0, #32]
 8001e7e:	43bb      	bics	r3, r7
 8001e80:	4073      	eors	r3, r6
 8001e82:	3080      	adds	r0, #128	; 0x80
 8001e84:	6103      	str	r3, [r0, #16]
 8001e86:	43b7      	bics	r7, r6
 8001e88:	406f      	eors	r7, r5
 8001e8a:	3880      	subs	r0, #128	; 0x80
 8001e8c:	63c7      	str	r7, [r0, #60]	; 0x3c
 8001e8e:	9902      	ldr	r1, [sp, #8]
 8001e90:	4689      	mov	r9, r1
 8001e92:	6843      	ldr	r3, [r0, #4]
 8001e94:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001e96:	3080      	adds	r0, #128	; 0x80
 8001e98:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001e9a:	3880      	subs	r0, #128	; 0x80
 8001e9c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001e9e:	3080      	adds	r0, #128	; 0x80
 8001ea0:	6987      	ldr	r7, [r0, #24]
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	404b      	eors	r3, r1
 8001ea6:	4055      	eors	r5, r2
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	404c      	eors	r4, r1
 8001eac:	4649      	mov	r1, r9
 8001eae:	404e      	eors	r6, r1
 8001eb0:	4671      	mov	r1, lr
 8001eb2:	404f      	eors	r7, r1
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	41cc      	rors	r4, r1
 8001eb8:	210b      	movs	r1, #11
 8001eba:	41cd      	rors	r5, r1
 8001ebc:	2116      	movs	r1, #22
 8001ebe:	41ce      	rors	r6, r1
 8001ec0:	2119      	movs	r1, #25
 8001ec2:	41cf      	rors	r7, r1
 8001ec4:	0031      	movs	r1, r6
 8001ec6:	43a9      	bics	r1, r5
 8001ec8:	4061      	eors	r1, r4
 8001eca:	3880      	subs	r0, #128	; 0x80
 8001ecc:	6581      	str	r1, [r0, #88]	; 0x58
 8001ece:	0039      	movs	r1, r7
 8001ed0:	43b1      	bics	r1, r6
 8001ed2:	4069      	eors	r1, r5
 8001ed4:	3080      	adds	r0, #128	; 0x80
 8001ed6:	6341      	str	r1, [r0, #52]	; 0x34
 8001ed8:	0019      	movs	r1, r3
 8001eda:	43b9      	bics	r1, r7
 8001edc:	4071      	eors	r1, r6
 8001ede:	3880      	subs	r0, #128	; 0x80
 8001ee0:	6441      	str	r1, [r0, #68]	; 0x44
 8001ee2:	0021      	movs	r1, r4
 8001ee4:	4399      	bics	r1, r3
 8001ee6:	4079      	eors	r1, r7
 8001ee8:	3080      	adds	r0, #128	; 0x80
 8001eea:	6181      	str	r1, [r0, #24]
 8001eec:	3880      	subs	r0, #128	; 0x80
 8001eee:	9905      	ldr	r1, [sp, #20]
 8001ef0:	43a5      	bics	r5, r4
 8001ef2:	694c      	ldr	r4, [r1, #20]
 8001ef4:	406b      	eors	r3, r5
 8001ef6:	4063      	eors	r3, r4
 8001ef8:	6043      	str	r3, [r0, #4]
	KeccakRound3
 8001efa:	221f      	movs	r2, #31
 8001efc:	3080      	adds	r0, #128	; 0x80
 8001efe:	69c3      	ldr	r3, [r0, #28]
 8001f00:	3880      	subs	r0, #128	; 0x80
 8001f02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f04:	404b      	eors	r3, r1
 8001f06:	3080      	adds	r0, #128	; 0x80
 8001f08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001f0a:	404b      	eors	r3, r1
 8001f0c:	3880      	subs	r0, #128	; 0x80
 8001f0e:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8001f10:	404b      	eors	r3, r1
 8001f12:	6a01      	ldr	r1, [r0, #32]
 8001f14:	404b      	eors	r3, r1
 8001f16:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8001f18:	68c1      	ldr	r1, [r0, #12]
 8001f1a:	404f      	eors	r7, r1
 8001f1c:	3080      	adds	r0, #128	; 0x80
 8001f1e:	6841      	ldr	r1, [r0, #4]
 8001f20:	404f      	eors	r7, r1
 8001f22:	3880      	subs	r0, #128	; 0x80
 8001f24:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001f26:	404f      	eors	r7, r1
 8001f28:	3080      	adds	r0, #128	; 0x80
 8001f2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f2c:	3880      	subs	r0, #128	; 0x80
 8001f2e:	404f      	eors	r7, r1
 8001f30:	003e      	movs	r6, r7
 8001f32:	41d6      	rors	r6, r2
 8001f34:	405e      	eors	r6, r3
 8001f36:	9600      	str	r6, [sp, #0]
 8001f38:	3080      	adds	r0, #128	; 0x80
 8001f3a:	6986      	ldr	r6, [r0, #24]
 8001f3c:	3880      	subs	r0, #128	; 0x80
 8001f3e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001f40:	404e      	eors	r6, r1
 8001f42:	3080      	adds	r0, #128	; 0x80
 8001f44:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001f46:	404e      	eors	r6, r1
 8001f48:	3880      	subs	r0, #128	; 0x80
 8001f4a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8001f4c:	404e      	eors	r6, r1
 8001f4e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001f50:	404e      	eors	r6, r1
 8001f52:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001f54:	6881      	ldr	r1, [r0, #8]
 8001f56:	404d      	eors	r5, r1
 8001f58:	3080      	adds	r0, #128	; 0x80
 8001f5a:	6801      	ldr	r1, [r0, #0]
 8001f5c:	404d      	eors	r5, r1
 8001f5e:	3880      	subs	r0, #128	; 0x80
 8001f60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001f62:	404d      	eors	r5, r1
 8001f64:	3080      	adds	r0, #128	; 0x80
 8001f66:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f68:	3880      	subs	r0, #128	; 0x80
 8001f6a:	404d      	eors	r5, r1
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4071      	eors	r1, r6
 8001f70:	4688      	mov	r8, r1
 8001f72:	46ae      	mov	lr, r5
 8001f74:	9101      	str	r1, [sp, #4]
 8001f76:	3080      	adds	r0, #128	; 0x80
 8001f78:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001f7a:	3880      	subs	r0, #128	; 0x80
 8001f7c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001f7e:	404d      	eors	r5, r1
 8001f80:	6941      	ldr	r1, [r0, #20]
 8001f82:	404d      	eors	r5, r1
 8001f84:	3080      	adds	r0, #128	; 0x80
 8001f86:	68c1      	ldr	r1, [r0, #12]
 8001f88:	404d      	eors	r5, r1
 8001f8a:	3880      	subs	r0, #128	; 0x80
 8001f8c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f8e:	404d      	eors	r5, r1
 8001f90:	41d6      	rors	r6, r2
 8001f92:	406e      	eors	r6, r5
 8001f94:	9602      	str	r6, [sp, #8]
 8001f96:	3080      	adds	r0, #128	; 0x80
 8001f98:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f9a:	3880      	subs	r0, #128	; 0x80
 8001f9c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001f9e:	404c      	eors	r4, r1
 8001fa0:	6901      	ldr	r1, [r0, #16]
 8001fa2:	404c      	eors	r4, r1
 8001fa4:	3080      	adds	r0, #128	; 0x80
 8001fa6:	6881      	ldr	r1, [r0, #8]
 8001fa8:	404c      	eors	r4, r1
 8001faa:	3880      	subs	r0, #128	; 0x80
 8001fac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001fae:	404c      	eors	r4, r1
 8001fb0:	4063      	eors	r3, r4
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8001fb8:	404b      	eors	r3, r1
 8001fba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001fbc:	404b      	eors	r3, r1
 8001fbe:	3080      	adds	r0, #128	; 0x80
 8001fc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001fc2:	404b      	eors	r3, r1
 8001fc4:	3880      	subs	r0, #128	; 0x80
 8001fc6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001fc8:	404b      	eors	r3, r1
 8001fca:	41d4      	rors	r4, r2
 8001fcc:	405c      	eors	r4, r3
 8001fce:	46a2      	mov	sl, r4
 8001fd0:	6846      	ldr	r6, [r0, #4]
 8001fd2:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8001fd4:	404e      	eors	r6, r1
 8001fd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001fd8:	404e      	eors	r6, r1
 8001fda:	3080      	adds	r0, #128	; 0x80
 8001fdc:	6a01      	ldr	r1, [r0, #32]
 8001fde:	404e      	eors	r6, r1
 8001fe0:	3880      	subs	r0, #128	; 0x80
 8001fe2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001fe4:	404e      	eors	r6, r1
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4071      	eors	r1, r6
 8001fea:	468b      	mov	fp, r1
 8001fec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fee:	3080      	adds	r0, #128	; 0x80
 8001ff0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001ff2:	404c      	eors	r4, r1
 8001ff4:	3880      	subs	r0, #128	; 0x80
 8001ff6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001ff8:	404c      	eors	r4, r1
 8001ffa:	6981      	ldr	r1, [r0, #24]
 8001ffc:	404c      	eors	r4, r1
 8001ffe:	3080      	adds	r0, #128	; 0x80
 8002000:	6941      	ldr	r1, [r0, #20]
 8002002:	3880      	subs	r0, #128	; 0x80
 8002004:	404c      	eors	r4, r1
 8002006:	4671      	mov	r1, lr
 8002008:	0025      	movs	r5, r4
 800200a:	41d5      	rors	r5, r2
 800200c:	404d      	eors	r5, r1
 800200e:	9504      	str	r5, [sp, #16]
 8002010:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002012:	3080      	adds	r0, #128	; 0x80
 8002014:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002016:	404d      	eors	r5, r1
 8002018:	3880      	subs	r0, #128	; 0x80
 800201a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800201c:	404d      	eors	r5, r1
 800201e:	69c1      	ldr	r1, [r0, #28]
 8002020:	404d      	eors	r5, r1
 8002022:	3080      	adds	r0, #128	; 0x80
 8002024:	6901      	ldr	r1, [r0, #16]
 8002026:	3880      	subs	r0, #128	; 0x80
 8002028:	404d      	eors	r5, r1
 800202a:	406f      	eors	r7, r5
 800202c:	41d6      	rors	r6, r2
 800202e:	406e      	eors	r6, r5
 8002030:	46b4      	mov	ip, r6
 8002032:	405c      	eors	r4, r3
 8002034:	46a6      	mov	lr, r4
 8002036:	003a      	movs	r2, r7
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4689      	mov	r9, r1
 800203c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800203e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002040:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8002042:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002044:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002046:	4641      	mov	r1, r8
 8002048:	404d      	eors	r5, r1
 800204a:	4057      	eors	r7, r2
 800204c:	4659      	mov	r1, fp
 800204e:	404e      	eors	r6, r1
 8002050:	4649      	mov	r1, r9
 8002052:	404b      	eors	r3, r1
 8002054:	4661      	mov	r1, ip
 8002056:	404c      	eors	r4, r1
 8002058:	211e      	movs	r1, #30
 800205a:	41cd      	rors	r5, r1
 800205c:	2109      	movs	r1, #9
 800205e:	41ce      	rors	r6, r1
 8002060:	2101      	movs	r1, #1
 8002062:	41cf      	rors	r7, r1
 8002064:	2112      	movs	r1, #18
 8002066:	41cb      	rors	r3, r1
 8002068:	2116      	movs	r1, #22
 800206a:	41cc      	rors	r4, r1
 800206c:	0029      	movs	r1, r5
 800206e:	43a1      	bics	r1, r4
 8002070:	4059      	eors	r1, r3
 8002072:	6281      	str	r1, [r0, #40]	; 0x28
 8002074:	0031      	movs	r1, r6
 8002076:	43a9      	bics	r1, r5
 8002078:	4061      	eors	r1, r4
 800207a:	6301      	str	r1, [r0, #48]	; 0x30
 800207c:	439c      	bics	r4, r3
 800207e:	407c      	eors	r4, r7
 8002080:	6484      	str	r4, [r0, #72]	; 0x48
 8002082:	43bb      	bics	r3, r7
 8002084:	4073      	eors	r3, r6
 8002086:	6403      	str	r3, [r0, #64]	; 0x40
 8002088:	43b7      	bics	r7, r6
 800208a:	406f      	eors	r7, r5
 800208c:	6387      	str	r7, [r0, #56]	; 0x38
 800208e:	6d47      	ldr	r7, [r0, #84]	; 0x54
 8002090:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002092:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8002094:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8002096:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8002098:	4641      	mov	r1, r8
 800209a:	404f      	eors	r7, r1
 800209c:	4054      	eors	r4, r2
 800209e:	4651      	mov	r1, sl
 80020a0:	404b      	eors	r3, r1
 80020a2:	4649      	mov	r1, r9
 80020a4:	404d      	eors	r5, r1
 80020a6:	4671      	mov	r1, lr
 80020a8:	404e      	eors	r6, r1
 80020aa:	2117      	movs	r1, #23
 80020ac:	41cf      	rors	r7, r1
 80020ae:	211d      	movs	r1, #29
 80020b0:	41cc      	rors	r4, r1
 80020b2:	2114      	movs	r1, #20
 80020b4:	41cd      	rors	r5, r1
 80020b6:	211c      	movs	r1, #28
 80020b8:	41ce      	rors	r6, r1
 80020ba:	0029      	movs	r1, r5
 80020bc:	43a1      	bics	r1, r4
 80020be:	4059      	eors	r1, r3
 80020c0:	6541      	str	r1, [r0, #84]	; 0x54
 80020c2:	0031      	movs	r1, r6
 80020c4:	43a9      	bics	r1, r5
 80020c6:	4061      	eors	r1, r4
 80020c8:	65c1      	str	r1, [r0, #92]	; 0x5c
 80020ca:	439c      	bics	r4, r3
 80020cc:	407c      	eors	r4, r7
 80020ce:	6744      	str	r4, [r0, #116]	; 0x74
 80020d0:	43bb      	bics	r3, r7
 80020d2:	4073      	eors	r3, r6
 80020d4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80020d6:	43b7      	bics	r7, r6
 80020d8:	406f      	eors	r7, r5
 80020da:	6647      	str	r7, [r0, #100]	; 0x64
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	4688      	mov	r8, r1
 80020e0:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80020e2:	3080      	adds	r0, #128	; 0x80
 80020e4:	6805      	ldr	r5, [r0, #0]
 80020e6:	6886      	ldr	r6, [r0, #8]
 80020e8:	6907      	ldr	r7, [r0, #16]
 80020ea:	6983      	ldr	r3, [r0, #24]
 80020ec:	4641      	mov	r1, r8
 80020ee:	404c      	eors	r4, r1
 80020f0:	4056      	eors	r6, r2
 80020f2:	4651      	mov	r1, sl
 80020f4:	404d      	eors	r5, r1
 80020f6:	4649      	mov	r1, r9
 80020f8:	404f      	eors	r7, r1
 80020fa:	4671      	mov	r1, lr
 80020fc:	404b      	eors	r3, r1
 80020fe:	210e      	movs	r1, #14
 8002100:	41cc      	rors	r4, r1
 8002102:	211b      	movs	r1, #27
 8002104:	41cd      	rors	r5, r1
 8002106:	2118      	movs	r1, #24
 8002108:	41ce      	rors	r6, r1
 800210a:	2104      	movs	r1, #4
 800210c:	41cf      	rors	r7, r1
 800210e:	2112      	movs	r1, #18
 8002110:	41cb      	rors	r3, r1
 8002112:	0029      	movs	r1, r5
 8002114:	43a1      	bics	r1, r4
 8002116:	4059      	eors	r1, r3
 8002118:	3880      	subs	r0, #128	; 0x80
 800211a:	6781      	str	r1, [r0, #120]	; 0x78
 800211c:	0031      	movs	r1, r6
 800211e:	43a9      	bics	r1, r5
 8002120:	4061      	eors	r1, r4
 8002122:	3080      	adds	r0, #128	; 0x80
 8002124:	6001      	str	r1, [r0, #0]
 8002126:	439c      	bics	r4, r3
 8002128:	407c      	eors	r4, r7
 800212a:	6184      	str	r4, [r0, #24]
 800212c:	43bb      	bics	r3, r7
 800212e:	4073      	eors	r3, r6
 8002130:	6103      	str	r3, [r0, #16]
 8002132:	43b7      	bics	r7, r6
 8002134:	406f      	eors	r7, r5
 8002136:	6087      	str	r7, [r0, #8]
 8002138:	3880      	subs	r0, #128	; 0x80
 800213a:	3080      	adds	r0, #128	; 0x80
 800213c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800213e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002140:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002142:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002144:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8002146:	4641      	mov	r1, r8
 8002148:	404e      	eors	r6, r1
 800214a:	4053      	eors	r3, r2
 800214c:	4659      	mov	r1, fp
 800214e:	404f      	eors	r7, r1
 8002150:	4649      	mov	r1, r9
 8002152:	404c      	eors	r4, r1
 8002154:	4661      	mov	r1, ip
 8002156:	404d      	eors	r5, r1
 8002158:	210c      	movs	r1, #12
 800215a:	41ce      	rors	r6, r1
 800215c:	211f      	movs	r1, #31
 800215e:	41cf      	rors	r7, r1
 8002160:	2101      	movs	r1, #1
 8002162:	41cb      	rors	r3, r1
 8002164:	2105      	movs	r1, #5
 8002166:	41cc      	rors	r4, r1
 8002168:	210d      	movs	r1, #13
 800216a:	41cd      	rors	r5, r1
 800216c:	0029      	movs	r1, r5
 800216e:	43a1      	bics	r1, r4
 8002170:	4059      	eors	r1, r3
 8002172:	6241      	str	r1, [r0, #36]	; 0x24
 8002174:	0031      	movs	r1, r6
 8002176:	43a9      	bics	r1, r5
 8002178:	4061      	eors	r1, r4
 800217a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800217c:	439c      	bics	r4, r3
 800217e:	407c      	eors	r4, r7
 8002180:	6444      	str	r4, [r0, #68]	; 0x44
 8002182:	43bb      	bics	r3, r7
 8002184:	4073      	eors	r3, r6
 8002186:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002188:	43b7      	bics	r7, r6
 800218a:	406f      	eors	r7, r5
 800218c:	6347      	str	r7, [r0, #52]	; 0x34
 800218e:	3880      	subs	r0, #128	; 0x80
 8002190:	9903      	ldr	r1, [sp, #12]
 8002192:	4689      	mov	r9, r1
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	6884      	ldr	r4, [r0, #8]
 8002198:	6905      	ldr	r5, [r0, #16]
 800219a:	6986      	ldr	r6, [r0, #24]
 800219c:	6a07      	ldr	r7, [r0, #32]
 800219e:	4641      	mov	r1, r8
 80021a0:	404b      	eors	r3, r1
 80021a2:	4055      	eors	r5, r2
 80021a4:	4651      	mov	r1, sl
 80021a6:	404c      	eors	r4, r1
 80021a8:	4649      	mov	r1, r9
 80021aa:	404e      	eors	r6, r1
 80021ac:	4661      	mov	r1, ip
 80021ae:	404f      	eors	r7, r1
 80021b0:	210a      	movs	r1, #10
 80021b2:	41cc      	rors	r4, r1
 80021b4:	210a      	movs	r1, #10
 80021b6:	41cd      	rors	r5, r1
 80021b8:	2115      	movs	r1, #21
 80021ba:	41ce      	rors	r6, r1
 80021bc:	2119      	movs	r1, #25
 80021be:	41cf      	rors	r7, r1
 80021c0:	0031      	movs	r1, r6
 80021c2:	43a9      	bics	r1, r5
 80021c4:	4061      	eors	r1, r4
 80021c6:	6081      	str	r1, [r0, #8]
 80021c8:	0039      	movs	r1, r7
 80021ca:	43b1      	bics	r1, r6
 80021cc:	4069      	eors	r1, r5
 80021ce:	6101      	str	r1, [r0, #16]
 80021d0:	0019      	movs	r1, r3
 80021d2:	43b9      	bics	r1, r7
 80021d4:	4071      	eors	r1, r6
 80021d6:	6181      	str	r1, [r0, #24]
 80021d8:	0021      	movs	r1, r4
 80021da:	4399      	bics	r1, r3
 80021dc:	4079      	eors	r1, r7
 80021de:	6201      	str	r1, [r0, #32]
 80021e0:	9905      	ldr	r1, [sp, #20]
 80021e2:	43a5      	bics	r5, r4
 80021e4:	698c      	ldr	r4, [r1, #24]
 80021e6:	406b      	eors	r3, r5
 80021e8:	4063      	eors	r3, r4
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	9a04      	ldr	r2, [sp, #16]
 80021ee:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80021f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80021f2:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80021f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021f6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80021f8:	4641      	mov	r1, r8
 80021fa:	404d      	eors	r5, r1
 80021fc:	4057      	eors	r7, r2
 80021fe:	4651      	mov	r1, sl
 8002200:	404e      	eors	r6, r1
 8002202:	4649      	mov	r1, r9
 8002204:	404b      	eors	r3, r1
 8002206:	4671      	mov	r1, lr
 8002208:	404c      	eors	r4, r1
 800220a:	211f      	movs	r1, #31
 800220c:	41cd      	rors	r5, r1
 800220e:	210a      	movs	r1, #10
 8002210:	41ce      	rors	r6, r1
 8002212:	2102      	movs	r1, #2
 8002214:	41cf      	rors	r7, r1
 8002216:	2112      	movs	r1, #18
 8002218:	41cb      	rors	r3, r1
 800221a:	2116      	movs	r1, #22
 800221c:	41cc      	rors	r4, r1
 800221e:	0029      	movs	r1, r5
 8002220:	43a1      	bics	r1, r4
 8002222:	4059      	eors	r1, r3
 8002224:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002226:	0031      	movs	r1, r6
 8002228:	43a9      	bics	r1, r5
 800222a:	4061      	eors	r1, r4
 800222c:	6341      	str	r1, [r0, #52]	; 0x34
 800222e:	439c      	bics	r4, r3
 8002230:	407c      	eors	r4, r7
 8002232:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002234:	43bb      	bics	r3, r7
 8002236:	4073      	eors	r3, r6
 8002238:	6443      	str	r3, [r0, #68]	; 0x44
 800223a:	43b7      	bics	r7, r6
 800223c:	406f      	eors	r7, r5
 800223e:	63c7      	str	r7, [r0, #60]	; 0x3c
 8002240:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8002242:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002244:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8002246:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8002248:	6f06      	ldr	r6, [r0, #112]	; 0x70
 800224a:	4641      	mov	r1, r8
 800224c:	404f      	eors	r7, r1
 800224e:	4054      	eors	r4, r2
 8002250:	4659      	mov	r1, fp
 8002252:	404b      	eors	r3, r1
 8002254:	4649      	mov	r1, r9
 8002256:	404d      	eors	r5, r1
 8002258:	4661      	mov	r1, ip
 800225a:	404e      	eors	r6, r1
 800225c:	2117      	movs	r1, #23
 800225e:	41cf      	rors	r7, r1
 8002260:	211f      	movs	r1, #31
 8002262:	41cb      	rors	r3, r1
 8002264:	211d      	movs	r1, #29
 8002266:	41cc      	rors	r4, r1
 8002268:	2113      	movs	r1, #19
 800226a:	41cd      	rors	r5, r1
 800226c:	211c      	movs	r1, #28
 800226e:	41ce      	rors	r6, r1
 8002270:	0029      	movs	r1, r5
 8002272:	43a1      	bics	r1, r4
 8002274:	4059      	eors	r1, r3
 8002276:	6501      	str	r1, [r0, #80]	; 0x50
 8002278:	0031      	movs	r1, r6
 800227a:	43a9      	bics	r1, r5
 800227c:	4061      	eors	r1, r4
 800227e:	6581      	str	r1, [r0, #88]	; 0x58
 8002280:	439c      	bics	r4, r3
 8002282:	407c      	eors	r4, r7
 8002284:	6704      	str	r4, [r0, #112]	; 0x70
 8002286:	43bb      	bics	r3, r7
 8002288:	4073      	eors	r3, r6
 800228a:	6683      	str	r3, [r0, #104]	; 0x68
 800228c:	43b7      	bics	r7, r6
 800228e:	406f      	eors	r7, r5
 8002290:	6607      	str	r7, [r0, #96]	; 0x60
 8002292:	9901      	ldr	r1, [sp, #4]
 8002294:	4688      	mov	r8, r1
 8002296:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8002298:	3080      	adds	r0, #128	; 0x80
 800229a:	6845      	ldr	r5, [r0, #4]
 800229c:	68c6      	ldr	r6, [r0, #12]
 800229e:	6947      	ldr	r7, [r0, #20]
 80022a0:	69c3      	ldr	r3, [r0, #28]
 80022a2:	4641      	mov	r1, r8
 80022a4:	404c      	eors	r4, r1
 80022a6:	4056      	eors	r6, r2
 80022a8:	4659      	mov	r1, fp
 80022aa:	404d      	eors	r5, r1
 80022ac:	4649      	mov	r1, r9
 80022ae:	404f      	eors	r7, r1
 80022b0:	4661      	mov	r1, ip
 80022b2:	404b      	eors	r3, r1
 80022b4:	210e      	movs	r1, #14
 80022b6:	41cc      	rors	r4, r1
 80022b8:	211b      	movs	r1, #27
 80022ba:	41cd      	rors	r5, r1
 80022bc:	2119      	movs	r1, #25
 80022be:	41ce      	rors	r6, r1
 80022c0:	2104      	movs	r1, #4
 80022c2:	41cf      	rors	r7, r1
 80022c4:	2113      	movs	r1, #19
 80022c6:	41cb      	rors	r3, r1
 80022c8:	0029      	movs	r1, r5
 80022ca:	43a1      	bics	r1, r4
 80022cc:	4059      	eors	r1, r3
 80022ce:	3880      	subs	r0, #128	; 0x80
 80022d0:	67c1      	str	r1, [r0, #124]	; 0x7c
 80022d2:	0031      	movs	r1, r6
 80022d4:	43a9      	bics	r1, r5
 80022d6:	4061      	eors	r1, r4
 80022d8:	3080      	adds	r0, #128	; 0x80
 80022da:	6041      	str	r1, [r0, #4]
 80022dc:	439c      	bics	r4, r3
 80022de:	407c      	eors	r4, r7
 80022e0:	61c4      	str	r4, [r0, #28]
 80022e2:	43bb      	bics	r3, r7
 80022e4:	4073      	eors	r3, r6
 80022e6:	6143      	str	r3, [r0, #20]
 80022e8:	43b7      	bics	r7, r6
 80022ea:	406f      	eors	r7, r5
 80022ec:	60c7      	str	r7, [r0, #12]
 80022ee:	3880      	subs	r0, #128	; 0x80
 80022f0:	3080      	adds	r0, #128	; 0x80
 80022f2:	6a06      	ldr	r6, [r0, #32]
 80022f4:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80022f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022f8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80022fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80022fc:	4641      	mov	r1, r8
 80022fe:	404e      	eors	r6, r1
 8002300:	4053      	eors	r3, r2
 8002302:	4651      	mov	r1, sl
 8002304:	404f      	eors	r7, r1
 8002306:	4649      	mov	r1, r9
 8002308:	404c      	eors	r4, r1
 800230a:	4671      	mov	r1, lr
 800230c:	404d      	eors	r5, r1
 800230e:	210b      	movs	r1, #11
 8002310:	41ce      	rors	r6, r1
 8002312:	211f      	movs	r1, #31
 8002314:	41cf      	rors	r7, r1
 8002316:	2101      	movs	r1, #1
 8002318:	41cb      	rors	r3, r1
 800231a:	2104      	movs	r1, #4
 800231c:	41cc      	rors	r4, r1
 800231e:	210c      	movs	r1, #12
 8002320:	41cd      	rors	r5, r1
 8002322:	0029      	movs	r1, r5
 8002324:	43a1      	bics	r1, r4
 8002326:	4059      	eors	r1, r3
 8002328:	6201      	str	r1, [r0, #32]
 800232a:	0031      	movs	r1, r6
 800232c:	43a9      	bics	r1, r5
 800232e:	4061      	eors	r1, r4
 8002330:	6281      	str	r1, [r0, #40]	; 0x28
 8002332:	439c      	bics	r4, r3
 8002334:	407c      	eors	r4, r7
 8002336:	6404      	str	r4, [r0, #64]	; 0x40
 8002338:	43bb      	bics	r3, r7
 800233a:	4073      	eors	r3, r6
 800233c:	6383      	str	r3, [r0, #56]	; 0x38
 800233e:	43b7      	bics	r7, r6
 8002340:	406f      	eors	r7, r5
 8002342:	6307      	str	r7, [r0, #48]	; 0x30
 8002344:	3880      	subs	r0, #128	; 0x80
 8002346:	9902      	ldr	r1, [sp, #8]
 8002348:	4689      	mov	r9, r1
 800234a:	6843      	ldr	r3, [r0, #4]
 800234c:	68c4      	ldr	r4, [r0, #12]
 800234e:	6945      	ldr	r5, [r0, #20]
 8002350:	69c6      	ldr	r6, [r0, #28]
 8002352:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8002354:	4641      	mov	r1, r8
 8002356:	404b      	eors	r3, r1
 8002358:	4055      	eors	r5, r2
 800235a:	4659      	mov	r1, fp
 800235c:	404c      	eors	r4, r1
 800235e:	4649      	mov	r1, r9
 8002360:	404e      	eors	r6, r1
 8002362:	4671      	mov	r1, lr
 8002364:	404f      	eors	r7, r1
 8002366:	210a      	movs	r1, #10
 8002368:	41cc      	rors	r4, r1
 800236a:	210b      	movs	r1, #11
 800236c:	41cd      	rors	r5, r1
 800236e:	2116      	movs	r1, #22
 8002370:	41ce      	rors	r6, r1
 8002372:	2119      	movs	r1, #25
 8002374:	41cf      	rors	r7, r1
 8002376:	0031      	movs	r1, r6
 8002378:	43a9      	bics	r1, r5
 800237a:	4061      	eors	r1, r4
 800237c:	60c1      	str	r1, [r0, #12]
 800237e:	0039      	movs	r1, r7
 8002380:	43b1      	bics	r1, r6
 8002382:	4069      	eors	r1, r5
 8002384:	6141      	str	r1, [r0, #20]
 8002386:	0019      	movs	r1, r3
 8002388:	43b9      	bics	r1, r7
 800238a:	4071      	eors	r1, r6
 800238c:	61c1      	str	r1, [r0, #28]
 800238e:	0021      	movs	r1, r4
 8002390:	4399      	bics	r1, r3
 8002392:	4079      	eors	r1, r7
 8002394:	6241      	str	r1, [r0, #36]	; 0x24
 8002396:	9905      	ldr	r1, [sp, #20]
 8002398:	43a5      	bics	r5, r4
 800239a:	69cc      	ldr	r4, [r1, #28]
 800239c:	406b      	eors	r3, r5
 800239e:	4063      	eors	r3, r4
 80023a0:	3120      	adds	r1, #32
 80023a2:	680a      	ldr	r2, [r1, #0]
 80023a4:	9105      	str	r1, [sp, #20]
 80023a6:	2aff      	cmp	r2, #255	; 0xff
 80023a8:	6043      	str	r3, [r0, #4]
	beq		KeccakP1600_StatePermute_Done
 80023aa:	d003      	beq.n	80023b4 <KeccakP1600_StatePermute_Done>
	ldr		r1, =KeccakP1600_StatePermute_RoundLoop+1
 80023ac:	4900      	ldr	r1, [pc, #0]	; (80023b0 <KeccakP1600_StatePermute_RoundLoop+0x139e>)
	bx		r1
 80023ae:	4708      	bx	r1
	ldr		r1, =KeccakP1600_StatePermute_RoundLoop+1
 80023b0:	08001013 	.word	0x08001013

080023b4 <KeccakP1600_StatePermute_Done>:
	.ltorg
KeccakP1600_StatePermute_Done:
	add		sp, #mSize
 80023b4:	b006      	add	sp, #24
	pop		{ r1 - r5, r7 }
 80023b6:	bcbe      	pop	{r1, r2, r3, r4, r5, r7}
	mov		r8, r1
 80023b8:	4688      	mov	r8, r1
	mov		r9, r2
 80023ba:	4691      	mov	r9, r2
	mov		r10, r3
 80023bc:	469a      	mov	sl, r3
	mov		r11, r4
 80023be:	46a3      	mov	fp, r4
	mov		r12, r5
 80023c0:	46ac      	mov	ip, r5
	pop		{ r4 - r6, pc }
 80023c2:	bd70      	pop	{r4, r5, r6, pc}

080023c4 <asm_csc_for>:


.global	asm_csc_for;
.type	asm_csc_for, %function
asm_csc_for:
    push {r4-r7,lr}
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    
    ldm r1!,{r3,r4}
 80023c6:	c918      	ldmia	r1!, {r3, r4}
    stm r0!,{r3,r4}
 80023c8:	c018      	stmia	r0!, {r3, r4}
    eor r3,r3
 80023ca:	405b      	eors	r3, r3
    eor r4,r4
 80023cc:	4064      	eors	r4, r4
    stm r0!,{r3,r4}
 80023ce:	c018      	stmia	r0!, {r3, r4}
    


    pop {r4-r7,pc}
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bx lr
 80023d2:	4770      	bx	lr

080023d4 <asm_init>:


.global asm_init;
.type asm_init, %function
asm_init:
    push {r4-r7,lr}
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}


    ldm r3,{r4,r5,r6,r7}
 80023d6:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80023d8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

    ldm r1,{r4,r5,r6,r7}
 80023da:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80023dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    ldm r1,{r4,r5,r6,r7}
 80023de:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80023e0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}


   
    ldm r2,{r6,r7}
 80023e2:	cac0      	ldmia	r2!, {r6, r7}
    ldm r2,{r4,r5}    
 80023e4:	ca30      	ldmia	r2!, {r4, r5}
    stm r0,{r4,r5,r6,r7}
 80023e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

    pop {r4-r7,pc}
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bx lr
 80023ea:	4770      	bx	lr

080023ec <asm_quarterround>:
.global asm_quarterround
.func asm_quarterround

asm_quarterround:
	// Save low registers
	push {r4-r7}
 80023ec:	b4f0      	push	{r4, r5, r6, r7}

	// Copy high to low registers
	mov	r3, r8
 80023ee:	4643      	mov	r3, r8
	mov	r4, r9
 80023f0:	464c      	mov	r4, r9
	mov	r5, r10
 80023f2:	4655      	mov	r5, sl
	mov	r6, r11
 80023f4:	465e      	mov	r6, fp
	mov	r7, r12
 80023f6:	4667      	mov	r7, ip
	// Save high registers
	push {r3-r7}
 80023f8:	b4f8      	push	{r3, r4, r5, r6, r7}
	// See Readme for explanation of
	// register allocation.

	// Rotate constants are buffered as good as possible
	mov	r5, #16
 80023fa:	2510      	movs	r5, #16
	mov	r6, #20
 80023fc:	2614      	movs	r6, #20
	mov	r7, #24
 80023fe:	2718      	movs	r7, #24

	// Round 1
	//=======================================
	ldr	r1, [r0]
 8002400:	6801      	ldr	r1, [r0, #0]
	ldr	r2, [r0, #16]
 8002402:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #32]
 8002404:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #48]
 8002406:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002408:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800240a:	404c      	eors	r4, r1
	ror	r4, r5
 800240c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800240e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002410:	405a      	eors	r2, r3
	ror	r2, r6
 8002412:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002414:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002416:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002418:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 800241a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800241c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800241e:	405a      	eors	r2, r3
	mov	r1, #25
 8002420:	2119      	movs	r1, #25
	ror	r2, r1
 8002422:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002424:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002426:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002428:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 800242a:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 800242c:	6942      	ldr	r2, [r0, #20]
	ldr	r3, [r0, #36]
 800242e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #52]
 8002430:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002432:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002434:	404c      	eors	r4, r1
	ror	r4, r5
 8002436:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002438:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800243a:	405a      	eors	r2, r3
	ror	r2, r6
 800243c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800243e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002440:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002442:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002444:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002446:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002448:	405a      	eors	r2, r3
	mov	r1, #25
 800244a:	2119      	movs	r1, #25
	ror	r2, r1
 800244c:	41ca      	rors	r2, r1

	mov	r10, r2
 800244e:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002450:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002452:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002454:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002456:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002458:	6a83      	ldr	r3, [r0, #40]	; 0x28
	ldr	r4, [r0, #56]
 800245a:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800245c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800245e:	404c      	eors	r4, r1
	ror	r4, r5
 8002460:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002462:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002464:	405a      	eors	r2, r3
	ror	r2, r6
 8002466:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002468:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800246a:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 800246c:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800246e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002470:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002472:	405a      	eors	r2, r3
	mov	r1, #25
 8002474:	2119      	movs	r1, #25
	ror	r2, r1
 8002476:	41ca      	rors	r2, r1

	mov	r9, r2
 8002478:	4691      	mov	r9, r2
	mov	r12, r3
 800247a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 800247c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 800247e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002480:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002482:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002484:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002486:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002488:	404c      	eors	r4, r1
	ror	r4, r5
 800248a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800248c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800248e:	405a      	eors	r2, r3
	ror	r2, r6
 8002490:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002492:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002494:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002496:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002498:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800249a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800249c:	405a      	eors	r2, r3
	mov	r1, #25
 800249e:	2119      	movs	r1, #25
	ror	r2, r1
 80024a0:	41ca      	rors	r2, r1

	mov	r8, r2
 80024a2:	4690      	mov	r8, r2
	mov	r11, r3
 80024a4:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 80024a6:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 80024a8:	4652      	mov	r2, sl
	mov	r3, r12
 80024aa:	4663      	mov	r3, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024ac:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80024ae:	404c      	eors	r4, r1
	ror	r4, r5
 80024b0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024b2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80024b4:	405a      	eors	r2, r3
	ror	r2, r6
 80024b6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024b8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80024ba:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80024bc:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80024be:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024c0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80024c2:	405a      	eors	r2, r3
	mov	r1, #25
 80024c4:	2119      	movs	r1, #25
	ror	r2, r1
 80024c6:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 80024c8:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 80024ca:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 80024cc:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 80024ce:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 80024d0:	464a      	mov	r2, r9
	mov	r3, r11
 80024d2:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 80024d4:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024d6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80024d8:	404c      	eors	r4, r1
	ror	r4, r5
 80024da:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024dc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80024de:	405a      	eors	r2, r3
	ror	r2, r6
 80024e0:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024e2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80024e4:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 80024e6:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 80024e8:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024ea:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80024ec:	405a      	eors	r2, r3
	mov	r1, #25
 80024ee:	2119      	movs	r1, #25
	ror	r2, r1
 80024f0:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 80024f2:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 80024f4:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 80024f6:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 80024f8:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 80024fa:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 80024fc:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 80024fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002500:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002502:	404c      	eors	r4, r1
	ror	r4, r5
 8002504:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002506:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002508:	405a      	eors	r2, r3
	ror	r2, r6
 800250a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800250c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800250e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002510:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002512:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002514:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002516:	405a      	eors	r2, r3
	mov	r1, #25
 8002518:	2119      	movs	r1, #25
	ror	r2, r1
 800251a:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 800251c:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 800251e:	4698      	mov	r8, r3
	mov	r11, r4
 8002520:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002522:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002524:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002526:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002528:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800252a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800252c:	404c      	eors	r4, r1
	ror	r4, r5
 800252e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002530:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002532:	405a      	eors	r2, r3
	ror	r2, r6
 8002534:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002536:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002538:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 800253a:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 800253c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800253e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002540:	405a      	eors	r2, r3
	mov	r1, #25
 8002542:	2119      	movs	r1, #25
	ror	r2, r1
 8002544:	41ca      	rors	r2, r1

	mov	r9, r3
 8002546:	4699      	mov	r9, r3
	mov	r12, r4
 8002548:	46a4      	mov	ip, r4

	//=======================================

	// Round 2
	//=======================================
	ldr	r1, [r0]
 800254a:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 800254c:	4643      	mov	r3, r8
	mov	r4, r10
 800254e:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002550:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002552:	404c      	eors	r4, r1
	ror	r4, r5
 8002554:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002556:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002558:	405a      	eors	r2, r3
	ror	r2, r6
 800255a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800255c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800255e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002560:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002562:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002564:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002566:	405a      	eors	r2, r3
	mov	r1, #25
 8002568:	2119      	movs	r1, #25
	ror	r2, r1
 800256a:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 800256c:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 800256e:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002570:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002572:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002574:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002576:	464b      	mov	r3, r9
	mov	r4, r11
 8002578:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800257a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800257c:	404c      	eors	r4, r1
	ror	r4, r5
 800257e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002580:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002582:	405a      	eors	r2, r3
	ror	r2, r6
 8002584:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002586:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002588:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800258a:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 800258c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800258e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002590:	405a      	eors	r2, r3
	mov	r1, #25
 8002592:	2119      	movs	r1, #25
	ror	r2, r1
 8002594:	41ca      	rors	r2, r1

	mov	r10, r2
 8002596:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002598:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 800259a:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 800259c:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 800259e:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 80025a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 80025a2:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025a4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80025a6:	404c      	eors	r4, r1
	ror	r4, r5
 80025a8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025aa:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80025ac:	405a      	eors	r2, r3
	ror	r2, r6
 80025ae:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025b0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80025b2:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80025b4:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80025b6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025b8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80025ba:	405a      	eors	r2, r3
	mov	r1, #25
 80025bc:	2119      	movs	r1, #25
	ror	r2, r1
 80025be:	41ca      	rors	r2, r1

	mov	r9, r2
 80025c0:	4691      	mov	r9, r2
	mov	r12, r3
 80025c2:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 80025c4:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 80025c6:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 80025c8:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 80025ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 80025cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025ce:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80025d0:	404c      	eors	r4, r1
	ror	r4, r5
 80025d2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025d4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80025d6:	405a      	eors	r2, r3
	ror	r2, r6
 80025d8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025da:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80025dc:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80025de:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80025e0:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025e2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80025e4:	405a      	eors	r2, r3
	mov	r1, #25
 80025e6:	2119      	movs	r1, #25
	ror	r2, r1
 80025e8:	41ca      	rors	r2, r1

	mov	r8, r2
 80025ea:	4690      	mov	r8, r2
	mov	r11, r3
 80025ec:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 80025ee:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 80025f0:	4652      	mov	r2, sl
	mov	r3, r12
 80025f2:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025f4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80025f6:	404c      	eors	r4, r1
	ror	r4, r5
 80025f8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025fa:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80025fc:	405a      	eors	r2, r3
	ror	r2, r6
 80025fe:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002600:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002602:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002604:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002606:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002608:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800260a:	405a      	eors	r2, r3
	mov	r1, #25
 800260c:	2119      	movs	r1, #25
	ror	r2, r1
 800260e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002610:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002612:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002614:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002616:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002618:	464a      	mov	r2, r9
	mov	r3, r11
 800261a:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 800261c:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800261e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002620:	404c      	eors	r4, r1
	ror	r4, r5
 8002622:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002624:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002626:	405a      	eors	r2, r3
	ror	r2, r6
 8002628:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800262a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800262c:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800262e:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002630:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002632:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002634:	405a      	eors	r2, r3
	mov	r1, #25
 8002636:	2119      	movs	r1, #25
	ror	r2, r1
 8002638:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 800263a:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 800263c:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 800263e:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002640:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002642:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002644:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002646:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002648:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800264a:	404c      	eors	r4, r1
	ror	r4, r5
 800264c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800264e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002650:	405a      	eors	r2, r3
	ror	r2, r6
 8002652:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002654:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002656:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002658:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800265a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800265c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800265e:	405a      	eors	r2, r3
	mov	r1, #25
 8002660:	2119      	movs	r1, #25
	ror	r2, r1
 8002662:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002664:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002666:	4698      	mov	r8, r3
	mov	r11, r4
 8002668:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 800266a:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 800266c:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 800266e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002670:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002672:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002674:	404c      	eors	r4, r1
	ror	r4, r5
 8002676:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002678:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800267a:	405a      	eors	r2, r3
	ror	r2, r6
 800267c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800267e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002680:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002682:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002684:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002686:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002688:	405a      	eors	r2, r3
	mov	r1, #25
 800268a:	2119      	movs	r1, #25
	ror	r2, r1
 800268c:	41ca      	rors	r2, r1

	mov	r9, r3
 800268e:	4699      	mov	r9, r3
	mov	r12, r4
 8002690:	46a4      	mov	ip, r4

	//=======================================

	// Round 3
	//=======================================
	ldr	r1, [r0]
 8002692:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002694:	4643      	mov	r3, r8
	mov	r4, r10
 8002696:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002698:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800269a:	404c      	eors	r4, r1
	ror	r4, r5
 800269c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800269e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80026a0:	405a      	eors	r2, r3
	ror	r2, r6
 80026a2:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026a4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80026a6:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80026a8:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80026aa:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026ac:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80026ae:	405a      	eors	r2, r3
	mov	r1, #25
 80026b0:	2119      	movs	r1, #25
	ror	r2, r1
 80026b2:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 80026b4:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 80026b6:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 80026b8:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 80026ba:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 80026bc:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 80026be:	464b      	mov	r3, r9
	mov	r4, r11
 80026c0:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026c2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80026c4:	404c      	eors	r4, r1
	ror	r4, r5
 80026c6:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026c8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80026ca:	405a      	eors	r2, r3
	ror	r2, r6
 80026cc:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026ce:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80026d0:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 80026d2:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 80026d4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026d6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80026d8:	405a      	eors	r2, r3
	mov	r1, #25
 80026da:	2119      	movs	r1, #25
	ror	r2, r1
 80026dc:	41ca      	rors	r2, r1

	mov	r10, r2
 80026de:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 80026e0:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 80026e2:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 80026e4:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 80026e6:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 80026e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 80026ea:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026ec:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80026ee:	404c      	eors	r4, r1
	ror	r4, r5
 80026f0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026f2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80026f4:	405a      	eors	r2, r3
	ror	r2, r6
 80026f6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026f8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80026fa:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80026fc:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80026fe:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002700:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002702:	405a      	eors	r2, r3
	mov	r1, #25
 8002704:	2119      	movs	r1, #25
	ror	r2, r1
 8002706:	41ca      	rors	r2, r1

	mov	r9, r2
 8002708:	4691      	mov	r9, r2
	mov	r12, r3
 800270a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 800270c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 800270e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002710:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002712:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002714:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002716:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002718:	404c      	eors	r4, r1
	ror	r4, r5
 800271a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800271c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800271e:	405a      	eors	r2, r3
	ror	r2, r6
 8002720:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002722:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002724:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002726:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002728:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800272a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800272c:	405a      	eors	r2, r3
	mov	r1, #25
 800272e:	2119      	movs	r1, #25
	ror	r2, r1
 8002730:	41ca      	rors	r2, r1

	mov	r8, r2
 8002732:	4690      	mov	r8, r2
	mov	r11, r3
 8002734:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002736:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002738:	4652      	mov	r2, sl
	mov	r3, r12
 800273a:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800273c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800273e:	404c      	eors	r4, r1
	ror	r4, r5
 8002740:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002742:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002744:	405a      	eors	r2, r3
	ror	r2, r6
 8002746:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002748:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800274a:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 800274c:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 800274e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002750:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002752:	405a      	eors	r2, r3
	mov	r1, #25
 8002754:	2119      	movs	r1, #25
	ror	r2, r1
 8002756:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002758:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 800275a:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 800275c:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 800275e:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002760:	464a      	mov	r2, r9
	mov	r3, r11
 8002762:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002764:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002766:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002768:	404c      	eors	r4, r1
	ror	r4, r5
 800276a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800276c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800276e:	405a      	eors	r2, r3
	ror	r2, r6
 8002770:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002772:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002774:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002776:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002778:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800277a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800277c:	405a      	eors	r2, r3
	mov	r1, #25
 800277e:	2119      	movs	r1, #25
	ror	r2, r1
 8002780:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002782:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002784:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002786:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002788:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 800278a:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 800278c:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 800278e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002790:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002792:	404c      	eors	r4, r1
	ror	r4, r5
 8002794:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002796:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002798:	405a      	eors	r2, r3
	ror	r2, r6
 800279a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800279c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800279e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80027a0:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80027a2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027a4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80027a6:	405a      	eors	r2, r3
	mov	r1, #25
 80027a8:	2119      	movs	r1, #25
	ror	r2, r1
 80027aa:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 80027ac:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 80027ae:	4698      	mov	r8, r3
	mov	r11, r4
 80027b0:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 80027b2:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 80027b4:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 80027b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 80027b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027ba:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80027bc:	404c      	eors	r4, r1
	ror	r4, r5
 80027be:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027c0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80027c2:	405a      	eors	r2, r3
	ror	r2, r6
 80027c4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027c6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80027c8:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80027ca:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80027cc:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027ce:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80027d0:	405a      	eors	r2, r3
	mov	r1, #25
 80027d2:	2119      	movs	r1, #25
	ror	r2, r1
 80027d4:	41ca      	rors	r2, r1

	mov	r9, r3
 80027d6:	4699      	mov	r9, r3
	mov	r12, r4
 80027d8:	46a4      	mov	ip, r4

	//=======================================

	// Round 4
	//=======================================
	ldr	r1, [r0]
 80027da:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 80027dc:	4643      	mov	r3, r8
	mov	r4, r10
 80027de:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027e0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80027e2:	404c      	eors	r4, r1
	ror	r4, r5
 80027e4:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027e6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80027e8:	405a      	eors	r2, r3
	ror	r2, r6
 80027ea:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027ec:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80027ee:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80027f0:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80027f2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027f4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80027f6:	405a      	eors	r2, r3
	mov	r1, #25
 80027f8:	2119      	movs	r1, #25
	ror	r2, r1
 80027fa:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 80027fc:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 80027fe:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002800:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002802:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002804:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002806:	464b      	mov	r3, r9
	mov	r4, r11
 8002808:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800280a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800280c:	404c      	eors	r4, r1
	ror	r4, r5
 800280e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002810:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002812:	405a      	eors	r2, r3
	ror	r2, r6
 8002814:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002816:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002818:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800281a:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 800281c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800281e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002820:	405a      	eors	r2, r3
	mov	r1, #25
 8002822:	2119      	movs	r1, #25
	ror	r2, r1
 8002824:	41ca      	rors	r2, r1

	mov	r10, r2
 8002826:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002828:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 800282a:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 800282c:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 800282e:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002830:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002832:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002834:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002836:	404c      	eors	r4, r1
	ror	r4, r5
 8002838:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800283a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800283c:	405a      	eors	r2, r3
	ror	r2, r6
 800283e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002840:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002842:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002844:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002846:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002848:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800284a:	405a      	eors	r2, r3
	mov	r1, #25
 800284c:	2119      	movs	r1, #25
	ror	r2, r1
 800284e:	41ca      	rors	r2, r1

	mov	r9, r2
 8002850:	4691      	mov	r9, r2
	mov	r12, r3
 8002852:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002854:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002856:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002858:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 800285a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 800285c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800285e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002860:	404c      	eors	r4, r1
	ror	r4, r5
 8002862:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002864:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002866:	405a      	eors	r2, r3
	ror	r2, r6
 8002868:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800286a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800286c:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 800286e:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002870:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002872:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002874:	405a      	eors	r2, r3
	mov	r1, #25
 8002876:	2119      	movs	r1, #25
	ror	r2, r1
 8002878:	41ca      	rors	r2, r1

	mov	r8, r2
 800287a:	4690      	mov	r8, r2
	mov	r11, r3
 800287c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 800287e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002880:	4652      	mov	r2, sl
	mov	r3, r12
 8002882:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002884:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002886:	404c      	eors	r4, r1
	ror	r4, r5
 8002888:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800288a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800288c:	405a      	eors	r2, r3
	ror	r2, r6
 800288e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002890:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002892:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002894:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002896:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002898:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800289a:	405a      	eors	r2, r3
	mov	r1, #25
 800289c:	2119      	movs	r1, #25
	ror	r2, r1
 800289e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 80028a0:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 80028a2:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 80028a4:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 80028a6:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 80028a8:	464a      	mov	r2, r9
	mov	r3, r11
 80028aa:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 80028ac:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028ae:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80028b0:	404c      	eors	r4, r1
	ror	r4, r5
 80028b2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028b4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80028b6:	405a      	eors	r2, r3
	ror	r2, r6
 80028b8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028ba:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80028bc:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 80028be:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 80028c0:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028c2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80028c4:	405a      	eors	r2, r3
	mov	r1, #25
 80028c6:	2119      	movs	r1, #25
	ror	r2, r1
 80028c8:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 80028ca:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 80028cc:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 80028ce:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 80028d0:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 80028d2:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 80028d4:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 80028d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028d8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80028da:	404c      	eors	r4, r1
	ror	r4, r5
 80028dc:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028de:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80028e0:	405a      	eors	r2, r3
	ror	r2, r6
 80028e2:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028e4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80028e6:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80028e8:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80028ea:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028ec:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80028ee:	405a      	eors	r2, r3
	mov	r1, #25
 80028f0:	2119      	movs	r1, #25
	ror	r2, r1
 80028f2:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 80028f4:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 80028f6:	4698      	mov	r8, r3
	mov	r11, r4
 80028f8:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 80028fa:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 80028fc:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 80028fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002900:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002902:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002904:	404c      	eors	r4, r1
	ror	r4, r5
 8002906:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002908:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800290a:	405a      	eors	r2, r3
	ror	r2, r6
 800290c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800290e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002910:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002912:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002914:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002916:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002918:	405a      	eors	r2, r3
	mov	r1, #25
 800291a:	2119      	movs	r1, #25
	ror	r2, r1
 800291c:	41ca      	rors	r2, r1

	mov	r9, r3
 800291e:	4699      	mov	r9, r3
	mov	r12, r4
 8002920:	46a4      	mov	ip, r4

	//=======================================

	// Round 5
	//=======================================
	ldr	r1, [r0]
 8002922:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002924:	4643      	mov	r3, r8
	mov	r4, r10
 8002926:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002928:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800292a:	404c      	eors	r4, r1
	ror	r4, r5
 800292c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800292e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002930:	405a      	eors	r2, r3
	ror	r2, r6
 8002932:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002934:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002936:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002938:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 800293a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800293c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800293e:	405a      	eors	r2, r3
	mov	r1, #25
 8002940:	2119      	movs	r1, #25
	ror	r2, r1
 8002942:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002944:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002946:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002948:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 800294a:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 800294c:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 800294e:	464b      	mov	r3, r9
	mov	r4, r11
 8002950:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002952:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002954:	404c      	eors	r4, r1
	ror	r4, r5
 8002956:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002958:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800295a:	405a      	eors	r2, r3
	ror	r2, r6
 800295c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800295e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002960:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002962:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002964:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002966:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002968:	405a      	eors	r2, r3
	mov	r1, #25
 800296a:	2119      	movs	r1, #25
	ror	r2, r1
 800296c:	41ca      	rors	r2, r1

	mov	r10, r2
 800296e:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002970:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002972:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002974:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002976:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002978:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 800297a:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800297c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800297e:	404c      	eors	r4, r1
	ror	r4, r5
 8002980:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002982:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002984:	405a      	eors	r2, r3
	ror	r2, r6
 8002986:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002988:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800298a:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 800298c:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800298e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002990:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002992:	405a      	eors	r2, r3
	mov	r1, #25
 8002994:	2119      	movs	r1, #25
	ror	r2, r1
 8002996:	41ca      	rors	r2, r1

	mov	r9, r2
 8002998:	4691      	mov	r9, r2
	mov	r12, r3
 800299a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 800299c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 800299e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 80029a0:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 80029a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 80029a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029a6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80029a8:	404c      	eors	r4, r1
	ror	r4, r5
 80029aa:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029ac:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80029ae:	405a      	eors	r2, r3
	ror	r2, r6
 80029b0:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029b2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80029b4:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80029b6:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80029b8:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029ba:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80029bc:	405a      	eors	r2, r3
	mov	r1, #25
 80029be:	2119      	movs	r1, #25
	ror	r2, r1
 80029c0:	41ca      	rors	r2, r1

	mov	r8, r2
 80029c2:	4690      	mov	r8, r2
	mov	r11, r3
 80029c4:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 80029c6:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 80029c8:	4652      	mov	r2, sl
	mov	r3, r12
 80029ca:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029cc:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80029ce:	404c      	eors	r4, r1
	ror	r4, r5
 80029d0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029d2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80029d4:	405a      	eors	r2, r3
	ror	r2, r6
 80029d6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029d8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80029da:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80029dc:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80029de:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029e0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80029e2:	405a      	eors	r2, r3
	mov	r1, #25
 80029e4:	2119      	movs	r1, #25
	ror	r2, r1
 80029e6:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 80029e8:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 80029ea:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 80029ec:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 80029ee:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 80029f0:	464a      	mov	r2, r9
	mov	r3, r11
 80029f2:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 80029f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029f6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80029f8:	404c      	eors	r4, r1
	ror	r4, r5
 80029fa:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029fc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80029fe:	405a      	eors	r2, r3
	ror	r2, r6
 8002a00:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a02:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a04:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002a06:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002a08:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a0a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a0c:	405a      	eors	r2, r3
	mov	r1, #25
 8002a0e:	2119      	movs	r1, #25
	ror	r2, r1
 8002a10:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002a12:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002a14:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002a16:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002a18:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002a1a:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002a1c:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002a1e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a20:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a22:	404c      	eors	r4, r1
	ror	r4, r5
 8002a24:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a26:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002a28:	405a      	eors	r2, r3
	ror	r2, r6
 8002a2a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a2c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a2e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002a30:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002a32:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a34:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a36:	405a      	eors	r2, r3
	mov	r1, #25
 8002a38:	2119      	movs	r1, #25
	ror	r2, r1
 8002a3a:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002a3c:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002a3e:	4698      	mov	r8, r3
	mov	r11, r4
 8002a40:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002a42:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002a44:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002a46:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002a48:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a4a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a4c:	404c      	eors	r4, r1
	ror	r4, r5
 8002a4e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a50:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002a52:	405a      	eors	r2, r3
	ror	r2, r6
 8002a54:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a56:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a58:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002a5a:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002a5c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a5e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a60:	405a      	eors	r2, r3
	mov	r1, #25
 8002a62:	2119      	movs	r1, #25
	ror	r2, r1
 8002a64:	41ca      	rors	r2, r1

	mov	r9, r3
 8002a66:	4699      	mov	r9, r3
	mov	r12, r4
 8002a68:	46a4      	mov	ip, r4

	//=======================================

	// Round 6
	//=======================================
	ldr	r1, [r0]
 8002a6a:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002a6c:	4643      	mov	r3, r8
	mov	r4, r10
 8002a6e:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a70:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a72:	404c      	eors	r4, r1
	ror	r4, r5
 8002a74:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a76:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002a78:	405a      	eors	r2, r3
	ror	r2, r6
 8002a7a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a7c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a7e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002a80:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002a82:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a84:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a86:	405a      	eors	r2, r3
	mov	r1, #25
 8002a88:	2119      	movs	r1, #25
	ror	r2, r1
 8002a8a:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002a8c:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002a8e:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002a90:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002a92:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002a94:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002a96:	464b      	mov	r3, r9
	mov	r4, r11
 8002a98:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a9a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a9c:	404c      	eors	r4, r1
	ror	r4, r5
 8002a9e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002aa0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002aa2:	405a      	eors	r2, r3
	ror	r2, r6
 8002aa4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002aa6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002aa8:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002aaa:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002aac:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002aae:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ab0:	405a      	eors	r2, r3
	mov	r1, #25
 8002ab2:	2119      	movs	r1, #25
	ror	r2, r1
 8002ab4:	41ca      	rors	r2, r1

	mov	r10, r2
 8002ab6:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002ab8:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002aba:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002abc:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002abe:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002ac0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002ac2:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ac4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002ac6:	404c      	eors	r4, r1
	ror	r4, r5
 8002ac8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002aca:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002acc:	405a      	eors	r2, r3
	ror	r2, r6
 8002ace:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ad0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ad2:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002ad4:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002ad6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ad8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ada:	405a      	eors	r2, r3
	mov	r1, #25
 8002adc:	2119      	movs	r1, #25
	ror	r2, r1
 8002ade:	41ca      	rors	r2, r1

	mov	r9, r2
 8002ae0:	4691      	mov	r9, r2
	mov	r12, r3
 8002ae2:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002ae4:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002ae6:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002ae8:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002aea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002aec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002aee:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002af0:	404c      	eors	r4, r1
	ror	r4, r5
 8002af2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002af4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002af6:	405a      	eors	r2, r3
	ror	r2, r6
 8002af8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002afa:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002afc:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002afe:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002b00:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b02:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b04:	405a      	eors	r2, r3
	mov	r1, #25
 8002b06:	2119      	movs	r1, #25
	ror	r2, r1
 8002b08:	41ca      	rors	r2, r1

	mov	r8, r2
 8002b0a:	4690      	mov	r8, r2
	mov	r11, r3
 8002b0c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002b0e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002b10:	4652      	mov	r2, sl
	mov	r3, r12
 8002b12:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b14:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b16:	404c      	eors	r4, r1
	ror	r4, r5
 8002b18:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b1a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b1c:	405a      	eors	r2, r3
	ror	r2, r6
 8002b1e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b20:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002b22:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002b24:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002b26:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b28:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b2a:	405a      	eors	r2, r3
	mov	r1, #25
 8002b2c:	2119      	movs	r1, #25
	ror	r2, r1
 8002b2e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002b30:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002b32:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002b34:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002b36:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002b38:	464a      	mov	r2, r9
	mov	r3, r11
 8002b3a:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002b3c:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b3e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b40:	404c      	eors	r4, r1
	ror	r4, r5
 8002b42:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b44:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b46:	405a      	eors	r2, r3
	ror	r2, r6
 8002b48:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b4a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002b4c:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002b4e:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002b50:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b52:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b54:	405a      	eors	r2, r3
	mov	r1, #25
 8002b56:	2119      	movs	r1, #25
	ror	r2, r1
 8002b58:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002b5a:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002b5c:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002b5e:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002b60:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002b62:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002b64:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002b66:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b68:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b6a:	404c      	eors	r4, r1
	ror	r4, r5
 8002b6c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b6e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b70:	405a      	eors	r2, r3
	ror	r2, r6
 8002b72:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b74:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002b76:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002b78:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002b7a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b7c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b7e:	405a      	eors	r2, r3
	mov	r1, #25
 8002b80:	2119      	movs	r1, #25
	ror	r2, r1
 8002b82:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002b84:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002b86:	4698      	mov	r8, r3
	mov	r11, r4
 8002b88:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002b8a:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002b8c:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002b8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002b90:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b92:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b94:	404c      	eors	r4, r1
	ror	r4, r5
 8002b96:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b98:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b9a:	405a      	eors	r2, r3
	ror	r2, r6
 8002b9c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b9e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ba0:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002ba2:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002ba4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ba6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ba8:	405a      	eors	r2, r3
	mov	r1, #25
 8002baa:	2119      	movs	r1, #25
	ror	r2, r1
 8002bac:	41ca      	rors	r2, r1

	mov	r9, r3
 8002bae:	4699      	mov	r9, r3
	mov	r12, r4
 8002bb0:	46a4      	mov	ip, r4

	//=======================================

	// Round 7
	//=======================================
	ldr	r1, [r0]
 8002bb2:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002bb4:	4643      	mov	r3, r8
	mov	r4, r10
 8002bb6:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002bb8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002bba:	404c      	eors	r4, r1
	ror	r4, r5
 8002bbc:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002bbe:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002bc0:	405a      	eors	r2, r3
	ror	r2, r6
 8002bc2:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002bc4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002bc6:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002bc8:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002bca:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002bcc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002bce:	405a      	eors	r2, r3
	mov	r1, #25
 8002bd0:	2119      	movs	r1, #25
	ror	r2, r1
 8002bd2:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002bd4:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002bd6:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002bd8:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002bda:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002bdc:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002bde:	464b      	mov	r3, r9
	mov	r4, r11
 8002be0:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002be2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002be4:	404c      	eors	r4, r1
	ror	r4, r5
 8002be6:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002be8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002bea:	405a      	eors	r2, r3
	ror	r2, r6
 8002bec:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002bee:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002bf0:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002bf2:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002bf4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002bf6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002bf8:	405a      	eors	r2, r3
	mov	r1, #25
 8002bfa:	2119      	movs	r1, #25
	ror	r2, r1
 8002bfc:	41ca      	rors	r2, r1

	mov	r10, r2
 8002bfe:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002c00:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002c02:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002c04:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002c06:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002c08:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002c0a:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c0c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c0e:	404c      	eors	r4, r1
	ror	r4, r5
 8002c10:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c12:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c14:	405a      	eors	r2, r3
	ror	r2, r6
 8002c16:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c18:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c1a:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002c1c:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002c1e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c20:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c22:	405a      	eors	r2, r3
	mov	r1, #25
 8002c24:	2119      	movs	r1, #25
	ror	r2, r1
 8002c26:	41ca      	rors	r2, r1

	mov	r9, r2
 8002c28:	4691      	mov	r9, r2
	mov	r12, r3
 8002c2a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002c2c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002c2e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002c30:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002c32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002c34:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c36:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c38:	404c      	eors	r4, r1
	ror	r4, r5
 8002c3a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c3c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c3e:	405a      	eors	r2, r3
	ror	r2, r6
 8002c40:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c42:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c44:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002c46:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002c48:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c4a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c4c:	405a      	eors	r2, r3
	mov	r1, #25
 8002c4e:	2119      	movs	r1, #25
	ror	r2, r1
 8002c50:	41ca      	rors	r2, r1

	mov	r8, r2
 8002c52:	4690      	mov	r8, r2
	mov	r11, r3
 8002c54:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002c56:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002c58:	4652      	mov	r2, sl
	mov	r3, r12
 8002c5a:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c5c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c5e:	404c      	eors	r4, r1
	ror	r4, r5
 8002c60:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c62:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c64:	405a      	eors	r2, r3
	ror	r2, r6
 8002c66:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c68:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c6a:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002c6c:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002c6e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c70:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c72:	405a      	eors	r2, r3
	mov	r1, #25
 8002c74:	2119      	movs	r1, #25
	ror	r2, r1
 8002c76:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002c78:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002c7a:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002c7c:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002c7e:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002c80:	464a      	mov	r2, r9
	mov	r3, r11
 8002c82:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002c84:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c86:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c88:	404c      	eors	r4, r1
	ror	r4, r5
 8002c8a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c8c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c8e:	405a      	eors	r2, r3
	ror	r2, r6
 8002c90:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c92:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c94:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002c96:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002c98:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c9a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c9c:	405a      	eors	r2, r3
	mov	r1, #25
 8002c9e:	2119      	movs	r1, #25
	ror	r2, r1
 8002ca0:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002ca2:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002ca4:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002ca6:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002ca8:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002caa:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002cac:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002cae:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002cb0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002cb2:	404c      	eors	r4, r1
	ror	r4, r5
 8002cb4:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002cb6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002cb8:	405a      	eors	r2, r3
	ror	r2, r6
 8002cba:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002cbc:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002cbe:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002cc0:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002cc2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002cc4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002cc6:	405a      	eors	r2, r3
	mov	r1, #25
 8002cc8:	2119      	movs	r1, #25
	ror	r2, r1
 8002cca:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002ccc:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002cce:	4698      	mov	r8, r3
	mov	r11, r4
 8002cd0:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002cd2:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002cd4:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002cd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002cd8:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002cda:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002cdc:	404c      	eors	r4, r1
	ror	r4, r5
 8002cde:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ce0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ce2:	405a      	eors	r2, r3
	ror	r2, r6
 8002ce4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ce6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ce8:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002cea:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002cec:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002cee:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002cf0:	405a      	eors	r2, r3
	mov	r1, #25
 8002cf2:	2119      	movs	r1, #25
	ror	r2, r1
 8002cf4:	41ca      	rors	r2, r1

	mov	r9, r3
 8002cf6:	4699      	mov	r9, r3
	mov	r12, r4
 8002cf8:	46a4      	mov	ip, r4

	//=======================================

	// Round 8
	//=======================================
	ldr	r1, [r0]
 8002cfa:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002cfc:	4643      	mov	r3, r8
	mov	r4, r10
 8002cfe:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d00:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d02:	404c      	eors	r4, r1
	ror	r4, r5
 8002d04:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d06:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d08:	405a      	eors	r2, r3
	ror	r2, r6
 8002d0a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d0c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d0e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002d10:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002d12:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d14:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d16:	405a      	eors	r2, r3
	mov	r1, #25
 8002d18:	2119      	movs	r1, #25
	ror	r2, r1
 8002d1a:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002d1c:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002d1e:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002d20:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002d22:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002d24:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002d26:	464b      	mov	r3, r9
	mov	r4, r11
 8002d28:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d2a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d2c:	404c      	eors	r4, r1
	ror	r4, r5
 8002d2e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d30:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d32:	405a      	eors	r2, r3
	ror	r2, r6
 8002d34:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d36:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d38:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002d3a:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002d3c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d3e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d40:	405a      	eors	r2, r3
	mov	r1, #25
 8002d42:	2119      	movs	r1, #25
	ror	r2, r1
 8002d44:	41ca      	rors	r2, r1

	mov	r10, r2
 8002d46:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002d48:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002d4a:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002d4c:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002d4e:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002d50:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002d52:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d54:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d56:	404c      	eors	r4, r1
	ror	r4, r5
 8002d58:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d5a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d5c:	405a      	eors	r2, r3
	ror	r2, r6
 8002d5e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d60:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d62:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002d64:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002d66:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d68:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d6a:	405a      	eors	r2, r3
	mov	r1, #25
 8002d6c:	2119      	movs	r1, #25
	ror	r2, r1
 8002d6e:	41ca      	rors	r2, r1

	mov	r9, r2
 8002d70:	4691      	mov	r9, r2
	mov	r12, r3
 8002d72:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002d74:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002d76:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002d78:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002d7c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d7e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d80:	404c      	eors	r4, r1
	ror	r4, r5
 8002d82:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d84:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d86:	405a      	eors	r2, r3
	ror	r2, r6
 8002d88:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d8a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d8c:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002d8e:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002d90:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d92:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d94:	405a      	eors	r2, r3
	mov	r1, #25
 8002d96:	2119      	movs	r1, #25
	ror	r2, r1
 8002d98:	41ca      	rors	r2, r1

	mov	r8, r2
 8002d9a:	4690      	mov	r8, r2
	mov	r11, r3
 8002d9c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002d9e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002da0:	4652      	mov	r2, sl
	mov	r3, r12
 8002da2:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002da4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002da6:	404c      	eors	r4, r1
	ror	r4, r5
 8002da8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002daa:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002dac:	405a      	eors	r2, r3
	ror	r2, r6
 8002dae:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002db0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002db2:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002db4:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002db6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002db8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002dba:	405a      	eors	r2, r3
	mov	r1, #25
 8002dbc:	2119      	movs	r1, #25
	ror	r2, r1
 8002dbe:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002dc0:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002dc2:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002dc4:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002dc6:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002dc8:	464a      	mov	r2, r9
	mov	r3, r11
 8002dca:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002dcc:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002dce:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002dd0:	404c      	eors	r4, r1
	ror	r4, r5
 8002dd2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002dd4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002dd6:	405a      	eors	r2, r3
	ror	r2, r6
 8002dd8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002dda:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ddc:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002dde:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002de0:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002de2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002de4:	405a      	eors	r2, r3
	mov	r1, #25
 8002de6:	2119      	movs	r1, #25
	ror	r2, r1
 8002de8:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002dea:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002dec:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002dee:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002df0:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002df2:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002df4:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002df6:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002df8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002dfa:	404c      	eors	r4, r1
	ror	r4, r5
 8002dfc:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002dfe:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e00:	405a      	eors	r2, r3
	ror	r2, r6
 8002e02:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e04:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e06:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002e08:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002e0a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e0c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e0e:	405a      	eors	r2, r3
	mov	r1, #25
 8002e10:	2119      	movs	r1, #25
	ror	r2, r1
 8002e12:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002e14:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002e16:	4698      	mov	r8, r3
	mov	r11, r4
 8002e18:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002e1a:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002e1c:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002e1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002e20:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e22:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e24:	404c      	eors	r4, r1
	ror	r4, r5
 8002e26:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e28:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e2a:	405a      	eors	r2, r3
	ror	r2, r6
 8002e2c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e2e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e30:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002e32:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002e34:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e36:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e38:	405a      	eors	r2, r3
	mov	r1, #25
 8002e3a:	2119      	movs	r1, #25
	ror	r2, r1
 8002e3c:	41ca      	rors	r2, r1

	mov	r9, r3
 8002e3e:	4699      	mov	r9, r3
	mov	r12, r4
 8002e40:	46a4      	mov	ip, r4

	//=======================================

	// Round 9
	//=======================================
	ldr	r1, [r0]
 8002e42:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002e44:	4643      	mov	r3, r8
	mov	r4, r10
 8002e46:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e48:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e4a:	404c      	eors	r4, r1
	ror	r4, r5
 8002e4c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e4e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e50:	405a      	eors	r2, r3
	ror	r2, r6
 8002e52:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e54:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e56:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002e58:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002e5a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e5c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e5e:	405a      	eors	r2, r3
	mov	r1, #25
 8002e60:	2119      	movs	r1, #25
	ror	r2, r1
 8002e62:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002e64:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002e66:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002e68:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002e6a:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002e6c:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002e6e:	464b      	mov	r3, r9
	mov	r4, r11
 8002e70:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e72:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e74:	404c      	eors	r4, r1
	ror	r4, r5
 8002e76:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e78:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e7a:	405a      	eors	r2, r3
	ror	r2, r6
 8002e7c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e7e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e80:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002e82:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002e84:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e86:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e88:	405a      	eors	r2, r3
	mov	r1, #25
 8002e8a:	2119      	movs	r1, #25
	ror	r2, r1
 8002e8c:	41ca      	rors	r2, r1

	mov	r10, r2
 8002e8e:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002e90:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002e92:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002e94:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002e96:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002e9a:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e9c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e9e:	404c      	eors	r4, r1
	ror	r4, r5
 8002ea0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ea2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ea4:	405a      	eors	r2, r3
	ror	r2, r6
 8002ea6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ea8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002eaa:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002eac:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002eae:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002eb0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002eb2:	405a      	eors	r2, r3
	mov	r1, #25
 8002eb4:	2119      	movs	r1, #25
	ror	r2, r1
 8002eb6:	41ca      	rors	r2, r1

	mov	r9, r2
 8002eb8:	4691      	mov	r9, r2
	mov	r12, r3
 8002eba:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002ebc:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002ebe:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002ec0:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002ec2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002ec4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ec6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002ec8:	404c      	eors	r4, r1
	ror	r4, r5
 8002eca:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ecc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ece:	405a      	eors	r2, r3
	ror	r2, r6
 8002ed0:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ed2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ed4:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002ed6:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002ed8:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002eda:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002edc:	405a      	eors	r2, r3
	mov	r1, #25
 8002ede:	2119      	movs	r1, #25
	ror	r2, r1
 8002ee0:	41ca      	rors	r2, r1

	mov	r8, r2
 8002ee2:	4690      	mov	r8, r2
	mov	r11, r3
 8002ee4:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002ee6:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002ee8:	4652      	mov	r2, sl
	mov	r3, r12
 8002eea:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002eec:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002eee:	404c      	eors	r4, r1
	ror	r4, r5
 8002ef0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ef2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ef4:	405a      	eors	r2, r3
	ror	r2, r6
 8002ef6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ef8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002efa:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002efc:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002efe:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f00:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f02:	405a      	eors	r2, r3
	mov	r1, #25
 8002f04:	2119      	movs	r1, #25
	ror	r2, r1
 8002f06:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002f08:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002f0a:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002f0c:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002f0e:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002f10:	464a      	mov	r2, r9
	mov	r3, r11
 8002f12:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002f14:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f16:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f18:	404c      	eors	r4, r1
	ror	r4, r5
 8002f1a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f1c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f1e:	405a      	eors	r2, r3
	ror	r2, r6
 8002f20:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f22:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f24:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002f26:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002f28:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f2a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f2c:	405a      	eors	r2, r3
	mov	r1, #25
 8002f2e:	2119      	movs	r1, #25
	ror	r2, r1
 8002f30:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002f32:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002f34:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002f36:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002f38:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002f3a:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002f3c:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002f3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f40:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f42:	404c      	eors	r4, r1
	ror	r4, r5
 8002f44:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f46:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f48:	405a      	eors	r2, r3
	ror	r2, r6
 8002f4a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f4c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f4e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002f50:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002f52:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f54:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f56:	405a      	eors	r2, r3
	mov	r1, #25
 8002f58:	2119      	movs	r1, #25
	ror	r2, r1
 8002f5a:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002f5c:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002f5e:	4698      	mov	r8, r3
	mov	r11, r4
 8002f60:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002f62:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002f64:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002f66:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002f68:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f6a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f6c:	404c      	eors	r4, r1
	ror	r4, r5
 8002f6e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f70:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f72:	405a      	eors	r2, r3
	ror	r2, r6
 8002f74:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f76:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f78:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002f7a:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002f7c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f7e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f80:	405a      	eors	r2, r3
	mov	r1, #25
 8002f82:	2119      	movs	r1, #25
	ror	r2, r1
 8002f84:	41ca      	rors	r2, r1

	mov	r9, r3
 8002f86:	4699      	mov	r9, r3
	mov	r12, r4
 8002f88:	46a4      	mov	ip, r4

	//=======================================
	
	// Round 10
	//=======================================
	ldr	r1, [r0]
 8002f8a:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002f8c:	4643      	mov	r3, r8
	mov	r4, r10
 8002f8e:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f90:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f92:	404c      	eors	r4, r1
	ror	r4, r5
 8002f94:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f96:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f98:	405a      	eors	r2, r3
	ror	r2, r6
 8002f9a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f9c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f9e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002fa0:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002fa2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fa4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002fa6:	405a      	eors	r2, r3
	mov	r1, #25
 8002fa8:	2119      	movs	r1, #25
	ror	r2, r1
 8002faa:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002fac:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002fae:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002fb0:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002fb2:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002fb4:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002fb6:	464b      	mov	r3, r9
	mov	r4, r11
 8002fb8:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002fba:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002fbc:	404c      	eors	r4, r1
	ror	r4, r5
 8002fbe:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fc0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002fc2:	405a      	eors	r2, r3
	ror	r2, r6
 8002fc4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002fc6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002fc8:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002fca:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002fcc:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fce:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002fd0:	405a      	eors	r2, r3
	mov	r1, #25
 8002fd2:	2119      	movs	r1, #25
	ror	r2, r1
 8002fd4:	41ca      	rors	r2, r1

	mov	r10, r2
 8002fd6:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002fd8:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002fda:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002fdc:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002fde:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002fe0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002fe2:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002fe4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002fe6:	404c      	eors	r4, r1
	ror	r4, r5
 8002fe8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fea:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002fec:	405a      	eors	r2, r3
	ror	r2, r6
 8002fee:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ff0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ff2:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002ff4:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002ff6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ff8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ffa:	405a      	eors	r2, r3
	mov	r1, #25
 8002ffc:	2119      	movs	r1, #25
	ror	r2, r1
 8002ffe:	41ca      	rors	r2, r1

	mov	r9, r2
 8003000:	4691      	mov	r9, r2
	mov	r12, r3
 8003002:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8003004:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8003006:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8003008:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 800300a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 800300c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800300e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8003010:	404c      	eors	r4, r1
	ror	r4, r5
 8003012:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003014:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8003016:	405a      	eors	r2, r3
	ror	r2, r6
 8003018:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800301a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800301c:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 800301e:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8003020:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003022:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8003024:	405a      	eors	r2, r3
	mov	r1, #25
 8003026:	2119      	movs	r1, #25
	ror	r2, r1
 8003028:	41ca      	rors	r2, r1

	mov	r8, r2
 800302a:	4690      	mov	r8, r2
	mov	r11, r3
 800302c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 800302e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8003030:	4652      	mov	r2, sl
	mov	r3, r12
 8003032:	4663      	mov	r3, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003034:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8003036:	404c      	eors	r4, r1
	ror	r4, r5
 8003038:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800303a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800303c:	405a      	eors	r2, r3
	ror	r2, r6
 800303e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003040:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8003042:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8003044:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8003046:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003048:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800304a:	405a      	eors	r2, r3
	mov	r1, #25
 800304c:	2119      	movs	r1, #25
	ror	r2, r1
 800304e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8003050:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8003052:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8003054:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8003056:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8003058:	464a      	mov	r2, r9
	mov	r3, r11
 800305a:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 800305c:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800305e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8003060:	404c      	eors	r4, r1
	ror	r4, r5
 8003062:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003064:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8003066:	405a      	eors	r2, r3
	ror	r2, r6
 8003068:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800306a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800306c:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800306e:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8003070:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003072:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8003074:	405a      	eors	r2, r3
	mov	r1, #25
 8003076:	2119      	movs	r1, #25
	ror	r2, r1
 8003078:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 800307a:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 800307c:	62c3      	str	r3, [r0, #44]	; 0x2c
	str	r4, [r0, #48]
 800307e:	6304      	str	r4, [r0, #48]	; 0x30
	
	//=======================================

	ldr	r1, [r0, #8]
 8003080:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8003082:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8003084:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8003086:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003088:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800308a:	404c      	eors	r4, r1
	ror	r4, r5
 800308c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800308e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8003090:	405a      	eors	r2, r3
	ror	r2, r6
 8003092:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003094:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8003096:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8003098:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800309a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800309c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800309e:	405a      	eors	r2, r3
	mov	r1, #25
 80030a0:	2119      	movs	r1, #25
	ror	r2, r1
 80030a2:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 80030a4:	61c2      	str	r2, [r0, #28]
	str	r3, [r0, #32]
 80030a6:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #52]
 80030a8:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #12]
 80030aa:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 80030ac:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 80030ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 80030b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80030b2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80030b4:	404c      	eors	r4, r1
	ror	r4, r5
 80030b6:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80030b8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80030ba:	405a      	eors	r2, r3
	ror	r2, r6
 80030bc:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80030be:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80030c0:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80030c2:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80030c4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80030c6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80030c8:	405a      	eors	r2, r3
	mov	r1, #25
 80030ca:	2119      	movs	r1, #25
	ror	r2, r1
 80030cc:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 80030ce:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #36]
 80030d0:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #56]
 80030d2:	6384      	str	r4, [r0, #56]	; 0x38

	//=======================================

	// restore high registers
	pop {r3-r7}
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
	// Copy low to high registers
	mov	r8, r3
 80030d6:	4698      	mov	r8, r3
	mov	r9, r4
 80030d8:	46a1      	mov	r9, r4
	mov	r10, r5
 80030da:	46aa      	mov	sl, r5
	mov	r11, r6
 80030dc:	46b3      	mov	fp, r6
	mov	r12, r7
 80030de:	46bc      	mov	ip, r7

	pop {r4-r7}
 80030e0:	bcf0      	pop	{r4, r5, r6, r7}
	bx lr
 80030e2:	4770      	bx	lr

080030e4 <asm_add_and_store>:
@ 
.global asm_add_and_store
.func asm_add_and_store

asm_add_and_store:
	push {r4-r6}
 80030e4:	b470      	push	{r4, r5, r6}
	
	//=======================================
	ldr	r3, [r1]
 80030e6:	680b      	ldr	r3, [r1, #0]
	ldr	r4, [r2]
 80030e8:	6814      	ldr	r4, [r2, #0]
	
	ldr	r5, [r1, #4]
 80030ea:	684d      	ldr	r5, [r1, #4]
	ldr	r6, [r2, #4]
 80030ec:	6856      	ldr	r6, [r2, #4]
	
	add r3, r4
 80030ee:	191b      	adds	r3, r3, r4
	str	r3, [r0]
 80030f0:	6003      	str	r3, [r0, #0]

	ldr	r3, [r1, #8]
 80030f2:	688b      	ldr	r3, [r1, #8]
	ldr	r4, [r2, #8]
 80030f4:	6894      	ldr	r4, [r2, #8]

	add r5, r6
 80030f6:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #4]
 80030f8:	6045      	str	r5, [r0, #4]

	ldr	r5, [r1, #12]
 80030fa:	68cd      	ldr	r5, [r1, #12]
	ldr	r6, [r2, #12]
 80030fc:	68d6      	ldr	r6, [r2, #12]
	
	add r3, r4
 80030fe:	191b      	adds	r3, r3, r4
	str	r3, [r0, #8]
 8003100:	6083      	str	r3, [r0, #8]

	ldr	r3, [r1, #16]
 8003102:	690b      	ldr	r3, [r1, #16]
	ldr	r4, [r2, #16]
 8003104:	6914      	ldr	r4, [r2, #16]

	add r5, r6
 8003106:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #12]
 8003108:	60c5      	str	r5, [r0, #12]

	ldr	r5, [r1, #20]
 800310a:	694d      	ldr	r5, [r1, #20]
	ldr	r6, [r2, #20]
 800310c:	6956      	ldr	r6, [r2, #20]
	
	add r3, r4
 800310e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #16]
 8003110:	6103      	str	r3, [r0, #16]

	ldr	r3, [r1, #24]
 8003112:	698b      	ldr	r3, [r1, #24]
	ldr	r4, [r2, #24]
 8003114:	6994      	ldr	r4, [r2, #24]

	add r5, r6
 8003116:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #20]
 8003118:	6145      	str	r5, [r0, #20]

	ldr	r5, [r1, #28]
 800311a:	69cd      	ldr	r5, [r1, #28]
	ldr	r6, [r2, #28]
 800311c:	69d6      	ldr	r6, [r2, #28]
	
	add r3, r4
 800311e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #24]
 8003120:	6183      	str	r3, [r0, #24]

	ldr	r3, [r1, #32]
 8003122:	6a0b      	ldr	r3, [r1, #32]
	ldr	r4, [r2, #32]
 8003124:	6a14      	ldr	r4, [r2, #32]

	add r5, r6
 8003126:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #28]
 8003128:	61c5      	str	r5, [r0, #28]

	ldr	r5, [r1, #36]
 800312a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	ldr	r6, [r2, #36]
 800312c:	6a56      	ldr	r6, [r2, #36]	; 0x24
	
	add r3, r4
 800312e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #32]
 8003130:	6203      	str	r3, [r0, #32]

	ldr	r3, [r1, #40]
 8003132:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	ldr	r4, [r2, #40]
 8003134:	6a94      	ldr	r4, [r2, #40]	; 0x28

	add r5, r6
 8003136:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #36]
 8003138:	6245      	str	r5, [r0, #36]	; 0x24

	ldr	r5, [r1, #44]
 800313a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	ldr	r6, [r2, #44]
 800313c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	
	add r3, r4
 800313e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #40]
 8003140:	6283      	str	r3, [r0, #40]	; 0x28

	ldr	r3, [r1, #48]
 8003142:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	ldr	r4, [r2, #48]
 8003144:	6b14      	ldr	r4, [r2, #48]	; 0x30

	add r5, r6
 8003146:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #44]
 8003148:	62c5      	str	r5, [r0, #44]	; 0x2c

	ldr	r5, [r1, #52]
 800314a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
	ldr	r6, [r2, #52]
 800314c:	6b56      	ldr	r6, [r2, #52]	; 0x34
	
	add r3, r4
 800314e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #48]
 8003150:	6303      	str	r3, [r0, #48]	; 0x30

	ldr	r3, [r1, #56]
 8003152:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ldr	r4, [r2, #56]
 8003154:	6b94      	ldr	r4, [r2, #56]	; 0x38

	add r5, r6
 8003156:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #52]
 8003158:	6345      	str	r5, [r0, #52]	; 0x34

	ldr	r5, [r1, #60]
 800315a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
	ldr	r6, [r2, #60]
 800315c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
	
	add r3, r4
 800315e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #56]
 8003160:	6383      	str	r3, [r0, #56]	; 0x38

	ldr	r3, [r1, #64]
 8003162:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	ldr	r4, [r2, #64]
 8003164:	6c14      	ldr	r4, [r2, #64]	; 0x40

	add r5, r6
 8003166:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #60]
 8003168:	63c5      	str	r5, [r0, #60]	; 0x3c

	add r3, r4
 800316a:	191b      	adds	r3, r3, r4
	str	r3, [r0, #64]
 800316c:	6403      	str	r3, [r0, #64]	; 0x40
	
	//=======================================

	pop {r4-r6}
 800316e:	bc70      	pop	{r4, r5, r6}
	bx lr
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <asm_helprec_internal>:



asm_helprec_internal:

    push {r4-r7,lr}
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8003176:	4644      	mov	r4, r8
    mov r5,r10
 8003178:	4655      	mov	r5, sl
    mov r6,r11
 800317a:	465e      	mov	r6, fp
    mov r7,r12
 800317c:	4667      	mov	r7, ip
    push {r4-r7}
 800317e:	b4f0      	push	{r4, r5, r6, r7}
    mov r4,r9
 8003180:	464c      	mov	r4, r9
    mov r5,r14
 8003182:	4675      	mov	r5, lr
    push {r4,r5}
 8003184:	b430      	push	{r4, r5}


    mov r11,r2
 8003186:	4693      	mov	fp, r2

    
    mov r4,#1
 8003188:	2401      	movs	r4, #1
    and r1,r4
 800318a:	4021      	ands	r1, r4
    lsr r2,r1,#1
 800318c:	084a      	lsrs	r2, r1, #1


    mov r4,#3
 800318e:	2403      	movs	r4, #3
    lsl r4,#14
 8003190:	03a4      	lsls	r4, r4, #14
    add r4,#4
 8003192:	3404      	adds	r4, #4
    

    mul r1,r4
 8003194:	4361      	muls	r1, r4
    mul r2,r4
 8003196:	4362      	muls	r2, r4



    ldr r7,[r0]
 8003198:	6807      	ldr	r7, [r0, #0]
    uxth r6,r7
 800319a:	b2be      	uxth	r6, r7
    lsr r7,#16
 800319c:	0c3f      	lsrs	r7, r7, #16


    get_k_mov r6,r1,r12
 800319e:	00f6      	lsls	r6, r6, #3
 80031a0:	1876      	adds	r6, r6, r1
 80031a2:	232a      	movs	r3, #42	; 0x2a
 80031a4:	019c      	lsls	r4, r3, #6
 80031a6:	191b      	adds	r3, r3, r4
 80031a8:	4373      	muls	r3, r6
 80031aa:	0e5b      	lsrs	r3, r3, #25
 80031ac:	2403      	movs	r4, #3
 80031ae:	0324      	lsls	r4, r4, #12
 80031b0:	3401      	adds	r4, #1
 80031b2:	46a6      	mov	lr, r4
 80031b4:	435c      	muls	r4, r3
 80031b6:	1b34      	subs	r4, r6, r4
 80031b8:	4675      	mov	r5, lr
 80031ba:	3d01      	subs	r5, #1
 80031bc:	1b2c      	subs	r4, r5, r4
 80031be:	17e4      	asrs	r4, r4, #31
 80031c0:	1b1b      	subs	r3, r3, r4
 80031c2:	2401      	movs	r4, #1
 80031c4:	401c      	ands	r4, r3
 80031c6:	085d      	lsrs	r5, r3, #1
 80031c8:	1964      	adds	r4, r4, r5
 80031ca:	3b01      	subs	r3, #1
 80031cc:	2501      	movs	r5, #1
 80031ce:	401d      	ands	r5, r3
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	195b      	adds	r3, r3, r5
 80031d4:	4675      	mov	r5, lr
 80031d6:	006d      	lsls	r5, r5, #1
 80031d8:	4365      	muls	r5, r4
 80031da:	1b76      	subs	r6, r6, r5
 80031dc:	17f5      	asrs	r5, r6, #31
 80031de:	1976      	adds	r6, r6, r5
 80031e0:	406e      	eors	r6, r5
 80031e2:	46b4      	mov	ip, r6
 80031e4:	b418      	push	{r3, r4}
    get_k_mov r7,r2,r9
 80031e6:	00ff      	lsls	r7, r7, #3
 80031e8:	18bf      	adds	r7, r7, r2
 80031ea:	232a      	movs	r3, #42	; 0x2a
 80031ec:	019c      	lsls	r4, r3, #6
 80031ee:	191b      	adds	r3, r3, r4
 80031f0:	437b      	muls	r3, r7
 80031f2:	0e5b      	lsrs	r3, r3, #25
 80031f4:	2403      	movs	r4, #3
 80031f6:	0324      	lsls	r4, r4, #12
 80031f8:	3401      	adds	r4, #1
 80031fa:	46a6      	mov	lr, r4
 80031fc:	435c      	muls	r4, r3
 80031fe:	1b3c      	subs	r4, r7, r4
 8003200:	4675      	mov	r5, lr
 8003202:	3d01      	subs	r5, #1
 8003204:	1b2c      	subs	r4, r5, r4
 8003206:	17e4      	asrs	r4, r4, #31
 8003208:	1b1b      	subs	r3, r3, r4
 800320a:	2401      	movs	r4, #1
 800320c:	401c      	ands	r4, r3
 800320e:	085d      	lsrs	r5, r3, #1
 8003210:	1964      	adds	r4, r4, r5
 8003212:	3b01      	subs	r3, #1
 8003214:	2501      	movs	r5, #1
 8003216:	401d      	ands	r5, r3
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	195b      	adds	r3, r3, r5
 800321c:	4675      	mov	r5, lr
 800321e:	006d      	lsls	r5, r5, #1
 8003220:	4365      	muls	r5, r4
 8003222:	1b7f      	subs	r7, r7, r5
 8003224:	17fd      	asrs	r5, r7, #31
 8003226:	197f      	adds	r7, r7, r5
 8003228:	406f      	eors	r7, r5
 800322a:	46b9      	mov	r9, r7
 800322c:	b418      	push	{r3, r4}
    
  

    mov r7,#1
 800322e:	2701      	movs	r7, #1
    lsl r7,#9
 8003230:	027f      	lsls	r7, r7, #9
    ldr r7,[r0,r7]
 8003232:	59c7      	ldr	r7, [r0, r7]
    uxth r6,r7
 8003234:	b2be      	uxth	r6, r7
    lsr r7,#16
 8003236:	0c3f      	lsrs	r7, r7, #16

    get_k r6,r1,r12
 8003238:	00f6      	lsls	r6, r6, #3
 800323a:	1876      	adds	r6, r6, r1
 800323c:	232a      	movs	r3, #42	; 0x2a
 800323e:	019c      	lsls	r4, r3, #6
 8003240:	191b      	adds	r3, r3, r4
 8003242:	4373      	muls	r3, r6
 8003244:	0e5b      	lsrs	r3, r3, #25
 8003246:	2403      	movs	r4, #3
 8003248:	0324      	lsls	r4, r4, #12
 800324a:	3401      	adds	r4, #1
 800324c:	46a6      	mov	lr, r4
 800324e:	435c      	muls	r4, r3
 8003250:	1b34      	subs	r4, r6, r4
 8003252:	4675      	mov	r5, lr
 8003254:	3d01      	subs	r5, #1
 8003256:	1b2c      	subs	r4, r5, r4
 8003258:	17e4      	asrs	r4, r4, #31
 800325a:	1b1b      	subs	r3, r3, r4
 800325c:	2401      	movs	r4, #1
 800325e:	401c      	ands	r4, r3
 8003260:	085d      	lsrs	r5, r3, #1
 8003262:	1964      	adds	r4, r4, r5
 8003264:	3b01      	subs	r3, #1
 8003266:	2501      	movs	r5, #1
 8003268:	401d      	ands	r5, r3
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	195b      	adds	r3, r3, r5
 800326e:	4675      	mov	r5, lr
 8003270:	006d      	lsls	r5, r5, #1
 8003272:	4365      	muls	r5, r4
 8003274:	1b76      	subs	r6, r6, r5
 8003276:	17f5      	asrs	r5, r6, #31
 8003278:	1976      	adds	r6, r6, r5
 800327a:	406e      	eors	r6, r5
 800327c:	44b4      	add	ip, r6
 800327e:	b418      	push	{r3, r4}
    get_k r7,r2,r9
 8003280:	00ff      	lsls	r7, r7, #3
 8003282:	18bf      	adds	r7, r7, r2
 8003284:	232a      	movs	r3, #42	; 0x2a
 8003286:	019c      	lsls	r4, r3, #6
 8003288:	191b      	adds	r3, r3, r4
 800328a:	437b      	muls	r3, r7
 800328c:	0e5b      	lsrs	r3, r3, #25
 800328e:	2403      	movs	r4, #3
 8003290:	0324      	lsls	r4, r4, #12
 8003292:	3401      	adds	r4, #1
 8003294:	46a6      	mov	lr, r4
 8003296:	435c      	muls	r4, r3
 8003298:	1b3c      	subs	r4, r7, r4
 800329a:	4675      	mov	r5, lr
 800329c:	3d01      	subs	r5, #1
 800329e:	1b2c      	subs	r4, r5, r4
 80032a0:	17e4      	asrs	r4, r4, #31
 80032a2:	1b1b      	subs	r3, r3, r4
 80032a4:	2401      	movs	r4, #1
 80032a6:	401c      	ands	r4, r3
 80032a8:	085d      	lsrs	r5, r3, #1
 80032aa:	1964      	adds	r4, r4, r5
 80032ac:	3b01      	subs	r3, #1
 80032ae:	2501      	movs	r5, #1
 80032b0:	401d      	ands	r5, r3
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	195b      	adds	r3, r3, r5
 80032b6:	4675      	mov	r5, lr
 80032b8:	006d      	lsls	r5, r5, #1
 80032ba:	4365      	muls	r5, r4
 80032bc:	1b7f      	subs	r7, r7, r5
 80032be:	17fd      	asrs	r5, r7, #31
 80032c0:	197f      	adds	r7, r7, r5
 80032c2:	406f      	eors	r7, r5
 80032c4:	44b9      	add	r9, r7
 80032c6:	b418      	push	{r3, r4}


    mov r7,#1
 80032c8:	2701      	movs	r7, #1
    lsl r7,#10
 80032ca:	02bf      	lsls	r7, r7, #10
    ldr r7,[r0,r7]
 80032cc:	59c7      	ldr	r7, [r0, r7]


    uxth r6,r7
 80032ce:	b2be      	uxth	r6, r7
    lsr r7,#16
 80032d0:	0c3f      	lsrs	r7, r7, #16

    
    get_k r6,r1,r12
 80032d2:	00f6      	lsls	r6, r6, #3
 80032d4:	1876      	adds	r6, r6, r1
 80032d6:	232a      	movs	r3, #42	; 0x2a
 80032d8:	019c      	lsls	r4, r3, #6
 80032da:	191b      	adds	r3, r3, r4
 80032dc:	4373      	muls	r3, r6
 80032de:	0e5b      	lsrs	r3, r3, #25
 80032e0:	2403      	movs	r4, #3
 80032e2:	0324      	lsls	r4, r4, #12
 80032e4:	3401      	adds	r4, #1
 80032e6:	46a6      	mov	lr, r4
 80032e8:	435c      	muls	r4, r3
 80032ea:	1b34      	subs	r4, r6, r4
 80032ec:	4675      	mov	r5, lr
 80032ee:	3d01      	subs	r5, #1
 80032f0:	1b2c      	subs	r4, r5, r4
 80032f2:	17e4      	asrs	r4, r4, #31
 80032f4:	1b1b      	subs	r3, r3, r4
 80032f6:	2401      	movs	r4, #1
 80032f8:	401c      	ands	r4, r3
 80032fa:	085d      	lsrs	r5, r3, #1
 80032fc:	1964      	adds	r4, r4, r5
 80032fe:	3b01      	subs	r3, #1
 8003300:	2501      	movs	r5, #1
 8003302:	401d      	ands	r5, r3
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	195b      	adds	r3, r3, r5
 8003308:	4675      	mov	r5, lr
 800330a:	006d      	lsls	r5, r5, #1
 800330c:	4365      	muls	r5, r4
 800330e:	1b76      	subs	r6, r6, r5
 8003310:	17f5      	asrs	r5, r6, #31
 8003312:	1976      	adds	r6, r6, r5
 8003314:	406e      	eors	r6, r5
 8003316:	44b4      	add	ip, r6
 8003318:	b418      	push	{r3, r4}
    get_k r7,r2,r9
 800331a:	00ff      	lsls	r7, r7, #3
 800331c:	18bf      	adds	r7, r7, r2
 800331e:	232a      	movs	r3, #42	; 0x2a
 8003320:	019c      	lsls	r4, r3, #6
 8003322:	191b      	adds	r3, r3, r4
 8003324:	437b      	muls	r3, r7
 8003326:	0e5b      	lsrs	r3, r3, #25
 8003328:	2403      	movs	r4, #3
 800332a:	0324      	lsls	r4, r4, #12
 800332c:	3401      	adds	r4, #1
 800332e:	46a6      	mov	lr, r4
 8003330:	435c      	muls	r4, r3
 8003332:	1b3c      	subs	r4, r7, r4
 8003334:	4675      	mov	r5, lr
 8003336:	3d01      	subs	r5, #1
 8003338:	1b2c      	subs	r4, r5, r4
 800333a:	17e4      	asrs	r4, r4, #31
 800333c:	1b1b      	subs	r3, r3, r4
 800333e:	2401      	movs	r4, #1
 8003340:	401c      	ands	r4, r3
 8003342:	085d      	lsrs	r5, r3, #1
 8003344:	1964      	adds	r4, r4, r5
 8003346:	3b01      	subs	r3, #1
 8003348:	2501      	movs	r5, #1
 800334a:	401d      	ands	r5, r3
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	195b      	adds	r3, r3, r5
 8003350:	4675      	mov	r5, lr
 8003352:	006d      	lsls	r5, r5, #1
 8003354:	4365      	muls	r5, r4
 8003356:	1b7f      	subs	r7, r7, r5
 8003358:	17fd      	asrs	r5, r7, #31
 800335a:	197f      	adds	r7, r7, r5
 800335c:	406f      	eors	r7, r5
 800335e:	44b9      	add	r9, r7
 8003360:	b418      	push	{r3, r4}


    mov r7,#1
 8003362:	2701      	movs	r7, #1
    lsl r7,#9
 8003364:	027f      	lsls	r7, r7, #9
    lsl r5,r7,#1
 8003366:	007d      	lsls	r5, r7, #1
    add r7,r5
 8003368:	197f      	adds	r7, r7, r5
    ldr r7,[r0,r7]
 800336a:	59c7      	ldr	r7, [r0, r7]
    uxth r6,r7
 800336c:	b2be      	uxth	r6, r7
    lsr r7,#16
 800336e:	0c3f      	lsrs	r7, r7, #16


    lsl r6,#3
 8003370:	00f6      	lsls	r6, r6, #3
    add r6,r1
 8003372:	1876      	adds	r6, r6, r1
    f r6        @r3,r4
 8003374:	232a      	movs	r3, #42	; 0x2a
 8003376:	019c      	lsls	r4, r3, #6
 8003378:	191b      	adds	r3, r3, r4
 800337a:	4373      	muls	r3, r6
 800337c:	0e5b      	lsrs	r3, r3, #25
 800337e:	2403      	movs	r4, #3
 8003380:	0324      	lsls	r4, r4, #12
 8003382:	3401      	adds	r4, #1
 8003384:	46a6      	mov	lr, r4
 8003386:	435c      	muls	r4, r3
 8003388:	1b34      	subs	r4, r6, r4
 800338a:	4675      	mov	r5, lr
 800338c:	3d01      	subs	r5, #1
 800338e:	1b2c      	subs	r4, r5, r4
 8003390:	17e4      	asrs	r4, r4, #31
 8003392:	1b1b      	subs	r3, r3, r4
 8003394:	2401      	movs	r4, #1
 8003396:	401c      	ands	r4, r3
 8003398:	085d      	lsrs	r5, r3, #1
 800339a:	1964      	adds	r4, r4, r5
 800339c:	3b01      	subs	r3, #1
 800339e:	2501      	movs	r5, #1
 80033a0:	401d      	ands	r5, r3
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	195b      	adds	r3, r3, r5
 80033a6:	4675      	mov	r5, lr
 80033a8:	006d      	lsls	r5, r5, #1
 80033aa:	4365      	muls	r5, r4
 80033ac:	1b76      	subs	r6, r6, r5
 80033ae:	17f5      	asrs	r5, r6, #31
 80033b0:	1976      	adds	r6, r6, r5
 80033b2:	406e      	eors	r6, r5
    add r6,r12
 80033b4:	4466      	add	r6, ip

    mov r5,#3
 80033b6:	2503      	movs	r5, #3
    lsl r5,#13
 80033b8:	036d      	lsls	r5, r5, #13
    add r5,#2
 80033ba:	3502      	adds	r5, #2
    
    sub r5,#1
 80033bc:	3d01      	subs	r5, #1
    sub r6,r5,r6
 80033be:	1bae      	subs	r6, r5, r6
    
    asr r6,#31
 80033c0:	17f6      	asrs	r6, r6, #31

    and r3,r6
 80033c2:	4033      	ands	r3, r6
    mvn r5,r6
 80033c4:	43f5      	mvns	r5, r6
    and r4,r5
 80033c6:	402c      	ands	r4, r5

    eor r3,r4 
 80033c8:	4063      	eors	r3, r4


    neg r4,r3
 80033ca:	425c      	negs	r4, r3
    mov r8,r4
 80033cc:	46a0      	mov	r8, r4



    lsl r3,#1
 80033ce:	005b      	lsls	r3, r3, #1
    sub r3,r6
 80033d0:	1b9b      	subs	r3, r3, r6

    mov r4,#3
 80033d2:	2403      	movs	r4, #3
    and r3,r4
 80033d4:	4023      	ands	r3, r4


    mov r1,r3
 80033d6:	1c19      	adds	r1, r3, #0


    lsl r7,#3
 80033d8:	00ff      	lsls	r7, r7, #3
    add r7,r2
 80033da:	18bf      	adds	r7, r7, r2
    f r7    @r3,r4
 80033dc:	232a      	movs	r3, #42	; 0x2a
 80033de:	019c      	lsls	r4, r3, #6
 80033e0:	191b      	adds	r3, r3, r4
 80033e2:	437b      	muls	r3, r7
 80033e4:	0e5b      	lsrs	r3, r3, #25
 80033e6:	2403      	movs	r4, #3
 80033e8:	0324      	lsls	r4, r4, #12
 80033ea:	3401      	adds	r4, #1
 80033ec:	46a6      	mov	lr, r4
 80033ee:	435c      	muls	r4, r3
 80033f0:	1b3c      	subs	r4, r7, r4
 80033f2:	4675      	mov	r5, lr
 80033f4:	3d01      	subs	r5, #1
 80033f6:	1b2c      	subs	r4, r5, r4
 80033f8:	17e4      	asrs	r4, r4, #31
 80033fa:	1b1b      	subs	r3, r3, r4
 80033fc:	2401      	movs	r4, #1
 80033fe:	401c      	ands	r4, r3
 8003400:	085d      	lsrs	r5, r3, #1
 8003402:	1964      	adds	r4, r4, r5
 8003404:	3b01      	subs	r3, #1
 8003406:	2501      	movs	r5, #1
 8003408:	401d      	ands	r5, r3
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	195b      	adds	r3, r3, r5
 800340e:	4675      	mov	r5, lr
 8003410:	006d      	lsls	r5, r5, #1
 8003412:	4365      	muls	r5, r4
 8003414:	1b7f      	subs	r7, r7, r5
 8003416:	17fd      	asrs	r5, r7, #31
 8003418:	197f      	adds	r7, r7, r5
 800341a:	406f      	eors	r7, r5
    add r7,r9
 800341c:	444f      	add	r7, r9
 
    mvn r5,r6
 800341e:	43f5      	mvns	r5, r6

    mov r0,#3
 8003420:	2003      	movs	r0, #3
    lsl r0,#13
 8003422:	0340      	lsls	r0, r0, #13
    add r0,#2
 8003424:	3002      	adds	r0, #2


    add r7,#1
 8003426:	3701      	adds	r7, #1
    sub r7,r0,r7
 8003428:	1bc7      	subs	r7, r0, r7
    asr r7,#31
 800342a:	17ff      	asrs	r7, r7, #31


    and r3,r7
 800342c:	403b      	ands	r3, r7
    mvn r0,r7
 800342e:	43f8      	mvns	r0, r7
    and r4,r0
 8003430:	4004      	ands	r4, r0
    eor r3,r4
 8003432:	4063      	eors	r3, r4

    neg r4,r3
 8003434:	425c      	negs	r4, r3
    mov r9,r4
 8003436:	46a1      	mov	r9, r4

    lsl r3,#1
 8003438:	005b      	lsls	r3, r3, #1
    sub r3,r7
 800343a:	1bdb      	subs	r3, r3, r7
    mov r4,#3
 800343c:	2403      	movs	r4, #3
    and r3,r4
 800343e:	4023      	ands	r3, r4
    lsl r3,#16
 8003440:	041b      	lsls	r3, r3, #16
    orr r3,r1
 8003442:	430b      	orrs	r3, r1


    mov r4,#1
 8003444:	2401      	movs	r4, #1
    lsl r4,#9
 8003446:	0264      	lsls	r4, r4, #9
    lsl r2,r4,#1
 8003448:	0062      	lsls	r2, r4, #1
    add r4,r2
 800344a:	18a4      	adds	r4, r4, r2

    mov r2,r11
 800344c:	465a      	mov	r2, fp

    str r3,[r2,r4]
 800344e:	5113      	str	r3, [r2, r4]



    calculate_store r7,r0,r9
 8003450:	bc18      	pop	{r3, r4}
 8003452:	403b      	ands	r3, r7
 8003454:	4004      	ands	r4, r0
 8003456:	4063      	eors	r3, r4
 8003458:	444b      	add	r3, r9
 800345a:	2403      	movs	r4, #3
 800345c:	4023      	ands	r3, r4
    lsl r1,r3,#16
 800345e:	0419      	lsls	r1, r3, #16
    calculate_store r6,r5,r8
 8003460:	bc18      	pop	{r3, r4}
 8003462:	4033      	ands	r3, r6
 8003464:	402c      	ands	r4, r5
 8003466:	4063      	eors	r3, r4
 8003468:	4443      	add	r3, r8
 800346a:	2403      	movs	r4, #3
 800346c:	4023      	ands	r3, r4
    orr r3,r1
 800346e:	430b      	orrs	r3, r1

    mov r4,#1
 8003470:	2401      	movs	r4, #1
    lsl r4,#10
 8003472:	02a4      	lsls	r4, r4, #10
    str r3,[r2,r4]
 8003474:	5113      	str	r3, [r2, r4]


    calculate_store r7,r0,r9
 8003476:	bc18      	pop	{r3, r4}
 8003478:	403b      	ands	r3, r7
 800347a:	4004      	ands	r4, r0
 800347c:	4063      	eors	r3, r4
 800347e:	444b      	add	r3, r9
 8003480:	2403      	movs	r4, #3
 8003482:	4023      	ands	r3, r4
    lsl r1,r3,#16    
 8003484:	0419      	lsls	r1, r3, #16
    calculate_store r6,r5,r8
 8003486:	bc18      	pop	{r3, r4}
 8003488:	4033      	ands	r3, r6
 800348a:	402c      	ands	r4, r5
 800348c:	4063      	eors	r3, r4
 800348e:	4443      	add	r3, r8
 8003490:	2403      	movs	r4, #3
 8003492:	4023      	ands	r3, r4
    orr r3,r1
 8003494:	430b      	orrs	r3, r1
    
    mov r4,#1
 8003496:	2401      	movs	r4, #1
    lsl r4,#9
 8003498:	0264      	lsls	r4, r4, #9
    str r3,[r2,r4]
 800349a:	5113      	str	r3, [r2, r4]


    calculate_store r7,r0,r9
 800349c:	bc18      	pop	{r3, r4}
 800349e:	403b      	ands	r3, r7
 80034a0:	4004      	ands	r4, r0
 80034a2:	4063      	eors	r3, r4
 80034a4:	444b      	add	r3, r9
 80034a6:	2403      	movs	r4, #3
 80034a8:	4023      	ands	r3, r4
    lsl r1,r3,#16
 80034aa:	0419      	lsls	r1, r3, #16
    calculate_store r6,r5,r8
 80034ac:	bc18      	pop	{r3, r4}
 80034ae:	4033      	ands	r3, r6
 80034b0:	402c      	ands	r4, r5
 80034b2:	4063      	eors	r3, r4
 80034b4:	4443      	add	r3, r8
 80034b6:	2403      	movs	r4, #3
 80034b8:	4023      	ands	r3, r4
    orr r3,r1
 80034ba:	430b      	orrs	r3, r1

    str r3,[r2]
 80034bc:	6013      	str	r3, [r2, #0]


    pop {r4,r5}
 80034be:	bc30      	pop	{r4, r5}
    mov r9,r4
 80034c0:	46a1      	mov	r9, r4
    mov r14,r5
 80034c2:	46ae      	mov	lr, r5
    pop {r4-r7}
 80034c4:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 80034c6:	46a0      	mov	r8, r4
    mov r10,r5
 80034c8:	46aa      	mov	sl, r5
    mov r11,r6
 80034ca:	46b3      	mov	fp, r6
    mov r12,r7
 80034cc:	46bc      	mov	ip, r7

    pop {r4-r7,pc}
 80034ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d0 <asm_8bits_key>:
    ADD \inout,r2
    EOR \inout,r2
.endm

asm_8bits_key:
    push {r4-r7,lr}
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80034d2:	4644      	mov	r4, r8
    mov r5,r10
 80034d4:	4655      	mov	r5, sl
    mov r6,r11
 80034d6:	465e      	mov	r6, fp
    mov r7,r12
 80034d8:	4667      	mov	r7, ip

    push {r4,r7}
 80034da:	b490      	push	{r4, r7}

    add r1,r3
 80034dc:	18c9      	adds	r1, r1, r3
    add r2,r3
 80034de:	18d2      	adds	r2, r2, r3


    
    mov r3,#3
 80034e0:	2303      	movs	r3, #3
    lsl r3,#9
 80034e2:	025b      	lsls	r3, r3, #9
 

    ldr r4,[r2,r3]
 80034e4:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 80034e6:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80034e8:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 80034ea:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 80034ec:	b2b7      	uxth	r7, r6
    lsr r6,#16
 80034ee:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 80034f0:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 80034f2:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 80034f4:	1936      	adds	r6, r6, r4
    add r7,r5
 80034f6:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 80034f8:	4643      	mov	r3, r8
    lsr r3,#4
 80034fa:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80034fc:	435e      	muls	r6, r3
    mul r7,r3
 80034fe:	435f      	muls	r7, r3



    ldr r4,[r1]
 8003500:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 8003502:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003504:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003506:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003508:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 800350a:	4444      	add	r4, r8
    add r5,r8
 800350c:	4445      	add	r5, r8

    sub r4,r6
 800350e:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003510:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003512:	4693      	mov	fp, r2
    g  r4
 8003514:	222a      	movs	r2, #42	; 0x2a
 8003516:	0193      	lsls	r3, r2, #6
 8003518:	18d2      	adds	r2, r2, r3
 800351a:	2303      	movs	r3, #3
 800351c:	031b      	lsls	r3, r3, #12
 800351e:	3301      	adds	r3, #1
 8003520:	00de      	lsls	r6, r3, #3
 8003522:	009f      	lsls	r7, r3, #2
 8003524:	4362      	muls	r2, r4
 8003526:	0ed3      	lsrs	r3, r2, #27
 8003528:	1c3a      	adds	r2, r7, #0
 800352a:	435a      	muls	r2, r3
 800352c:	1aa2      	subs	r2, r4, r2
 800352e:	1aba      	subs	r2, r7, r2
 8003530:	3a01      	subs	r2, #1
 8003532:	17d2      	asrs	r2, r2, #31
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	2201      	movs	r2, #1
 8003538:	401a      	ands	r2, r3
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	189b      	adds	r3, r3, r2
 800353e:	4373      	muls	r3, r6
 8003540:	1b1c      	subs	r4, r3, r4
 8003542:	17e2      	asrs	r2, r4, #31
 8003544:	18a4      	adds	r4, r4, r2
 8003546:	4054      	eors	r4, r2
    mov r10,r4
 8003548:	46a2      	mov	sl, r4
    g  r5
 800354a:	222a      	movs	r2, #42	; 0x2a
 800354c:	0193      	lsls	r3, r2, #6
 800354e:	18d2      	adds	r2, r2, r3
 8003550:	2303      	movs	r3, #3
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	3301      	adds	r3, #1
 8003556:	00de      	lsls	r6, r3, #3
 8003558:	009f      	lsls	r7, r3, #2
 800355a:	436a      	muls	r2, r5
 800355c:	0ed3      	lsrs	r3, r2, #27
 800355e:	1c3a      	adds	r2, r7, #0
 8003560:	435a      	muls	r2, r3
 8003562:	1aaa      	subs	r2, r5, r2
 8003564:	1aba      	subs	r2, r7, r2
 8003566:	3a01      	subs	r2, #1
 8003568:	17d2      	asrs	r2, r2, #31
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	2201      	movs	r2, #1
 800356e:	401a      	ands	r2, r3
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	189b      	adds	r3, r3, r2
 8003574:	4373      	muls	r3, r6
 8003576:	1b5d      	subs	r5, r3, r5
 8003578:	17ea      	asrs	r2, r5, #31
 800357a:	18ad      	adds	r5, r5, r2
 800357c:	4055      	eors	r5, r2
    mov r12,r5
 800357e:	46ac      	mov	ip, r5
    mov r2,r11
 8003580:	465a      	mov	r2, fp
    
    mov r3,#3
 8003582:	2303      	movs	r3, #3
    lsl r3,#9
 8003584:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003586:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003588:	b2a5      	uxth	r5, r4
    lsr r4,#16
 800358a:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 800358c:	2301      	movs	r3, #1
    lsl r3,#9
 800358e:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003590:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003592:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003594:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003596:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003598:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 800359a:	1936      	adds	r6, r6, r4
    add r7,r5
 800359c:	197f      	adds	r7, r7, r5

    mov r4,r3
 800359e:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 80035a0:	4643      	mov	r3, r8
    lsr r3,#4
 80035a2:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80035a4:	435e      	muls	r6, r3
    mul r7,r3
 80035a6:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 80035a8:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 80035aa:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80035ac:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80035ae:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80035b0:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 80035b2:	4444      	add	r4, r8
    add r5,r8
 80035b4:	4445      	add	r5, r8

    sub r4,r6
 80035b6:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 80035b8:	1bed      	subs	r5, r5, r7


    mov r11,r2
 80035ba:	4693      	mov	fp, r2
    g r4
 80035bc:	222a      	movs	r2, #42	; 0x2a
 80035be:	0193      	lsls	r3, r2, #6
 80035c0:	18d2      	adds	r2, r2, r3
 80035c2:	2303      	movs	r3, #3
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	3301      	adds	r3, #1
 80035c8:	00de      	lsls	r6, r3, #3
 80035ca:	009f      	lsls	r7, r3, #2
 80035cc:	4362      	muls	r2, r4
 80035ce:	0ed3      	lsrs	r3, r2, #27
 80035d0:	1c3a      	adds	r2, r7, #0
 80035d2:	435a      	muls	r2, r3
 80035d4:	1aa2      	subs	r2, r4, r2
 80035d6:	1aba      	subs	r2, r7, r2
 80035d8:	3a01      	subs	r2, #1
 80035da:	17d2      	asrs	r2, r2, #31
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	2201      	movs	r2, #1
 80035e0:	401a      	ands	r2, r3
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	4373      	muls	r3, r6
 80035e8:	1b1c      	subs	r4, r3, r4
 80035ea:	17e2      	asrs	r2, r4, #31
 80035ec:	18a4      	adds	r4, r4, r2
 80035ee:	4054      	eors	r4, r2
    mov r10,r4
 80035f0:	46a2      	mov	sl, r4
    g r5 
 80035f2:	222a      	movs	r2, #42	; 0x2a
 80035f4:	0193      	lsls	r3, r2, #6
 80035f6:	18d2      	adds	r2, r2, r3
 80035f8:	2303      	movs	r3, #3
 80035fa:	031b      	lsls	r3, r3, #12
 80035fc:	3301      	adds	r3, #1
 80035fe:	00de      	lsls	r6, r3, #3
 8003600:	009f      	lsls	r7, r3, #2
 8003602:	436a      	muls	r2, r5
 8003604:	0ed3      	lsrs	r3, r2, #27
 8003606:	1c3a      	adds	r2, r7, #0
 8003608:	435a      	muls	r2, r3
 800360a:	1aaa      	subs	r2, r5, r2
 800360c:	1aba      	subs	r2, r7, r2
 800360e:	3a01      	subs	r2, #1
 8003610:	17d2      	asrs	r2, r2, #31
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	2201      	movs	r2, #1
 8003616:	401a      	ands	r2, r3
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	189b      	adds	r3, r3, r2
 800361c:	4373      	muls	r3, r6
 800361e:	1b5d      	subs	r5, r3, r5
 8003620:	17ea      	asrs	r2, r5, #31
 8003622:	18ad      	adds	r5, r5, r2
 8003624:	4055      	eors	r5, r2
    mov r12,r5
 8003626:	46ac      	mov	ip, r5

    mov r2,r11       
 8003628:	465a      	mov	r2, fp


    mov r3,#3
 800362a:	2303      	movs	r3, #3
    lsl r3,#9
 800362c:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 800362e:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003630:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003632:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003634:	2301      	movs	r3, #1
    lsl r3,#10
 8003636:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 8003638:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 800363a:	b2b7      	uxth	r7, r6
    lsr r6,#16
 800363c:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 800363e:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003640:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003642:	1936      	adds	r6, r6, r4
    add r7,r5
 8003644:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003646:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003648:	4643      	mov	r3, r8
    lsr r3,#4
 800364a:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 800364c:	435e      	muls	r6, r3
    mul r7,r3
 800364e:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003650:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003652:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003654:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003656:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003658:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 800365a:	4444      	add	r4, r8
    add r5,r8
 800365c:	4445      	add	r5, r8

    sub r4,r6
 800365e:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003660:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003662:	4693      	mov	fp, r2

    g r4
 8003664:	222a      	movs	r2, #42	; 0x2a
 8003666:	0193      	lsls	r3, r2, #6
 8003668:	18d2      	adds	r2, r2, r3
 800366a:	2303      	movs	r3, #3
 800366c:	031b      	lsls	r3, r3, #12
 800366e:	3301      	adds	r3, #1
 8003670:	00de      	lsls	r6, r3, #3
 8003672:	009f      	lsls	r7, r3, #2
 8003674:	4362      	muls	r2, r4
 8003676:	0ed3      	lsrs	r3, r2, #27
 8003678:	1c3a      	adds	r2, r7, #0
 800367a:	435a      	muls	r2, r3
 800367c:	1aa2      	subs	r2, r4, r2
 800367e:	1aba      	subs	r2, r7, r2
 8003680:	3a01      	subs	r2, #1
 8003682:	17d2      	asrs	r2, r2, #31
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	2201      	movs	r2, #1
 8003688:	401a      	ands	r2, r3
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	189b      	adds	r3, r3, r2
 800368e:	4373      	muls	r3, r6
 8003690:	1b1c      	subs	r4, r3, r4
 8003692:	17e2      	asrs	r2, r4, #31
 8003694:	18a4      	adds	r4, r4, r2
 8003696:	4054      	eors	r4, r2
    add r10,r4
 8003698:	44a2      	add	sl, r4
    
    g r5
 800369a:	222a      	movs	r2, #42	; 0x2a
 800369c:	0193      	lsls	r3, r2, #6
 800369e:	18d2      	adds	r2, r2, r3
 80036a0:	2303      	movs	r3, #3
 80036a2:	031b      	lsls	r3, r3, #12
 80036a4:	3301      	adds	r3, #1
 80036a6:	00de      	lsls	r6, r3, #3
 80036a8:	009f      	lsls	r7, r3, #2
 80036aa:	436a      	muls	r2, r5
 80036ac:	0ed3      	lsrs	r3, r2, #27
 80036ae:	1c3a      	adds	r2, r7, #0
 80036b0:	435a      	muls	r2, r3
 80036b2:	1aaa      	subs	r2, r5, r2
 80036b4:	1aba      	subs	r2, r7, r2
 80036b6:	3a01      	subs	r2, #1
 80036b8:	17d2      	asrs	r2, r2, #31
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	2201      	movs	r2, #1
 80036be:	401a      	ands	r2, r3
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	4373      	muls	r3, r6
 80036c6:	1b5d      	subs	r5, r3, r5
 80036c8:	17ea      	asrs	r2, r5, #31
 80036ca:	18ad      	adds	r5, r5, r2
 80036cc:	4055      	eors	r5, r2
    add r12,r5
 80036ce:	44ac      	add	ip, r5

    mov r2,r11  
 80036d0:	465a      	mov	r2, fp

    mov r3,#3
 80036d2:	2303      	movs	r3, #3
    lsl r3,#9
 80036d4:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 80036d6:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 80036d8:	b2b7      	uxth	r7, r6
    lsr r6,#16
 80036da:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 80036dc:	4644      	mov	r4, r8
    lsr r4,#4
 80036de:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 80036e0:	4366      	muls	r6, r4
    mul r7,r4
 80036e2:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 80036e4:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 80036e6:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80036e8:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80036ea:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80036ec:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 80036ee:	4444      	add	r4, r8
    add r5,r8
 80036f0:	4445      	add	r5, r8

    sub r4,r6
 80036f2:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 80036f4:	1bed      	subs	r5, r5, r7

    mov r11,r2
 80036f6:	4693      	mov	fp, r2

    g r4 
 80036f8:	222a      	movs	r2, #42	; 0x2a
 80036fa:	0193      	lsls	r3, r2, #6
 80036fc:	18d2      	adds	r2, r2, r3
 80036fe:	2303      	movs	r3, #3
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	3301      	adds	r3, #1
 8003704:	00de      	lsls	r6, r3, #3
 8003706:	009f      	lsls	r7, r3, #2
 8003708:	4362      	muls	r2, r4
 800370a:	0ed3      	lsrs	r3, r2, #27
 800370c:	1c3a      	adds	r2, r7, #0
 800370e:	435a      	muls	r2, r3
 8003710:	1aa2      	subs	r2, r4, r2
 8003712:	1aba      	subs	r2, r7, r2
 8003714:	3a01      	subs	r2, #1
 8003716:	17d2      	asrs	r2, r2, #31
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	2201      	movs	r2, #1
 800371c:	401a      	ands	r2, r3
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	189b      	adds	r3, r3, r2
 8003722:	4373      	muls	r3, r6
 8003724:	1b1c      	subs	r4, r3, r4
 8003726:	17e2      	asrs	r2, r4, #31
 8003728:	18a4      	adds	r4, r4, r2
 800372a:	4054      	eors	r4, r2
    add r10,r4
 800372c:	44a2      	add	sl, r4
    
    g r5
 800372e:	222a      	movs	r2, #42	; 0x2a
 8003730:	0193      	lsls	r3, r2, #6
 8003732:	18d2      	adds	r2, r2, r3
 8003734:	2303      	movs	r3, #3
 8003736:	031b      	lsls	r3, r3, #12
 8003738:	3301      	adds	r3, #1
 800373a:	00de      	lsls	r6, r3, #3
 800373c:	009f      	lsls	r7, r3, #2
 800373e:	436a      	muls	r2, r5
 8003740:	0ed3      	lsrs	r3, r2, #27
 8003742:	1c3a      	adds	r2, r7, #0
 8003744:	435a      	muls	r2, r3
 8003746:	1aaa      	subs	r2, r5, r2
 8003748:	1aba      	subs	r2, r7, r2
 800374a:	3a01      	subs	r2, #1
 800374c:	17d2      	asrs	r2, r2, #31
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	2201      	movs	r2, #1
 8003752:	401a      	ands	r2, r3
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	189b      	adds	r3, r3, r2
 8003758:	4373      	muls	r3, r6
 800375a:	1b5d      	subs	r5, r3, r5
 800375c:	17ea      	asrs	r2, r5, #31
 800375e:	18ad      	adds	r5, r5, r2
 8003760:	4055      	eors	r5, r2
    add r12,r5
 8003762:	44ac      	add	ip, r5
    mov r2,r11
 8003764:	465a      	mov	r2, fp

    mov r3,r8
 8003766:	4643      	mov	r3, r8
    lsr r3,#1
 8003768:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 800376a:	4654      	mov	r4, sl
    mov r5,r12
 800376c:	4665      	mov	r5, ip
    
    sub r4,r3
 800376e:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003770:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003772:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003774:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003776:	2301      	movs	r3, #1

    and r4,r3
 8003778:	401c      	ands	r4, r3
    lsl r4,r3
 800377a:	409c      	lsls	r4, r3
    and r5,r3
 800377c:	401d      	ands	r5, r3

    orr r5,r4
 800377e:	4325      	orrs	r5, r4
    push {r5}
 8003780:	b420      	push	{r5}


    add r1,#4
 8003782:	3104      	adds	r1, #4
    add r2,#4 
 8003784:	3204      	adds	r2, #4

    
    mov r3,#3
 8003786:	2303      	movs	r3, #3
    lsl r3,#9
 8003788:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 800378a:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 800378c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 800378e:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 8003790:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 8003792:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003794:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003796:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003798:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 800379a:	1936      	adds	r6, r6, r4
    add r7,r5
 800379c:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 800379e:	4643      	mov	r3, r8
    lsr r3,#4
 80037a0:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80037a2:	435e      	muls	r6, r3
    mul r7,r3
 80037a4:	435f      	muls	r7, r3



    ldr r4,[r1]
 80037a6:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 80037a8:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80037aa:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80037ac:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80037ae:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 80037b0:	4444      	add	r4, r8
    add r5,r8
 80037b2:	4445      	add	r5, r8

    sub r4,r6
 80037b4:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 80037b6:	1bed      	subs	r5, r5, r7
    
    mov r11,r2
 80037b8:	4693      	mov	fp, r2
    g r4
 80037ba:	222a      	movs	r2, #42	; 0x2a
 80037bc:	0193      	lsls	r3, r2, #6
 80037be:	18d2      	adds	r2, r2, r3
 80037c0:	2303      	movs	r3, #3
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	3301      	adds	r3, #1
 80037c6:	00de      	lsls	r6, r3, #3
 80037c8:	009f      	lsls	r7, r3, #2
 80037ca:	4362      	muls	r2, r4
 80037cc:	0ed3      	lsrs	r3, r2, #27
 80037ce:	1c3a      	adds	r2, r7, #0
 80037d0:	435a      	muls	r2, r3
 80037d2:	1aa2      	subs	r2, r4, r2
 80037d4:	1aba      	subs	r2, r7, r2
 80037d6:	3a01      	subs	r2, #1
 80037d8:	17d2      	asrs	r2, r2, #31
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	2201      	movs	r2, #1
 80037de:	401a      	ands	r2, r3
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	4373      	muls	r3, r6
 80037e6:	1b1c      	subs	r4, r3, r4
 80037e8:	17e2      	asrs	r2, r4, #31
 80037ea:	18a4      	adds	r4, r4, r2
 80037ec:	4054      	eors	r4, r2
    mov r10,r4
 80037ee:	46a2      	mov	sl, r4
    g r5
 80037f0:	222a      	movs	r2, #42	; 0x2a
 80037f2:	0193      	lsls	r3, r2, #6
 80037f4:	18d2      	adds	r2, r2, r3
 80037f6:	2303      	movs	r3, #3
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	3301      	adds	r3, #1
 80037fc:	00de      	lsls	r6, r3, #3
 80037fe:	009f      	lsls	r7, r3, #2
 8003800:	436a      	muls	r2, r5
 8003802:	0ed3      	lsrs	r3, r2, #27
 8003804:	1c3a      	adds	r2, r7, #0
 8003806:	435a      	muls	r2, r3
 8003808:	1aaa      	subs	r2, r5, r2
 800380a:	1aba      	subs	r2, r7, r2
 800380c:	3a01      	subs	r2, #1
 800380e:	17d2      	asrs	r2, r2, #31
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	2201      	movs	r2, #1
 8003814:	401a      	ands	r2, r3
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	189b      	adds	r3, r3, r2
 800381a:	4373      	muls	r3, r6
 800381c:	1b5d      	subs	r5, r3, r5
 800381e:	17ea      	asrs	r2, r5, #31
 8003820:	18ad      	adds	r5, r5, r2
 8003822:	4055      	eors	r5, r2
    mov r12,r5
 8003824:	46ac      	mov	ip, r5
    mov r2,r11
 8003826:	465a      	mov	r2, fp

    mov r3,#3
 8003828:	2303      	movs	r3, #3
    lsl r3,#9
 800382a:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 800382c:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 800382e:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003830:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003832:	2301      	movs	r3, #1
    lsl r3,#9
 8003834:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003836:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003838:	b2b7      	uxth	r7, r6
    lsr r6,#16
 800383a:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 800383c:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 800383e:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003840:	1936      	adds	r6, r6, r4
    add r7,r5
 8003842:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003844:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003846:	4643      	mov	r3, r8
    lsr r3,#4
 8003848:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 800384a:	435e      	muls	r6, r3
    mul r7,r3
 800384c:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 800384e:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003850:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003852:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003854:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003856:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003858:	4444      	add	r4, r8
    add r5,r8
 800385a:	4445      	add	r5, r8

    sub r4,r6
 800385c:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 800385e:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003860:	4693      	mov	fp, r2
    g r4
 8003862:	222a      	movs	r2, #42	; 0x2a
 8003864:	0193      	lsls	r3, r2, #6
 8003866:	18d2      	adds	r2, r2, r3
 8003868:	2303      	movs	r3, #3
 800386a:	031b      	lsls	r3, r3, #12
 800386c:	3301      	adds	r3, #1
 800386e:	00de      	lsls	r6, r3, #3
 8003870:	009f      	lsls	r7, r3, #2
 8003872:	4362      	muls	r2, r4
 8003874:	0ed3      	lsrs	r3, r2, #27
 8003876:	1c3a      	adds	r2, r7, #0
 8003878:	435a      	muls	r2, r3
 800387a:	1aa2      	subs	r2, r4, r2
 800387c:	1aba      	subs	r2, r7, r2
 800387e:	3a01      	subs	r2, #1
 8003880:	17d2      	asrs	r2, r2, #31
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	2201      	movs	r2, #1
 8003886:	401a      	ands	r2, r3
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	189b      	adds	r3, r3, r2
 800388c:	4373      	muls	r3, r6
 800388e:	1b1c      	subs	r4, r3, r4
 8003890:	17e2      	asrs	r2, r4, #31
 8003892:	18a4      	adds	r4, r4, r2
 8003894:	4054      	eors	r4, r2
    mov r10,r4
 8003896:	46a2      	mov	sl, r4
    g r5
 8003898:	222a      	movs	r2, #42	; 0x2a
 800389a:	0193      	lsls	r3, r2, #6
 800389c:	18d2      	adds	r2, r2, r3
 800389e:	2303      	movs	r3, #3
 80038a0:	031b      	lsls	r3, r3, #12
 80038a2:	3301      	adds	r3, #1
 80038a4:	00de      	lsls	r6, r3, #3
 80038a6:	009f      	lsls	r7, r3, #2
 80038a8:	436a      	muls	r2, r5
 80038aa:	0ed3      	lsrs	r3, r2, #27
 80038ac:	1c3a      	adds	r2, r7, #0
 80038ae:	435a      	muls	r2, r3
 80038b0:	1aaa      	subs	r2, r5, r2
 80038b2:	1aba      	subs	r2, r7, r2
 80038b4:	3a01      	subs	r2, #1
 80038b6:	17d2      	asrs	r2, r2, #31
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	2201      	movs	r2, #1
 80038bc:	401a      	ands	r2, r3
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	4373      	muls	r3, r6
 80038c4:	1b5d      	subs	r5, r3, r5
 80038c6:	17ea      	asrs	r2, r5, #31
 80038c8:	18ad      	adds	r5, r5, r2
 80038ca:	4055      	eors	r5, r2
    mov r12,r5
 80038cc:	46ac      	mov	ip, r5
    mov r2,r11
 80038ce:	465a      	mov	r2, fp

    mov r3,#3
 80038d0:	2303      	movs	r3, #3
    lsl r3,#9
 80038d2:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 80038d4:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 80038d6:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80038d8:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 80038da:	2301      	movs	r3, #1
    lsl r3,#10
 80038dc:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 80038de:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 80038e0:	b2b7      	uxth	r7, r6
    lsr r6,#16
 80038e2:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 80038e4:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 80038e6:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 80038e8:	1936      	adds	r6, r6, r4
    add r7,r5
 80038ea:	197f      	adds	r7, r7, r5

    mov r4,r3
 80038ec:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 80038ee:	4643      	mov	r3, r8
    lsr r3,#4
 80038f0:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80038f2:	435e      	muls	r6, r3
    mul r7,r3
 80038f4:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 80038f6:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 80038f8:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80038fa:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80038fc:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80038fe:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003900:	4444      	add	r4, r8
    add r5,r8
 8003902:	4445      	add	r5, r8

    sub r4,r6
 8003904:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003906:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003908:	4693      	mov	fp, r2
    g r4
 800390a:	222a      	movs	r2, #42	; 0x2a
 800390c:	0193      	lsls	r3, r2, #6
 800390e:	18d2      	adds	r2, r2, r3
 8003910:	2303      	movs	r3, #3
 8003912:	031b      	lsls	r3, r3, #12
 8003914:	3301      	adds	r3, #1
 8003916:	00de      	lsls	r6, r3, #3
 8003918:	009f      	lsls	r7, r3, #2
 800391a:	4362      	muls	r2, r4
 800391c:	0ed3      	lsrs	r3, r2, #27
 800391e:	1c3a      	adds	r2, r7, #0
 8003920:	435a      	muls	r2, r3
 8003922:	1aa2      	subs	r2, r4, r2
 8003924:	1aba      	subs	r2, r7, r2
 8003926:	3a01      	subs	r2, #1
 8003928:	17d2      	asrs	r2, r2, #31
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	2201      	movs	r2, #1
 800392e:	401a      	ands	r2, r3
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	189b      	adds	r3, r3, r2
 8003934:	4373      	muls	r3, r6
 8003936:	1b1c      	subs	r4, r3, r4
 8003938:	17e2      	asrs	r2, r4, #31
 800393a:	18a4      	adds	r4, r4, r2
 800393c:	4054      	eors	r4, r2
    add r10,r4
 800393e:	44a2      	add	sl, r4
    
    g r5
 8003940:	222a      	movs	r2, #42	; 0x2a
 8003942:	0193      	lsls	r3, r2, #6
 8003944:	18d2      	adds	r2, r2, r3
 8003946:	2303      	movs	r3, #3
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	3301      	adds	r3, #1
 800394c:	00de      	lsls	r6, r3, #3
 800394e:	009f      	lsls	r7, r3, #2
 8003950:	436a      	muls	r2, r5
 8003952:	0ed3      	lsrs	r3, r2, #27
 8003954:	1c3a      	adds	r2, r7, #0
 8003956:	435a      	muls	r2, r3
 8003958:	1aaa      	subs	r2, r5, r2
 800395a:	1aba      	subs	r2, r7, r2
 800395c:	3a01      	subs	r2, #1
 800395e:	17d2      	asrs	r2, r2, #31
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	2201      	movs	r2, #1
 8003964:	401a      	ands	r2, r3
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	189b      	adds	r3, r3, r2
 800396a:	4373      	muls	r3, r6
 800396c:	1b5d      	subs	r5, r3, r5
 800396e:	17ea      	asrs	r2, r5, #31
 8003970:	18ad      	adds	r5, r5, r2
 8003972:	4055      	eors	r5, r2
    add r12,r5
 8003974:	44ac      	add	ip, r5
    mov r2,r11    
 8003976:	465a      	mov	r2, fp

    mov r3,#3
 8003978:	2303      	movs	r3, #3
    lsl r3,#9
 800397a:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 800397c:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 800397e:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003980:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 8003982:	4644      	mov	r4, r8
    lsr r4,#4
 8003984:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 8003986:	4366      	muls	r6, r4
    mul r7,r4
 8003988:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 800398a:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 800398c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 800398e:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003990:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003992:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003994:	4444      	add	r4, r8
    add r5,r8
 8003996:	4445      	add	r5, r8

    sub r4,r6
 8003998:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 800399a:	1bed      	subs	r5, r5, r7

    mov r11,r2
 800399c:	4693      	mov	fp, r2


    g r4
 800399e:	222a      	movs	r2, #42	; 0x2a
 80039a0:	0193      	lsls	r3, r2, #6
 80039a2:	18d2      	adds	r2, r2, r3
 80039a4:	2303      	movs	r3, #3
 80039a6:	031b      	lsls	r3, r3, #12
 80039a8:	3301      	adds	r3, #1
 80039aa:	00de      	lsls	r6, r3, #3
 80039ac:	009f      	lsls	r7, r3, #2
 80039ae:	4362      	muls	r2, r4
 80039b0:	0ed3      	lsrs	r3, r2, #27
 80039b2:	1c3a      	adds	r2, r7, #0
 80039b4:	435a      	muls	r2, r3
 80039b6:	1aa2      	subs	r2, r4, r2
 80039b8:	1aba      	subs	r2, r7, r2
 80039ba:	3a01      	subs	r2, #1
 80039bc:	17d2      	asrs	r2, r2, #31
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	2201      	movs	r2, #1
 80039c2:	401a      	ands	r2, r3
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	4373      	muls	r3, r6
 80039ca:	1b1c      	subs	r4, r3, r4
 80039cc:	17e2      	asrs	r2, r4, #31
 80039ce:	18a4      	adds	r4, r4, r2
 80039d0:	4054      	eors	r4, r2
    add r10,r4
 80039d2:	44a2      	add	sl, r4
    

    g r5    
 80039d4:	222a      	movs	r2, #42	; 0x2a
 80039d6:	0193      	lsls	r3, r2, #6
 80039d8:	18d2      	adds	r2, r2, r3
 80039da:	2303      	movs	r3, #3
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	3301      	adds	r3, #1
 80039e0:	00de      	lsls	r6, r3, #3
 80039e2:	009f      	lsls	r7, r3, #2
 80039e4:	436a      	muls	r2, r5
 80039e6:	0ed3      	lsrs	r3, r2, #27
 80039e8:	1c3a      	adds	r2, r7, #0
 80039ea:	435a      	muls	r2, r3
 80039ec:	1aaa      	subs	r2, r5, r2
 80039ee:	1aba      	subs	r2, r7, r2
 80039f0:	3a01      	subs	r2, #1
 80039f2:	17d2      	asrs	r2, r2, #31
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	2201      	movs	r2, #1
 80039f8:	401a      	ands	r2, r3
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	4373      	muls	r3, r6
 8003a00:	1b5d      	subs	r5, r3, r5
 8003a02:	17ea      	asrs	r2, r5, #31
 8003a04:	18ad      	adds	r5, r5, r2
 8003a06:	4055      	eors	r5, r2
    add r12,r5
 8003a08:	44ac      	add	ip, r5
    mov r2,r11
 8003a0a:	465a      	mov	r2, fp

    mov r3,r8
 8003a0c:	4643      	mov	r3, r8
    lsr r3,#1
 8003a0e:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 8003a10:	4654      	mov	r4, sl
    mov r5,r12
 8003a12:	4665      	mov	r5, ip
    
    sub r4,r3
 8003a14:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003a16:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003a18:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003a1a:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003a1c:	2301      	movs	r3, #1

    and r4,r3
 8003a1e:	401c      	ands	r4, r3
    mov r3,#3
 8003a20:	2303      	movs	r3, #3
    lsl r4,r3
 8003a22:	409c      	lsls	r4, r3
    and r5,r3
 8003a24:	401d      	ands	r5, r3
    mov r3,#2
 8003a26:	2302      	movs	r3, #2
    lsl r5,r3
 8003a28:	409d      	lsls	r5, r3

    orr r5,r4
 8003a2a:	4325      	orrs	r5, r4
    pop {r4}
 8003a2c:	bc10      	pop	{r4}

    orr r5,r4
 8003a2e:	4325      	orrs	r5, r4
    push {r5}
 8003a30:	b420      	push	{r5}

    add r1,#4
 8003a32:	3104      	adds	r1, #4
    add r2,#4 
 8003a34:	3204      	adds	r2, #4


    mov r3,#3
 8003a36:	2303      	movs	r3, #3
    lsl r3,#9
 8003a38:	025b      	lsls	r3, r3, #9
 

    ldr r4,[r2,r3]
 8003a3a:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003a3c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003a3e:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 8003a40:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 8003a42:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003a44:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003a46:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003a48:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003a4a:	1936      	adds	r6, r6, r4
    add r7,r5
 8003a4c:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 8003a4e:	4643      	mov	r3, r8
    lsr r3,#4
 8003a50:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003a52:	435e      	muls	r6, r3
    mul r7,r3
 8003a54:	435f      	muls	r7, r3



    ldr r4,[r1]
 8003a56:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 8003a58:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003a5a:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003a5c:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003a5e:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003a60:	4444      	add	r4, r8
    add r5,r8
 8003a62:	4445      	add	r5, r8

    sub r4,r6
 8003a64:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003a66:	1bed      	subs	r5, r5, r7
    
    mov r11,r2
 8003a68:	4693      	mov	fp, r2
    g r4    
 8003a6a:	222a      	movs	r2, #42	; 0x2a
 8003a6c:	0193      	lsls	r3, r2, #6
 8003a6e:	18d2      	adds	r2, r2, r3
 8003a70:	2303      	movs	r3, #3
 8003a72:	031b      	lsls	r3, r3, #12
 8003a74:	3301      	adds	r3, #1
 8003a76:	00de      	lsls	r6, r3, #3
 8003a78:	009f      	lsls	r7, r3, #2
 8003a7a:	4362      	muls	r2, r4
 8003a7c:	0ed3      	lsrs	r3, r2, #27
 8003a7e:	1c3a      	adds	r2, r7, #0
 8003a80:	435a      	muls	r2, r3
 8003a82:	1aa2      	subs	r2, r4, r2
 8003a84:	1aba      	subs	r2, r7, r2
 8003a86:	3a01      	subs	r2, #1
 8003a88:	17d2      	asrs	r2, r2, #31
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	401a      	ands	r2, r3
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	4373      	muls	r3, r6
 8003a96:	1b1c      	subs	r4, r3, r4
 8003a98:	17e2      	asrs	r2, r4, #31
 8003a9a:	18a4      	adds	r4, r4, r2
 8003a9c:	4054      	eors	r4, r2
    mov r10,r4
 8003a9e:	46a2      	mov	sl, r4
    g r5
 8003aa0:	222a      	movs	r2, #42	; 0x2a
 8003aa2:	0193      	lsls	r3, r2, #6
 8003aa4:	18d2      	adds	r2, r2, r3
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	031b      	lsls	r3, r3, #12
 8003aaa:	3301      	adds	r3, #1
 8003aac:	00de      	lsls	r6, r3, #3
 8003aae:	009f      	lsls	r7, r3, #2
 8003ab0:	436a      	muls	r2, r5
 8003ab2:	0ed3      	lsrs	r3, r2, #27
 8003ab4:	1c3a      	adds	r2, r7, #0
 8003ab6:	435a      	muls	r2, r3
 8003ab8:	1aaa      	subs	r2, r5, r2
 8003aba:	1aba      	subs	r2, r7, r2
 8003abc:	3a01      	subs	r2, #1
 8003abe:	17d2      	asrs	r2, r2, #31
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	4373      	muls	r3, r6
 8003acc:	1b5d      	subs	r5, r3, r5
 8003ace:	17ea      	asrs	r2, r5, #31
 8003ad0:	18ad      	adds	r5, r5, r2
 8003ad2:	4055      	eors	r5, r2
    mov r12,r5
 8003ad4:	46ac      	mov	ip, r5

    mov r2,r11
 8003ad6:	465a      	mov	r2, fp
    
    mov r3,#3
 8003ad8:	2303      	movs	r3, #3
    lsl r3,#9
 8003ada:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003adc:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003ade:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003ae0:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003ae2:	2301      	movs	r3, #1
    lsl r3,#9
 8003ae4:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003ae6:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003ae8:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003aea:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003aec:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003aee:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003af0:	1936      	adds	r6, r6, r4
    add r7,r5
 8003af2:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003af4:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003af6:	4643      	mov	r3, r8
    lsr r3,#4
 8003af8:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003afa:	435e      	muls	r6, r3
    mul r7,r3
 8003afc:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003afe:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003b00:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003b02:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003b04:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003b06:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003b08:	4444      	add	r4, r8
    add r5,r8
 8003b0a:	4445      	add	r5, r8

    sub r4,r6
 8003b0c:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003b0e:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003b10:	4693      	mov	fp, r2
    g r4
 8003b12:	222a      	movs	r2, #42	; 0x2a
 8003b14:	0193      	lsls	r3, r2, #6
 8003b16:	18d2      	adds	r2, r2, r3
 8003b18:	2303      	movs	r3, #3
 8003b1a:	031b      	lsls	r3, r3, #12
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	00de      	lsls	r6, r3, #3
 8003b20:	009f      	lsls	r7, r3, #2
 8003b22:	4362      	muls	r2, r4
 8003b24:	0ed3      	lsrs	r3, r2, #27
 8003b26:	1c3a      	adds	r2, r7, #0
 8003b28:	435a      	muls	r2, r3
 8003b2a:	1aa2      	subs	r2, r4, r2
 8003b2c:	1aba      	subs	r2, r7, r2
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	17d2      	asrs	r2, r2, #31
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	2201      	movs	r2, #1
 8003b36:	401a      	ands	r2, r3
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	4373      	muls	r3, r6
 8003b3e:	1b1c      	subs	r4, r3, r4
 8003b40:	17e2      	asrs	r2, r4, #31
 8003b42:	18a4      	adds	r4, r4, r2
 8003b44:	4054      	eors	r4, r2
    add r10,r4
 8003b46:	44a2      	add	sl, r4
    g r5
 8003b48:	222a      	movs	r2, #42	; 0x2a
 8003b4a:	0193      	lsls	r3, r2, #6
 8003b4c:	18d2      	adds	r2, r2, r3
 8003b4e:	2303      	movs	r3, #3
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	3301      	adds	r3, #1
 8003b54:	00de      	lsls	r6, r3, #3
 8003b56:	009f      	lsls	r7, r3, #2
 8003b58:	436a      	muls	r2, r5
 8003b5a:	0ed3      	lsrs	r3, r2, #27
 8003b5c:	1c3a      	adds	r2, r7, #0
 8003b5e:	435a      	muls	r2, r3
 8003b60:	1aaa      	subs	r2, r5, r2
 8003b62:	1aba      	subs	r2, r7, r2
 8003b64:	3a01      	subs	r2, #1
 8003b66:	17d2      	asrs	r2, r2, #31
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	401a      	ands	r2, r3
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	4373      	muls	r3, r6
 8003b74:	1b5d      	subs	r5, r3, r5
 8003b76:	17ea      	asrs	r2, r5, #31
 8003b78:	18ad      	adds	r5, r5, r2
 8003b7a:	4055      	eors	r5, r2
    add r12,r5
 8003b7c:	44ac      	add	ip, r5
    mov r2,r11
 8003b7e:	465a      	mov	r2, fp

    mov r3,#3
 8003b80:	2303      	movs	r3, #3
    lsl r3,#9
 8003b82:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003b84:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003b86:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003b88:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003b8a:	2301      	movs	r3, #1
    lsl r3,#10
 8003b8c:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 8003b8e:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003b90:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003b92:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003b94:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003b96:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003b98:	1936      	adds	r6, r6, r4
    add r7,r5
 8003b9a:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003b9c:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003b9e:	4643      	mov	r3, r8
    lsr r3,#4
 8003ba0:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003ba2:	435e      	muls	r6, r3
    mul r7,r3
 8003ba4:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003ba6:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003ba8:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003baa:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003bac:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003bae:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003bb0:	4444      	add	r4, r8
    add r5,r8
 8003bb2:	4445      	add	r5, r8

    sub r4,r6
 8003bb4:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003bb6:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003bb8:	4693      	mov	fp, r2
    g r4
 8003bba:	222a      	movs	r2, #42	; 0x2a
 8003bbc:	0193      	lsls	r3, r2, #6
 8003bbe:	18d2      	adds	r2, r2, r3
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	031b      	lsls	r3, r3, #12
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	00de      	lsls	r6, r3, #3
 8003bc8:	009f      	lsls	r7, r3, #2
 8003bca:	4362      	muls	r2, r4
 8003bcc:	0ed3      	lsrs	r3, r2, #27
 8003bce:	1c3a      	adds	r2, r7, #0
 8003bd0:	435a      	muls	r2, r3
 8003bd2:	1aa2      	subs	r2, r4, r2
 8003bd4:	1aba      	subs	r2, r7, r2
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	17d2      	asrs	r2, r2, #31
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	2201      	movs	r2, #1
 8003bde:	401a      	ands	r2, r3
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	4373      	muls	r3, r6
 8003be6:	1b1c      	subs	r4, r3, r4
 8003be8:	17e2      	asrs	r2, r4, #31
 8003bea:	18a4      	adds	r4, r4, r2
 8003bec:	4054      	eors	r4, r2
    add r10,r4
 8003bee:	44a2      	add	sl, r4
    
    g r5
 8003bf0:	222a      	movs	r2, #42	; 0x2a
 8003bf2:	0193      	lsls	r3, r2, #6
 8003bf4:	18d2      	adds	r2, r2, r3
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	00de      	lsls	r6, r3, #3
 8003bfe:	009f      	lsls	r7, r3, #2
 8003c00:	436a      	muls	r2, r5
 8003c02:	0ed3      	lsrs	r3, r2, #27
 8003c04:	1c3a      	adds	r2, r7, #0
 8003c06:	435a      	muls	r2, r3
 8003c08:	1aaa      	subs	r2, r5, r2
 8003c0a:	1aba      	subs	r2, r7, r2
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	17d2      	asrs	r2, r2, #31
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	2201      	movs	r2, #1
 8003c14:	401a      	ands	r2, r3
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	4373      	muls	r3, r6
 8003c1c:	1b5d      	subs	r5, r3, r5
 8003c1e:	17ea      	asrs	r2, r5, #31
 8003c20:	18ad      	adds	r5, r5, r2
 8003c22:	4055      	eors	r5, r2
    add r12,r5
 8003c24:	44ac      	add	ip, r5
    mov r2,r11
 8003c26:	465a      	mov	r2, fp

    mov r3,#3
 8003c28:	2303      	movs	r3, #3
    lsl r3,#9
 8003c2a:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 8003c2c:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003c2e:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003c30:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 8003c32:	4644      	mov	r4, r8
    lsr r4,#4
 8003c34:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 8003c36:	4366      	muls	r6, r4
    mul r7,r4
 8003c38:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 8003c3a:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 8003c3c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003c3e:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003c40:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003c42:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003c44:	4444      	add	r4, r8
    add r5,r8
 8003c46:	4445      	add	r5, r8

    sub r4,r6
 8003c48:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003c4a:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003c4c:	4693      	mov	fp, r2
    g r4
 8003c4e:	222a      	movs	r2, #42	; 0x2a
 8003c50:	0193      	lsls	r3, r2, #6
 8003c52:	18d2      	adds	r2, r2, r3
 8003c54:	2303      	movs	r3, #3
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	3301      	adds	r3, #1
 8003c5a:	00de      	lsls	r6, r3, #3
 8003c5c:	009f      	lsls	r7, r3, #2
 8003c5e:	4362      	muls	r2, r4
 8003c60:	0ed3      	lsrs	r3, r2, #27
 8003c62:	1c3a      	adds	r2, r7, #0
 8003c64:	435a      	muls	r2, r3
 8003c66:	1aa2      	subs	r2, r4, r2
 8003c68:	1aba      	subs	r2, r7, r2
 8003c6a:	3a01      	subs	r2, #1
 8003c6c:	17d2      	asrs	r2, r2, #31
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	2201      	movs	r2, #1
 8003c72:	401a      	ands	r2, r3
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	4373      	muls	r3, r6
 8003c7a:	1b1c      	subs	r4, r3, r4
 8003c7c:	17e2      	asrs	r2, r4, #31
 8003c7e:	18a4      	adds	r4, r4, r2
 8003c80:	4054      	eors	r4, r2
    add r10,r4
 8003c82:	44a2      	add	sl, r4
    g r5
 8003c84:	222a      	movs	r2, #42	; 0x2a
 8003c86:	0193      	lsls	r3, r2, #6
 8003c88:	18d2      	adds	r2, r2, r3
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	031b      	lsls	r3, r3, #12
 8003c8e:	3301      	adds	r3, #1
 8003c90:	00de      	lsls	r6, r3, #3
 8003c92:	009f      	lsls	r7, r3, #2
 8003c94:	436a      	muls	r2, r5
 8003c96:	0ed3      	lsrs	r3, r2, #27
 8003c98:	1c3a      	adds	r2, r7, #0
 8003c9a:	435a      	muls	r2, r3
 8003c9c:	1aaa      	subs	r2, r5, r2
 8003c9e:	1aba      	subs	r2, r7, r2
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	17d2      	asrs	r2, r2, #31
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	401a      	ands	r2, r3
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	4373      	muls	r3, r6
 8003cb0:	1b5d      	subs	r5, r3, r5
 8003cb2:	17ea      	asrs	r2, r5, #31
 8003cb4:	18ad      	adds	r5, r5, r2
 8003cb6:	4055      	eors	r5, r2
    add r12,r5
 8003cb8:	44ac      	add	ip, r5
    mov r2,r11
 8003cba:	465a      	mov	r2, fp

    mov r3,r8
 8003cbc:	4643      	mov	r3, r8
    lsr r3,#1
 8003cbe:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 8003cc0:	4654      	mov	r4, sl
    mov r5,r12
 8003cc2:	4665      	mov	r5, ip
    
    sub r4,r3
 8003cc4:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003cc6:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003cc8:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003cca:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003ccc:	2301      	movs	r3, #1

    and r4,r3
 8003cce:	401c      	ands	r4, r3
    and r5,r3
 8003cd0:	401d      	ands	r5, r3

    mov r3,#5
 8003cd2:	2305      	movs	r3, #5
    lsl r4,r3
 8003cd4:	409c      	lsls	r4, r3
    mov r3,#4
 8003cd6:	2304      	movs	r3, #4
    lsl r5,r3
 8003cd8:	409d      	lsls	r5, r3

    orr r5,r4
 8003cda:	4325      	orrs	r5, r4


    pop {r4}
 8003cdc:	bc10      	pop	{r4}

    orr r5,r4
 8003cde:	4325      	orrs	r5, r4
    push {r5}
 8003ce0:	b420      	push	{r5}


    add r1,#4
 8003ce2:	3104      	adds	r1, #4
    add r2,#4 
 8003ce4:	3204      	adds	r2, #4

    
    mov r3,#3
 8003ce6:	2303      	movs	r3, #3
    lsl r3,#9
 8003ce8:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003cea:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003cec:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003cee:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 8003cf0:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 8003cf2:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003cf4:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003cf6:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003cf8:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003cfa:	1936      	adds	r6, r6, r4
    add r7,r5
 8003cfc:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 8003cfe:	4643      	mov	r3, r8
    lsr r3,#4
 8003d00:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003d02:	435e      	muls	r6, r3
    mul r7,r3
 8003d04:	435f      	muls	r7, r3



    ldr r4,[r1]
 8003d06:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 8003d08:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003d0a:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003d0c:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003d0e:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003d10:	4444      	add	r4, r8
    add r5,r8
 8003d12:	4445      	add	r5, r8

    sub r4,r6
 8003d14:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003d16:	1bed      	subs	r5, r5, r7
    
    mov r11,r2
 8003d18:	4693      	mov	fp, r2

    g r4
 8003d1a:	222a      	movs	r2, #42	; 0x2a
 8003d1c:	0193      	lsls	r3, r2, #6
 8003d1e:	18d2      	adds	r2, r2, r3
 8003d20:	2303      	movs	r3, #3
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	3301      	adds	r3, #1
 8003d26:	00de      	lsls	r6, r3, #3
 8003d28:	009f      	lsls	r7, r3, #2
 8003d2a:	4362      	muls	r2, r4
 8003d2c:	0ed3      	lsrs	r3, r2, #27
 8003d2e:	1c3a      	adds	r2, r7, #0
 8003d30:	435a      	muls	r2, r3
 8003d32:	1aa2      	subs	r2, r4, r2
 8003d34:	1aba      	subs	r2, r7, r2
 8003d36:	3a01      	subs	r2, #1
 8003d38:	17d2      	asrs	r2, r2, #31
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	401a      	ands	r2, r3
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	4373      	muls	r3, r6
 8003d46:	1b1c      	subs	r4, r3, r4
 8003d48:	17e2      	asrs	r2, r4, #31
 8003d4a:	18a4      	adds	r4, r4, r2
 8003d4c:	4054      	eors	r4, r2
    mov r10,r4
 8003d4e:	46a2      	mov	sl, r4
    
    g r5
 8003d50:	222a      	movs	r2, #42	; 0x2a
 8003d52:	0193      	lsls	r3, r2, #6
 8003d54:	18d2      	adds	r2, r2, r3
 8003d56:	2303      	movs	r3, #3
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	00de      	lsls	r6, r3, #3
 8003d5e:	009f      	lsls	r7, r3, #2
 8003d60:	436a      	muls	r2, r5
 8003d62:	0ed3      	lsrs	r3, r2, #27
 8003d64:	1c3a      	adds	r2, r7, #0
 8003d66:	435a      	muls	r2, r3
 8003d68:	1aaa      	subs	r2, r5, r2
 8003d6a:	1aba      	subs	r2, r7, r2
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	17d2      	asrs	r2, r2, #31
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	2201      	movs	r2, #1
 8003d74:	401a      	ands	r2, r3
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	4373      	muls	r3, r6
 8003d7c:	1b5d      	subs	r5, r3, r5
 8003d7e:	17ea      	asrs	r2, r5, #31
 8003d80:	18ad      	adds	r5, r5, r2
 8003d82:	4055      	eors	r5, r2
    mov r12,r5
 8003d84:	46ac      	mov	ip, r5
    mov r2,r11    
 8003d86:	465a      	mov	r2, fp
    
    mov r3,#3
 8003d88:	2303      	movs	r3, #3
    lsl r3,#9
 8003d8a:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003d8c:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003d8e:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003d90:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003d92:	2301      	movs	r3, #1
    lsl r3,#9
 8003d94:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003d96:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003d98:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003d9a:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003d9c:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003d9e:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003da0:	1936      	adds	r6, r6, r4
    add r7,r5
 8003da2:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003da4:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003da6:	4643      	mov	r3, r8
    lsr r3,#4
 8003da8:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003daa:	435e      	muls	r6, r3
    mul r7,r3
 8003dac:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003dae:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003db0:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003db2:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003db4:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003db6:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003db8:	4444      	add	r4, r8
    add r5,r8
 8003dba:	4445      	add	r5, r8

    sub r4,r6
 8003dbc:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003dbe:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003dc0:	4693      	mov	fp, r2
    g r4
 8003dc2:	222a      	movs	r2, #42	; 0x2a
 8003dc4:	0193      	lsls	r3, r2, #6
 8003dc6:	18d2      	adds	r2, r2, r3
 8003dc8:	2303      	movs	r3, #3
 8003dca:	031b      	lsls	r3, r3, #12
 8003dcc:	3301      	adds	r3, #1
 8003dce:	00de      	lsls	r6, r3, #3
 8003dd0:	009f      	lsls	r7, r3, #2
 8003dd2:	4362      	muls	r2, r4
 8003dd4:	0ed3      	lsrs	r3, r2, #27
 8003dd6:	1c3a      	adds	r2, r7, #0
 8003dd8:	435a      	muls	r2, r3
 8003dda:	1aa2      	subs	r2, r4, r2
 8003ddc:	1aba      	subs	r2, r7, r2
 8003dde:	3a01      	subs	r2, #1
 8003de0:	17d2      	asrs	r2, r2, #31
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	2201      	movs	r2, #1
 8003de6:	401a      	ands	r2, r3
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	4373      	muls	r3, r6
 8003dee:	1b1c      	subs	r4, r3, r4
 8003df0:	17e2      	asrs	r2, r4, #31
 8003df2:	18a4      	adds	r4, r4, r2
 8003df4:	4054      	eors	r4, r2
    add r10,r4
 8003df6:	44a2      	add	sl, r4
    g r5
 8003df8:	222a      	movs	r2, #42	; 0x2a
 8003dfa:	0193      	lsls	r3, r2, #6
 8003dfc:	18d2      	adds	r2, r2, r3
 8003dfe:	2303      	movs	r3, #3
 8003e00:	031b      	lsls	r3, r3, #12
 8003e02:	3301      	adds	r3, #1
 8003e04:	00de      	lsls	r6, r3, #3
 8003e06:	009f      	lsls	r7, r3, #2
 8003e08:	436a      	muls	r2, r5
 8003e0a:	0ed3      	lsrs	r3, r2, #27
 8003e0c:	1c3a      	adds	r2, r7, #0
 8003e0e:	435a      	muls	r2, r3
 8003e10:	1aaa      	subs	r2, r5, r2
 8003e12:	1aba      	subs	r2, r7, r2
 8003e14:	3a01      	subs	r2, #1
 8003e16:	17d2      	asrs	r2, r2, #31
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	4373      	muls	r3, r6
 8003e24:	1b5d      	subs	r5, r3, r5
 8003e26:	17ea      	asrs	r2, r5, #31
 8003e28:	18ad      	adds	r5, r5, r2
 8003e2a:	4055      	eors	r5, r2
    add r12,r5
 8003e2c:	44ac      	add	ip, r5

    mov r2,r11
 8003e2e:	465a      	mov	r2, fp

    mov r3,#3
 8003e30:	2303      	movs	r3, #3
    lsl r3,#9
 8003e32:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003e34:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003e36:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003e38:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003e3a:	2301      	movs	r3, #1
    lsl r3,#10
 8003e3c:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 8003e3e:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003e40:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003e42:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003e44:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003e46:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003e48:	1936      	adds	r6, r6, r4
    add r7,r5
 8003e4a:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003e4c:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003e4e:	4643      	mov	r3, r8
    lsr r3,#4
 8003e50:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003e52:	435e      	muls	r6, r3
    mul r7,r3
 8003e54:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003e56:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003e58:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003e5a:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003e5c:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003e5e:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003e60:	4444      	add	r4, r8
    add r5,r8
 8003e62:	4445      	add	r5, r8

    sub r4,r6
 8003e64:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003e66:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003e68:	4693      	mov	fp, r2
    g r4
 8003e6a:	222a      	movs	r2, #42	; 0x2a
 8003e6c:	0193      	lsls	r3, r2, #6
 8003e6e:	18d2      	adds	r2, r2, r3
 8003e70:	2303      	movs	r3, #3
 8003e72:	031b      	lsls	r3, r3, #12
 8003e74:	3301      	adds	r3, #1
 8003e76:	00de      	lsls	r6, r3, #3
 8003e78:	009f      	lsls	r7, r3, #2
 8003e7a:	4362      	muls	r2, r4
 8003e7c:	0ed3      	lsrs	r3, r2, #27
 8003e7e:	1c3a      	adds	r2, r7, #0
 8003e80:	435a      	muls	r2, r3
 8003e82:	1aa2      	subs	r2, r4, r2
 8003e84:	1aba      	subs	r2, r7, r2
 8003e86:	3a01      	subs	r2, #1
 8003e88:	17d2      	asrs	r2, r2, #31
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	401a      	ands	r2, r3
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	4373      	muls	r3, r6
 8003e96:	1b1c      	subs	r4, r3, r4
 8003e98:	17e2      	asrs	r2, r4, #31
 8003e9a:	18a4      	adds	r4, r4, r2
 8003e9c:	4054      	eors	r4, r2
    add r10,r4
 8003e9e:	44a2      	add	sl, r4
    
    g r5
 8003ea0:	222a      	movs	r2, #42	; 0x2a
 8003ea2:	0193      	lsls	r3, r2, #6
 8003ea4:	18d2      	adds	r2, r2, r3
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	031b      	lsls	r3, r3, #12
 8003eaa:	3301      	adds	r3, #1
 8003eac:	00de      	lsls	r6, r3, #3
 8003eae:	009f      	lsls	r7, r3, #2
 8003eb0:	436a      	muls	r2, r5
 8003eb2:	0ed3      	lsrs	r3, r2, #27
 8003eb4:	1c3a      	adds	r2, r7, #0
 8003eb6:	435a      	muls	r2, r3
 8003eb8:	1aaa      	subs	r2, r5, r2
 8003eba:	1aba      	subs	r2, r7, r2
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	17d2      	asrs	r2, r2, #31
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	4373      	muls	r3, r6
 8003ecc:	1b5d      	subs	r5, r3, r5
 8003ece:	17ea      	asrs	r2, r5, #31
 8003ed0:	18ad      	adds	r5, r5, r2
 8003ed2:	4055      	eors	r5, r2
    add r12,r5
 8003ed4:	44ac      	add	ip, r5
    mov r2,r11  
 8003ed6:	465a      	mov	r2, fp

    mov r3,#3
 8003ed8:	2303      	movs	r3, #3
    lsl r3,#9
 8003eda:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 8003edc:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003ede:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003ee0:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 8003ee2:	4644      	mov	r4, r8
    lsr r4,#4
 8003ee4:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 8003ee6:	4366      	muls	r6, r4
    mul r7,r4
 8003ee8:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 8003eea:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 8003eec:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003eee:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003ef0:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003ef2:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003ef4:	4444      	add	r4, r8
    add r5,r8
 8003ef6:	4445      	add	r5, r8

    sub r4,r6
 8003ef8:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003efa:	1bed      	subs	r5, r5, r7

    mov r11,r2    
 8003efc:	4693      	mov	fp, r2
    g r4
 8003efe:	222a      	movs	r2, #42	; 0x2a
 8003f00:	0193      	lsls	r3, r2, #6
 8003f02:	18d2      	adds	r2, r2, r3
 8003f04:	2303      	movs	r3, #3
 8003f06:	031b      	lsls	r3, r3, #12
 8003f08:	3301      	adds	r3, #1
 8003f0a:	00de      	lsls	r6, r3, #3
 8003f0c:	009f      	lsls	r7, r3, #2
 8003f0e:	4362      	muls	r2, r4
 8003f10:	0ed3      	lsrs	r3, r2, #27
 8003f12:	1c3a      	adds	r2, r7, #0
 8003f14:	435a      	muls	r2, r3
 8003f16:	1aa2      	subs	r2, r4, r2
 8003f18:	1aba      	subs	r2, r7, r2
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	17d2      	asrs	r2, r2, #31
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	2201      	movs	r2, #1
 8003f22:	401a      	ands	r2, r3
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	4373      	muls	r3, r6
 8003f2a:	1b1c      	subs	r4, r3, r4
 8003f2c:	17e2      	asrs	r2, r4, #31
 8003f2e:	18a4      	adds	r4, r4, r2
 8003f30:	4054      	eors	r4, r2
    add r10,r4
 8003f32:	44a2      	add	sl, r4
    g r5
 8003f34:	222a      	movs	r2, #42	; 0x2a
 8003f36:	0193      	lsls	r3, r2, #6
 8003f38:	18d2      	adds	r2, r2, r3
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	031b      	lsls	r3, r3, #12
 8003f3e:	3301      	adds	r3, #1
 8003f40:	00de      	lsls	r6, r3, #3
 8003f42:	009f      	lsls	r7, r3, #2
 8003f44:	436a      	muls	r2, r5
 8003f46:	0ed3      	lsrs	r3, r2, #27
 8003f48:	1c3a      	adds	r2, r7, #0
 8003f4a:	435a      	muls	r2, r3
 8003f4c:	1aaa      	subs	r2, r5, r2
 8003f4e:	1aba      	subs	r2, r7, r2
 8003f50:	3a01      	subs	r2, #1
 8003f52:	17d2      	asrs	r2, r2, #31
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	2201      	movs	r2, #1
 8003f58:	401a      	ands	r2, r3
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	4373      	muls	r3, r6
 8003f60:	1b5d      	subs	r5, r3, r5
 8003f62:	17ea      	asrs	r2, r5, #31
 8003f64:	18ad      	adds	r5, r5, r2
 8003f66:	4055      	eors	r5, r2
    add r12,r5
 8003f68:	44ac      	add	ip, r5
    mov r2,r11
 8003f6a:	465a      	mov	r2, fp

    mov r3,r8
 8003f6c:	4643      	mov	r3, r8
    lsr r3,#1
 8003f6e:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 8003f70:	4654      	mov	r4, sl
    mov r5,r12
 8003f72:	4665      	mov	r5, ip
    
    sub r4,r3
 8003f74:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003f76:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003f78:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003f7a:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003f7c:	2301      	movs	r3, #1

    and r4,r3
 8003f7e:	401c      	ands	r4, r3
    mov r3,#7
 8003f80:	2307      	movs	r3, #7
    lsl r4,r3
 8003f82:	409c      	lsls	r4, r3
    and r5,r3
 8003f84:	401d      	ands	r5, r3
    mov r3,#6
 8003f86:	2306      	movs	r3, #6
    lsl r5,r3
 8003f88:	409d      	lsls	r5, r3

    orr r5,r4
 8003f8a:	4325      	orrs	r5, r4
    pop {r4}
 8003f8c:	bc10      	pop	{r4}

    orr r5,r4
 8003f8e:	4325      	orrs	r5, r4
    
    mov r0,r5
 8003f90:	1c28      	adds	r0, r5, #0

08003f92 <endl>:
endl:

    pop {r4,r7}
 8003f92:	bc90      	pop	{r4, r7}
    mov r8,r4
 8003f94:	46a0      	mov	r8, r4
    mov r10,r5
 8003f96:	46aa      	mov	sl, r5
    mov r11,r6
 8003f98:	46b3      	mov	fp, r6
    mov r12,r7
 8003f9a:	46bc      	mov	ip, r7

    pop {r4-r7,pc} 
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f9e <asm_helprec>:

.global	asm_helprec
.type	asm_helprec, %function
asm_helprec:

    push {r4-r7,lr}
 8003f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    key4bytes
 8003fa0:	c980      	ldmia	r1!, {r7}
 8003fa2:	2403      	movs	r4, #3
 8003fa4:	403c      	ands	r4, r7
 8003fa6:	08bf      	lsrs	r7, r7, #2
 8003fa8:	b487      	push	{r0, r1, r2, r7}
 8003faa:	1c21      	adds	r1, r4, #0
 8003fac:	f7ff f8e2 	bl	8003174 <asm_helprec_internal>
 8003fb0:	bc87      	pop	{r0, r1, r2, r7}
 8003fb2:	3004      	adds	r0, #4
 8003fb4:	3204      	adds	r2, #4
 8003fb6:	2403      	movs	r4, #3
 8003fb8:	403c      	ands	r4, r7
 8003fba:	08bf      	lsrs	r7, r7, #2
 8003fbc:	b487      	push	{r0, r1, r2, r7}
 8003fbe:	1c21      	adds	r1, r4, #0
 8003fc0:	f7ff f8d8 	bl	8003174 <asm_helprec_internal>
 8003fc4:	bc87      	pop	{r0, r1, r2, r7}
 8003fc6:	3004      	adds	r0, #4
 8003fc8:	3204      	adds	r2, #4
 8003fca:	2403      	movs	r4, #3
 8003fcc:	403c      	ands	r4, r7
 8003fce:	08bf      	lsrs	r7, r7, #2
 8003fd0:	b487      	push	{r0, r1, r2, r7}
 8003fd2:	1c21      	adds	r1, r4, #0
 8003fd4:	f7ff f8ce 	bl	8003174 <asm_helprec_internal>
 8003fd8:	bc87      	pop	{r0, r1, r2, r7}
 8003fda:	3004      	adds	r0, #4
 8003fdc:	3204      	adds	r2, #4
 8003fde:	2403      	movs	r4, #3
 8003fe0:	403c      	ands	r4, r7
 8003fe2:	08bf      	lsrs	r7, r7, #2
 8003fe4:	b487      	push	{r0, r1, r2, r7}
 8003fe6:	1c21      	adds	r1, r4, #0
 8003fe8:	f7ff f8c4 	bl	8003174 <asm_helprec_internal>
 8003fec:	bc87      	pop	{r0, r1, r2, r7}
 8003fee:	3004      	adds	r0, #4
 8003ff0:	3204      	adds	r2, #4
 8003ff2:	2403      	movs	r4, #3
 8003ff4:	403c      	ands	r4, r7
 8003ff6:	08bf      	lsrs	r7, r7, #2
 8003ff8:	b487      	push	{r0, r1, r2, r7}
 8003ffa:	1c21      	adds	r1, r4, #0
 8003ffc:	f7ff f8ba 	bl	8003174 <asm_helprec_internal>
 8004000:	bc87      	pop	{r0, r1, r2, r7}
 8004002:	3004      	adds	r0, #4
 8004004:	3204      	adds	r2, #4
 8004006:	2403      	movs	r4, #3
 8004008:	403c      	ands	r4, r7
 800400a:	08bf      	lsrs	r7, r7, #2
 800400c:	b487      	push	{r0, r1, r2, r7}
 800400e:	1c21      	adds	r1, r4, #0
 8004010:	f7ff f8b0 	bl	8003174 <asm_helprec_internal>
 8004014:	bc87      	pop	{r0, r1, r2, r7}
 8004016:	3004      	adds	r0, #4
 8004018:	3204      	adds	r2, #4
 800401a:	2403      	movs	r4, #3
 800401c:	403c      	ands	r4, r7
 800401e:	08bf      	lsrs	r7, r7, #2
 8004020:	b487      	push	{r0, r1, r2, r7}
 8004022:	1c21      	adds	r1, r4, #0
 8004024:	f7ff f8a6 	bl	8003174 <asm_helprec_internal>
 8004028:	bc87      	pop	{r0, r1, r2, r7}
 800402a:	3004      	adds	r0, #4
 800402c:	3204      	adds	r2, #4
 800402e:	2403      	movs	r4, #3
 8004030:	403c      	ands	r4, r7
 8004032:	08bf      	lsrs	r7, r7, #2
 8004034:	b487      	push	{r0, r1, r2, r7}
 8004036:	1c21      	adds	r1, r4, #0
 8004038:	f7ff f89c 	bl	8003174 <asm_helprec_internal>
 800403c:	bc87      	pop	{r0, r1, r2, r7}
 800403e:	3004      	adds	r0, #4
 8004040:	3204      	adds	r2, #4
 8004042:	2403      	movs	r4, #3
 8004044:	403c      	ands	r4, r7
 8004046:	08bf      	lsrs	r7, r7, #2
 8004048:	b487      	push	{r0, r1, r2, r7}
 800404a:	1c21      	adds	r1, r4, #0
 800404c:	f7ff f892 	bl	8003174 <asm_helprec_internal>
 8004050:	bc87      	pop	{r0, r1, r2, r7}
 8004052:	3004      	adds	r0, #4
 8004054:	3204      	adds	r2, #4
 8004056:	2403      	movs	r4, #3
 8004058:	403c      	ands	r4, r7
 800405a:	08bf      	lsrs	r7, r7, #2
 800405c:	b487      	push	{r0, r1, r2, r7}
 800405e:	1c21      	adds	r1, r4, #0
 8004060:	f7ff f888 	bl	8003174 <asm_helprec_internal>
 8004064:	bc87      	pop	{r0, r1, r2, r7}
 8004066:	3004      	adds	r0, #4
 8004068:	3204      	adds	r2, #4
 800406a:	2403      	movs	r4, #3
 800406c:	403c      	ands	r4, r7
 800406e:	08bf      	lsrs	r7, r7, #2
 8004070:	b487      	push	{r0, r1, r2, r7}
 8004072:	1c21      	adds	r1, r4, #0
 8004074:	f7ff f87e 	bl	8003174 <asm_helprec_internal>
 8004078:	bc87      	pop	{r0, r1, r2, r7}
 800407a:	3004      	adds	r0, #4
 800407c:	3204      	adds	r2, #4
 800407e:	2403      	movs	r4, #3
 8004080:	403c      	ands	r4, r7
 8004082:	08bf      	lsrs	r7, r7, #2
 8004084:	b487      	push	{r0, r1, r2, r7}
 8004086:	1c21      	adds	r1, r4, #0
 8004088:	f7ff f874 	bl	8003174 <asm_helprec_internal>
 800408c:	bc87      	pop	{r0, r1, r2, r7}
 800408e:	3004      	adds	r0, #4
 8004090:	3204      	adds	r2, #4
 8004092:	2403      	movs	r4, #3
 8004094:	403c      	ands	r4, r7
 8004096:	08bf      	lsrs	r7, r7, #2
 8004098:	b487      	push	{r0, r1, r2, r7}
 800409a:	1c21      	adds	r1, r4, #0
 800409c:	f7ff f86a 	bl	8003174 <asm_helprec_internal>
 80040a0:	bc87      	pop	{r0, r1, r2, r7}
 80040a2:	3004      	adds	r0, #4
 80040a4:	3204      	adds	r2, #4
 80040a6:	2403      	movs	r4, #3
 80040a8:	403c      	ands	r4, r7
 80040aa:	08bf      	lsrs	r7, r7, #2
 80040ac:	b487      	push	{r0, r1, r2, r7}
 80040ae:	1c21      	adds	r1, r4, #0
 80040b0:	f7ff f860 	bl	8003174 <asm_helprec_internal>
 80040b4:	bc87      	pop	{r0, r1, r2, r7}
 80040b6:	3004      	adds	r0, #4
 80040b8:	3204      	adds	r2, #4
 80040ba:	2403      	movs	r4, #3
 80040bc:	403c      	ands	r4, r7
 80040be:	08bf      	lsrs	r7, r7, #2
 80040c0:	b487      	push	{r0, r1, r2, r7}
 80040c2:	1c21      	adds	r1, r4, #0
 80040c4:	f7ff f856 	bl	8003174 <asm_helprec_internal>
 80040c8:	bc87      	pop	{r0, r1, r2, r7}
 80040ca:	3004      	adds	r0, #4
 80040cc:	3204      	adds	r2, #4
 80040ce:	2403      	movs	r4, #3
 80040d0:	403c      	ands	r4, r7
 80040d2:	08bf      	lsrs	r7, r7, #2
 80040d4:	b487      	push	{r0, r1, r2, r7}
 80040d6:	1c21      	adds	r1, r4, #0
 80040d8:	f7ff f84c 	bl	8003174 <asm_helprec_internal>
 80040dc:	bc87      	pop	{r0, r1, r2, r7}
 80040de:	3004      	adds	r0, #4
 80040e0:	3204      	adds	r2, #4
    key4bytes
 80040e2:	c980      	ldmia	r1!, {r7}
 80040e4:	2403      	movs	r4, #3
 80040e6:	403c      	ands	r4, r7
 80040e8:	08bf      	lsrs	r7, r7, #2
 80040ea:	b487      	push	{r0, r1, r2, r7}
 80040ec:	1c21      	adds	r1, r4, #0
 80040ee:	f7ff f841 	bl	8003174 <asm_helprec_internal>
 80040f2:	bc87      	pop	{r0, r1, r2, r7}
 80040f4:	3004      	adds	r0, #4
 80040f6:	3204      	adds	r2, #4
 80040f8:	2403      	movs	r4, #3
 80040fa:	403c      	ands	r4, r7
 80040fc:	08bf      	lsrs	r7, r7, #2
 80040fe:	b487      	push	{r0, r1, r2, r7}
 8004100:	1c21      	adds	r1, r4, #0
 8004102:	f7ff f837 	bl	8003174 <asm_helprec_internal>
 8004106:	bc87      	pop	{r0, r1, r2, r7}
 8004108:	3004      	adds	r0, #4
 800410a:	3204      	adds	r2, #4
 800410c:	2403      	movs	r4, #3
 800410e:	403c      	ands	r4, r7
 8004110:	08bf      	lsrs	r7, r7, #2
 8004112:	b487      	push	{r0, r1, r2, r7}
 8004114:	1c21      	adds	r1, r4, #0
 8004116:	f7ff f82d 	bl	8003174 <asm_helprec_internal>
 800411a:	bc87      	pop	{r0, r1, r2, r7}
 800411c:	3004      	adds	r0, #4
 800411e:	3204      	adds	r2, #4
 8004120:	2403      	movs	r4, #3
 8004122:	403c      	ands	r4, r7
 8004124:	08bf      	lsrs	r7, r7, #2
 8004126:	b487      	push	{r0, r1, r2, r7}
 8004128:	1c21      	adds	r1, r4, #0
 800412a:	f7ff f823 	bl	8003174 <asm_helprec_internal>
 800412e:	bc87      	pop	{r0, r1, r2, r7}
 8004130:	3004      	adds	r0, #4
 8004132:	3204      	adds	r2, #4
 8004134:	2403      	movs	r4, #3
 8004136:	403c      	ands	r4, r7
 8004138:	08bf      	lsrs	r7, r7, #2
 800413a:	b487      	push	{r0, r1, r2, r7}
 800413c:	1c21      	adds	r1, r4, #0
 800413e:	f7ff f819 	bl	8003174 <asm_helprec_internal>
 8004142:	bc87      	pop	{r0, r1, r2, r7}
 8004144:	3004      	adds	r0, #4
 8004146:	3204      	adds	r2, #4
 8004148:	2403      	movs	r4, #3
 800414a:	403c      	ands	r4, r7
 800414c:	08bf      	lsrs	r7, r7, #2
 800414e:	b487      	push	{r0, r1, r2, r7}
 8004150:	1c21      	adds	r1, r4, #0
 8004152:	f7ff f80f 	bl	8003174 <asm_helprec_internal>
 8004156:	bc87      	pop	{r0, r1, r2, r7}
 8004158:	3004      	adds	r0, #4
 800415a:	3204      	adds	r2, #4
 800415c:	2403      	movs	r4, #3
 800415e:	403c      	ands	r4, r7
 8004160:	08bf      	lsrs	r7, r7, #2
 8004162:	b487      	push	{r0, r1, r2, r7}
 8004164:	1c21      	adds	r1, r4, #0
 8004166:	f7ff f805 	bl	8003174 <asm_helprec_internal>
 800416a:	bc87      	pop	{r0, r1, r2, r7}
 800416c:	3004      	adds	r0, #4
 800416e:	3204      	adds	r2, #4
 8004170:	2403      	movs	r4, #3
 8004172:	403c      	ands	r4, r7
 8004174:	08bf      	lsrs	r7, r7, #2
 8004176:	b487      	push	{r0, r1, r2, r7}
 8004178:	1c21      	adds	r1, r4, #0
 800417a:	f7fe fffb 	bl	8003174 <asm_helprec_internal>
 800417e:	bc87      	pop	{r0, r1, r2, r7}
 8004180:	3004      	adds	r0, #4
 8004182:	3204      	adds	r2, #4
 8004184:	2403      	movs	r4, #3
 8004186:	403c      	ands	r4, r7
 8004188:	08bf      	lsrs	r7, r7, #2
 800418a:	b487      	push	{r0, r1, r2, r7}
 800418c:	1c21      	adds	r1, r4, #0
 800418e:	f7fe fff1 	bl	8003174 <asm_helprec_internal>
 8004192:	bc87      	pop	{r0, r1, r2, r7}
 8004194:	3004      	adds	r0, #4
 8004196:	3204      	adds	r2, #4
 8004198:	2403      	movs	r4, #3
 800419a:	403c      	ands	r4, r7
 800419c:	08bf      	lsrs	r7, r7, #2
 800419e:	b487      	push	{r0, r1, r2, r7}
 80041a0:	1c21      	adds	r1, r4, #0
 80041a2:	f7fe ffe7 	bl	8003174 <asm_helprec_internal>
 80041a6:	bc87      	pop	{r0, r1, r2, r7}
 80041a8:	3004      	adds	r0, #4
 80041aa:	3204      	adds	r2, #4
 80041ac:	2403      	movs	r4, #3
 80041ae:	403c      	ands	r4, r7
 80041b0:	08bf      	lsrs	r7, r7, #2
 80041b2:	b487      	push	{r0, r1, r2, r7}
 80041b4:	1c21      	adds	r1, r4, #0
 80041b6:	f7fe ffdd 	bl	8003174 <asm_helprec_internal>
 80041ba:	bc87      	pop	{r0, r1, r2, r7}
 80041bc:	3004      	adds	r0, #4
 80041be:	3204      	adds	r2, #4
 80041c0:	2403      	movs	r4, #3
 80041c2:	403c      	ands	r4, r7
 80041c4:	08bf      	lsrs	r7, r7, #2
 80041c6:	b487      	push	{r0, r1, r2, r7}
 80041c8:	1c21      	adds	r1, r4, #0
 80041ca:	f7fe ffd3 	bl	8003174 <asm_helprec_internal>
 80041ce:	bc87      	pop	{r0, r1, r2, r7}
 80041d0:	3004      	adds	r0, #4
 80041d2:	3204      	adds	r2, #4
 80041d4:	2403      	movs	r4, #3
 80041d6:	403c      	ands	r4, r7
 80041d8:	08bf      	lsrs	r7, r7, #2
 80041da:	b487      	push	{r0, r1, r2, r7}
 80041dc:	1c21      	adds	r1, r4, #0
 80041de:	f7fe ffc9 	bl	8003174 <asm_helprec_internal>
 80041e2:	bc87      	pop	{r0, r1, r2, r7}
 80041e4:	3004      	adds	r0, #4
 80041e6:	3204      	adds	r2, #4
 80041e8:	2403      	movs	r4, #3
 80041ea:	403c      	ands	r4, r7
 80041ec:	08bf      	lsrs	r7, r7, #2
 80041ee:	b487      	push	{r0, r1, r2, r7}
 80041f0:	1c21      	adds	r1, r4, #0
 80041f2:	f7fe ffbf 	bl	8003174 <asm_helprec_internal>
 80041f6:	bc87      	pop	{r0, r1, r2, r7}
 80041f8:	3004      	adds	r0, #4
 80041fa:	3204      	adds	r2, #4
 80041fc:	2403      	movs	r4, #3
 80041fe:	403c      	ands	r4, r7
 8004200:	08bf      	lsrs	r7, r7, #2
 8004202:	b487      	push	{r0, r1, r2, r7}
 8004204:	1c21      	adds	r1, r4, #0
 8004206:	f7fe ffb5 	bl	8003174 <asm_helprec_internal>
 800420a:	bc87      	pop	{r0, r1, r2, r7}
 800420c:	3004      	adds	r0, #4
 800420e:	3204      	adds	r2, #4
 8004210:	2403      	movs	r4, #3
 8004212:	403c      	ands	r4, r7
 8004214:	08bf      	lsrs	r7, r7, #2
 8004216:	b487      	push	{r0, r1, r2, r7}
 8004218:	1c21      	adds	r1, r4, #0
 800421a:	f7fe ffab 	bl	8003174 <asm_helprec_internal>
 800421e:	bc87      	pop	{r0, r1, r2, r7}
 8004220:	3004      	adds	r0, #4
 8004222:	3204      	adds	r2, #4
    key4bytes
 8004224:	c980      	ldmia	r1!, {r7}
 8004226:	2403      	movs	r4, #3
 8004228:	403c      	ands	r4, r7
 800422a:	08bf      	lsrs	r7, r7, #2
 800422c:	b487      	push	{r0, r1, r2, r7}
 800422e:	1c21      	adds	r1, r4, #0
 8004230:	f7fe ffa0 	bl	8003174 <asm_helprec_internal>
 8004234:	bc87      	pop	{r0, r1, r2, r7}
 8004236:	3004      	adds	r0, #4
 8004238:	3204      	adds	r2, #4
 800423a:	2403      	movs	r4, #3
 800423c:	403c      	ands	r4, r7
 800423e:	08bf      	lsrs	r7, r7, #2
 8004240:	b487      	push	{r0, r1, r2, r7}
 8004242:	1c21      	adds	r1, r4, #0
 8004244:	f7fe ff96 	bl	8003174 <asm_helprec_internal>
 8004248:	bc87      	pop	{r0, r1, r2, r7}
 800424a:	3004      	adds	r0, #4
 800424c:	3204      	adds	r2, #4
 800424e:	2403      	movs	r4, #3
 8004250:	403c      	ands	r4, r7
 8004252:	08bf      	lsrs	r7, r7, #2
 8004254:	b487      	push	{r0, r1, r2, r7}
 8004256:	1c21      	adds	r1, r4, #0
 8004258:	f7fe ff8c 	bl	8003174 <asm_helprec_internal>
 800425c:	bc87      	pop	{r0, r1, r2, r7}
 800425e:	3004      	adds	r0, #4
 8004260:	3204      	adds	r2, #4
 8004262:	2403      	movs	r4, #3
 8004264:	403c      	ands	r4, r7
 8004266:	08bf      	lsrs	r7, r7, #2
 8004268:	b487      	push	{r0, r1, r2, r7}
 800426a:	1c21      	adds	r1, r4, #0
 800426c:	f7fe ff82 	bl	8003174 <asm_helprec_internal>
 8004270:	bc87      	pop	{r0, r1, r2, r7}
 8004272:	3004      	adds	r0, #4
 8004274:	3204      	adds	r2, #4
 8004276:	2403      	movs	r4, #3
 8004278:	403c      	ands	r4, r7
 800427a:	08bf      	lsrs	r7, r7, #2
 800427c:	b487      	push	{r0, r1, r2, r7}
 800427e:	1c21      	adds	r1, r4, #0
 8004280:	f7fe ff78 	bl	8003174 <asm_helprec_internal>
 8004284:	bc87      	pop	{r0, r1, r2, r7}
 8004286:	3004      	adds	r0, #4
 8004288:	3204      	adds	r2, #4
 800428a:	2403      	movs	r4, #3
 800428c:	403c      	ands	r4, r7
 800428e:	08bf      	lsrs	r7, r7, #2
 8004290:	b487      	push	{r0, r1, r2, r7}
 8004292:	1c21      	adds	r1, r4, #0
 8004294:	f7fe ff6e 	bl	8003174 <asm_helprec_internal>
 8004298:	bc87      	pop	{r0, r1, r2, r7}
 800429a:	3004      	adds	r0, #4
 800429c:	3204      	adds	r2, #4
 800429e:	2403      	movs	r4, #3
 80042a0:	403c      	ands	r4, r7
 80042a2:	08bf      	lsrs	r7, r7, #2
 80042a4:	b487      	push	{r0, r1, r2, r7}
 80042a6:	1c21      	adds	r1, r4, #0
 80042a8:	f7fe ff64 	bl	8003174 <asm_helprec_internal>
 80042ac:	bc87      	pop	{r0, r1, r2, r7}
 80042ae:	3004      	adds	r0, #4
 80042b0:	3204      	adds	r2, #4
 80042b2:	2403      	movs	r4, #3
 80042b4:	403c      	ands	r4, r7
 80042b6:	08bf      	lsrs	r7, r7, #2
 80042b8:	b487      	push	{r0, r1, r2, r7}
 80042ba:	1c21      	adds	r1, r4, #0
 80042bc:	f7fe ff5a 	bl	8003174 <asm_helprec_internal>
 80042c0:	bc87      	pop	{r0, r1, r2, r7}
 80042c2:	3004      	adds	r0, #4
 80042c4:	3204      	adds	r2, #4
 80042c6:	2403      	movs	r4, #3
 80042c8:	403c      	ands	r4, r7
 80042ca:	08bf      	lsrs	r7, r7, #2
 80042cc:	b487      	push	{r0, r1, r2, r7}
 80042ce:	1c21      	adds	r1, r4, #0
 80042d0:	f7fe ff50 	bl	8003174 <asm_helprec_internal>
 80042d4:	bc87      	pop	{r0, r1, r2, r7}
 80042d6:	3004      	adds	r0, #4
 80042d8:	3204      	adds	r2, #4
 80042da:	2403      	movs	r4, #3
 80042dc:	403c      	ands	r4, r7
 80042de:	08bf      	lsrs	r7, r7, #2
 80042e0:	b487      	push	{r0, r1, r2, r7}
 80042e2:	1c21      	adds	r1, r4, #0
 80042e4:	f7fe ff46 	bl	8003174 <asm_helprec_internal>
 80042e8:	bc87      	pop	{r0, r1, r2, r7}
 80042ea:	3004      	adds	r0, #4
 80042ec:	3204      	adds	r2, #4
 80042ee:	2403      	movs	r4, #3
 80042f0:	403c      	ands	r4, r7
 80042f2:	08bf      	lsrs	r7, r7, #2
 80042f4:	b487      	push	{r0, r1, r2, r7}
 80042f6:	1c21      	adds	r1, r4, #0
 80042f8:	f7fe ff3c 	bl	8003174 <asm_helprec_internal>
 80042fc:	bc87      	pop	{r0, r1, r2, r7}
 80042fe:	3004      	adds	r0, #4
 8004300:	3204      	adds	r2, #4
 8004302:	2403      	movs	r4, #3
 8004304:	403c      	ands	r4, r7
 8004306:	08bf      	lsrs	r7, r7, #2
 8004308:	b487      	push	{r0, r1, r2, r7}
 800430a:	1c21      	adds	r1, r4, #0
 800430c:	f7fe ff32 	bl	8003174 <asm_helprec_internal>
 8004310:	bc87      	pop	{r0, r1, r2, r7}
 8004312:	3004      	adds	r0, #4
 8004314:	3204      	adds	r2, #4
 8004316:	2403      	movs	r4, #3
 8004318:	403c      	ands	r4, r7
 800431a:	08bf      	lsrs	r7, r7, #2
 800431c:	b487      	push	{r0, r1, r2, r7}
 800431e:	1c21      	adds	r1, r4, #0
 8004320:	f7fe ff28 	bl	8003174 <asm_helprec_internal>
 8004324:	bc87      	pop	{r0, r1, r2, r7}
 8004326:	3004      	adds	r0, #4
 8004328:	3204      	adds	r2, #4
 800432a:	2403      	movs	r4, #3
 800432c:	403c      	ands	r4, r7
 800432e:	08bf      	lsrs	r7, r7, #2
 8004330:	b487      	push	{r0, r1, r2, r7}
 8004332:	1c21      	adds	r1, r4, #0
 8004334:	f7fe ff1e 	bl	8003174 <asm_helprec_internal>
 8004338:	bc87      	pop	{r0, r1, r2, r7}
 800433a:	3004      	adds	r0, #4
 800433c:	3204      	adds	r2, #4
 800433e:	2403      	movs	r4, #3
 8004340:	403c      	ands	r4, r7
 8004342:	08bf      	lsrs	r7, r7, #2
 8004344:	b487      	push	{r0, r1, r2, r7}
 8004346:	1c21      	adds	r1, r4, #0
 8004348:	f7fe ff14 	bl	8003174 <asm_helprec_internal>
 800434c:	bc87      	pop	{r0, r1, r2, r7}
 800434e:	3004      	adds	r0, #4
 8004350:	3204      	adds	r2, #4
 8004352:	2403      	movs	r4, #3
 8004354:	403c      	ands	r4, r7
 8004356:	08bf      	lsrs	r7, r7, #2
 8004358:	b487      	push	{r0, r1, r2, r7}
 800435a:	1c21      	adds	r1, r4, #0
 800435c:	f7fe ff0a 	bl	8003174 <asm_helprec_internal>
 8004360:	bc87      	pop	{r0, r1, r2, r7}
 8004362:	3004      	adds	r0, #4
 8004364:	3204      	adds	r2, #4
    key4bytes
 8004366:	c980      	ldmia	r1!, {r7}
 8004368:	2403      	movs	r4, #3
 800436a:	403c      	ands	r4, r7
 800436c:	08bf      	lsrs	r7, r7, #2
 800436e:	b487      	push	{r0, r1, r2, r7}
 8004370:	1c21      	adds	r1, r4, #0
 8004372:	f7fe feff 	bl	8003174 <asm_helprec_internal>
 8004376:	bc87      	pop	{r0, r1, r2, r7}
 8004378:	3004      	adds	r0, #4
 800437a:	3204      	adds	r2, #4
 800437c:	2403      	movs	r4, #3
 800437e:	403c      	ands	r4, r7
 8004380:	08bf      	lsrs	r7, r7, #2
 8004382:	b487      	push	{r0, r1, r2, r7}
 8004384:	1c21      	adds	r1, r4, #0
 8004386:	f7fe fef5 	bl	8003174 <asm_helprec_internal>
 800438a:	bc87      	pop	{r0, r1, r2, r7}
 800438c:	3004      	adds	r0, #4
 800438e:	3204      	adds	r2, #4
 8004390:	2403      	movs	r4, #3
 8004392:	403c      	ands	r4, r7
 8004394:	08bf      	lsrs	r7, r7, #2
 8004396:	b487      	push	{r0, r1, r2, r7}
 8004398:	1c21      	adds	r1, r4, #0
 800439a:	f7fe feeb 	bl	8003174 <asm_helprec_internal>
 800439e:	bc87      	pop	{r0, r1, r2, r7}
 80043a0:	3004      	adds	r0, #4
 80043a2:	3204      	adds	r2, #4
 80043a4:	2403      	movs	r4, #3
 80043a6:	403c      	ands	r4, r7
 80043a8:	08bf      	lsrs	r7, r7, #2
 80043aa:	b487      	push	{r0, r1, r2, r7}
 80043ac:	1c21      	adds	r1, r4, #0
 80043ae:	f7fe fee1 	bl	8003174 <asm_helprec_internal>
 80043b2:	bc87      	pop	{r0, r1, r2, r7}
 80043b4:	3004      	adds	r0, #4
 80043b6:	3204      	adds	r2, #4
 80043b8:	2403      	movs	r4, #3
 80043ba:	403c      	ands	r4, r7
 80043bc:	08bf      	lsrs	r7, r7, #2
 80043be:	b487      	push	{r0, r1, r2, r7}
 80043c0:	1c21      	adds	r1, r4, #0
 80043c2:	f7fe fed7 	bl	8003174 <asm_helprec_internal>
 80043c6:	bc87      	pop	{r0, r1, r2, r7}
 80043c8:	3004      	adds	r0, #4
 80043ca:	3204      	adds	r2, #4
 80043cc:	2403      	movs	r4, #3
 80043ce:	403c      	ands	r4, r7
 80043d0:	08bf      	lsrs	r7, r7, #2
 80043d2:	b487      	push	{r0, r1, r2, r7}
 80043d4:	1c21      	adds	r1, r4, #0
 80043d6:	f7fe fecd 	bl	8003174 <asm_helprec_internal>
 80043da:	bc87      	pop	{r0, r1, r2, r7}
 80043dc:	3004      	adds	r0, #4
 80043de:	3204      	adds	r2, #4
 80043e0:	2403      	movs	r4, #3
 80043e2:	403c      	ands	r4, r7
 80043e4:	08bf      	lsrs	r7, r7, #2
 80043e6:	b487      	push	{r0, r1, r2, r7}
 80043e8:	1c21      	adds	r1, r4, #0
 80043ea:	f7fe fec3 	bl	8003174 <asm_helprec_internal>
 80043ee:	bc87      	pop	{r0, r1, r2, r7}
 80043f0:	3004      	adds	r0, #4
 80043f2:	3204      	adds	r2, #4
 80043f4:	2403      	movs	r4, #3
 80043f6:	403c      	ands	r4, r7
 80043f8:	08bf      	lsrs	r7, r7, #2
 80043fa:	b487      	push	{r0, r1, r2, r7}
 80043fc:	1c21      	adds	r1, r4, #0
 80043fe:	f7fe feb9 	bl	8003174 <asm_helprec_internal>
 8004402:	bc87      	pop	{r0, r1, r2, r7}
 8004404:	3004      	adds	r0, #4
 8004406:	3204      	adds	r2, #4
 8004408:	2403      	movs	r4, #3
 800440a:	403c      	ands	r4, r7
 800440c:	08bf      	lsrs	r7, r7, #2
 800440e:	b487      	push	{r0, r1, r2, r7}
 8004410:	1c21      	adds	r1, r4, #0
 8004412:	f7fe feaf 	bl	8003174 <asm_helprec_internal>
 8004416:	bc87      	pop	{r0, r1, r2, r7}
 8004418:	3004      	adds	r0, #4
 800441a:	3204      	adds	r2, #4
 800441c:	2403      	movs	r4, #3
 800441e:	403c      	ands	r4, r7
 8004420:	08bf      	lsrs	r7, r7, #2
 8004422:	b487      	push	{r0, r1, r2, r7}
 8004424:	1c21      	adds	r1, r4, #0
 8004426:	f7fe fea5 	bl	8003174 <asm_helprec_internal>
 800442a:	bc87      	pop	{r0, r1, r2, r7}
 800442c:	3004      	adds	r0, #4
 800442e:	3204      	adds	r2, #4
 8004430:	2403      	movs	r4, #3
 8004432:	403c      	ands	r4, r7
 8004434:	08bf      	lsrs	r7, r7, #2
 8004436:	b487      	push	{r0, r1, r2, r7}
 8004438:	1c21      	adds	r1, r4, #0
 800443a:	f7fe fe9b 	bl	8003174 <asm_helprec_internal>
 800443e:	bc87      	pop	{r0, r1, r2, r7}
 8004440:	3004      	adds	r0, #4
 8004442:	3204      	adds	r2, #4
 8004444:	2403      	movs	r4, #3
 8004446:	403c      	ands	r4, r7
 8004448:	08bf      	lsrs	r7, r7, #2
 800444a:	b487      	push	{r0, r1, r2, r7}
 800444c:	1c21      	adds	r1, r4, #0
 800444e:	f7fe fe91 	bl	8003174 <asm_helprec_internal>
 8004452:	bc87      	pop	{r0, r1, r2, r7}
 8004454:	3004      	adds	r0, #4
 8004456:	3204      	adds	r2, #4
 8004458:	2403      	movs	r4, #3
 800445a:	403c      	ands	r4, r7
 800445c:	08bf      	lsrs	r7, r7, #2
 800445e:	b487      	push	{r0, r1, r2, r7}
 8004460:	1c21      	adds	r1, r4, #0
 8004462:	f7fe fe87 	bl	8003174 <asm_helprec_internal>
 8004466:	bc87      	pop	{r0, r1, r2, r7}
 8004468:	3004      	adds	r0, #4
 800446a:	3204      	adds	r2, #4
 800446c:	2403      	movs	r4, #3
 800446e:	403c      	ands	r4, r7
 8004470:	08bf      	lsrs	r7, r7, #2
 8004472:	b487      	push	{r0, r1, r2, r7}
 8004474:	1c21      	adds	r1, r4, #0
 8004476:	f7fe fe7d 	bl	8003174 <asm_helprec_internal>
 800447a:	bc87      	pop	{r0, r1, r2, r7}
 800447c:	3004      	adds	r0, #4
 800447e:	3204      	adds	r2, #4
 8004480:	2403      	movs	r4, #3
 8004482:	403c      	ands	r4, r7
 8004484:	08bf      	lsrs	r7, r7, #2
 8004486:	b487      	push	{r0, r1, r2, r7}
 8004488:	1c21      	adds	r1, r4, #0
 800448a:	f7fe fe73 	bl	8003174 <asm_helprec_internal>
 800448e:	bc87      	pop	{r0, r1, r2, r7}
 8004490:	3004      	adds	r0, #4
 8004492:	3204      	adds	r2, #4
 8004494:	2403      	movs	r4, #3
 8004496:	403c      	ands	r4, r7
 8004498:	08bf      	lsrs	r7, r7, #2
 800449a:	b487      	push	{r0, r1, r2, r7}
 800449c:	1c21      	adds	r1, r4, #0
 800449e:	f7fe fe69 	bl	8003174 <asm_helprec_internal>
 80044a2:	bc87      	pop	{r0, r1, r2, r7}
 80044a4:	3004      	adds	r0, #4
 80044a6:	3204      	adds	r2, #4
    key4bytes
 80044a8:	c980      	ldmia	r1!, {r7}
 80044aa:	2403      	movs	r4, #3
 80044ac:	403c      	ands	r4, r7
 80044ae:	08bf      	lsrs	r7, r7, #2
 80044b0:	b487      	push	{r0, r1, r2, r7}
 80044b2:	1c21      	adds	r1, r4, #0
 80044b4:	f7fe fe5e 	bl	8003174 <asm_helprec_internal>
 80044b8:	bc87      	pop	{r0, r1, r2, r7}
 80044ba:	3004      	adds	r0, #4
 80044bc:	3204      	adds	r2, #4
 80044be:	2403      	movs	r4, #3
 80044c0:	403c      	ands	r4, r7
 80044c2:	08bf      	lsrs	r7, r7, #2
 80044c4:	b487      	push	{r0, r1, r2, r7}
 80044c6:	1c21      	adds	r1, r4, #0
 80044c8:	f7fe fe54 	bl	8003174 <asm_helprec_internal>
 80044cc:	bc87      	pop	{r0, r1, r2, r7}
 80044ce:	3004      	adds	r0, #4
 80044d0:	3204      	adds	r2, #4
 80044d2:	2403      	movs	r4, #3
 80044d4:	403c      	ands	r4, r7
 80044d6:	08bf      	lsrs	r7, r7, #2
 80044d8:	b487      	push	{r0, r1, r2, r7}
 80044da:	1c21      	adds	r1, r4, #0
 80044dc:	f7fe fe4a 	bl	8003174 <asm_helprec_internal>
 80044e0:	bc87      	pop	{r0, r1, r2, r7}
 80044e2:	3004      	adds	r0, #4
 80044e4:	3204      	adds	r2, #4
 80044e6:	2403      	movs	r4, #3
 80044e8:	403c      	ands	r4, r7
 80044ea:	08bf      	lsrs	r7, r7, #2
 80044ec:	b487      	push	{r0, r1, r2, r7}
 80044ee:	1c21      	adds	r1, r4, #0
 80044f0:	f7fe fe40 	bl	8003174 <asm_helprec_internal>
 80044f4:	bc87      	pop	{r0, r1, r2, r7}
 80044f6:	3004      	adds	r0, #4
 80044f8:	3204      	adds	r2, #4
 80044fa:	2403      	movs	r4, #3
 80044fc:	403c      	ands	r4, r7
 80044fe:	08bf      	lsrs	r7, r7, #2
 8004500:	b487      	push	{r0, r1, r2, r7}
 8004502:	1c21      	adds	r1, r4, #0
 8004504:	f7fe fe36 	bl	8003174 <asm_helprec_internal>
 8004508:	bc87      	pop	{r0, r1, r2, r7}
 800450a:	3004      	adds	r0, #4
 800450c:	3204      	adds	r2, #4
 800450e:	2403      	movs	r4, #3
 8004510:	403c      	ands	r4, r7
 8004512:	08bf      	lsrs	r7, r7, #2
 8004514:	b487      	push	{r0, r1, r2, r7}
 8004516:	1c21      	adds	r1, r4, #0
 8004518:	f7fe fe2c 	bl	8003174 <asm_helprec_internal>
 800451c:	bc87      	pop	{r0, r1, r2, r7}
 800451e:	3004      	adds	r0, #4
 8004520:	3204      	adds	r2, #4
 8004522:	2403      	movs	r4, #3
 8004524:	403c      	ands	r4, r7
 8004526:	08bf      	lsrs	r7, r7, #2
 8004528:	b487      	push	{r0, r1, r2, r7}
 800452a:	1c21      	adds	r1, r4, #0
 800452c:	f7fe fe22 	bl	8003174 <asm_helprec_internal>
 8004530:	bc87      	pop	{r0, r1, r2, r7}
 8004532:	3004      	adds	r0, #4
 8004534:	3204      	adds	r2, #4
 8004536:	2403      	movs	r4, #3
 8004538:	403c      	ands	r4, r7
 800453a:	08bf      	lsrs	r7, r7, #2
 800453c:	b487      	push	{r0, r1, r2, r7}
 800453e:	1c21      	adds	r1, r4, #0
 8004540:	f7fe fe18 	bl	8003174 <asm_helprec_internal>
 8004544:	bc87      	pop	{r0, r1, r2, r7}
 8004546:	3004      	adds	r0, #4
 8004548:	3204      	adds	r2, #4
 800454a:	2403      	movs	r4, #3
 800454c:	403c      	ands	r4, r7
 800454e:	08bf      	lsrs	r7, r7, #2
 8004550:	b487      	push	{r0, r1, r2, r7}
 8004552:	1c21      	adds	r1, r4, #0
 8004554:	f7fe fe0e 	bl	8003174 <asm_helprec_internal>
 8004558:	bc87      	pop	{r0, r1, r2, r7}
 800455a:	3004      	adds	r0, #4
 800455c:	3204      	adds	r2, #4
 800455e:	2403      	movs	r4, #3
 8004560:	403c      	ands	r4, r7
 8004562:	08bf      	lsrs	r7, r7, #2
 8004564:	b487      	push	{r0, r1, r2, r7}
 8004566:	1c21      	adds	r1, r4, #0
 8004568:	f7fe fe04 	bl	8003174 <asm_helprec_internal>
 800456c:	bc87      	pop	{r0, r1, r2, r7}
 800456e:	3004      	adds	r0, #4
 8004570:	3204      	adds	r2, #4
 8004572:	2403      	movs	r4, #3
 8004574:	403c      	ands	r4, r7
 8004576:	08bf      	lsrs	r7, r7, #2
 8004578:	b487      	push	{r0, r1, r2, r7}
 800457a:	1c21      	adds	r1, r4, #0
 800457c:	f7fe fdfa 	bl	8003174 <asm_helprec_internal>
 8004580:	bc87      	pop	{r0, r1, r2, r7}
 8004582:	3004      	adds	r0, #4
 8004584:	3204      	adds	r2, #4
 8004586:	2403      	movs	r4, #3
 8004588:	403c      	ands	r4, r7
 800458a:	08bf      	lsrs	r7, r7, #2
 800458c:	b487      	push	{r0, r1, r2, r7}
 800458e:	1c21      	adds	r1, r4, #0
 8004590:	f7fe fdf0 	bl	8003174 <asm_helprec_internal>
 8004594:	bc87      	pop	{r0, r1, r2, r7}
 8004596:	3004      	adds	r0, #4
 8004598:	3204      	adds	r2, #4
 800459a:	2403      	movs	r4, #3
 800459c:	403c      	ands	r4, r7
 800459e:	08bf      	lsrs	r7, r7, #2
 80045a0:	b487      	push	{r0, r1, r2, r7}
 80045a2:	1c21      	adds	r1, r4, #0
 80045a4:	f7fe fde6 	bl	8003174 <asm_helprec_internal>
 80045a8:	bc87      	pop	{r0, r1, r2, r7}
 80045aa:	3004      	adds	r0, #4
 80045ac:	3204      	adds	r2, #4
 80045ae:	2403      	movs	r4, #3
 80045b0:	403c      	ands	r4, r7
 80045b2:	08bf      	lsrs	r7, r7, #2
 80045b4:	b487      	push	{r0, r1, r2, r7}
 80045b6:	1c21      	adds	r1, r4, #0
 80045b8:	f7fe fddc 	bl	8003174 <asm_helprec_internal>
 80045bc:	bc87      	pop	{r0, r1, r2, r7}
 80045be:	3004      	adds	r0, #4
 80045c0:	3204      	adds	r2, #4
 80045c2:	2403      	movs	r4, #3
 80045c4:	403c      	ands	r4, r7
 80045c6:	08bf      	lsrs	r7, r7, #2
 80045c8:	b487      	push	{r0, r1, r2, r7}
 80045ca:	1c21      	adds	r1, r4, #0
 80045cc:	f7fe fdd2 	bl	8003174 <asm_helprec_internal>
 80045d0:	bc87      	pop	{r0, r1, r2, r7}
 80045d2:	3004      	adds	r0, #4
 80045d4:	3204      	adds	r2, #4
 80045d6:	2403      	movs	r4, #3
 80045d8:	403c      	ands	r4, r7
 80045da:	08bf      	lsrs	r7, r7, #2
 80045dc:	b487      	push	{r0, r1, r2, r7}
 80045de:	1c21      	adds	r1, r4, #0
 80045e0:	f7fe fdc8 	bl	8003174 <asm_helprec_internal>
 80045e4:	bc87      	pop	{r0, r1, r2, r7}
 80045e6:	3004      	adds	r0, #4
 80045e8:	3204      	adds	r2, #4
    key4bytes
 80045ea:	c980      	ldmia	r1!, {r7}
 80045ec:	2403      	movs	r4, #3
 80045ee:	403c      	ands	r4, r7
 80045f0:	08bf      	lsrs	r7, r7, #2
 80045f2:	b487      	push	{r0, r1, r2, r7}
 80045f4:	1c21      	adds	r1, r4, #0
 80045f6:	f7fe fdbd 	bl	8003174 <asm_helprec_internal>
 80045fa:	bc87      	pop	{r0, r1, r2, r7}
 80045fc:	3004      	adds	r0, #4
 80045fe:	3204      	adds	r2, #4
 8004600:	2403      	movs	r4, #3
 8004602:	403c      	ands	r4, r7
 8004604:	08bf      	lsrs	r7, r7, #2
 8004606:	b487      	push	{r0, r1, r2, r7}
 8004608:	1c21      	adds	r1, r4, #0
 800460a:	f7fe fdb3 	bl	8003174 <asm_helprec_internal>
 800460e:	bc87      	pop	{r0, r1, r2, r7}
 8004610:	3004      	adds	r0, #4
 8004612:	3204      	adds	r2, #4
 8004614:	2403      	movs	r4, #3
 8004616:	403c      	ands	r4, r7
 8004618:	08bf      	lsrs	r7, r7, #2
 800461a:	b487      	push	{r0, r1, r2, r7}
 800461c:	1c21      	adds	r1, r4, #0
 800461e:	f7fe fda9 	bl	8003174 <asm_helprec_internal>
 8004622:	bc87      	pop	{r0, r1, r2, r7}
 8004624:	3004      	adds	r0, #4
 8004626:	3204      	adds	r2, #4
 8004628:	2403      	movs	r4, #3
 800462a:	403c      	ands	r4, r7
 800462c:	08bf      	lsrs	r7, r7, #2
 800462e:	b487      	push	{r0, r1, r2, r7}
 8004630:	1c21      	adds	r1, r4, #0
 8004632:	f7fe fd9f 	bl	8003174 <asm_helprec_internal>
 8004636:	bc87      	pop	{r0, r1, r2, r7}
 8004638:	3004      	adds	r0, #4
 800463a:	3204      	adds	r2, #4
 800463c:	2403      	movs	r4, #3
 800463e:	403c      	ands	r4, r7
 8004640:	08bf      	lsrs	r7, r7, #2
 8004642:	b487      	push	{r0, r1, r2, r7}
 8004644:	1c21      	adds	r1, r4, #0
 8004646:	f7fe fd95 	bl	8003174 <asm_helprec_internal>
 800464a:	bc87      	pop	{r0, r1, r2, r7}
 800464c:	3004      	adds	r0, #4
 800464e:	3204      	adds	r2, #4
 8004650:	2403      	movs	r4, #3
 8004652:	403c      	ands	r4, r7
 8004654:	08bf      	lsrs	r7, r7, #2
 8004656:	b487      	push	{r0, r1, r2, r7}
 8004658:	1c21      	adds	r1, r4, #0
 800465a:	f7fe fd8b 	bl	8003174 <asm_helprec_internal>
 800465e:	bc87      	pop	{r0, r1, r2, r7}
 8004660:	3004      	adds	r0, #4
 8004662:	3204      	adds	r2, #4
 8004664:	2403      	movs	r4, #3
 8004666:	403c      	ands	r4, r7
 8004668:	08bf      	lsrs	r7, r7, #2
 800466a:	b487      	push	{r0, r1, r2, r7}
 800466c:	1c21      	adds	r1, r4, #0
 800466e:	f7fe fd81 	bl	8003174 <asm_helprec_internal>
 8004672:	bc87      	pop	{r0, r1, r2, r7}
 8004674:	3004      	adds	r0, #4
 8004676:	3204      	adds	r2, #4
 8004678:	2403      	movs	r4, #3
 800467a:	403c      	ands	r4, r7
 800467c:	08bf      	lsrs	r7, r7, #2
 800467e:	b487      	push	{r0, r1, r2, r7}
 8004680:	1c21      	adds	r1, r4, #0
 8004682:	f7fe fd77 	bl	8003174 <asm_helprec_internal>
 8004686:	bc87      	pop	{r0, r1, r2, r7}
 8004688:	3004      	adds	r0, #4
 800468a:	3204      	adds	r2, #4
 800468c:	2403      	movs	r4, #3
 800468e:	403c      	ands	r4, r7
 8004690:	08bf      	lsrs	r7, r7, #2
 8004692:	b487      	push	{r0, r1, r2, r7}
 8004694:	1c21      	adds	r1, r4, #0
 8004696:	f7fe fd6d 	bl	8003174 <asm_helprec_internal>
 800469a:	bc87      	pop	{r0, r1, r2, r7}
 800469c:	3004      	adds	r0, #4
 800469e:	3204      	adds	r2, #4
 80046a0:	2403      	movs	r4, #3
 80046a2:	403c      	ands	r4, r7
 80046a4:	08bf      	lsrs	r7, r7, #2
 80046a6:	b487      	push	{r0, r1, r2, r7}
 80046a8:	1c21      	adds	r1, r4, #0
 80046aa:	f7fe fd63 	bl	8003174 <asm_helprec_internal>
 80046ae:	bc87      	pop	{r0, r1, r2, r7}
 80046b0:	3004      	adds	r0, #4
 80046b2:	3204      	adds	r2, #4
 80046b4:	2403      	movs	r4, #3
 80046b6:	403c      	ands	r4, r7
 80046b8:	08bf      	lsrs	r7, r7, #2
 80046ba:	b487      	push	{r0, r1, r2, r7}
 80046bc:	1c21      	adds	r1, r4, #0
 80046be:	f7fe fd59 	bl	8003174 <asm_helprec_internal>
 80046c2:	bc87      	pop	{r0, r1, r2, r7}
 80046c4:	3004      	adds	r0, #4
 80046c6:	3204      	adds	r2, #4
 80046c8:	2403      	movs	r4, #3
 80046ca:	403c      	ands	r4, r7
 80046cc:	08bf      	lsrs	r7, r7, #2
 80046ce:	b487      	push	{r0, r1, r2, r7}
 80046d0:	1c21      	adds	r1, r4, #0
 80046d2:	f7fe fd4f 	bl	8003174 <asm_helprec_internal>
 80046d6:	bc87      	pop	{r0, r1, r2, r7}
 80046d8:	3004      	adds	r0, #4
 80046da:	3204      	adds	r2, #4
 80046dc:	2403      	movs	r4, #3
 80046de:	403c      	ands	r4, r7
 80046e0:	08bf      	lsrs	r7, r7, #2
 80046e2:	b487      	push	{r0, r1, r2, r7}
 80046e4:	1c21      	adds	r1, r4, #0
 80046e6:	f7fe fd45 	bl	8003174 <asm_helprec_internal>
 80046ea:	bc87      	pop	{r0, r1, r2, r7}
 80046ec:	3004      	adds	r0, #4
 80046ee:	3204      	adds	r2, #4
 80046f0:	2403      	movs	r4, #3
 80046f2:	403c      	ands	r4, r7
 80046f4:	08bf      	lsrs	r7, r7, #2
 80046f6:	b487      	push	{r0, r1, r2, r7}
 80046f8:	1c21      	adds	r1, r4, #0
 80046fa:	f7fe fd3b 	bl	8003174 <asm_helprec_internal>
 80046fe:	bc87      	pop	{r0, r1, r2, r7}
 8004700:	3004      	adds	r0, #4
 8004702:	3204      	adds	r2, #4
 8004704:	2403      	movs	r4, #3
 8004706:	403c      	ands	r4, r7
 8004708:	08bf      	lsrs	r7, r7, #2
 800470a:	b487      	push	{r0, r1, r2, r7}
 800470c:	1c21      	adds	r1, r4, #0
 800470e:	f7fe fd31 	bl	8003174 <asm_helprec_internal>
 8004712:	bc87      	pop	{r0, r1, r2, r7}
 8004714:	3004      	adds	r0, #4
 8004716:	3204      	adds	r2, #4
 8004718:	2403      	movs	r4, #3
 800471a:	403c      	ands	r4, r7
 800471c:	08bf      	lsrs	r7, r7, #2
 800471e:	b487      	push	{r0, r1, r2, r7}
 8004720:	1c21      	adds	r1, r4, #0
 8004722:	f7fe fd27 	bl	8003174 <asm_helprec_internal>
 8004726:	bc87      	pop	{r0, r1, r2, r7}
 8004728:	3004      	adds	r0, #4
 800472a:	3204      	adds	r2, #4
    key4bytes
 800472c:	c980      	ldmia	r1!, {r7}
 800472e:	2403      	movs	r4, #3
 8004730:	403c      	ands	r4, r7
 8004732:	08bf      	lsrs	r7, r7, #2
 8004734:	b487      	push	{r0, r1, r2, r7}
 8004736:	1c21      	adds	r1, r4, #0
 8004738:	f7fe fd1c 	bl	8003174 <asm_helprec_internal>
 800473c:	bc87      	pop	{r0, r1, r2, r7}
 800473e:	3004      	adds	r0, #4
 8004740:	3204      	adds	r2, #4
 8004742:	2403      	movs	r4, #3
 8004744:	403c      	ands	r4, r7
 8004746:	08bf      	lsrs	r7, r7, #2
 8004748:	b487      	push	{r0, r1, r2, r7}
 800474a:	1c21      	adds	r1, r4, #0
 800474c:	f7fe fd12 	bl	8003174 <asm_helprec_internal>
 8004750:	bc87      	pop	{r0, r1, r2, r7}
 8004752:	3004      	adds	r0, #4
 8004754:	3204      	adds	r2, #4
 8004756:	2403      	movs	r4, #3
 8004758:	403c      	ands	r4, r7
 800475a:	08bf      	lsrs	r7, r7, #2
 800475c:	b487      	push	{r0, r1, r2, r7}
 800475e:	1c21      	adds	r1, r4, #0
 8004760:	f7fe fd08 	bl	8003174 <asm_helprec_internal>
 8004764:	bc87      	pop	{r0, r1, r2, r7}
 8004766:	3004      	adds	r0, #4
 8004768:	3204      	adds	r2, #4
 800476a:	2403      	movs	r4, #3
 800476c:	403c      	ands	r4, r7
 800476e:	08bf      	lsrs	r7, r7, #2
 8004770:	b487      	push	{r0, r1, r2, r7}
 8004772:	1c21      	adds	r1, r4, #0
 8004774:	f7fe fcfe 	bl	8003174 <asm_helprec_internal>
 8004778:	bc87      	pop	{r0, r1, r2, r7}
 800477a:	3004      	adds	r0, #4
 800477c:	3204      	adds	r2, #4
 800477e:	2403      	movs	r4, #3
 8004780:	403c      	ands	r4, r7
 8004782:	08bf      	lsrs	r7, r7, #2
 8004784:	b487      	push	{r0, r1, r2, r7}
 8004786:	1c21      	adds	r1, r4, #0
 8004788:	f7fe fcf4 	bl	8003174 <asm_helprec_internal>
 800478c:	bc87      	pop	{r0, r1, r2, r7}
 800478e:	3004      	adds	r0, #4
 8004790:	3204      	adds	r2, #4
 8004792:	2403      	movs	r4, #3
 8004794:	403c      	ands	r4, r7
 8004796:	08bf      	lsrs	r7, r7, #2
 8004798:	b487      	push	{r0, r1, r2, r7}
 800479a:	1c21      	adds	r1, r4, #0
 800479c:	f7fe fcea 	bl	8003174 <asm_helprec_internal>
 80047a0:	bc87      	pop	{r0, r1, r2, r7}
 80047a2:	3004      	adds	r0, #4
 80047a4:	3204      	adds	r2, #4
 80047a6:	2403      	movs	r4, #3
 80047a8:	403c      	ands	r4, r7
 80047aa:	08bf      	lsrs	r7, r7, #2
 80047ac:	b487      	push	{r0, r1, r2, r7}
 80047ae:	1c21      	adds	r1, r4, #0
 80047b0:	f7fe fce0 	bl	8003174 <asm_helprec_internal>
 80047b4:	bc87      	pop	{r0, r1, r2, r7}
 80047b6:	3004      	adds	r0, #4
 80047b8:	3204      	adds	r2, #4
 80047ba:	2403      	movs	r4, #3
 80047bc:	403c      	ands	r4, r7
 80047be:	08bf      	lsrs	r7, r7, #2
 80047c0:	b487      	push	{r0, r1, r2, r7}
 80047c2:	1c21      	adds	r1, r4, #0
 80047c4:	f7fe fcd6 	bl	8003174 <asm_helprec_internal>
 80047c8:	bc87      	pop	{r0, r1, r2, r7}
 80047ca:	3004      	adds	r0, #4
 80047cc:	3204      	adds	r2, #4
 80047ce:	2403      	movs	r4, #3
 80047d0:	403c      	ands	r4, r7
 80047d2:	08bf      	lsrs	r7, r7, #2
 80047d4:	b487      	push	{r0, r1, r2, r7}
 80047d6:	1c21      	adds	r1, r4, #0
 80047d8:	f7fe fccc 	bl	8003174 <asm_helprec_internal>
 80047dc:	bc87      	pop	{r0, r1, r2, r7}
 80047de:	3004      	adds	r0, #4
 80047e0:	3204      	adds	r2, #4
 80047e2:	2403      	movs	r4, #3
 80047e4:	403c      	ands	r4, r7
 80047e6:	08bf      	lsrs	r7, r7, #2
 80047e8:	b487      	push	{r0, r1, r2, r7}
 80047ea:	1c21      	adds	r1, r4, #0
 80047ec:	f7fe fcc2 	bl	8003174 <asm_helprec_internal>
 80047f0:	bc87      	pop	{r0, r1, r2, r7}
 80047f2:	3004      	adds	r0, #4
 80047f4:	3204      	adds	r2, #4
 80047f6:	2403      	movs	r4, #3
 80047f8:	403c      	ands	r4, r7
 80047fa:	08bf      	lsrs	r7, r7, #2
 80047fc:	b487      	push	{r0, r1, r2, r7}
 80047fe:	1c21      	adds	r1, r4, #0
 8004800:	f7fe fcb8 	bl	8003174 <asm_helprec_internal>
 8004804:	bc87      	pop	{r0, r1, r2, r7}
 8004806:	3004      	adds	r0, #4
 8004808:	3204      	adds	r2, #4
 800480a:	2403      	movs	r4, #3
 800480c:	403c      	ands	r4, r7
 800480e:	08bf      	lsrs	r7, r7, #2
 8004810:	b487      	push	{r0, r1, r2, r7}
 8004812:	1c21      	adds	r1, r4, #0
 8004814:	f7fe fcae 	bl	8003174 <asm_helprec_internal>
 8004818:	bc87      	pop	{r0, r1, r2, r7}
 800481a:	3004      	adds	r0, #4
 800481c:	3204      	adds	r2, #4
 800481e:	2403      	movs	r4, #3
 8004820:	403c      	ands	r4, r7
 8004822:	08bf      	lsrs	r7, r7, #2
 8004824:	b487      	push	{r0, r1, r2, r7}
 8004826:	1c21      	adds	r1, r4, #0
 8004828:	f7fe fca4 	bl	8003174 <asm_helprec_internal>
 800482c:	bc87      	pop	{r0, r1, r2, r7}
 800482e:	3004      	adds	r0, #4
 8004830:	3204      	adds	r2, #4
 8004832:	2403      	movs	r4, #3
 8004834:	403c      	ands	r4, r7
 8004836:	08bf      	lsrs	r7, r7, #2
 8004838:	b487      	push	{r0, r1, r2, r7}
 800483a:	1c21      	adds	r1, r4, #0
 800483c:	f7fe fc9a 	bl	8003174 <asm_helprec_internal>
 8004840:	bc87      	pop	{r0, r1, r2, r7}
 8004842:	3004      	adds	r0, #4
 8004844:	3204      	adds	r2, #4
 8004846:	2403      	movs	r4, #3
 8004848:	403c      	ands	r4, r7
 800484a:	08bf      	lsrs	r7, r7, #2
 800484c:	b487      	push	{r0, r1, r2, r7}
 800484e:	1c21      	adds	r1, r4, #0
 8004850:	f7fe fc90 	bl	8003174 <asm_helprec_internal>
 8004854:	bc87      	pop	{r0, r1, r2, r7}
 8004856:	3004      	adds	r0, #4
 8004858:	3204      	adds	r2, #4
 800485a:	2403      	movs	r4, #3
 800485c:	403c      	ands	r4, r7
 800485e:	08bf      	lsrs	r7, r7, #2
 8004860:	b487      	push	{r0, r1, r2, r7}
 8004862:	1c21      	adds	r1, r4, #0
 8004864:	f7fe fc86 	bl	8003174 <asm_helprec_internal>
 8004868:	bc87      	pop	{r0, r1, r2, r7}
 800486a:	3004      	adds	r0, #4
 800486c:	3204      	adds	r2, #4
    key4bytes
 800486e:	c980      	ldmia	r1!, {r7}
 8004870:	2403      	movs	r4, #3
 8004872:	403c      	ands	r4, r7
 8004874:	08bf      	lsrs	r7, r7, #2
 8004876:	b487      	push	{r0, r1, r2, r7}
 8004878:	1c21      	adds	r1, r4, #0
 800487a:	f7fe fc7b 	bl	8003174 <asm_helprec_internal>
 800487e:	bc87      	pop	{r0, r1, r2, r7}
 8004880:	3004      	adds	r0, #4
 8004882:	3204      	adds	r2, #4
 8004884:	2403      	movs	r4, #3
 8004886:	403c      	ands	r4, r7
 8004888:	08bf      	lsrs	r7, r7, #2
 800488a:	b487      	push	{r0, r1, r2, r7}
 800488c:	1c21      	adds	r1, r4, #0
 800488e:	f7fe fc71 	bl	8003174 <asm_helprec_internal>
 8004892:	bc87      	pop	{r0, r1, r2, r7}
 8004894:	3004      	adds	r0, #4
 8004896:	3204      	adds	r2, #4
 8004898:	2403      	movs	r4, #3
 800489a:	403c      	ands	r4, r7
 800489c:	08bf      	lsrs	r7, r7, #2
 800489e:	b487      	push	{r0, r1, r2, r7}
 80048a0:	1c21      	adds	r1, r4, #0
 80048a2:	f7fe fc67 	bl	8003174 <asm_helprec_internal>
 80048a6:	bc87      	pop	{r0, r1, r2, r7}
 80048a8:	3004      	adds	r0, #4
 80048aa:	3204      	adds	r2, #4
 80048ac:	2403      	movs	r4, #3
 80048ae:	403c      	ands	r4, r7
 80048b0:	08bf      	lsrs	r7, r7, #2
 80048b2:	b487      	push	{r0, r1, r2, r7}
 80048b4:	1c21      	adds	r1, r4, #0
 80048b6:	f7fe fc5d 	bl	8003174 <asm_helprec_internal>
 80048ba:	bc87      	pop	{r0, r1, r2, r7}
 80048bc:	3004      	adds	r0, #4
 80048be:	3204      	adds	r2, #4
 80048c0:	2403      	movs	r4, #3
 80048c2:	403c      	ands	r4, r7
 80048c4:	08bf      	lsrs	r7, r7, #2
 80048c6:	b487      	push	{r0, r1, r2, r7}
 80048c8:	1c21      	adds	r1, r4, #0
 80048ca:	f7fe fc53 	bl	8003174 <asm_helprec_internal>
 80048ce:	bc87      	pop	{r0, r1, r2, r7}
 80048d0:	3004      	adds	r0, #4
 80048d2:	3204      	adds	r2, #4
 80048d4:	2403      	movs	r4, #3
 80048d6:	403c      	ands	r4, r7
 80048d8:	08bf      	lsrs	r7, r7, #2
 80048da:	b487      	push	{r0, r1, r2, r7}
 80048dc:	1c21      	adds	r1, r4, #0
 80048de:	f7fe fc49 	bl	8003174 <asm_helprec_internal>
 80048e2:	bc87      	pop	{r0, r1, r2, r7}
 80048e4:	3004      	adds	r0, #4
 80048e6:	3204      	adds	r2, #4
 80048e8:	2403      	movs	r4, #3
 80048ea:	403c      	ands	r4, r7
 80048ec:	08bf      	lsrs	r7, r7, #2
 80048ee:	b487      	push	{r0, r1, r2, r7}
 80048f0:	1c21      	adds	r1, r4, #0
 80048f2:	f7fe fc3f 	bl	8003174 <asm_helprec_internal>
 80048f6:	bc87      	pop	{r0, r1, r2, r7}
 80048f8:	3004      	adds	r0, #4
 80048fa:	3204      	adds	r2, #4
 80048fc:	2403      	movs	r4, #3
 80048fe:	403c      	ands	r4, r7
 8004900:	08bf      	lsrs	r7, r7, #2
 8004902:	b487      	push	{r0, r1, r2, r7}
 8004904:	1c21      	adds	r1, r4, #0
 8004906:	f7fe fc35 	bl	8003174 <asm_helprec_internal>
 800490a:	bc87      	pop	{r0, r1, r2, r7}
 800490c:	3004      	adds	r0, #4
 800490e:	3204      	adds	r2, #4
 8004910:	2403      	movs	r4, #3
 8004912:	403c      	ands	r4, r7
 8004914:	08bf      	lsrs	r7, r7, #2
 8004916:	b487      	push	{r0, r1, r2, r7}
 8004918:	1c21      	adds	r1, r4, #0
 800491a:	f7fe fc2b 	bl	8003174 <asm_helprec_internal>
 800491e:	bc87      	pop	{r0, r1, r2, r7}
 8004920:	3004      	adds	r0, #4
 8004922:	3204      	adds	r2, #4
 8004924:	2403      	movs	r4, #3
 8004926:	403c      	ands	r4, r7
 8004928:	08bf      	lsrs	r7, r7, #2
 800492a:	b487      	push	{r0, r1, r2, r7}
 800492c:	1c21      	adds	r1, r4, #0
 800492e:	f7fe fc21 	bl	8003174 <asm_helprec_internal>
 8004932:	bc87      	pop	{r0, r1, r2, r7}
 8004934:	3004      	adds	r0, #4
 8004936:	3204      	adds	r2, #4
 8004938:	2403      	movs	r4, #3
 800493a:	403c      	ands	r4, r7
 800493c:	08bf      	lsrs	r7, r7, #2
 800493e:	b487      	push	{r0, r1, r2, r7}
 8004940:	1c21      	adds	r1, r4, #0
 8004942:	f7fe fc17 	bl	8003174 <asm_helprec_internal>
 8004946:	bc87      	pop	{r0, r1, r2, r7}
 8004948:	3004      	adds	r0, #4
 800494a:	3204      	adds	r2, #4
 800494c:	2403      	movs	r4, #3
 800494e:	403c      	ands	r4, r7
 8004950:	08bf      	lsrs	r7, r7, #2
 8004952:	b487      	push	{r0, r1, r2, r7}
 8004954:	1c21      	adds	r1, r4, #0
 8004956:	f7fe fc0d 	bl	8003174 <asm_helprec_internal>
 800495a:	bc87      	pop	{r0, r1, r2, r7}
 800495c:	3004      	adds	r0, #4
 800495e:	3204      	adds	r2, #4
 8004960:	2403      	movs	r4, #3
 8004962:	403c      	ands	r4, r7
 8004964:	08bf      	lsrs	r7, r7, #2
 8004966:	b487      	push	{r0, r1, r2, r7}
 8004968:	1c21      	adds	r1, r4, #0
 800496a:	f7fe fc03 	bl	8003174 <asm_helprec_internal>
 800496e:	bc87      	pop	{r0, r1, r2, r7}
 8004970:	3004      	adds	r0, #4
 8004972:	3204      	adds	r2, #4
 8004974:	2403      	movs	r4, #3
 8004976:	403c      	ands	r4, r7
 8004978:	08bf      	lsrs	r7, r7, #2
 800497a:	b487      	push	{r0, r1, r2, r7}
 800497c:	1c21      	adds	r1, r4, #0
 800497e:	f7fe fbf9 	bl	8003174 <asm_helprec_internal>
 8004982:	bc87      	pop	{r0, r1, r2, r7}
 8004984:	3004      	adds	r0, #4
 8004986:	3204      	adds	r2, #4
 8004988:	2403      	movs	r4, #3
 800498a:	403c      	ands	r4, r7
 800498c:	08bf      	lsrs	r7, r7, #2
 800498e:	b487      	push	{r0, r1, r2, r7}
 8004990:	1c21      	adds	r1, r4, #0
 8004992:	f7fe fbef 	bl	8003174 <asm_helprec_internal>
 8004996:	bc87      	pop	{r0, r1, r2, r7}
 8004998:	3004      	adds	r0, #4
 800499a:	3204      	adds	r2, #4
 800499c:	2403      	movs	r4, #3
 800499e:	403c      	ands	r4, r7
 80049a0:	08bf      	lsrs	r7, r7, #2
 80049a2:	b487      	push	{r0, r1, r2, r7}
 80049a4:	1c21      	adds	r1, r4, #0
 80049a6:	f7fe fbe5 	bl	8003174 <asm_helprec_internal>
 80049aa:	bc87      	pop	{r0, r1, r2, r7}
 80049ac:	3004      	adds	r0, #4
 80049ae:	3204      	adds	r2, #4
    pop {r4-r7,pc}
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b2 <asm_rec>:

.global asm_rec   
.type asm_rec, %function

asm_rec:
    push {r4-r7,lr}
 80049b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80049b4:	4644      	mov	r4, r8
    push {r4}
 80049b6:	b410      	push	{r4}


    
        MOV r3,#3
 80049b8:	2303      	movs	r3, #3
    LSL r3,#16
 80049ba:	041b      	lsls	r3, r3, #16
    ADD r3,#16
 80049bc:	3310      	adds	r3, #16
    mov r8,r3
 80049be:	4698      	mov	r8, r3

    eor r4,r4
 80049c0:	4064      	eors	r4, r4
    eor r5,r5
 80049c2:	406d      	eors	r5, r5
    eor r6,r6
 80049c4:	4076      	eors	r6, r6
    eor r7,r7
 80049c6:	407f      	eors	r7, r7


    stm r0,{r4,r5,r6,r7}
 80049c8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80049ca:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

    sub r0,#32
 80049cc:	3820      	subs	r0, #32


    eor r3,r3
 80049ce:	405b      	eors	r3, r3
    sub r0,#4
 80049d0:	3804      	subs	r0, #4


    setKey
 80049d2:	b401      	push	{r0}
 80049d4:	f7fe fd7c 	bl	80034d0 <asm_8bits_key>
 80049d8:	1c05      	adds	r5, r0, #0
 80049da:	bc01      	pop	{r0}
 80049dc:	2304      	movs	r3, #4
 80049de:	b421      	push	{r0, r5}
 80049e0:	f7fe fd76 	bl	80034d0 <asm_8bits_key>
 80049e4:	0204      	lsls	r4, r0, #8
 80049e6:	bc21      	pop	{r0, r5}
 80049e8:	4325      	orrs	r5, r4
 80049ea:	2304      	movs	r3, #4
 80049ec:	b421      	push	{r0, r5}
 80049ee:	f7fe fd6f 	bl	80034d0 <asm_8bits_key>
 80049f2:	0404      	lsls	r4, r0, #16
 80049f4:	bc21      	pop	{r0, r5}
 80049f6:	4325      	orrs	r5, r4
 80049f8:	2304      	movs	r3, #4
 80049fa:	b421      	push	{r0, r5}
 80049fc:	f7fe fd68 	bl	80034d0 <asm_8bits_key>
 8004a00:	0604      	lsls	r4, r0, #24
 8004a02:	bc21      	pop	{r0, r5}
 8004a04:	4325      	orrs	r5, r4
 8004a06:	3004      	adds	r0, #4
 8004a08:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004a0a:	2304      	movs	r3, #4
    setKey
 8004a0c:	b401      	push	{r0}
 8004a0e:	f7fe fd5f 	bl	80034d0 <asm_8bits_key>
 8004a12:	1c05      	adds	r5, r0, #0
 8004a14:	bc01      	pop	{r0}
 8004a16:	2304      	movs	r3, #4
 8004a18:	b421      	push	{r0, r5}
 8004a1a:	f7fe fd59 	bl	80034d0 <asm_8bits_key>
 8004a1e:	0204      	lsls	r4, r0, #8
 8004a20:	bc21      	pop	{r0, r5}
 8004a22:	4325      	orrs	r5, r4
 8004a24:	2304      	movs	r3, #4
 8004a26:	b421      	push	{r0, r5}
 8004a28:	f7fe fd52 	bl	80034d0 <asm_8bits_key>
 8004a2c:	0404      	lsls	r4, r0, #16
 8004a2e:	bc21      	pop	{r0, r5}
 8004a30:	4325      	orrs	r5, r4
 8004a32:	2304      	movs	r3, #4
 8004a34:	b421      	push	{r0, r5}
 8004a36:	f7fe fd4b 	bl	80034d0 <asm_8bits_key>
 8004a3a:	0604      	lsls	r4, r0, #24
 8004a3c:	bc21      	pop	{r0, r5}
 8004a3e:	4325      	orrs	r5, r4
 8004a40:	3004      	adds	r0, #4
 8004a42:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004a44:	2304      	movs	r3, #4
    setKey
 8004a46:	b401      	push	{r0}
 8004a48:	f7fe fd42 	bl	80034d0 <asm_8bits_key>
 8004a4c:	1c05      	adds	r5, r0, #0
 8004a4e:	bc01      	pop	{r0}
 8004a50:	2304      	movs	r3, #4
 8004a52:	b421      	push	{r0, r5}
 8004a54:	f7fe fd3c 	bl	80034d0 <asm_8bits_key>
 8004a58:	0204      	lsls	r4, r0, #8
 8004a5a:	bc21      	pop	{r0, r5}
 8004a5c:	4325      	orrs	r5, r4
 8004a5e:	2304      	movs	r3, #4
 8004a60:	b421      	push	{r0, r5}
 8004a62:	f7fe fd35 	bl	80034d0 <asm_8bits_key>
 8004a66:	0404      	lsls	r4, r0, #16
 8004a68:	bc21      	pop	{r0, r5}
 8004a6a:	4325      	orrs	r5, r4
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	b421      	push	{r0, r5}
 8004a70:	f7fe fd2e 	bl	80034d0 <asm_8bits_key>
 8004a74:	0604      	lsls	r4, r0, #24
 8004a76:	bc21      	pop	{r0, r5}
 8004a78:	4325      	orrs	r5, r4
 8004a7a:	3004      	adds	r0, #4
 8004a7c:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004a7e:	2304      	movs	r3, #4
    setKey
 8004a80:	b401      	push	{r0}
 8004a82:	f7fe fd25 	bl	80034d0 <asm_8bits_key>
 8004a86:	1c05      	adds	r5, r0, #0
 8004a88:	bc01      	pop	{r0}
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	b421      	push	{r0, r5}
 8004a8e:	f7fe fd1f 	bl	80034d0 <asm_8bits_key>
 8004a92:	0204      	lsls	r4, r0, #8
 8004a94:	bc21      	pop	{r0, r5}
 8004a96:	4325      	orrs	r5, r4
 8004a98:	2304      	movs	r3, #4
 8004a9a:	b421      	push	{r0, r5}
 8004a9c:	f7fe fd18 	bl	80034d0 <asm_8bits_key>
 8004aa0:	0404      	lsls	r4, r0, #16
 8004aa2:	bc21      	pop	{r0, r5}
 8004aa4:	4325      	orrs	r5, r4
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	b421      	push	{r0, r5}
 8004aaa:	f7fe fd11 	bl	80034d0 <asm_8bits_key>
 8004aae:	0604      	lsls	r4, r0, #24
 8004ab0:	bc21      	pop	{r0, r5}
 8004ab2:	4325      	orrs	r5, r4
 8004ab4:	3004      	adds	r0, #4
 8004ab6:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004ab8:	2304      	movs	r3, #4
    setKey
 8004aba:	b401      	push	{r0}
 8004abc:	f7fe fd08 	bl	80034d0 <asm_8bits_key>
 8004ac0:	1c05      	adds	r5, r0, #0
 8004ac2:	bc01      	pop	{r0}
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	b421      	push	{r0, r5}
 8004ac8:	f7fe fd02 	bl	80034d0 <asm_8bits_key>
 8004acc:	0204      	lsls	r4, r0, #8
 8004ace:	bc21      	pop	{r0, r5}
 8004ad0:	4325      	orrs	r5, r4
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	b421      	push	{r0, r5}
 8004ad6:	f7fe fcfb 	bl	80034d0 <asm_8bits_key>
 8004ada:	0404      	lsls	r4, r0, #16
 8004adc:	bc21      	pop	{r0, r5}
 8004ade:	4325      	orrs	r5, r4
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	b421      	push	{r0, r5}
 8004ae4:	f7fe fcf4 	bl	80034d0 <asm_8bits_key>
 8004ae8:	0604      	lsls	r4, r0, #24
 8004aea:	bc21      	pop	{r0, r5}
 8004aec:	4325      	orrs	r5, r4
 8004aee:	3004      	adds	r0, #4
 8004af0:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004af2:	2304      	movs	r3, #4
    setKey
 8004af4:	b401      	push	{r0}
 8004af6:	f7fe fceb 	bl	80034d0 <asm_8bits_key>
 8004afa:	1c05      	adds	r5, r0, #0
 8004afc:	bc01      	pop	{r0}
 8004afe:	2304      	movs	r3, #4
 8004b00:	b421      	push	{r0, r5}
 8004b02:	f7fe fce5 	bl	80034d0 <asm_8bits_key>
 8004b06:	0204      	lsls	r4, r0, #8
 8004b08:	bc21      	pop	{r0, r5}
 8004b0a:	4325      	orrs	r5, r4
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	b421      	push	{r0, r5}
 8004b10:	f7fe fcde 	bl	80034d0 <asm_8bits_key>
 8004b14:	0404      	lsls	r4, r0, #16
 8004b16:	bc21      	pop	{r0, r5}
 8004b18:	4325      	orrs	r5, r4
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	b421      	push	{r0, r5}
 8004b1e:	f7fe fcd7 	bl	80034d0 <asm_8bits_key>
 8004b22:	0604      	lsls	r4, r0, #24
 8004b24:	bc21      	pop	{r0, r5}
 8004b26:	4325      	orrs	r5, r4
 8004b28:	3004      	adds	r0, #4
 8004b2a:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004b2c:	2304      	movs	r3, #4
    setKey
 8004b2e:	b401      	push	{r0}
 8004b30:	f7fe fcce 	bl	80034d0 <asm_8bits_key>
 8004b34:	1c05      	adds	r5, r0, #0
 8004b36:	bc01      	pop	{r0}
 8004b38:	2304      	movs	r3, #4
 8004b3a:	b421      	push	{r0, r5}
 8004b3c:	f7fe fcc8 	bl	80034d0 <asm_8bits_key>
 8004b40:	0204      	lsls	r4, r0, #8
 8004b42:	bc21      	pop	{r0, r5}
 8004b44:	4325      	orrs	r5, r4
 8004b46:	2304      	movs	r3, #4
 8004b48:	b421      	push	{r0, r5}
 8004b4a:	f7fe fcc1 	bl	80034d0 <asm_8bits_key>
 8004b4e:	0404      	lsls	r4, r0, #16
 8004b50:	bc21      	pop	{r0, r5}
 8004b52:	4325      	orrs	r5, r4
 8004b54:	2304      	movs	r3, #4
 8004b56:	b421      	push	{r0, r5}
 8004b58:	f7fe fcba 	bl	80034d0 <asm_8bits_key>
 8004b5c:	0604      	lsls	r4, r0, #24
 8004b5e:	bc21      	pop	{r0, r5}
 8004b60:	4325      	orrs	r5, r4
 8004b62:	3004      	adds	r0, #4
 8004b64:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004b66:	2304      	movs	r3, #4
    setKey
 8004b68:	b401      	push	{r0}
 8004b6a:	f7fe fcb1 	bl	80034d0 <asm_8bits_key>
 8004b6e:	1c05      	adds	r5, r0, #0
 8004b70:	bc01      	pop	{r0}
 8004b72:	2304      	movs	r3, #4
 8004b74:	b421      	push	{r0, r5}
 8004b76:	f7fe fcab 	bl	80034d0 <asm_8bits_key>
 8004b7a:	0204      	lsls	r4, r0, #8
 8004b7c:	bc21      	pop	{r0, r5}
 8004b7e:	4325      	orrs	r5, r4
 8004b80:	2304      	movs	r3, #4
 8004b82:	b421      	push	{r0, r5}
 8004b84:	f7fe fca4 	bl	80034d0 <asm_8bits_key>
 8004b88:	0404      	lsls	r4, r0, #16
 8004b8a:	bc21      	pop	{r0, r5}
 8004b8c:	4325      	orrs	r5, r4
 8004b8e:	2304      	movs	r3, #4
 8004b90:	b421      	push	{r0, r5}
 8004b92:	f7fe fc9d 	bl	80034d0 <asm_8bits_key>
 8004b96:	0604      	lsls	r4, r0, #24
 8004b98:	bc21      	pop	{r0, r5}
 8004b9a:	4325      	orrs	r5, r4
 8004b9c:	3004      	adds	r0, #4
 8004b9e:	6005      	str	r5, [r0, #0]


    pop {r4}
 8004ba0:	bc10      	pop	{r4}
    mov r8,r4
 8004ba2:	46a0      	mov	r8, r4
    pop {r4-r7,pc} 
 8004ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba6:	bf00      	nop

08004ba8 <asm_ntt>:
@
.align 2    
.global	asm_ntt
.type	asm_ntt, %function
asm_ntt:
	push {r4-r7,lr}
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8004baa:	4644      	mov	r4, r8
    mov r5,r9
 8004bac:	464d      	mov	r5, r9
    mov r6,r10
 8004bae:	4656      	mov	r6, sl
    mov r7,r11
 8004bb0:	465f      	mov	r7, fp
    push {r4-r7}
 8004bb2:	b4f0      	push	{r4, r5, r6, r7}
    mov r4,r12
 8004bb4:	4664      	mov	r4, ip
    mov r5,r14
 8004bb6:	4675      	mov	r5, lr
    push {r4,r5}
 8004bb8:	b430      	push	{r4, r5}


    MOV r4,#3
 8004bba:	2403      	movs	r4, #3
    LSL r4,#12
 8004bbc:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 8004bbe:	3401      	adds	r4, #1
	MOV r14,r4
 8004bc0:	46a6      	mov	lr, r4
    LSL r3,r4,#2
 8004bc2:	00a3      	lsls	r3, r4, #2
    ADD r4,r3
 8004bc4:	18e4      	adds	r4, r4, r3
	MOV r8,r4
 8004bc6:	46a0      	mov	r8, r4
    MOV r4,#1
 8004bc8:	2401      	movs	r4, #1
    LSL r4,#18
 8004bca:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 8004bcc:	3c01      	subs	r4, #1
	MOV r10,r4
 8004bce:	46a2      	mov	sl, r4


	MOV r9,r1
 8004bd0:	4689      	mov	r9, r1
		

	MOV r4,#1
 8004bd2:	2401      	movs	r4, #1
    LSL  r4,#9
 8004bd4:	0264      	lsls	r4, r4, #9
        
	ADD r1,r4
 8004bd6:	1909      	adds	r1, r1, r4

	LSL r4,#2
 8004bd8:	00a4      	lsls	r4, r4, #2

    ADD r0,r4
 8004bda:	1900      	adds	r0, r0, r4

08004bdc <nttloop>:
	



nttloop:
    SUB r1,#2
 8004bdc:	3902      	subs	r1, #2
	SUB r0,#8
 8004bde:	3808      	subs	r0, #8
	

	doublefly 
 8004be0:	6804      	ldr	r4, [r0, #0]
 8004be2:	b2a3      	uxth	r3, r4
 8004be4:	0c24      	lsrs	r4, r4, #16
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	191b      	adds	r3, r3, r4
 8004bea:	469c      	mov	ip, r3
 8004bec:	4442      	add	r2, r8
 8004bee:	1b12      	subs	r2, r2, r4
 8004bf0:	464d      	mov	r5, r9
 8004bf2:	1b4f      	subs	r7, r1, r5
 8004bf4:	007f      	lsls	r7, r7, #1
 8004bf6:	19ed      	adds	r5, r5, r7
 8004bf8:	682f      	ldr	r7, [r5, #0]
 8004bfa:	b2bd      	uxth	r5, r7
 8004bfc:	0c3f      	lsrs	r7, r7, #16
 8004bfe:	436a      	muls	r2, r5
 8004c00:	4654      	mov	r4, sl
 8004c02:	4673      	mov	r3, lr
 8004c04:	1e9e      	subs	r6, r3, #2
 8004c06:	4356      	muls	r6, r2
 8004c08:	4026      	ands	r6, r4
 8004c0a:	435e      	muls	r6, r3
 8004c0c:	1992      	adds	r2, r2, r6
 8004c0e:	0c92      	lsrs	r2, r2, #18
 8004c10:	4693      	mov	fp, r2
 8004c12:	6846      	ldr	r6, [r0, #4]
 8004c14:	b2b5      	uxth	r5, r6
 8004c16:	0c36      	lsrs	r6, r6, #16
 8004c18:	1c2a      	adds	r2, r5, #0
 8004c1a:	19ad      	adds	r5, r5, r6
 8004c1c:	4442      	add	r2, r8
 8004c1e:	1b96      	subs	r6, r2, r6
 8004c20:	437e      	muls	r6, r7
 8004c22:	1e9f      	subs	r7, r3, #2
 8004c24:	4377      	muls	r7, r6
 8004c26:	4027      	ands	r7, r4
 8004c28:	435f      	muls	r7, r3
 8004c2a:	19f6      	adds	r6, r6, r7
 8004c2c:	0cb6      	lsrs	r6, r6, #18
 8004c2e:	1c1f      	adds	r7, r3, #0
 8004c30:	465c      	mov	r4, fp
 8004c32:	4663      	mov	r3, ip
 8004c34:	195b      	adds	r3, r3, r5
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	18d2      	adds	r2, r2, r3
 8004c3a:	0c12      	lsrs	r2, r2, #16
 8004c3c:	437a      	muls	r2, r7
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	19a4      	adds	r4, r4, r6
 8004c42:	00a2      	lsls	r2, r4, #2
 8004c44:	1912      	adds	r2, r2, r4
 8004c46:	0c12      	lsrs	r2, r2, #16
 8004c48:	437a      	muls	r2, r7
 8004c4a:	1aa4      	subs	r4, r4, r2
 8004c4c:	0424      	lsls	r4, r4, #16
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	6003      	str	r3, [r0, #0]
 8004c52:	4663      	mov	r3, ip
 8004c54:	4443      	add	r3, r8
 8004c56:	1b5b      	subs	r3, r3, r5
 8004c58:	880a      	ldrh	r2, [r1, #0]
 8004c5a:	4353      	muls	r3, r2
 8004c5c:	4655      	mov	r5, sl
 8004c5e:	1ebc      	subs	r4, r7, #2
 8004c60:	435c      	muls	r4, r3
 8004c62:	402c      	ands	r4, r5
 8004c64:	437c      	muls	r4, r7
 8004c66:	191b      	adds	r3, r3, r4
 8004c68:	0c9b      	lsrs	r3, r3, #18
 8004c6a:	465c      	mov	r4, fp
 8004c6c:	4444      	add	r4, r8
 8004c6e:	1ba4      	subs	r4, r4, r6
 8004c70:	4354      	muls	r4, r2
 8004c72:	1eba      	subs	r2, r7, #2
 8004c74:	4362      	muls	r2, r4
 8004c76:	402a      	ands	r2, r5
 8004c78:	437a      	muls	r2, r7
 8004c7a:	18a4      	adds	r4, r4, r2
 8004c7c:	0ca4      	lsrs	r4, r4, #18
 8004c7e:	0424      	lsls	r4, r4, #16
 8004c80:	4323      	orrs	r3, r4
 8004c82:	6043      	str	r3, [r0, #4]


	CMP r1,r9
 8004c84:	4549      	cmp	r1, r9
	BGT nttloop
 8004c86:	dca9      	bgt.n	8004bdc <nttloop>


    
		
    MOV r7,#0
 8004c88:	2700      	movs	r7, #0
	MOV r12,r7
 8004c8a:	46bc      	mov	ip, r7

08004c8c <outll2>:

outll2:
    MOV r4,#1
 8004c8c:	2401      	movs	r4, #1
    LSL r4,#8
 8004c8e:	0224      	lsls	r4, r4, #8
	ADD r1,r4
 8004c90:	1909      	adds	r1, r1, r4

	LSL r4,#3 
 8004c92:	00e4      	lsls	r4, r4, #3
		
	ADD r4,r12
 8004c94:	4464      	add	r4, ip
	ADD r0,r4
 8004c96:	1900      	adds	r0, r0, r4

08004c98 <l2loop>:

 

l2loop:

    SUB r1,#2
 8004c98:	3902      	subs	r1, #2
	SUB r0,#16	
 8004c9a:	3810      	subs	r0, #16
	

	LDR r4,[r0]	
 8004c9c:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8004c9e:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8004ca0:	0c24      	lsrs	r4, r4, #16
	LDR r6,[r0,#8]
 8004ca2:	6886      	ldr	r6, [r0, #8]
	UXTH r5,r6
 8004ca4:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8004ca6:	0c36      	lsrs	r6, r6, #16


	MOV r2,r3
 8004ca8:	1c1a      	adds	r2, r3, #0
	MOV r11,r4
 8004caa:	46a3      	mov	fp, r4


	ADD r2,r5
 8004cac:	1952      	adds	r2, r2, r5

	ADD r4,r6		
 8004cae:	19a4      	adds	r4, r4, r6



	LSL r4,#16
 8004cb0:	0424      	lsls	r4, r4, #16
	ORR r2,r4
 8004cb2:	4322      	orrs	r2, r4
	STR r2,[r0]
 8004cb4:	6002      	str	r2, [r0, #0]


	ADD r3,r8
 8004cb6:	4443      	add	r3, r8

	SUB r3,r5
 8004cb8:	1b5b      	subs	r3, r3, r5


	LDRH r2,[r1]
 8004cba:	880a      	ldrh	r2, [r1, #0]

	MUL r3,r2
 8004cbc:	4353      	muls	r3, r2


	MOV r7,r10
 8004cbe:	4657      	mov	r7, sl
    MOV r5,r14
 8004cc0:	4675      	mov	r5, lr


    montgomery r4,r5,r7,r3
 8004cc2:	1eac      	subs	r4, r5, #2
 8004cc4:	435c      	muls	r4, r3
 8004cc6:	403c      	ands	r4, r7
 8004cc8:	436c      	muls	r4, r5
 8004cca:	191b      	adds	r3, r3, r4
 8004ccc:	0c9b      	lsrs	r3, r3, #18


	MOV r4,r11
 8004cce:	465c      	mov	r4, fp

	ADD r4,r8
 8004cd0:	4444      	add	r4, r8

	SUB r4,r6
 8004cd2:	1ba4      	subs	r4, r4, r6

	MUL r4,r2
 8004cd4:	4354      	muls	r4, r2


    montgomery r2,r5,r7,r4
 8004cd6:	1eaa      	subs	r2, r5, #2
 8004cd8:	4362      	muls	r2, r4
 8004cda:	403a      	ands	r2, r7
 8004cdc:	436a      	muls	r2, r5
 8004cde:	18a4      	adds	r4, r4, r2
 8004ce0:	0ca4      	lsrs	r4, r4, #18

	LSL r4,#16
 8004ce2:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004ce4:	4323      	orrs	r3, r4
	STR r3,[r0,#8] 
 8004ce6:	6083      	str	r3, [r0, #8]


	CMP r1,r9
 8004ce8:	4549      	cmp	r1, r9
	BGT l2loop
 8004cea:	dcd5      	bgt.n	8004c98 <l2loop>


	MOV r5,r12
 8004cec:	4665      	mov	r5, ip
	SUB r0,r5
 8004cee:	1b40      	subs	r0, r0, r5
	ADD r5,#4
 8004cf0:	3504      	adds	r5, #4
	MOV r12,r5
 8004cf2:	46ac      	mov	ip, r5


	CMP r5,#4	
 8004cf4:	2d04      	cmp	r5, #4
	BLE outll2
 8004cf6:	ddc9      	ble.n	8004c8c <outll2>


    nop
 8004cf8:	46c0      	nop			; (mov r8, r8)

        	
    MOV r7,#0
 8004cfa:	2700      	movs	r7, #0
	MOV r10,r7
 8004cfc:	46ba      	mov	sl, r7

08004cfe <outll3>:

outll3:

	MOV r4,#128
 8004cfe:	2480      	movs	r4, #128	; 0x80
    ADD r1,r4
 8004d00:	1909      	adds	r1, r1, r4

    LSL r4,#4
 8004d02:	0124      	lsls	r4, r4, #4
    ADD r4,r10
 8004d04:	4454      	add	r4, sl
    ADD r0,r4
 8004d06:	1900      	adds	r0, r0, r4

08004d08 <l3loop>:

	

l3loop:

    SUB r1,#2
 8004d08:	3902      	subs	r1, #2
	SUB r0,#32	
 8004d0a:	3820      	subs	r0, #32
	

    butterfly #16
 8004d0c:	6804      	ldr	r4, [r0, #0]
 8004d0e:	b2a3      	uxth	r3, r4
 8004d10:	0c24      	lsrs	r4, r4, #16
 8004d12:	6906      	ldr	r6, [r0, #16]
 8004d14:	b2b5      	uxth	r5, r6
 8004d16:	0c36      	lsrs	r6, r6, #16
 8004d18:	469c      	mov	ip, r3
 8004d1a:	46a3      	mov	fp, r4
 8004d1c:	195b      	adds	r3, r3, r5
 8004d1e:	4677      	mov	r7, lr
 8004d20:	009a      	lsls	r2, r3, #2
 8004d22:	18d2      	adds	r2, r2, r3
 8004d24:	0c12      	lsrs	r2, r2, #16
 8004d26:	437a      	muls	r2, r7
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	19a4      	adds	r4, r4, r6
 8004d2c:	00a2      	lsls	r2, r4, #2
 8004d2e:	1912      	adds	r2, r2, r4
 8004d30:	0c12      	lsrs	r2, r2, #16
 8004d32:	437a      	muls	r2, r7
 8004d34:	1aa4      	subs	r4, r4, r2
 8004d36:	0424      	lsls	r4, r4, #16
 8004d38:	4323      	orrs	r3, r4
 8004d3a:	6003      	str	r3, [r0, #0]
 8004d3c:	4663      	mov	r3, ip
 8004d3e:	4443      	add	r3, r8
 8004d40:	1b5b      	subs	r3, r3, r5
 8004d42:	880a      	ldrh	r2, [r1, #0]
 8004d44:	4353      	muls	r3, r2
 8004d46:	2501      	movs	r5, #1
 8004d48:	04ad      	lsls	r5, r5, #18
 8004d4a:	3d01      	subs	r5, #1
 8004d4c:	1ebc      	subs	r4, r7, #2
 8004d4e:	435c      	muls	r4, r3
 8004d50:	402c      	ands	r4, r5
 8004d52:	437c      	muls	r4, r7
 8004d54:	191b      	adds	r3, r3, r4
 8004d56:	0c9b      	lsrs	r3, r3, #18
 8004d58:	465c      	mov	r4, fp
 8004d5a:	4444      	add	r4, r8
 8004d5c:	1ba4      	subs	r4, r4, r6
 8004d5e:	4354      	muls	r4, r2
 8004d60:	1eba      	subs	r2, r7, #2
 8004d62:	4362      	muls	r2, r4
 8004d64:	402a      	ands	r2, r5
 8004d66:	437a      	muls	r2, r7
 8004d68:	18a4      	adds	r4, r4, r2
 8004d6a:	0ca4      	lsrs	r4, r4, #18
 8004d6c:	0424      	lsls	r4, r4, #16
 8004d6e:	4323      	orrs	r3, r4
 8004d70:	6103      	str	r3, [r0, #16]
	

	CMP r1,r9
 8004d72:	4549      	cmp	r1, r9
	BGT l3loop
 8004d74:	dcc8      	bgt.n	8004d08 <l3loop>

    MOV r3,r10
 8004d76:	4653      	mov	r3, sl
	SUB r0,r3
 8004d78:	1ac0      	subs	r0, r0, r3
	ADD r3,#4
 8004d7a:	3304      	adds	r3, #4
	MOV r10,r3
 8004d7c:	469a      	mov	sl, r3

	CMP r3,#12
 8004d7e:	2b0c      	cmp	r3, #12
	BLE outll3
 8004d80:	ddbd      	ble.n	8004cfe <outll3>

    MOV r12,r5
 8004d82:	46ac      	mov	ip, r5


	nop
 8004d84:	46c0      	nop			; (mov r8, r8)
    
		
    MOV r7,#0
 8004d86:	2700      	movs	r7, #0
	MOV r10,r7
 8004d88:	46ba      	mov	sl, r7

08004d8a <outll4>:

outll4:
	MOV r4,#64 
 8004d8a:	2440      	movs	r4, #64	; 0x40
	ADD r1,r4
 8004d8c:	1909      	adds	r1, r1, r4

	LSL r4,#5 
 8004d8e:	0164      	lsls	r4, r4, #5
		
	ADD r4,r10
 8004d90:	4454      	add	r4, sl
	ADD r0,r4
 8004d92:	1900      	adds	r0, r0, r4

08004d94 <l4loop>:

 

l4loop:

    SUB r1,#2
 8004d94:	3902      	subs	r1, #2
	SUB r0,#64	
 8004d96:	3840      	subs	r0, #64	; 0x40
	
    lazy_butterfly #32
 8004d98:	6804      	ldr	r4, [r0, #0]
 8004d9a:	b2a3      	uxth	r3, r4
 8004d9c:	0c24      	lsrs	r4, r4, #16
 8004d9e:	2520      	movs	r5, #32
 8004da0:	5946      	ldr	r6, [r0, r5]
 8004da2:	b2b5      	uxth	r5, r6
 8004da4:	0c36      	lsrs	r6, r6, #16
 8004da6:	1c1a      	adds	r2, r3, #0
 8004da8:	46a3      	mov	fp, r4
 8004daa:	1952      	adds	r2, r2, r5
 8004dac:	19a4      	adds	r4, r4, r6
 8004dae:	0424      	lsls	r4, r4, #16
 8004db0:	4322      	orrs	r2, r4
 8004db2:	6002      	str	r2, [r0, #0]
 8004db4:	4443      	add	r3, r8
 8004db6:	1b5b      	subs	r3, r3, r5
 8004db8:	880a      	ldrh	r2, [r1, #0]
 8004dba:	4353      	muls	r3, r2
 8004dbc:	4667      	mov	r7, ip
 8004dbe:	4675      	mov	r5, lr
 8004dc0:	1eac      	subs	r4, r5, #2
 8004dc2:	435c      	muls	r4, r3
 8004dc4:	403c      	ands	r4, r7
 8004dc6:	436c      	muls	r4, r5
 8004dc8:	191b      	adds	r3, r3, r4
 8004dca:	0c9b      	lsrs	r3, r3, #18
 8004dcc:	465c      	mov	r4, fp
 8004dce:	4444      	add	r4, r8
 8004dd0:	1ba4      	subs	r4, r4, r6
 8004dd2:	4354      	muls	r4, r2
 8004dd4:	1eaa      	subs	r2, r5, #2
 8004dd6:	4362      	muls	r2, r4
 8004dd8:	403a      	ands	r2, r7
 8004dda:	436a      	muls	r2, r5
 8004ddc:	18a4      	adds	r4, r4, r2
 8004dde:	0ca4      	lsrs	r4, r4, #18
 8004de0:	2520      	movs	r5, #32
 8004de2:	0424      	lsls	r4, r4, #16
 8004de4:	4323      	orrs	r3, r4
 8004de6:	5143      	str	r3, [r0, r5]
	CMP r1,r9
 8004de8:	4549      	cmp	r1, r9
	BGT l4loop
 8004dea:	dcd3      	bgt.n	8004d94 <l4loop>


	MOV r5,r10
 8004dec:	4655      	mov	r5, sl
	SUB r0,r5
 8004dee:	1b40      	subs	r0, r0, r5
	ADD r5,#4
 8004df0:	3504      	adds	r5, #4
	MOV r10,r5
 8004df2:	46aa      	mov	sl, r5


	CMP r5,#28	
 8004df4:	2d1c      	cmp	r5, #28
	BLE outll4
 8004df6:	ddc8      	ble.n	8004d8a <outll4>




	nop
 8004df8:	46c0      	nop			; (mov r8, r8)
		
        MOV r7,#0
 8004dfa:	2700      	movs	r7, #0
	MOV r10,r7
 8004dfc:	46ba      	mov	sl, r7

08004dfe <outll5>:

outll5:
	MOV r4,#32
 8004dfe:	2420      	movs	r4, #32
	ADD r1,r4
 8004e00:	1909      	adds	r1, r1, r4

	LSL r4,#6
 8004e02:	01a4      	lsls	r4, r4, #6
		
	
	ADD r4,r10
 8004e04:	4454      	add	r4, sl
	ADD r0,r4
 8004e06:	1900      	adds	r0, r0, r4

08004e08 <l5loop>:



l5loop:
    SUB r1,#2
 8004e08:	3902      	subs	r1, #2
	SUB r0,#128	
 8004e0a:	3880      	subs	r0, #128	; 0x80

    butterfly #64
 8004e0c:	6804      	ldr	r4, [r0, #0]
 8004e0e:	b2a3      	uxth	r3, r4
 8004e10:	0c24      	lsrs	r4, r4, #16
 8004e12:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004e14:	b2b5      	uxth	r5, r6
 8004e16:	0c36      	lsrs	r6, r6, #16
 8004e18:	469c      	mov	ip, r3
 8004e1a:	46a3      	mov	fp, r4
 8004e1c:	195b      	adds	r3, r3, r5
 8004e1e:	4677      	mov	r7, lr
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	18d2      	adds	r2, r2, r3
 8004e24:	0c12      	lsrs	r2, r2, #16
 8004e26:	437a      	muls	r2, r7
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	19a4      	adds	r4, r4, r6
 8004e2c:	00a2      	lsls	r2, r4, #2
 8004e2e:	1912      	adds	r2, r2, r4
 8004e30:	0c12      	lsrs	r2, r2, #16
 8004e32:	437a      	muls	r2, r7
 8004e34:	1aa4      	subs	r4, r4, r2
 8004e36:	0424      	lsls	r4, r4, #16
 8004e38:	4323      	orrs	r3, r4
 8004e3a:	6003      	str	r3, [r0, #0]
 8004e3c:	4663      	mov	r3, ip
 8004e3e:	4443      	add	r3, r8
 8004e40:	1b5b      	subs	r3, r3, r5
 8004e42:	880a      	ldrh	r2, [r1, #0]
 8004e44:	4353      	muls	r3, r2
 8004e46:	2501      	movs	r5, #1
 8004e48:	04ad      	lsls	r5, r5, #18
 8004e4a:	3d01      	subs	r5, #1
 8004e4c:	1ebc      	subs	r4, r7, #2
 8004e4e:	435c      	muls	r4, r3
 8004e50:	402c      	ands	r4, r5
 8004e52:	437c      	muls	r4, r7
 8004e54:	191b      	adds	r3, r3, r4
 8004e56:	0c9b      	lsrs	r3, r3, #18
 8004e58:	465c      	mov	r4, fp
 8004e5a:	4444      	add	r4, r8
 8004e5c:	1ba4      	subs	r4, r4, r6
 8004e5e:	4354      	muls	r4, r2
 8004e60:	1eba      	subs	r2, r7, #2
 8004e62:	4362      	muls	r2, r4
 8004e64:	402a      	ands	r2, r5
 8004e66:	437a      	muls	r2, r7
 8004e68:	18a4      	adds	r4, r4, r2
 8004e6a:	0ca4      	lsrs	r4, r4, #18
 8004e6c:	0424      	lsls	r4, r4, #16
 8004e6e:	4323      	orrs	r3, r4
 8004e70:	6403      	str	r3, [r0, #64]	; 0x40


	CMP r1,r9
 8004e72:	4549      	cmp	r1, r9
	BGT l5loop
 8004e74:	dcc8      	bgt.n	8004e08 <l5loop>


	MOV r3,r10
 8004e76:	4653      	mov	r3, sl
	SUB r0,r3
 8004e78:	1ac0      	subs	r0, r0, r3
	ADD r3,#4
 8004e7a:	3304      	adds	r3, #4
	MOV r10,r3
 8004e7c:	469a      	mov	sl, r3


	CMP r3,#60
 8004e7e:	2b3c      	cmp	r3, #60	; 0x3c
	BLE outll5
 8004e80:	ddbd      	ble.n	8004dfe <outll5>


    MOV r12,r5
 8004e82:	46ac      	mov	ip, r5

	nop
 8004e84:	46c0      	nop			; (mov r8, r8)
		
    MOV r7,#0
 8004e86:	2700      	movs	r7, #0
	MOV r10,r7
 8004e88:	46ba      	mov	sl, r7

08004e8a <outll6>:

outll6:
	MOV r4,#16 
 8004e8a:	2410      	movs	r4, #16
	ADD r1,r4
 8004e8c:	1909      	adds	r1, r1, r4

	LSL r4,#7 
 8004e8e:	01e4      	lsls	r4, r4, #7
		
	ADD r4,r10
 8004e90:	4454      	add	r4, sl
	ADD r0,r4
 8004e92:	1900      	adds	r0, r0, r4

08004e94 <l6loop>:

 

l6loop:

	SUB r1,#2
 8004e94:	3902      	subs	r1, #2
    MOV r5,#128
 8004e96:	2580      	movs	r5, #128	; 0x80
    LSL r6,r5,#1
 8004e98:	006e      	lsls	r6, r5, #1
	SUB r0,r6	
 8004e9a:	1b80      	subs	r0, r0, r6
	
    lazy_butterfly #128
 8004e9c:	6804      	ldr	r4, [r0, #0]
 8004e9e:	b2a3      	uxth	r3, r4
 8004ea0:	0c24      	lsrs	r4, r4, #16
 8004ea2:	2580      	movs	r5, #128	; 0x80
 8004ea4:	5946      	ldr	r6, [r0, r5]
 8004ea6:	b2b5      	uxth	r5, r6
 8004ea8:	0c36      	lsrs	r6, r6, #16
 8004eaa:	1c1a      	adds	r2, r3, #0
 8004eac:	46a3      	mov	fp, r4
 8004eae:	1952      	adds	r2, r2, r5
 8004eb0:	19a4      	adds	r4, r4, r6
 8004eb2:	0424      	lsls	r4, r4, #16
 8004eb4:	4322      	orrs	r2, r4
 8004eb6:	6002      	str	r2, [r0, #0]
 8004eb8:	4443      	add	r3, r8
 8004eba:	1b5b      	subs	r3, r3, r5
 8004ebc:	880a      	ldrh	r2, [r1, #0]
 8004ebe:	4353      	muls	r3, r2
 8004ec0:	4667      	mov	r7, ip
 8004ec2:	4675      	mov	r5, lr
 8004ec4:	1eac      	subs	r4, r5, #2
 8004ec6:	435c      	muls	r4, r3
 8004ec8:	403c      	ands	r4, r7
 8004eca:	436c      	muls	r4, r5
 8004ecc:	191b      	adds	r3, r3, r4
 8004ece:	0c9b      	lsrs	r3, r3, #18
 8004ed0:	465c      	mov	r4, fp
 8004ed2:	4444      	add	r4, r8
 8004ed4:	1ba4      	subs	r4, r4, r6
 8004ed6:	4354      	muls	r4, r2
 8004ed8:	1eaa      	subs	r2, r5, #2
 8004eda:	4362      	muls	r2, r4
 8004edc:	403a      	ands	r2, r7
 8004ede:	436a      	muls	r2, r5
 8004ee0:	18a4      	adds	r4, r4, r2
 8004ee2:	0ca4      	lsrs	r4, r4, #18
 8004ee4:	2580      	movs	r5, #128	; 0x80
 8004ee6:	0424      	lsls	r4, r4, #16
 8004ee8:	4323      	orrs	r3, r4
 8004eea:	5143      	str	r3, [r0, r5]
    

	CMP r1,r9
 8004eec:	4549      	cmp	r1, r9
	BGT l6loop
 8004eee:	dcd1      	bgt.n	8004e94 <l6loop>


	MOV r7,r10
 8004ef0:	4657      	mov	r7, sl
	SUB r0,r7
 8004ef2:	1bc0      	subs	r0, r0, r7
	ADD r7,#4
 8004ef4:	3704      	adds	r7, #4
	MOV r10,r7
 8004ef6:	46ba      	mov	sl, r7


	CMP r7,#124	
 8004ef8:	2f7c      	cmp	r7, #124	; 0x7c
	BLE outll6
 8004efa:	ddc6      	ble.n	8004e8a <outll6>


		
    MOV r7,#0
 8004efc:	2700      	movs	r7, #0
	MOV r10,r7
 8004efe:	46ba      	mov	sl, r7

08004f00 <outll7>:

outll7:
	MOV r4,#8
 8004f00:	2408      	movs	r4, #8
	ADD r1,r4
 8004f02:	1909      	adds	r1, r1, r4

	LSL r4,#8
 8004f04:	0224      	lsls	r4, r4, #8
		
	
	ADD r4,r10
 8004f06:	4454      	add	r4, sl
	ADD r0,r4
 8004f08:	1900      	adds	r0, r0, r4

08004f0a <l7loop>:



l7loop:

    SUB r1,#2
 8004f0a:	3902      	subs	r1, #2
    MOV r5,#1
 8004f0c:	2501      	movs	r5, #1
    LSL r5,#8
 8004f0e:	022d      	lsls	r5, r5, #8
    LSL r6,r5,#1
 8004f10:	006e      	lsls	r6, r5, #1
	SUB r0,r6	
 8004f12:	1b80      	subs	r0, r0, r6
	
	
	LDR r4,[r0]	
 8004f14:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8004f16:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8004f18:	0c24      	lsrs	r4, r4, #16

	LDR r6,[r0,r5] 
 8004f1a:	5946      	ldr	r6, [r0, r5]
	UXTH r5,r6
 8004f1c:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8004f1e:	0c36      	lsrs	r6, r6, #16


	MOV r11,r3
 8004f20:	469b      	mov	fp, r3
	

	
	ADD r3,r5
 8004f22:	195b      	adds	r3, r3, r5

    

    MOV r7,r14
 8004f24:	4677      	mov	r7, lr

    barrett r3
 8004f26:	009a      	lsls	r2, r3, #2
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	0c12      	lsrs	r2, r2, #16
 8004f2c:	437a      	muls	r2, r7
 8004f2e:	1a9b      	subs	r3, r3, r2

    MOV r12,r4
 8004f30:	46a4      	mov	ip, r4
	ADD r4,r6		
 8004f32:	19a4      	adds	r4, r4, r6

    barrett r4
 8004f34:	00a2      	lsls	r2, r4, #2
 8004f36:	1912      	adds	r2, r2, r4
 8004f38:	0c12      	lsrs	r2, r2, #16
 8004f3a:	437a      	muls	r2, r7
 8004f3c:	1aa4      	subs	r4, r4, r2


	LSL r4,#16
 8004f3e:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004f40:	4323      	orrs	r3, r4
	STR r3,[r0]
 8004f42:	6003      	str	r3, [r0, #0]

	MOV r3,r11
 8004f44:	465b      	mov	r3, fp

	ADD r3,r8
 8004f46:	4443      	add	r3, r8

	SUB r3,r5
 8004f48:	1b5b      	subs	r3, r3, r5


	LDRH r2,[r1]
 8004f4a:	880a      	ldrh	r2, [r1, #0]

	MUL r3,r2
 8004f4c:	4353      	muls	r3, r2


	MOV r5,#1
 8004f4e:	2501      	movs	r5, #1
	LSL r5,#18
 8004f50:	04ad      	lsls	r5, r5, #18
	SUB r5,#1
 8004f52:	3d01      	subs	r5, #1


    montgomery r4,r7,r5,r3
 8004f54:	1ebc      	subs	r4, r7, #2
 8004f56:	435c      	muls	r4, r3
 8004f58:	402c      	ands	r4, r5
 8004f5a:	437c      	muls	r4, r7
 8004f5c:	191b      	adds	r3, r3, r4
 8004f5e:	0c9b      	lsrs	r3, r3, #18


	MOV r4,r12
 8004f60:	4664      	mov	r4, ip

	ADD r4,r8
 8004f62:	4444      	add	r4, r8

	SUB r4,r6
 8004f64:	1ba4      	subs	r4, r4, r6

	MUL r4,r2
 8004f66:	4354      	muls	r4, r2

    montgomery r2,r7,r5,r4
 8004f68:	1eba      	subs	r2, r7, #2
 8004f6a:	4362      	muls	r2, r4
 8004f6c:	402a      	ands	r2, r5
 8004f6e:	437a      	muls	r2, r7
 8004f70:	18a4      	adds	r4, r4, r2
 8004f72:	0ca4      	lsrs	r4, r4, #18


	LSL r4,#16
 8004f74:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004f76:	4323      	orrs	r3, r4
    MOV r7,#1
 8004f78:	2701      	movs	r7, #1
    LSL r7,#8
 8004f7a:	023f      	lsls	r7, r7, #8
	STR r3,[r0,r7] 
 8004f7c:	51c3      	str	r3, [r0, r7]


	CMP r1,r9
 8004f7e:	4549      	cmp	r1, r9
	BGT l7loop
 8004f80:	dcc3      	bgt.n	8004f0a <l7loop>


	MOV r7,r10
 8004f82:	4657      	mov	r7, sl
	SUB r0,r7
 8004f84:	1bc0      	subs	r0, r0, r7
	ADD r7,#4
 8004f86:	3704      	adds	r7, #4
	MOV r10,r7
 8004f88:	46ba      	mov	sl, r7



	CMP r7,#252
 8004f8a:	2ffc      	cmp	r7, #252	; 0xfc
	BLE outll7
 8004f8c:	ddb8      	ble.n	8004f00 <outll7>

    MOV r12,r5
 8004f8e:	46ac      	mov	ip, r5

	nop
 8004f90:	46c0      	nop			; (mov r8, r8)
		
    MOV r7,#0
 8004f92:	2700      	movs	r7, #0
	MOV r10,r7
 8004f94:	46ba      	mov	sl, r7

08004f96 <outll8>:

outll8:
	MOV r4,#4 
 8004f96:	2404      	movs	r4, #4
	ADD r1,r4
 8004f98:	1909      	adds	r1, r1, r4

	LSL r4,#9 
 8004f9a:	0264      	lsls	r4, r4, #9
		
	ADD r4,r10
 8004f9c:	4454      	add	r4, sl
	ADD r0,r4
 8004f9e:	1900      	adds	r0, r0, r4

08004fa0 <l8loop>:

 

l8loop:

    SUB r1,#2
 8004fa0:	3902      	subs	r1, #2
    MOV r5,#1
 8004fa2:	2501      	movs	r5, #1
    LSL r5,#9
 8004fa4:	026d      	lsls	r5, r5, #9
    LSL r6,r5,#1
 8004fa6:	006e      	lsls	r6, r5, #1
	SUB r0,r6	
 8004fa8:	1b80      	subs	r0, r0, r6
	
	LDR r4,[r0]	
 8004faa:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8004fac:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8004fae:	0c24      	lsrs	r4, r4, #16


	LDR r6,[r0,r5] 
 8004fb0:	5946      	ldr	r6, [r0, r5]
	UXTH r5,r6
 8004fb2:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8004fb4:	0c36      	lsrs	r6, r6, #16


	MOV r2,r3
 8004fb6:	1c1a      	adds	r2, r3, #0
	MOV r11,r4
 8004fb8:	46a3      	mov	fp, r4


	ADD r2,r5
 8004fba:	1952      	adds	r2, r2, r5

	ADD r4,r6		
 8004fbc:	19a4      	adds	r4, r4, r6

	

	LSL r4,#16
 8004fbe:	0424      	lsls	r4, r4, #16
	ORR r2,r4
 8004fc0:	4322      	orrs	r2, r4
	STR r2,[r0]
 8004fc2:	6002      	str	r2, [r0, #0]

	ADD r3,r8
 8004fc4:	4443      	add	r3, r8

	SUB r3,r5
 8004fc6:	1b5b      	subs	r3, r3, r5


	LDRH r2,[r1]
 8004fc8:	880a      	ldrh	r2, [r1, #0]

	MUL r3,r2
 8004fca:	4353      	muls	r3, r2

	MOV r7,r12
 8004fcc:	4667      	mov	r7, ip
    MOV r5,r14
 8004fce:	4675      	mov	r5, lr

    montgomery r4,r5,r7,r3
 8004fd0:	1eac      	subs	r4, r5, #2
 8004fd2:	435c      	muls	r4, r3
 8004fd4:	403c      	ands	r4, r7
 8004fd6:	436c      	muls	r4, r5
 8004fd8:	191b      	adds	r3, r3, r4
 8004fda:	0c9b      	lsrs	r3, r3, #18


	MOV r4,r11
 8004fdc:	465c      	mov	r4, fp

	ADD r4,r8
 8004fde:	4444      	add	r4, r8

	SUB r4,r6
 8004fe0:	1ba4      	subs	r4, r4, r6

	MUL r4,r2
 8004fe2:	4354      	muls	r4, r2

    montgomery r2,r5,r7,r4
 8004fe4:	1eaa      	subs	r2, r5, #2
 8004fe6:	4362      	muls	r2, r4
 8004fe8:	403a      	ands	r2, r7
 8004fea:	436a      	muls	r2, r5
 8004fec:	18a4      	adds	r4, r4, r2
 8004fee:	0ca4      	lsrs	r4, r4, #18

	LSL r4,#16
 8004ff0:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004ff2:	4323      	orrs	r3, r4
    MOV r5,#1
 8004ff4:	2501      	movs	r5, #1
    LSL r5,#9
 8004ff6:	026d      	lsls	r5, r5, #9
	STR r3,[r0,r5] 
 8004ff8:	5143      	str	r3, [r0, r5]


	CMP r1,r9
 8004ffa:	4549      	cmp	r1, r9
	BGT l8loop
 8004ffc:	dcd0      	bgt.n	8004fa0 <l8loop>


	MOV r7,r10
 8004ffe:	4657      	mov	r7, sl
	SUB r0,r7
 8005000:	1bc0      	subs	r0, r0, r7
	ADD r7,#4
 8005002:	3704      	adds	r7, #4
	MOV r10,r7
 8005004:	46ba      	mov	sl, r7


    SUB r5,#4
 8005006:	3d04      	subs	r5, #4
	CMP r7,r5
 8005008:	42af      	cmp	r7, r5
	BLE outll8
 800500a:	ddc4      	ble.n	8004f96 <outll8>


    LDR r7,=0x3fc
 800500c:	f44f 777f 	mov.w	r7, #1020	; 0x3fc
    MOV r10,r0
 8005010:	4682      	mov	sl, r0
    ADD r0,r7
 8005012:	19c0      	adds	r0, r0, r7

08005014 <outll9>:

outll9:
	

	
	LDR r4,[r0]	
 8005014:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8005016:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8005018:	0c24      	lsrs	r4, r4, #16

    MOV r5,#1
 800501a:	2501      	movs	r5, #1
    LSL r5,#10
 800501c:	02ad      	lsls	r5, r5, #10
	LDR r6,[r0,r5] 
 800501e:	5946      	ldr	r6, [r0, r5]
	UXTH r5,r6
 8005020:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8005022:	0c36      	lsrs	r6, r6, #16


	MOV r9,r3
 8005024:	4699      	mov	r9, r3
	MOV r11,r4
 8005026:	46a3      	mov	fp, r4

	
	ADD r3,r5
 8005028:	195b      	adds	r3, r3, r5

    MOV r7,r14
 800502a:	4677      	mov	r7, lr

    barrett r3
 800502c:	009a      	lsls	r2, r3, #2
 800502e:	18d2      	adds	r2, r2, r3
 8005030:	0c12      	lsrs	r2, r2, #16
 8005032:	437a      	muls	r2, r7
 8005034:	1a9b      	subs	r3, r3, r2
	ADD r4,r6		
 8005036:	19a4      	adds	r4, r4, r6
    barrett r4
 8005038:	00a2      	lsls	r2, r4, #2
 800503a:	1912      	adds	r2, r2, r4
 800503c:	0c12      	lsrs	r2, r2, #16
 800503e:	437a      	muls	r2, r7
 8005040:	1aa4      	subs	r4, r4, r2


	LSL r4,#16
 8005042:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8005044:	4323      	orrs	r3, r4
	STR r3,[r0]
 8005046:	6003      	str	r3, [r0, #0]

	MOV r3,r9
 8005048:	464b      	mov	r3, r9

	ADD r3,r8
 800504a:	4443      	add	r3, r8

	SUB r3,r5	
 800504c:	1b5b      	subs	r3, r3, r5

    barrett r3
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	18d2      	adds	r2, r2, r3
 8005052:	0c12      	lsrs	r2, r2, #16
 8005054:	437a      	muls	r2, r7
 8005056:	1a9b      	subs	r3, r3, r2


	MOV r4,r11
 8005058:	465c      	mov	r4, fp

	ADD r4,r8
 800505a:	4444      	add	r4, r8

	SUB r4,r6
 800505c:	1ba4      	subs	r4, r4, r6

    barrett r4
 800505e:	00a2      	lsls	r2, r4, #2
 8005060:	1912      	adds	r2, r2, r4
 8005062:	0c12      	lsrs	r2, r2, #16
 8005064:	437a      	muls	r2, r7
 8005066:	1aa4      	subs	r4, r4, r2
    


	LSL r4,#16
 8005068:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 800506a:	4323      	orrs	r3, r4
    MOV r7,#1
 800506c:	2701      	movs	r7, #1
    LSL r7,#10
 800506e:	02bf      	lsls	r7, r7, #10
	STR r3,[r0,r7]
 8005070:	51c3      	str	r3, [r0, r7]


	SUB r0,#4
 8005072:	3804      	subs	r0, #4
    CMP r0,r10
 8005074:	4550      	cmp	r0, sl

	BGE outll9
 8005076:	dacd      	bge.n	8005014 <outll9>

08005078 <endntt>:


endntt:
    pop {r4,r5}
 8005078:	bc30      	pop	{r4, r5}
    mov r12,r4
 800507a:	46a4      	mov	ip, r4
    mov r14,r5
 800507c:	46ae      	mov	lr, r5


    pop {r4-r7}
 800507e:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 8005080:	46a0      	mov	r8, r4
    mov r9,r5
 8005082:	46a9      	mov	r9, r5
    mov r10,r6
 8005084:	46b2      	mov	sl, r6
    mov r11,r7
 8005086:	46bb      	mov	fp, r7

	pop {r4-r7,pc}
 8005088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bx lr
 800508a:	4770      	bx	lr

0800508c <asm_mulcoef_otf>:
@

.global	asm_mulcoef_otf
.type	asm_mulcoef_otf, %function
asm_mulcoef_otf:
	push {r4-r7,lr}
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r3,r8
 800508e:	4643      	mov	r3, r8
    mov r4,r9
 8005090:	464c      	mov	r4, r9
    mov r5,r10
 8005092:	4655      	mov	r5, sl
    mov r6,r11
 8005094:	465e      	mov	r6, fp
    mov r7,r12
 8005096:	4667      	mov	r7, ip
    push {r3-r7}
 8005098:	b4f8      	push	{r3, r4, r5, r6, r7}
    

    MOV r4,#3
 800509a:	2403      	movs	r4, #3
    LSL r4,#12
 800509c:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 800509e:	3401      	adds	r4, #1
	MOV r9,r4
 80050a0:	46a1      	mov	r9, r4

    MOV r4,#1
 80050a2:	2401      	movs	r4, #1
    LSL r4,#18
 80050a4:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 80050a6:	3c01      	subs	r4, #1
	MOV r10,r4
 80050a8:	46a2      	mov	sl, r4
    
    mov r8,r0
 80050aa:	4680      	mov	r8, r0
    mov r4,#1
 80050ac:	2401      	movs	r4, #1
    lsl r4,#10
 80050ae:	02a4      	lsls	r4, r4, #10
    add r8,r4
 80050b0:	44a0      	add	r8, r4

    mov r11,r1
 80050b2:	468b      	mov	fp, r1

080050b4 <loopmcotf>:

loopmcotf:
    mov r12,r0
 80050b4:	4684      	mov	ip, r0

    ldm r0,{r2,r3}
 80050b6:	c80c      	ldmia	r0!, {r2, r3}
    ldm r1,{r4,r5}
 80050b8:	c930      	ldmia	r1!, {r4, r5}

	UXTH r6,r2
 80050ba:	b296      	uxth	r6, r2
	LSR r2,#16
 80050bc:	0c12      	lsrs	r2, r2, #16

	UXTH r7,r4
 80050be:	b2a7      	uxth	r7, r4
	LSR r4,#16
 80050c0:	0c24      	lsrs	r4, r4, #16

    mul r6,r7
 80050c2:	437e      	muls	r6, r7
    mul r2,r4
 80050c4:	4362      	muls	r2, r4

    mov r4,r10
 80050c6:	4654      	mov	r4, sl
    mov r0,r9
 80050c8:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 80050ca:	1e87      	subs	r7, r0, #2
 80050cc:	4377      	muls	r7, r6
 80050ce:	4027      	ands	r7, r4
 80050d0:	4347      	muls	r7, r0
 80050d2:	19f6      	adds	r6, r6, r7
 80050d4:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r2
 80050d6:	1e87      	subs	r7, r0, #2
 80050d8:	4357      	muls	r7, r2
 80050da:	4027      	ands	r7, r4
 80050dc:	4347      	muls	r7, r0
 80050de:	19d2      	adds	r2, r2, r7
 80050e0:	0c92      	lsrs	r2, r2, #18

    lsl r2,#16
 80050e2:	0412      	lsls	r2, r2, #16
    orr r2,r6
 80050e4:	4332      	orrs	r2, r6


	UXTH r6,r3
 80050e6:	b29e      	uxth	r6, r3
	LSR r3,#16
 80050e8:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 80050ea:	b2af      	uxth	r7, r5
	LSR r5,#16
 80050ec:	0c2d      	lsrs	r5, r5, #16

    mul r6,r7
 80050ee:	437e      	muls	r6, r7
    mul r3,r5
 80050f0:	436b      	muls	r3, r5


    montgomery 	r7, r0, r4, r6
 80050f2:	1e87      	subs	r7, r0, #2
 80050f4:	4377      	muls	r7, r6
 80050f6:	4027      	ands	r7, r4
 80050f8:	4347      	muls	r7, r0
 80050fa:	19f6      	adds	r6, r6, r7
 80050fc:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r3
 80050fe:	1e87      	subs	r7, r0, #2
 8005100:	435f      	muls	r7, r3
 8005102:	4027      	ands	r7, r4
 8005104:	4347      	muls	r7, r0
 8005106:	19db      	adds	r3, r3, r7
 8005108:	0c9b      	lsrs	r3, r3, #18

    lsl r3,#16
 800510a:	041b      	lsls	r3, r3, #16
    orr r3,r6
 800510c:	4333      	orrs	r3, r6

    mov r0,r12
 800510e:	4660      	mov	r0, ip

    stm r0, {r2,r3}
 8005110:	c00c      	stmia	r0!, {r2, r3}
            
    cmp r0,r8
 8005112:	4540      	cmp	r0, r8
    blt loopmcotf
 8005114:	dbce      	blt.n	80050b4 <loopmcotf>

@end first loop


    mov r1,r11
 8005116:	4659      	mov	r1, fp

    mov r4,#1
 8005118:	2401      	movs	r4, #1
    lsl r4,#10 
 800511a:	02a4      	lsls	r4, r4, #10
    add r8,r4
 800511c:	44a0      	add	r8, r4

0800511e <loopmc1>:

loopmc1:
    mov r12,r0
 800511e:	4684      	mov	ip, r0

    ldm r0,{r2,r3}
 8005120:	c80c      	ldmia	r0!, {r2, r3}
    ldm r1,{r4,r5}
 8005122:	c930      	ldmia	r1!, {r4, r5}

	UXTH r6,r2
 8005124:	b296      	uxth	r6, r2
	LSR r2,#16
 8005126:	0c12      	lsrs	r2, r2, #16

	UXTH r7,r4
 8005128:	b2a7      	uxth	r7, r4
	LSR r4,#16
 800512a:	0c24      	lsrs	r4, r4, #16

    mul r6,r7
 800512c:	437e      	muls	r6, r7
    mul r2,r4
 800512e:	4362      	muls	r2, r4

    mov r0,#7
 8005130:	2007      	movs	r0, #7
    mul r6,r0
 8005132:	4346      	muls	r6, r0
    mul r2,r0
 8005134:	4342      	muls	r2, r0

    mov r4,r10
 8005136:	4654      	mov	r4, sl
    mov r0,r9
 8005138:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 800513a:	1e87      	subs	r7, r0, #2
 800513c:	4377      	muls	r7, r6
 800513e:	4027      	ands	r7, r4
 8005140:	4347      	muls	r7, r0
 8005142:	19f6      	adds	r6, r6, r7
 8005144:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r2
 8005146:	1e87      	subs	r7, r0, #2
 8005148:	4357      	muls	r7, r2
 800514a:	4027      	ands	r7, r4
 800514c:	4347      	muls	r7, r0
 800514e:	19d2      	adds	r2, r2, r7
 8005150:	0c92      	lsrs	r2, r2, #18

    lsl r2,#16
 8005152:	0412      	lsls	r2, r2, #16
    orr r2,r6
 8005154:	4332      	orrs	r2, r6


	UXTH r6,r3
 8005156:	b29e      	uxth	r6, r3
	LSR r3,#16
 8005158:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 800515a:	b2af      	uxth	r7, r5
	LSR r5,#16
 800515c:	0c2d      	lsrs	r5, r5, #16
    


    mul r6,r7
 800515e:	437e      	muls	r6, r7
    mul r3,r5
 8005160:	436b      	muls	r3, r5

    mov r0,#7
 8005162:	2007      	movs	r0, #7
    mul r6,r0
 8005164:	4346      	muls	r6, r0
    mul r3,r0
 8005166:	4343      	muls	r3, r0

    mov r0,r9
 8005168:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 800516a:	1e87      	subs	r7, r0, #2
 800516c:	4377      	muls	r7, r6
 800516e:	4027      	ands	r7, r4
 8005170:	4347      	muls	r7, r0
 8005172:	19f6      	adds	r6, r6, r7
 8005174:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r3
 8005176:	1e87      	subs	r7, r0, #2
 8005178:	435f      	muls	r7, r3
 800517a:	4027      	ands	r7, r4
 800517c:	4347      	muls	r7, r0
 800517e:	19db      	adds	r3, r3, r7
 8005180:	0c9b      	lsrs	r3, r3, #18

    lsl r3,#16
 8005182:	041b      	lsls	r3, r3, #16
    orr r3,r6
 8005184:	4333      	orrs	r3, r6

    mov r0,r12
 8005186:	4660      	mov	r0, ip

    stm r0, {r2,r3}
 8005188:	c00c      	stmia	r0!, {r2, r3}
            
    cmp r0,r8
 800518a:	4540      	cmp	r0, r8
    blt loopmc1
 800518c:	dbc7      	blt.n	800511e <loopmc1>

    pop {r3-r7}
 800518e:	bcf8      	pop	{r3, r4, r5, r6, r7}

    mov r8,r3
 8005190:	4698      	mov	r8, r3
    mov r9,r4
 8005192:	46a1      	mov	r9, r4
    mov r10,r5
 8005194:	46aa      	mov	sl, r5
    mov r11,r6
 8005196:	46b3      	mov	fp, r6
    mov r12,r7
 8005198:	46bc      	mov	ip, r7

	pop {r4-r7,pc}
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800519c <asm_mulcoef>:
@

.global	asm_mulcoef
.type	asm_mulcoef, %function
asm_mulcoef:
	push {r4-r7,lr}
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 800519e:	4644      	mov	r4, r8
    mov r5,r9
 80051a0:	464d      	mov	r5, r9
    mov r6,r10
 80051a2:	4656      	mov	r6, sl
    mov r7,r12
 80051a4:	4667      	mov	r7, ip
    push {r4-r7}
 80051a6:	b4f0      	push	{r4, r5, r6, r7}
    

    MOV r4,#3
 80051a8:	2403      	movs	r4, #3
    LSL r4,#12
 80051aa:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 80051ac:	3401      	adds	r4, #1
	MOV r9,r4
 80051ae:	46a1      	mov	r9, r4

    MOV r4,#1
 80051b0:	2401      	movs	r4, #1
    LSL r4,#18
 80051b2:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 80051b4:	3c01      	subs	r4, #1
	MOV r10,r4
 80051b6:	46a2      	mov	sl, r4
    
    mov r8,r0
 80051b8:	4680      	mov	r8, r0
    mov r4,#1
 80051ba:	2401      	movs	r4, #1
    lsl r4,#11 
 80051bc:	02e4      	lsls	r4, r4, #11
    add r8,r4
 80051be:	44a0      	add	r8, r4

080051c0 <loopmc>:

loopmc:
    mov r12,r0
 80051c0:	4684      	mov	ip, r0

    ldm r0,{r2,r3}
 80051c2:	c80c      	ldmia	r0!, {r2, r3}
    ldm r1,{r4,r5}
 80051c4:	c930      	ldmia	r1!, {r4, r5}

	UXTH r6,r2
 80051c6:	b296      	uxth	r6, r2
	LSR r2,#16
 80051c8:	0c12      	lsrs	r2, r2, #16

	UXTH r7,r4
 80051ca:	b2a7      	uxth	r7, r4
	LSR r4,#16
 80051cc:	0c24      	lsrs	r4, r4, #16

    mul r6,r7
 80051ce:	437e      	muls	r6, r7
    mul r2,r4
 80051d0:	4362      	muls	r2, r4

    mov r4,r10
 80051d2:	4654      	mov	r4, sl
    mov r0,r9
 80051d4:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 80051d6:	1e87      	subs	r7, r0, #2
 80051d8:	4377      	muls	r7, r6
 80051da:	4027      	ands	r7, r4
 80051dc:	4347      	muls	r7, r0
 80051de:	19f6      	adds	r6, r6, r7
 80051e0:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r2
 80051e2:	1e87      	subs	r7, r0, #2
 80051e4:	4357      	muls	r7, r2
 80051e6:	4027      	ands	r7, r4
 80051e8:	4347      	muls	r7, r0
 80051ea:	19d2      	adds	r2, r2, r7
 80051ec:	0c92      	lsrs	r2, r2, #18

    lsl r2,#16
 80051ee:	0412      	lsls	r2, r2, #16
    orr r2,r6
 80051f0:	4332      	orrs	r2, r6


	UXTH r6,r3
 80051f2:	b29e      	uxth	r6, r3
	LSR r3,#16
 80051f4:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 80051f6:	b2af      	uxth	r7, r5
	LSR r5,#16
 80051f8:	0c2d      	lsrs	r5, r5, #16

    mul r6,r7
 80051fa:	437e      	muls	r6, r7
    mul r3,r5
 80051fc:	436b      	muls	r3, r5


    montgomery 	r7, r0, r4, r6
 80051fe:	1e87      	subs	r7, r0, #2
 8005200:	4377      	muls	r7, r6
 8005202:	4027      	ands	r7, r4
 8005204:	4347      	muls	r7, r0
 8005206:	19f6      	adds	r6, r6, r7
 8005208:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r3
 800520a:	1e87      	subs	r7, r0, #2
 800520c:	435f      	muls	r7, r3
 800520e:	4027      	ands	r7, r4
 8005210:	4347      	muls	r7, r0
 8005212:	19db      	adds	r3, r3, r7
 8005214:	0c9b      	lsrs	r3, r3, #18

    lsl r3,#16
 8005216:	041b      	lsls	r3, r3, #16
    orr r3,r6
 8005218:	4333      	orrs	r3, r6

    mov r0,r12
 800521a:	4660      	mov	r0, ip

    stm r0, {r2,r3}
 800521c:	c00c      	stmia	r0!, {r2, r3}
            
    cmp r0,r8
 800521e:	4540      	cmp	r0, r8
    blt loopmc
 8005220:	dbce      	blt.n	80051c0 <loopmc>

    pop {r4-r7}
 8005222:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 8005224:	46a0      	mov	r8, r4
    mov r9,r5
 8005226:	46a9      	mov	r9, r5
    mov r10,r6
 8005228:	46b2      	mov	sl, r6
    mov r12,r7
 800522a:	46bc      	mov	ip, r7

	pop {r4-r7,pc}
 800522c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800522e <test_butterfly>:


.global	test_butterfly
.type	test_butterfly, %function
test_butterfly:
	push {r4-r7,lr}
 800522e:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8005230:	4644      	mov	r4, r8
    mov r5,r11
 8005232:	465d      	mov	r5, fp
    mov r6,r12
 8005234:	4666      	mov	r6, ip
    mov r7,r14
 8005236:	4677      	mov	r7, lr
    push {r4-r7}
 8005238:	b4f0      	push	{r4, r5, r6, r7}

    
    butterfly #16
 800523a:	6804      	ldr	r4, [r0, #0]
 800523c:	b2a3      	uxth	r3, r4
 800523e:	0c24      	lsrs	r4, r4, #16
 8005240:	6906      	ldr	r6, [r0, #16]
 8005242:	b2b5      	uxth	r5, r6
 8005244:	0c36      	lsrs	r6, r6, #16
 8005246:	469c      	mov	ip, r3
 8005248:	46a3      	mov	fp, r4
 800524a:	195b      	adds	r3, r3, r5
 800524c:	4677      	mov	r7, lr
 800524e:	009a      	lsls	r2, r3, #2
 8005250:	18d2      	adds	r2, r2, r3
 8005252:	0c12      	lsrs	r2, r2, #16
 8005254:	437a      	muls	r2, r7
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	19a4      	adds	r4, r4, r6
 800525a:	00a2      	lsls	r2, r4, #2
 800525c:	1912      	adds	r2, r2, r4
 800525e:	0c12      	lsrs	r2, r2, #16
 8005260:	437a      	muls	r2, r7
 8005262:	1aa4      	subs	r4, r4, r2
 8005264:	0424      	lsls	r4, r4, #16
 8005266:	4323      	orrs	r3, r4
 8005268:	6003      	str	r3, [r0, #0]
 800526a:	4663      	mov	r3, ip
 800526c:	4443      	add	r3, r8
 800526e:	1b5b      	subs	r3, r3, r5
 8005270:	880a      	ldrh	r2, [r1, #0]
 8005272:	4353      	muls	r3, r2
 8005274:	2501      	movs	r5, #1
 8005276:	04ad      	lsls	r5, r5, #18
 8005278:	3d01      	subs	r5, #1
 800527a:	1ebc      	subs	r4, r7, #2
 800527c:	435c      	muls	r4, r3
 800527e:	402c      	ands	r4, r5
 8005280:	437c      	muls	r4, r7
 8005282:	191b      	adds	r3, r3, r4
 8005284:	0c9b      	lsrs	r3, r3, #18
 8005286:	465c      	mov	r4, fp
 8005288:	4444      	add	r4, r8
 800528a:	1ba4      	subs	r4, r4, r6
 800528c:	4354      	muls	r4, r2
 800528e:	1eba      	subs	r2, r7, #2
 8005290:	4362      	muls	r2, r4
 8005292:	402a      	ands	r2, r5
 8005294:	437a      	muls	r2, r7
 8005296:	18a4      	adds	r4, r4, r2
 8005298:	0ca4      	lsrs	r4, r4, #18
 800529a:	0424      	lsls	r4, r4, #16
 800529c:	4323      	orrs	r3, r4
 800529e:	6103      	str	r3, [r0, #16]

    pop {r4-r7}
 80052a0:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 80052a2:	46a0      	mov	r8, r4
    mov r11,r5
 80052a4:	46ab      	mov	fp, r5
    mov r12,r6
 80052a6:	46b4      	mov	ip, r6
    mov r14,r7
 80052a8:	46be      	mov	lr, r7

	pop {r4-r7,pc}
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ac <test_lazy_butterfly>:


.global	test_lazy_butterfly
.type	test_lazy_butterfly, %function
test_lazy_butterfly:
	push {r4-r7,lr}
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80052ae:	4644      	mov	r4, r8
    mov r5,r11
 80052b0:	465d      	mov	r5, fp
    mov r6,r12
 80052b2:	4666      	mov	r6, ip
    mov r7,r14
 80052b4:	4677      	mov	r7, lr
    push {r4-r7}
 80052b6:	b4f0      	push	{r4, r5, r6, r7}


    lazy_butterfly #16
 80052b8:	6804      	ldr	r4, [r0, #0]
 80052ba:	b2a3      	uxth	r3, r4
 80052bc:	0c24      	lsrs	r4, r4, #16
 80052be:	2510      	movs	r5, #16
 80052c0:	5946      	ldr	r6, [r0, r5]
 80052c2:	b2b5      	uxth	r5, r6
 80052c4:	0c36      	lsrs	r6, r6, #16
 80052c6:	1c1a      	adds	r2, r3, #0
 80052c8:	46a3      	mov	fp, r4
 80052ca:	1952      	adds	r2, r2, r5
 80052cc:	19a4      	adds	r4, r4, r6
 80052ce:	0424      	lsls	r4, r4, #16
 80052d0:	4322      	orrs	r2, r4
 80052d2:	6002      	str	r2, [r0, #0]
 80052d4:	4443      	add	r3, r8
 80052d6:	1b5b      	subs	r3, r3, r5
 80052d8:	880a      	ldrh	r2, [r1, #0]
 80052da:	4353      	muls	r3, r2
 80052dc:	4667      	mov	r7, ip
 80052de:	4675      	mov	r5, lr
 80052e0:	1eac      	subs	r4, r5, #2
 80052e2:	435c      	muls	r4, r3
 80052e4:	403c      	ands	r4, r7
 80052e6:	436c      	muls	r4, r5
 80052e8:	191b      	adds	r3, r3, r4
 80052ea:	0c9b      	lsrs	r3, r3, #18
 80052ec:	465c      	mov	r4, fp
 80052ee:	4444      	add	r4, r8
 80052f0:	1ba4      	subs	r4, r4, r6
 80052f2:	4354      	muls	r4, r2
 80052f4:	1eaa      	subs	r2, r5, #2
 80052f6:	4362      	muls	r2, r4
 80052f8:	403a      	ands	r2, r7
 80052fa:	436a      	muls	r2, r5
 80052fc:	18a4      	adds	r4, r4, r2
 80052fe:	0ca4      	lsrs	r4, r4, #18
 8005300:	2510      	movs	r5, #16
 8005302:	0424      	lsls	r4, r4, #16
 8005304:	4323      	orrs	r3, r4
 8005306:	5143      	str	r3, [r0, r5]
    
    pop {r4-r7}
 8005308:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 800530a:	46a0      	mov	r8, r4
    mov r11,r5
 800530c:	46ab      	mov	fp, r5
    mov r12,r6
 800530e:	46b4      	mov	ip, r6
    mov r14,r7
 8005310:	46be      	mov	lr, r7

	pop {r4-r7,pc}
 8005312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005314 <test_doublefly>:


.global	test_doublefly
.type	test_doublefly, %function
test_doublefly:
	push {r4-r7,lr}
 8005314:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r3,r9
 8005316:	464b      	mov	r3, r9
    mov r4,r8
 8005318:	4644      	mov	r4, r8
    mov r5,r11
 800531a:	465d      	mov	r5, fp
    mov r6,r12
 800531c:	4666      	mov	r6, ip
    mov r7,r14
 800531e:	4677      	mov	r7, lr
    push {r3-r7}
 8005320:	b4f8      	push	{r3, r4, r5, r6, r7}

    mov r9,r1
 8005322:	4689      	mov	r9, r1
    doublefly
 8005324:	6804      	ldr	r4, [r0, #0]
 8005326:	b2a3      	uxth	r3, r4
 8005328:	0c24      	lsrs	r4, r4, #16
 800532a:	1c1a      	adds	r2, r3, #0
 800532c:	191b      	adds	r3, r3, r4
 800532e:	469c      	mov	ip, r3
 8005330:	4442      	add	r2, r8
 8005332:	1b12      	subs	r2, r2, r4
 8005334:	464d      	mov	r5, r9
 8005336:	1b4f      	subs	r7, r1, r5
 8005338:	007f      	lsls	r7, r7, #1
 800533a:	19ed      	adds	r5, r5, r7
 800533c:	682f      	ldr	r7, [r5, #0]
 800533e:	b2bd      	uxth	r5, r7
 8005340:	0c3f      	lsrs	r7, r7, #16
 8005342:	436a      	muls	r2, r5
 8005344:	4654      	mov	r4, sl
 8005346:	4673      	mov	r3, lr
 8005348:	1e9e      	subs	r6, r3, #2
 800534a:	4356      	muls	r6, r2
 800534c:	4026      	ands	r6, r4
 800534e:	435e      	muls	r6, r3
 8005350:	1992      	adds	r2, r2, r6
 8005352:	0c92      	lsrs	r2, r2, #18
 8005354:	4693      	mov	fp, r2
 8005356:	6846      	ldr	r6, [r0, #4]
 8005358:	b2b5      	uxth	r5, r6
 800535a:	0c36      	lsrs	r6, r6, #16
 800535c:	1c2a      	adds	r2, r5, #0
 800535e:	19ad      	adds	r5, r5, r6
 8005360:	4442      	add	r2, r8
 8005362:	1b96      	subs	r6, r2, r6
 8005364:	437e      	muls	r6, r7
 8005366:	1e9f      	subs	r7, r3, #2
 8005368:	4377      	muls	r7, r6
 800536a:	4027      	ands	r7, r4
 800536c:	435f      	muls	r7, r3
 800536e:	19f6      	adds	r6, r6, r7
 8005370:	0cb6      	lsrs	r6, r6, #18
 8005372:	1c1f      	adds	r7, r3, #0
 8005374:	465c      	mov	r4, fp
 8005376:	4663      	mov	r3, ip
 8005378:	195b      	adds	r3, r3, r5
 800537a:	009a      	lsls	r2, r3, #2
 800537c:	18d2      	adds	r2, r2, r3
 800537e:	0c12      	lsrs	r2, r2, #16
 8005380:	437a      	muls	r2, r7
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	19a4      	adds	r4, r4, r6
 8005386:	00a2      	lsls	r2, r4, #2
 8005388:	1912      	adds	r2, r2, r4
 800538a:	0c12      	lsrs	r2, r2, #16
 800538c:	437a      	muls	r2, r7
 800538e:	1aa4      	subs	r4, r4, r2
 8005390:	0424      	lsls	r4, r4, #16
 8005392:	4323      	orrs	r3, r4
 8005394:	6003      	str	r3, [r0, #0]
 8005396:	4663      	mov	r3, ip
 8005398:	4443      	add	r3, r8
 800539a:	1b5b      	subs	r3, r3, r5
 800539c:	880a      	ldrh	r2, [r1, #0]
 800539e:	4353      	muls	r3, r2
 80053a0:	4655      	mov	r5, sl
 80053a2:	1ebc      	subs	r4, r7, #2
 80053a4:	435c      	muls	r4, r3
 80053a6:	402c      	ands	r4, r5
 80053a8:	437c      	muls	r4, r7
 80053aa:	191b      	adds	r3, r3, r4
 80053ac:	0c9b      	lsrs	r3, r3, #18
 80053ae:	465c      	mov	r4, fp
 80053b0:	4444      	add	r4, r8
 80053b2:	1ba4      	subs	r4, r4, r6
 80053b4:	4354      	muls	r4, r2
 80053b6:	1eba      	subs	r2, r7, #2
 80053b8:	4362      	muls	r2, r4
 80053ba:	402a      	ands	r2, r5
 80053bc:	437a      	muls	r2, r7
 80053be:	18a4      	adds	r4, r4, r2
 80053c0:	0ca4      	lsrs	r4, r4, #18
 80053c2:	0424      	lsls	r4, r4, #16
 80053c4:	4323      	orrs	r3, r4
 80053c6:	6043      	str	r3, [r0, #4]
    
    pop {r3-r7}
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    mov r9,r3
 80053ca:	4699      	mov	r9, r3
    mov r8,r4
 80053cc:	46a0      	mov	r8, r4
    mov r11,r5
 80053ce:	46ab      	mov	fp, r5
    mov r12,r6
 80053d0:	46b4      	mov	ip, r6
    mov r14,r7
 80053d2:	46be      	mov	lr, r7

	pop {r4-r7,pc}
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	bf00      	nop

080053d8 <asm_poly_add>:


.global	asm_poly_add
.type	asm_poly_add, %function
asm_poly_add    :
    push {r4-r7,lr}
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80053da:	4644      	mov	r4, r8
    mov r5,r9
 80053dc:	464d      	mov	r5, r9
    push {r4,r5}
 80053de:	b430      	push	{r4, r5}
    MOV r4,#3
 80053e0:	2403      	movs	r4, #3
    LSL r4,#12
 80053e2:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 80053e4:	3401      	adds	r4, #1
	MOV r9,r4
 80053e6:	46a1      	mov	r9, r4

    mov r8,r0
 80053e8:	4680      	mov	r8, r0
    mov r2,#1
 80053ea:	2201      	movs	r2, #1
    lsl r2,#11
 80053ec:	02d2      	lsls	r2, r2, #11
    add r8,r2
 80053ee:	4490      	add	r8, r2

080053f0 <looppa>:
looppa:
    ldm r0,{r3,r4}
 80053f0:	c818      	ldmia	r0!, {r3, r4}
    ldm r1,{r5}
 80053f2:	c920      	ldmia	r1!, {r5}
    sub r0,#8
 80053f4:	3808      	subs	r0, #8

	UXTH r6,r3
 80053f6:	b29e      	uxth	r6, r3
	LSR r3,#16
 80053f8:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 80053fa:	b2af      	uxth	r7, r5
	LSR r5,#16
 80053fc:	0c2d      	lsrs	r5, r5, #16

    add r3,r5
 80053fe:	195b      	adds	r3, r3, r5
    add r6,r7
 8005400:	19f6      	adds	r6, r6, r7

    mov r5,r9
 8005402:	464d      	mov	r5, r9

    barrett r7,r5,r3
 8005404:	009f      	lsls	r7, r3, #2
 8005406:	18ff      	adds	r7, r7, r3
 8005408:	0c3f      	lsrs	r7, r7, #16
 800540a:	436f      	muls	r7, r5
 800540c:	1bdb      	subs	r3, r3, r7
    barrett r7,r5,r6
 800540e:	00b7      	lsls	r7, r6, #2
 8005410:	19bf      	adds	r7, r7, r6
 8005412:	0c3f      	lsrs	r7, r7, #16
 8005414:	436f      	muls	r7, r5
 8005416:	1bf6      	subs	r6, r6, r7

    lsl r3,#16
 8005418:	041b      	lsls	r3, r3, #16
    orr r3,r6
 800541a:	4333      	orrs	r3, r6

    ldm r1,{r5}
 800541c:	c920      	ldmia	r1!, {r5}

	UXTH r6,r4
 800541e:	b2a6      	uxth	r6, r4
	LSR r4,#16
 8005420:	0c24      	lsrs	r4, r4, #16

	UXTH r7,r5
 8005422:	b2af      	uxth	r7, r5
	LSR r5,#16
 8005424:	0c2d      	lsrs	r5, r5, #16

    add r4,r5
 8005426:	1964      	adds	r4, r4, r5
    add r6,r7
 8005428:	19f6      	adds	r6, r6, r7

    mov r5,r9
 800542a:	464d      	mov	r5, r9

    barrett r7,r5,r4
 800542c:	00a7      	lsls	r7, r4, #2
 800542e:	193f      	adds	r7, r7, r4
 8005430:	0c3f      	lsrs	r7, r7, #16
 8005432:	436f      	muls	r7, r5
 8005434:	1be4      	subs	r4, r4, r7
    barrett r7,r5,r6
 8005436:	00b7      	lsls	r7, r6, #2
 8005438:	19bf      	adds	r7, r7, r6
 800543a:	0c3f      	lsrs	r7, r7, #16
 800543c:	436f      	muls	r7, r5
 800543e:	1bf6      	subs	r6, r6, r7

    lsl r4,#16
 8005440:	0424      	lsls	r4, r4, #16
    orr r4,r6
 8005442:	4334      	orrs	r4, r6

    stm r0,{r3,r4}       
 8005444:	c018      	stmia	r0!, {r3, r4}


    cmp r0,r8
 8005446:	4540      	cmp	r0, r8
    BLT looppa
 8005448:	dbd2      	blt.n	80053f0 <looppa>
        
    pop {r4,r5}
 800544a:	bc30      	pop	{r4, r5}
    mov r8,r4
 800544c:	46a0      	mov	r8, r4
    mov r9,r5
 800544e:	46a9      	mov	r9, r5

	pop {r4-r7,pc}
 8005450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bx lr
 8005452:	4770      	bx	lr

08005454 <asm_poly_pointwise>:


.global	asm_poly_pointwise
.type	asm_poly_pointwise, %function
asm_poly_pointwise    :
    push {r4-r7,lr}
 8005454:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8005456:	4644      	mov	r4, r8
    mov r5,r9
 8005458:	464d      	mov	r5, r9
    mov r6,r10
 800545a:	4656      	mov	r6, sl
    mov r7,r11
 800545c:	465f      	mov	r7, fp
    push {r4-r7}
 800545e:	b4f0      	push	{r4, r5, r6, r7}

    MOV r4,#1
 8005460:	2401      	movs	r4, #1
    LSL r4,#18
 8005462:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 8005464:	3c01      	subs	r4, #1
	MOV r11,r4
 8005466:	46a3      	mov	fp, r4

    mov r4,#24
 8005468:	2418      	movs	r4, #24
    lsl r4,#7
 800546a:	01e4      	lsls	r4, r4, #7
    mov r3,#114
 800546c:	2372      	movs	r3, #114	; 0x72
    orr r4,r3
 800546e:	431c      	orrs	r4, r3
    mov r10,r4
 8005470:	46a2      	mov	sl, r4

    MOV r4,#3
 8005472:	2403      	movs	r4, #3
    LSL r4,#12
 8005474:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 8005476:	3401      	adds	r4, #1
	MOV r9,r4
 8005478:	46a1      	mov	r9, r4

    mov r8,r0
 800547a:	4680      	mov	r8, r0
    mov r4,#1
 800547c:	2401      	movs	r4, #1
    lsl r4,#11
 800547e:	02e4      	lsls	r4, r4, #11
    add r8,r4
 8005480:	44a0      	add	r8, r4

08005482 <looppp>:
    
    
looppp:
    
    ldm r2,{r5}
 8005482:	ca20      	ldmia	r2!, {r5}

    UXTH r4,r5
 8005484:	b2ac      	uxth	r4, r5
	LSR r5,#16
 8005486:	0c2d      	lsrs	r5, r5, #16


    mov r7, r10
 8005488:	4657      	mov	r7, sl
    
    mul r4,r7
 800548a:	437c      	muls	r4, r7
    mul r5,r7
 800548c:	437d      	muls	r5, r7

    
    mov r6,r9
 800548e:	464e      	mov	r6, r9
    mov r3,r11
 8005490:	465b      	mov	r3, fp
    montgomery r7,r6,r3 r4
 8005492:	1eb7      	subs	r7, r6, #2
 8005494:	4367      	muls	r7, r4
 8005496:	401f      	ands	r7, r3
 8005498:	4377      	muls	r7, r6
 800549a:	19e4      	adds	r4, r4, r7
 800549c:	0ca4      	lsrs	r4, r4, #18
    montgomery r7,r6,r3 r5
 800549e:	1eb7      	subs	r7, r6, #2
 80054a0:	436f      	muls	r7, r5
 80054a2:	401f      	ands	r7, r3
 80054a4:	4377      	muls	r7, r6
 80054a6:	19ed      	adds	r5, r5, r7
 80054a8:	0cad      	lsrs	r5, r5, #18

    
    ldm r1,{r7}
 80054aa:	c980      	ldmia	r1!, {r7}

    UXTH r3,r7
 80054ac:	b2bb      	uxth	r3, r7
	LSR r7,#16
 80054ae:	0c3f      	lsrs	r7, r7, #16
    
    mul r4,r3
 80054b0:	435c      	muls	r4, r3
    mul r5,r7
 80054b2:	437d      	muls	r5, r7

    mov r3,r11
 80054b4:	465b      	mov	r3, fp
    montgomery r7,r6,r3,r4
 80054b6:	1eb7      	subs	r7, r6, #2
 80054b8:	4367      	muls	r7, r4
 80054ba:	401f      	ands	r7, r3
 80054bc:	4377      	muls	r7, r6
 80054be:	19e4      	adds	r4, r4, r7
 80054c0:	0ca4      	lsrs	r4, r4, #18
    montgomery r7,r6,r3,r5
 80054c2:	1eb7      	subs	r7, r6, #2
 80054c4:	436f      	muls	r7, r5
 80054c6:	401f      	ands	r7, r3
 80054c8:	4377      	muls	r7, r6
 80054ca:	19ed      	adds	r5, r5, r7
 80054cc:	0cad      	lsrs	r5, r5, #18
    
    lsl r5,#16
 80054ce:	042d      	lsls	r5, r5, #16
    orr r5,r4   
 80054d0:	4325      	orrs	r5, r4

    stm r0,{r5}       
 80054d2:	c020      	stmia	r0!, {r5}


    cmp r0,r8
 80054d4:	4540      	cmp	r0, r8
    BLT looppp
 80054d6:	dbd4      	blt.n	8005482 <looppp>
       


    pop {r4-r7} 
 80054d8:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 80054da:	46a0      	mov	r8, r4
    mov r9,r5
 80054dc:	46a9      	mov	r9, r5
    mov r10,r6
 80054de:	46b2      	mov	sl, r6
    mov r11,r7
 80054e0:	46bb      	mov	fp, r7

	pop {r4-r7,pc}
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bx lr
 80054e4:	4770      	bx	lr
	...

080054e8 <__aeabi_uldivmod>:
 80054e8:	b953      	cbnz	r3, 8005500 <__aeabi_uldivmod+0x18>
 80054ea:	b94a      	cbnz	r2, 8005500 <__aeabi_uldivmod+0x18>
 80054ec:	2900      	cmp	r1, #0
 80054ee:	bf08      	it	eq
 80054f0:	2800      	cmpeq	r0, #0
 80054f2:	bf1c      	itt	ne
 80054f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80054f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80054fc:	f000 b96e 	b.w	80057dc <__aeabi_idiv0>
 8005500:	f1ad 0c08 	sub.w	ip, sp, #8
 8005504:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005508:	f000 f806 	bl	8005518 <__udivmoddi4>
 800550c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr

08005518 <__udivmoddi4>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	9d08      	ldr	r5, [sp, #32]
 800551e:	4604      	mov	r4, r0
 8005520:	468c      	mov	ip, r1
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8083 	bne.w	800562e <__udivmoddi4+0x116>
 8005528:	428a      	cmp	r2, r1
 800552a:	4617      	mov	r7, r2
 800552c:	d947      	bls.n	80055be <__udivmoddi4+0xa6>
 800552e:	fab2 f282 	clz	r2, r2
 8005532:	b142      	cbz	r2, 8005546 <__udivmoddi4+0x2e>
 8005534:	f1c2 0020 	rsb	r0, r2, #32
 8005538:	fa24 f000 	lsr.w	r0, r4, r0
 800553c:	4091      	lsls	r1, r2
 800553e:	4097      	lsls	r7, r2
 8005540:	ea40 0c01 	orr.w	ip, r0, r1
 8005544:	4094      	lsls	r4, r2
 8005546:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800554a:	0c23      	lsrs	r3, r4, #16
 800554c:	fbbc f6f8 	udiv	r6, ip, r8
 8005550:	fa1f fe87 	uxth.w	lr, r7
 8005554:	fb08 c116 	mls	r1, r8, r6, ip
 8005558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800555c:	fb06 f10e 	mul.w	r1, r6, lr
 8005560:	4299      	cmp	r1, r3
 8005562:	d909      	bls.n	8005578 <__udivmoddi4+0x60>
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800556a:	f080 8119 	bcs.w	80057a0 <__udivmoddi4+0x288>
 800556e:	4299      	cmp	r1, r3
 8005570:	f240 8116 	bls.w	80057a0 <__udivmoddi4+0x288>
 8005574:	3e02      	subs	r6, #2
 8005576:	443b      	add	r3, r7
 8005578:	1a5b      	subs	r3, r3, r1
 800557a:	b2a4      	uxth	r4, r4
 800557c:	fbb3 f0f8 	udiv	r0, r3, r8
 8005580:	fb08 3310 	mls	r3, r8, r0, r3
 8005584:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005588:	fb00 fe0e 	mul.w	lr, r0, lr
 800558c:	45a6      	cmp	lr, r4
 800558e:	d909      	bls.n	80055a4 <__udivmoddi4+0x8c>
 8005590:	193c      	adds	r4, r7, r4
 8005592:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005596:	f080 8105 	bcs.w	80057a4 <__udivmoddi4+0x28c>
 800559a:	45a6      	cmp	lr, r4
 800559c:	f240 8102 	bls.w	80057a4 <__udivmoddi4+0x28c>
 80055a0:	3802      	subs	r0, #2
 80055a2:	443c      	add	r4, r7
 80055a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80055a8:	eba4 040e 	sub.w	r4, r4, lr
 80055ac:	2600      	movs	r6, #0
 80055ae:	b11d      	cbz	r5, 80055b8 <__udivmoddi4+0xa0>
 80055b0:	40d4      	lsrs	r4, r2
 80055b2:	2300      	movs	r3, #0
 80055b4:	e9c5 4300 	strd	r4, r3, [r5]
 80055b8:	4631      	mov	r1, r6
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055be:	b902      	cbnz	r2, 80055c2 <__udivmoddi4+0xaa>
 80055c0:	deff      	udf	#255	; 0xff
 80055c2:	fab2 f282 	clz	r2, r2
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d150      	bne.n	800566c <__udivmoddi4+0x154>
 80055ca:	1bcb      	subs	r3, r1, r7
 80055cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80055d0:	fa1f f887 	uxth.w	r8, r7
 80055d4:	2601      	movs	r6, #1
 80055d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80055da:	0c21      	lsrs	r1, r4, #16
 80055dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80055e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80055e4:	fb08 f30c 	mul.w	r3, r8, ip
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d907      	bls.n	80055fc <__udivmoddi4+0xe4>
 80055ec:	1879      	adds	r1, r7, r1
 80055ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80055f2:	d202      	bcs.n	80055fa <__udivmoddi4+0xe2>
 80055f4:	428b      	cmp	r3, r1
 80055f6:	f200 80e9 	bhi.w	80057cc <__udivmoddi4+0x2b4>
 80055fa:	4684      	mov	ip, r0
 80055fc:	1ac9      	subs	r1, r1, r3
 80055fe:	b2a3      	uxth	r3, r4
 8005600:	fbb1 f0fe 	udiv	r0, r1, lr
 8005604:	fb0e 1110 	mls	r1, lr, r0, r1
 8005608:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800560c:	fb08 f800 	mul.w	r8, r8, r0
 8005610:	45a0      	cmp	r8, r4
 8005612:	d907      	bls.n	8005624 <__udivmoddi4+0x10c>
 8005614:	193c      	adds	r4, r7, r4
 8005616:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800561a:	d202      	bcs.n	8005622 <__udivmoddi4+0x10a>
 800561c:	45a0      	cmp	r8, r4
 800561e:	f200 80d9 	bhi.w	80057d4 <__udivmoddi4+0x2bc>
 8005622:	4618      	mov	r0, r3
 8005624:	eba4 0408 	sub.w	r4, r4, r8
 8005628:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800562c:	e7bf      	b.n	80055ae <__udivmoddi4+0x96>
 800562e:	428b      	cmp	r3, r1
 8005630:	d909      	bls.n	8005646 <__udivmoddi4+0x12e>
 8005632:	2d00      	cmp	r5, #0
 8005634:	f000 80b1 	beq.w	800579a <__udivmoddi4+0x282>
 8005638:	2600      	movs	r6, #0
 800563a:	e9c5 0100 	strd	r0, r1, [r5]
 800563e:	4630      	mov	r0, r6
 8005640:	4631      	mov	r1, r6
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	fab3 f683 	clz	r6, r3
 800564a:	2e00      	cmp	r6, #0
 800564c:	d14a      	bne.n	80056e4 <__udivmoddi4+0x1cc>
 800564e:	428b      	cmp	r3, r1
 8005650:	d302      	bcc.n	8005658 <__udivmoddi4+0x140>
 8005652:	4282      	cmp	r2, r0
 8005654:	f200 80b8 	bhi.w	80057c8 <__udivmoddi4+0x2b0>
 8005658:	1a84      	subs	r4, r0, r2
 800565a:	eb61 0103 	sbc.w	r1, r1, r3
 800565e:	2001      	movs	r0, #1
 8005660:	468c      	mov	ip, r1
 8005662:	2d00      	cmp	r5, #0
 8005664:	d0a8      	beq.n	80055b8 <__udivmoddi4+0xa0>
 8005666:	e9c5 4c00 	strd	r4, ip, [r5]
 800566a:	e7a5      	b.n	80055b8 <__udivmoddi4+0xa0>
 800566c:	f1c2 0320 	rsb	r3, r2, #32
 8005670:	fa20 f603 	lsr.w	r6, r0, r3
 8005674:	4097      	lsls	r7, r2
 8005676:	fa01 f002 	lsl.w	r0, r1, r2
 800567a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800567e:	40d9      	lsrs	r1, r3
 8005680:	4330      	orrs	r0, r6
 8005682:	0c03      	lsrs	r3, r0, #16
 8005684:	fbb1 f6fe 	udiv	r6, r1, lr
 8005688:	fa1f f887 	uxth.w	r8, r7
 800568c:	fb0e 1116 	mls	r1, lr, r6, r1
 8005690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005694:	fb06 f108 	mul.w	r1, r6, r8
 8005698:	4299      	cmp	r1, r3
 800569a:	fa04 f402 	lsl.w	r4, r4, r2
 800569e:	d909      	bls.n	80056b4 <__udivmoddi4+0x19c>
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80056a6:	f080 808d 	bcs.w	80057c4 <__udivmoddi4+0x2ac>
 80056aa:	4299      	cmp	r1, r3
 80056ac:	f240 808a 	bls.w	80057c4 <__udivmoddi4+0x2ac>
 80056b0:	3e02      	subs	r6, #2
 80056b2:	443b      	add	r3, r7
 80056b4:	1a5b      	subs	r3, r3, r1
 80056b6:	b281      	uxth	r1, r0
 80056b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80056bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80056c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80056c4:	fb00 f308 	mul.w	r3, r0, r8
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d907      	bls.n	80056dc <__udivmoddi4+0x1c4>
 80056cc:	1879      	adds	r1, r7, r1
 80056ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80056d2:	d273      	bcs.n	80057bc <__udivmoddi4+0x2a4>
 80056d4:	428b      	cmp	r3, r1
 80056d6:	d971      	bls.n	80057bc <__udivmoddi4+0x2a4>
 80056d8:	3802      	subs	r0, #2
 80056da:	4439      	add	r1, r7
 80056dc:	1acb      	subs	r3, r1, r3
 80056de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80056e2:	e778      	b.n	80055d6 <__udivmoddi4+0xbe>
 80056e4:	f1c6 0c20 	rsb	ip, r6, #32
 80056e8:	fa03 f406 	lsl.w	r4, r3, r6
 80056ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80056f0:	431c      	orrs	r4, r3
 80056f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80056f6:	fa01 f306 	lsl.w	r3, r1, r6
 80056fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80056fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8005702:	431f      	orrs	r7, r3
 8005704:	0c3b      	lsrs	r3, r7, #16
 8005706:	fbb1 f9fe 	udiv	r9, r1, lr
 800570a:	fa1f f884 	uxth.w	r8, r4
 800570e:	fb0e 1119 	mls	r1, lr, r9, r1
 8005712:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005716:	fb09 fa08 	mul.w	sl, r9, r8
 800571a:	458a      	cmp	sl, r1
 800571c:	fa02 f206 	lsl.w	r2, r2, r6
 8005720:	fa00 f306 	lsl.w	r3, r0, r6
 8005724:	d908      	bls.n	8005738 <__udivmoddi4+0x220>
 8005726:	1861      	adds	r1, r4, r1
 8005728:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800572c:	d248      	bcs.n	80057c0 <__udivmoddi4+0x2a8>
 800572e:	458a      	cmp	sl, r1
 8005730:	d946      	bls.n	80057c0 <__udivmoddi4+0x2a8>
 8005732:	f1a9 0902 	sub.w	r9, r9, #2
 8005736:	4421      	add	r1, r4
 8005738:	eba1 010a 	sub.w	r1, r1, sl
 800573c:	b2bf      	uxth	r7, r7
 800573e:	fbb1 f0fe 	udiv	r0, r1, lr
 8005742:	fb0e 1110 	mls	r1, lr, r0, r1
 8005746:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800574a:	fb00 f808 	mul.w	r8, r0, r8
 800574e:	45b8      	cmp	r8, r7
 8005750:	d907      	bls.n	8005762 <__udivmoddi4+0x24a>
 8005752:	19e7      	adds	r7, r4, r7
 8005754:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8005758:	d22e      	bcs.n	80057b8 <__udivmoddi4+0x2a0>
 800575a:	45b8      	cmp	r8, r7
 800575c:	d92c      	bls.n	80057b8 <__udivmoddi4+0x2a0>
 800575e:	3802      	subs	r0, #2
 8005760:	4427      	add	r7, r4
 8005762:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005766:	eba7 0708 	sub.w	r7, r7, r8
 800576a:	fba0 8902 	umull	r8, r9, r0, r2
 800576e:	454f      	cmp	r7, r9
 8005770:	46c6      	mov	lr, r8
 8005772:	4649      	mov	r1, r9
 8005774:	d31a      	bcc.n	80057ac <__udivmoddi4+0x294>
 8005776:	d017      	beq.n	80057a8 <__udivmoddi4+0x290>
 8005778:	b15d      	cbz	r5, 8005792 <__udivmoddi4+0x27a>
 800577a:	ebb3 020e 	subs.w	r2, r3, lr
 800577e:	eb67 0701 	sbc.w	r7, r7, r1
 8005782:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005786:	40f2      	lsrs	r2, r6
 8005788:	ea4c 0202 	orr.w	r2, ip, r2
 800578c:	40f7      	lsrs	r7, r6
 800578e:	e9c5 2700 	strd	r2, r7, [r5]
 8005792:	2600      	movs	r6, #0
 8005794:	4631      	mov	r1, r6
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	462e      	mov	r6, r5
 800579c:	4628      	mov	r0, r5
 800579e:	e70b      	b.n	80055b8 <__udivmoddi4+0xa0>
 80057a0:	4606      	mov	r6, r0
 80057a2:	e6e9      	b.n	8005578 <__udivmoddi4+0x60>
 80057a4:	4618      	mov	r0, r3
 80057a6:	e6fd      	b.n	80055a4 <__udivmoddi4+0x8c>
 80057a8:	4543      	cmp	r3, r8
 80057aa:	d2e5      	bcs.n	8005778 <__udivmoddi4+0x260>
 80057ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80057b0:	eb69 0104 	sbc.w	r1, r9, r4
 80057b4:	3801      	subs	r0, #1
 80057b6:	e7df      	b.n	8005778 <__udivmoddi4+0x260>
 80057b8:	4608      	mov	r0, r1
 80057ba:	e7d2      	b.n	8005762 <__udivmoddi4+0x24a>
 80057bc:	4660      	mov	r0, ip
 80057be:	e78d      	b.n	80056dc <__udivmoddi4+0x1c4>
 80057c0:	4681      	mov	r9, r0
 80057c2:	e7b9      	b.n	8005738 <__udivmoddi4+0x220>
 80057c4:	4666      	mov	r6, ip
 80057c6:	e775      	b.n	80056b4 <__udivmoddi4+0x19c>
 80057c8:	4630      	mov	r0, r6
 80057ca:	e74a      	b.n	8005662 <__udivmoddi4+0x14a>
 80057cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80057d0:	4439      	add	r1, r7
 80057d2:	e713      	b.n	80055fc <__udivmoddi4+0xe4>
 80057d4:	3802      	subs	r0, #2
 80057d6:	443c      	add	r4, r7
 80057d8:	e724      	b.n	8005624 <__udivmoddi4+0x10c>
 80057da:	bf00      	nop

080057dc <__aeabi_idiv0>:
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop

080057e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057e0:	b530      	push	{r4, r5, lr}
 80057e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057e4:	222c      	movs	r2, #44	; 0x2c
 80057e6:	2100      	movs	r1, #0
 80057e8:	a809      	add	r0, sp, #36	; 0x24
 80057ea:	f002 f9b3 	bl	8007b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057ee:	2300      	movs	r3, #0
 80057f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057f4:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80057f8:	491a      	ldr	r1, [pc, #104]	; (8005864 <SystemClock_Config+0x84>)
 80057fa:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057fc:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005800:	4a19      	ldr	r2, [pc, #100]	; (8005868 <SystemClock_Config+0x88>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005802:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8005806:	6408      	str	r0, [r1, #64]	; 0x40
 8005808:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800580a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800580e:	9100      	str	r1, [sp, #0]
 8005810:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	6811      	ldr	r1, [r2, #0]
 8005816:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800581a:	6011      	str	r1, [r2, #0]
 800581c:	6812      	ldr	r2, [r2, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800581e:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005820:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005824:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005826:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005828:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800582a:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800582c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800582e:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005832:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005834:	9108      	str	r1, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005836:	f001 fb21 	bl	8006e7c <HAL_RCC_OscConfig>
 800583a:	b108      	cbz	r0, 8005840 <SystemClock_Config+0x60>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800583c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800583e:	e7fe      	b.n	800583e <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005840:	4601      	mov	r1, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005842:	240f      	movs	r4, #15
 8005844:	2500      	movs	r5, #0
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800584a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800584c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005850:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005854:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005856:	f001 fd2d 	bl	80072b4 <HAL_RCC_ClockConfig>
 800585a:	b108      	cbz	r0, 8005860 <SystemClock_Config+0x80>
 800585c:	b672      	cpsid	i
  while (1)
 800585e:	e7fe      	b.n	800585e <SystemClock_Config+0x7e>
}
 8005860:	b015      	add	sp, #84	; 0x54
 8005862:	bd30      	pop	{r4, r5, pc}
 8005864:	40023800 	.word	0x40023800
 8005868:	40007000 	.word	0x40007000

0800586c <main>:
{
 800586c:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586e:	2400      	movs	r4, #0
{
 8005870:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8005872:	f000 ff6b 	bl	800674c <HAL_Init>
  SystemClock_Config();
 8005876:	f7ff ffb3 	bl	80057e0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800587a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800587e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005882:	4d28      	ldr	r5, [pc, #160]	; (8005924 <main+0xb8>)
 8005884:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005886:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005888:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800588a:	4827      	ldr	r0, [pc, #156]	; (8005928 <main+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	632b      	str	r3, [r5, #48]	; 0x30
 8005892:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800589a:	4622      	mov	r2, r4
 800589c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80058a2:	f001 fae7 	bl	8006e74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = TRIG_Pin;
 80058a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058aa:	2301      	movs	r3, #1
 80058ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80058b0:	481d      	ldr	r0, [pc, #116]	; (8005928 <main+0xbc>)
  GPIO_InitStruct.Pin = TRIG_Pin;
 80058b2:	2200      	movs	r2, #0
 80058b4:	2302      	movs	r3, #2
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80058b6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = TRIG_Pin;
 80058b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80058bc:	f001 f9ca 	bl	8006c54 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80058c0:	9402      	str	r4, [sp, #8]
 80058c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80058c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058c8:	632b      	str	r3, [r5, #48]	; 0x30
 80058ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80058cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80058d0:	4622      	mov	r2, r4
 80058d2:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80058d4:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80058d6:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 80058d8:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80058da:	f000 ff77 	bl	80067cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80058de:	203a      	movs	r0, #58	; 0x3a
 80058e0:	f000 ffac 	bl	800683c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80058e4:	4622      	mov	r2, r4
 80058e6:	4621      	mov	r1, r4
 80058e8:	2046      	movs	r0, #70	; 0x46
 80058ea:	f000 ff6f 	bl	80067cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80058ee:	2046      	movs	r0, #70	; 0x46
 80058f0:	f000 ffa4 	bl	800683c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80058f4:	480d      	ldr	r0, [pc, #52]	; (800592c <main+0xc0>)
 80058f6:	490e      	ldr	r1, [pc, #56]	; (8005930 <main+0xc4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058f8:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 921600;
 80058fa:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058fe:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8005900:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005904:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 921600;
 8005908:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800590c:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800590e:	f001 fd8f 	bl	8007430 <HAL_UART_Init>
 8005912:	b108      	cbz	r0, 8005918 <main+0xac>
 8005914:	b672      	cpsid	i
  while (1)
 8005916:	e7fe      	b.n	8005916 <main+0xaa>
	  test_keys();  // test_server.py
 8005918:	f000 fdea 	bl	80064f0 <test_keys>
 800591c:	f000 fde8 	bl	80064f0 <test_keys>
  while (1)
 8005920:	e7fa      	b.n	8005918 <main+0xac>
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800
 8005928:	40020000 	.word	0x40020000
 800592c:	200000e8 	.word	0x200000e8
 8005930:	40011000 	.word	0x40011000

08005934 <Error_Handler>:
 8005934:	b672      	cpsid	i
  while (1)
 8005936:	e7fe      	b.n	8005936 <Error_Handler+0x2>

08005938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005938:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800593a:	4b0c      	ldr	r3, [pc, #48]	; (800596c <HAL_MspInit+0x34>)
 800593c:	2100      	movs	r1, #0
 800593e:	9100      	str	r1, [sp, #0]
 8005940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005946:	645a      	str	r2, [r3, #68]	; 0x44
 8005948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800594e:	9200      	str	r2, [sp, #0]
 8005950:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005952:	9101      	str	r1, [sp, #4]
 8005954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005956:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800595a:	641a      	str	r2, [r3, #64]	; 0x40
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005966:	b002      	add	sp, #8
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800

08005970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005970:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8005972:	6802      	ldr	r2, [r0, #0]
 8005974:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <HAL_UART_MspInit+0xe4>)
{
 8005976:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005978:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800597a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005980:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005984:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8005986:	d001      	beq.n	800598c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005988:	b008      	add	sp, #32
 800598a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800598c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8005990:	9400      	str	r4, [sp, #0]
 8005992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005994:	4e30      	ldr	r6, [pc, #192]	; (8005a58 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005996:	f042 0210 	orr.w	r2, r2, #16
 800599a:	645a      	str	r2, [r3, #68]	; 0x44
 800599c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599e:	f002 0210 	and.w	r2, r2, #16
 80059a2:	9200      	str	r2, [sp, #0]
 80059a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059a6:	9401      	str	r4, [sp, #4]
 80059a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80059b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80059bc:	2302      	movs	r3, #2
 80059be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059c2:	2201      	movs	r2, #1
 80059c4:	2303      	movs	r3, #3
 80059c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ca:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059cc:	2307      	movs	r3, #7
 80059ce:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d2:	4822      	ldr	r0, [pc, #136]	; (8005a5c <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d6:	f001 f93d 	bl	8006c54 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80059da:	4921      	ldr	r1, [pc, #132]	; (8005a60 <HAL_UART_MspInit+0xf0>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059dc:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80059de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80059e6:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059e8:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059ec:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80059f0:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059f4:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059f6:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059f8:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80059fa:	f000 ff47 	bl	800688c <HAL_DMA_Init>
 80059fe:	bb18      	cbnz	r0, 8005a48 <HAL_UART_MspInit+0xd8>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005a00:	4c18      	ldr	r4, [pc, #96]	; (8005a64 <HAL_UART_MspInit+0xf4>)
 8005a02:	4819      	ldr	r0, [pc, #100]	; (8005a68 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005a04:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005a06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a0a:	2140      	movs	r1, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005a10:	6020      	str	r0, [r4, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005a12:	6063      	str	r3, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005a14:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a1c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a20:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005a24:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a26:	60a1      	str	r1, [r4, #8]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a28:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005a2a:	f000 ff2f 	bl	800688c <HAL_DMA_Init>
 8005a2e:	b970      	cbnz	r0, 8005a4e <HAL_UART_MspInit+0xde>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a30:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005a32:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a34:	4611      	mov	r1, r2
 8005a36:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005a38:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a3a:	f000 fec7 	bl	80067cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a3e:	2025      	movs	r0, #37	; 0x25
 8005a40:	f000 fefc 	bl	800683c <HAL_NVIC_EnableIRQ>
}
 8005a44:	b008      	add	sp, #32
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005a48:	f7ff ff74 	bl	8005934 <Error_Handler>
 8005a4c:	e7d8      	b.n	8005a00 <HAL_UART_MspInit+0x90>
      Error_Handler();
 8005a4e:	f7ff ff71 	bl	8005934 <Error_Handler>
 8005a52:	e7ed      	b.n	8005a30 <HAL_UART_MspInit+0xc0>
 8005a54:	40011000 	.word	0x40011000
 8005a58:	20000028 	.word	0x20000028
 8005a5c:	40020000 	.word	0x40020000
 8005a60:	40026440 	.word	0x40026440
 8005a64:	20000088 	.word	0x20000088
 8005a68:	400264b8 	.word	0x400264b8

08005a6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a6c:	e7fe      	b.n	8005a6c <NMI_Handler>
 8005a6e:	bf00      	nop

08005a70 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a70:	e7fe      	b.n	8005a70 <HardFault_Handler>
 8005a72:	bf00      	nop

08005a74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a74:	e7fe      	b.n	8005a74 <MemManage_Handler>
 8005a76:	bf00      	nop

08005a78 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a78:	e7fe      	b.n	8005a78 <BusFault_Handler>
 8005a7a:	bf00      	nop

08005a7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a7c:	e7fe      	b.n	8005a7c <UsageFault_Handler>
 8005a7e:	bf00      	nop

08005a80 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <DebugMon_Handler>:
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop

08005a88 <PendSV_Handler>:
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop

08005a8c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a8c:	f000 be78 	b.w	8006780 <HAL_IncTick>

08005a90 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <USART1_IRQHandler+0x8>)
 8005a92:	f001 beff 	b.w	8007894 <HAL_UART_IRQHandler>
 8005a96:	bf00      	nop
 8005a98:	200000e8 	.word	0x200000e8

08005a9c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <DMA2_Stream2_IRQHandler+0x8>)
 8005a9e:	f000 bfe9 	b.w	8006a74 <HAL_DMA_IRQHandler>
 8005aa2:	bf00      	nop
 8005aa4:	20000028 	.word	0x20000028

08005aa8 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <DMA2_Stream7_IRQHandler+0x8>)
 8005aaa:	f000 bfe3 	b.w	8006a74 <HAL_DMA_IRQHandler>
 8005aae:	bf00      	nop
 8005ab0:	20000088 	.word	0x20000088

08005ab4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ab4:	4a03      	ldr	r2, [pc, #12]	; (8005ac4 <SystemInit+0x10>)
 8005ab6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005aba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005abe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ac2:	4770      	bx	lr
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <trigger_high>:
#include "trigger.h"

void trigger_high(void)
{
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8005ac8:	4802      	ldr	r0, [pc, #8]	; (8005ad4 <trigger_high+0xc>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ad0:	f001 b9d0 	b.w	8006e74 <HAL_GPIO_WritePin>
 8005ad4:	40020000 	.word	0x40020000

08005ad8 <trigger_low>:
}

void trigger_low(void)
{
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <trigger_low+0xc>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ae0:	f001 b9c8 	b.w	8006e74 <HAL_GPIO_WritePin>
 8005ae4:	40020000 	.word	0x40020000

08005ae8 <crypto_stream_chacha20>:
}



int crypto_stream_chacha20(unsigned char *c,unsigned long long clen, const unsigned char *n, const unsigned char *k)
{
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	b0bf      	sub	sp, #252	; 0xfc
 8005aee:	e9cd 2300 	strd	r2, r3, [sp]
  unsigned char block[64];
  unsigned char kcopy[32];
  unsigned long long i;
  unsigned int u;

  if (!clen) return 0;
 8005af2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005af6:	ea56 0307 	orrs.w	r3, r6, r7
{
 8005afa:	9d49      	ldr	r5, [sp, #292]	; 0x124
  if (!clen) return 0;
 8005afc:	f000 8093 	beq.w	8005c26 <crypto_stream_chacha20+0x13e>
 8005b00:	6869      	ldr	r1, [r5, #4]
 8005b02:	68aa      	ldr	r2, [r5, #8]
 8005b04:	68eb      	ldr	r3, [r5, #12]
 8005b06:	4681      	mov	r9, r0
 8005b08:	6828      	ldr	r0, [r5, #0]
 8005b0a:	ac06      	add	r4, sp, #24
 8005b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b0e:	6928      	ldr	r0, [r5, #16]
 8005b10:	6969      	ldr	r1, [r5, #20]
 8005b12:	69aa      	ldr	r2, [r5, #24]
 8005b14:	69eb      	ldr	r3, [r5, #28]
 8005b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}

  for (i = 0;i < 32;++i) kcopy[i] = k[i];
  asm_csc_for(in,n);
 8005b18:	9948      	ldr	r1, [sp, #288]	; 0x120
 8005b1a:	a802      	add	r0, sp, #8
 8005b1c:	f7fc fc52 	bl	80023c4 <asm_csc_for>

  while (clen >= 64) {
 8005b20:	2f00      	cmp	r7, #0
 8005b22:	bf08      	it	eq
 8005b24:	2e40      	cmpeq	r6, #64	; 0x40
 8005b26:	f0c0 8082 	bcc.w	8005c2e <crypto_stream_chacha20+0x146>
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	463d      	mov	r5, r7
    asm_init(x,k,in,c);
 8005b2e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005c8c <crypto_stream_chacha20+0x1a4>
 8005b32:	af2e      	add	r7, sp, #184	; 0xb8
  while (clen >= 64) {
 8005b34:	4634      	mov	r4, r6
 8005b36:	eb09 0802 	add.w	r8, r9, r2
 8005b3a:	ae1e      	add	r6, sp, #120	; 0x78
 8005b3c:	46bb      	mov	fp, r7
    asm_init(x,k,in,c);
 8005b3e:	4653      	mov	r3, sl
 8005b40:	aa02      	add	r2, sp, #8
 8005b42:	a906      	add	r1, sp, #24
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7fc fc45 	bl	80023d4 <asm_init>
    for (i = 0;i < 16;++i) j[i] = x[i];
 8005b4a:	e9dd 011f 	ldrd	r0, r1, [sp, #124]	; 0x7c
 8005b4e:	e9dd 2321 	ldrd	r2, r3, [sp, #132]	; 0x84
 8005b52:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8005b54:	902f      	str	r0, [sp, #188]	; 0xbc
 8005b56:	9231      	str	r2, [sp, #196]	; 0xc4
 8005b58:	9824      	ldr	r0, [sp, #144]	; 0x90
 8005b5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b5c:	9332      	str	r3, [sp, #200]	; 0xc8
 8005b5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b60:	9236      	str	r2, [sp, #216]	; 0xd8
 8005b62:	9337      	str	r3, [sp, #220]	; 0xdc
 8005b64:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005b66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005b68:	9130      	str	r1, [sp, #192]	; 0xc0
 8005b6a:	e9cd 7033 	strd	r7, r0, [sp, #204]	; 0xcc
 8005b6e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8005b70:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8005b72:	9925      	ldr	r1, [sp, #148]	; 0x94
 8005b74:	9135      	str	r1, [sp, #212]	; 0xd4
 8005b76:	e9cd 233b 	strd	r2, r3, [sp, #236]	; 0xec
 8005b7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005b7c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8005b7e:	933d      	str	r3, [sp, #244]	; 0xf4
 8005b80:	e9cd 7038 	strd	r7, r0, [sp, #224]	; 0xe0
 8005b84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b86:	932e      	str	r3, [sp, #184]	; 0xb8
    asm_quarterround(x);
 8005b88:	4630      	mov	r0, r6
    for (i = 0;i < 16;++i) j[i] = x[i];
 8005b8a:	913a      	str	r1, [sp, #232]	; 0xe8
    asm_quarterround(x);
 8005b8c:	f7fc fc2e 	bl	80023ec <asm_quarterround>
    asm_add_and_store(out, x, j);
 8005b90:	465a      	mov	r2, fp
 8005b92:	4631      	mov	r1, r6
 8005b94:	eba8 0004 	sub.w	r0, r8, r4
 8005b98:	f7fd faa4 	bl	80030e4 <asm_add_and_store>
    
    crypto_core_chacha20(c,in,kcopy,sigma);
    u = 1;
    for (i = 8;i < 16;++i) {
      u += (unsigned int) in[i];
 8005b9c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005ba0:	f89d e011 	ldrb.w	lr, [sp, #17]
 8005ba4:	f89d c012 	ldrb.w	ip, [sp, #18]
 8005ba8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8005bac:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8005bb0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8005bba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8005bbe:	eb00 201c 	add.w	r0, r0, ip, lsr #8
      in[i] = u;
      u >>= 8;
    }

    clen -= 64;
 8005bc2:	3c40      	subs	r4, #64	; 0x40
      u += (unsigned int) in[i];
 8005bc4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
      in[i] = u;
 8005bc8:	f88d 3010 	strb.w	r3, [sp, #16]
      u += (unsigned int) in[i];
 8005bcc:	f89d 3016 	ldrb.w	r3, [sp, #22]
      in[i] = u;
 8005bd0:	f88d e011 	strb.w	lr, [sp, #17]
      u += (unsigned int) in[i];
 8005bd4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8005bd8:	f89d e017 	ldrb.w	lr, [sp, #23]
      in[i] = u;
 8005bdc:	f88d c012 	strb.w	ip, [sp, #18]
    clen -= 64;
 8005be0:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
      u += (unsigned int) in[i];
 8005be4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
  while (clen >= 64) {
 8005be8:	2d00      	cmp	r5, #0
      u += (unsigned int) in[i];
 8005bea:	eb0e 2c13 	add.w	ip, lr, r3, lsr #8
  while (clen >= 64) {
 8005bee:	bf08      	it	eq
 8005bf0:	2c40      	cmpeq	r4, #64	; 0x40
      in[i] = u;
 8005bf2:	f88d 0013 	strb.w	r0, [sp, #19]
 8005bf6:	f88d 1014 	strb.w	r1, [sp, #20]
 8005bfa:	f88d 2015 	strb.w	r2, [sp, #21]
 8005bfe:	f88d 3016 	strb.w	r3, [sp, #22]
 8005c02:	f88d c017 	strb.w	ip, [sp, #23]
  while (clen >= 64) {
 8005c06:	d29a      	bcs.n	8005b3e <crypto_stream_chacha20+0x56>
 8005c08:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c0c:	f1b1 0340 	subs.w	r3, r1, #64	; 0x40
 8005c10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c14:	3340      	adds	r3, #64	; 0x40
 8005c16:	f001 043f 	and.w	r4, r1, #63	; 0x3f
 8005c1a:	2500      	movs	r5, #0
 8005c1c:	4499      	add	r9, r3
    c += 64;
  }

  if (clen) {
 8005c1e:	ea54 0305 	orrs.w	r3, r4, r5
 8005c22:	465f      	mov	r7, fp
 8005c24:	d107      	bne.n	8005c36 <crypto_stream_chacha20+0x14e>
    crypto_core_chacha20(block,in,kcopy,sigma);
    for (i = 0;i < clen;++i) c[i] = block[i];
  }
  return 0;
}
 8005c26:	2000      	movs	r0, #0
 8005c28:	b03f      	add	sp, #252	; 0xfc
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (clen >= 64) {
 8005c2e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005c32:	ae1e      	add	r6, sp, #120	; 0x78
 8005c34:	af2e      	add	r7, sp, #184	; 0xb8
    asm_init(x,k,in,c);
 8005c36:	aa02      	add	r2, sp, #8
 8005c38:	a906      	add	r1, sp, #24
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <crypto_stream_chacha20+0x1a4>)
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7fc fbc9 	bl	80023d4 <asm_init>
    for (i = 0;i < 16;++i) j[i] = x[i];
 8005c42:	46b6      	mov	lr, r6
 8005c44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005c48:	46bc      	mov	ip, r7
 8005c4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005c4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005c52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005c5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005c5e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005c62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    asm_quarterround(x);
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7fc fbc0 	bl	80023ec <asm_quarterround>
    asm_add_and_store(out, x, j);
 8005c6c:	463a      	mov	r2, r7
 8005c6e:	4631      	mov	r1, r6
 8005c70:	a80e      	add	r0, sp, #56	; 0x38
 8005c72:	f7fd fa37 	bl	80030e4 <asm_add_and_store>
    for (i = 0;i < clen;++i) c[i] = block[i];
 8005c76:	ea54 0305 	orrs.w	r3, r4, r5
 8005c7a:	a90e      	add	r1, sp, #56	; 0x38
 8005c7c:	bf14      	ite	ne
 8005c7e:	4622      	movne	r2, r4
 8005c80:	2201      	moveq	r2, #1
 8005c82:	4648      	mov	r0, r9
 8005c84:	f001 ff58 	bl	8007b38 <memcpy>
 8005c88:	e7cd      	b.n	8005c26 <crypto_stream_chacha20+0x13e>
 8005c8a:	bf00      	nop
 8005c8c:	08007b94 	.word	0x08007b94

08005c90 <shake128_absorb_asm>:
  KeccakF1600_StateXORBytes(s,t,0,r);
}


void shake128_absorb_asm(uint64_t *s, const unsigned char *input, unsigned int inputByteLen)
{
 8005c90:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8005c94:	4614      	mov	r4, r2
 8005c96:	b0b2      	sub	sp, #200	; 0xc8
 8005c98:	22c8      	movs	r2, #200	; 0xc8
 8005c9a:	460e      	mov	r6, r1
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4605      	mov	r5, r0
    
    keccak_absorb_asm(s, SHAKE128_RATE, input, inputByteLen, 0x1F);
 8005ca0:	46a0      	mov	r8, r4
 8005ca2:	f001 ff57 	bl	8007b54 <memset>
 8005ca6:	f04f 0900 	mov.w	r9, #0
  for (i = 0; i < 25; ++i)
 8005caa:	4668      	mov	r0, sp
 8005cac:	22a8      	movs	r2, #168	; 0xa8
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f001 ff50 	bl	8007b54 <memset>
  for (i = 0; i < mlen; ++i)
 8005cb4:	ea58 0309 	orrs.w	r3, r8, r9
 8005cb8:	d004      	beq.n	8005cc4 <shake128_absorb_asm+0x34>
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	4668      	mov	r0, sp
 8005cc0:	f001 ff3a 	bl	8007b38 <memcpy>
  t[i] = p;
 8005cc4:	231f      	movs	r3, #31
 8005cc6:	f80d 3004 	strb.w	r3, [sp, r4]
  t[r - 1] |= 128;
 8005cca:	f89d 40a7 	ldrb.w	r4, [sp, #167]	; 0xa7
  KeccakF1600_StateXORBytes(s,t,0,r);
 8005cce:	4628      	mov	r0, r5
 8005cd0:	4669      	mov	r1, sp
  t[r - 1] |= 128;
 8005cd2:	f064 047f 	orn	r4, r4, #127	; 0x7f
  KeccakF1600_StateXORBytes(s,t,0,r);
 8005cd6:	23a8      	movs	r3, #168	; 0xa8
 8005cd8:	2200      	movs	r2, #0
  t[r - 1] |= 128;
 8005cda:	f88d 40a7 	strb.w	r4, [sp, #167]	; 0xa7
  KeccakF1600_StateXORBytes(s,t,0,r);
 8005cde:	f7fa fc8f 	bl	8000600 <KeccakF1600_StateXORBytes>
}
 8005ce2:	b032      	add	sp, #200	; 0xc8
 8005ce4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08005ce8 <shake128_squeezeblocks_asm>:



void shake128_squeezeblocks_asm(unsigned char *output, unsigned int nblocks, uint64_t *s)
{
 8005ce8:	b520      	push	{r5, lr}
    char out[16];
    if (nblocks == 4){
 8005cea:	2904      	cmp	r1, #4
{
 8005cec:	4605      	mov	r5, r0
 8005cee:	b082      	sub	sp, #8
 8005cf0:	4610      	mov	r0, r2
    if (nblocks == 4){
 8005cf2:	d003      	beq.n	8005cfc <shake128_squeezeblocks_asm+0x14>
        keccak_squeezefourblocks_asm(output, s, SHAKE128_RATE);
    }
    else if (nblocks == 1){
 8005cf4:	2901      	cmp	r1, #1
 8005cf6:	d02a      	beq.n	8005d4e <shake128_squeezeblocks_asm+0x66>
        keccak_squeezeblock_asm(output, s, SHAKE128_RATE);
    }

}
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd20      	pop	{r5, pc}
    KeccakF1600_StatePermute(s);
 8005cfc:	9201      	str	r2, [sp, #4]
 8005cfe:	f7fb f87f 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h, 0,r );
 8005d02:	23a8      	movs	r3, #168	; 0xa8
 8005d04:	2200      	movs	r2, #0
 8005d06:	4629      	mov	r1, r5
 8005d08:	9801      	ldr	r0, [sp, #4]
 8005d0a:	f7fa fe79 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 8005d0e:	9801      	ldr	r0, [sp, #4]
 8005d10:	f7fb f876 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h+r, 0,r );
 8005d14:	23a8      	movs	r3, #168	; 0xa8
 8005d16:	18e9      	adds	r1, r5, r3
 8005d18:	2200      	movs	r2, #0
 8005d1a:	9801      	ldr	r0, [sp, #4]
 8005d1c:	f7fa fe70 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 8005d20:	9801      	ldr	r0, [sp, #4]
 8005d22:	f7fb f86d 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h+(2*r), 0,r );
 8005d26:	f505 71a8 	add.w	r1, r5, #336	; 0x150
 8005d2a:	9801      	ldr	r0, [sp, #4]
 8005d2c:	23a8      	movs	r3, #168	; 0xa8
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f7fa fe66 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 8005d34:	9801      	ldr	r0, [sp, #4]
 8005d36:	f7fb f863 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h+(3*r), 0,r );
 8005d3a:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    KeccakF1600_StateExtractBytes(s, h, 0,r );
 8005d3e:	9801      	ldr	r0, [sp, #4]
 8005d40:	23a8      	movs	r3, #168	; 0xa8
 8005d42:	2200      	movs	r2, #0
}
 8005d44:	b002      	add	sp, #8
 8005d46:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
    KeccakF1600_StateExtractBytes(s, h, 0,r );
 8005d4a:	f7fa be59 	b.w	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 8005d4e:	9201      	str	r2, [sp, #4]
 8005d50:	f7fb f856 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h, 0,r );
 8005d54:	4629      	mov	r1, r5
 8005d56:	e7f2      	b.n	8005d3e <shake128_squeezeblocks_asm+0x56>

08005d58 <sha3256>:

	

void sha3256(unsigned char *output, const unsigned char *input, unsigned int inputByteLen)
{
 8005d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	b0e5      	sub	sp, #404	; 0x194
 8005d5e:	4605      	mov	r5, r0
  uint64_t s[25];
  unsigned char t[SHA3_256_RATE];
  int i;

    KeccakF1600_StateInitialize(s);
 8005d60:	4668      	mov	r0, sp
{
 8005d62:	4616      	mov	r6, r2
 8005d64:	460f      	mov	r7, r1
 8005d66:	ac32      	add	r4, sp, #200	; 0xc8
    KeccakF1600_StateInitialize(s);
 8005d68:	f7fa fb4a 	bl	8000400 <KeccakF1600_StateInitialize>
    keccak_absorb_asm(s, SHA3_256_RATE, input, inputByteLen, 0x06);
 8005d6c:	22c8      	movs	r2, #200	; 0xc8
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4668      	mov	r0, sp
 8005d72:	f001 feef 	bl	8007b54 <memset>
 8005d76:	46b0      	mov	r8, r6
 8005d78:	f04f 0900 	mov.w	r9, #0
  for (i = 0; i < 25; ++i)
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	2288      	movs	r2, #136	; 0x88
 8005d80:	2100      	movs	r1, #0
 8005d82:	f001 fee7 	bl	8007b54 <memset>
  for (i = 0; i < mlen; ++i)
 8005d86:	ea58 0309 	orrs.w	r3, r8, r9
 8005d8a:	d004      	beq.n	8005d96 <sha3256+0x3e>
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4620      	mov	r0, r4
 8005d92:	f001 fed1 	bl	8007b38 <memcpy>
  t[i] = p;
 8005d96:	2306      	movs	r3, #6
 8005d98:	55a3      	strb	r3, [r4, r6]
  t[r - 1] |= 128;
 8005d9a:	f89d 614f 	ldrb.w	r6, [sp, #335]	; 0x14f
  KeccakF1600_StateXORBytes(s,t,0,r);
 8005d9e:	4621      	mov	r1, r4
 8005da0:	2388      	movs	r3, #136	; 0x88
 8005da2:	2200      	movs	r2, #0
 8005da4:	4668      	mov	r0, sp
  t[r - 1] |= 128;
 8005da6:	f066 067f 	orn	r6, r6, #127	; 0x7f
 8005daa:	f88d 614f 	strb.w	r6, [sp, #335]	; 0x14f
  KeccakF1600_StateXORBytes(s,t,0,r);
 8005dae:	f7fa fc27 	bl	8000600 <KeccakF1600_StateXORBytes>

    KeccakF1600_StatePermute(s);
 8005db2:	4668      	mov	r0, sp
 8005db4:	f7fb f824 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, t, 0,SHA3_256_RATE );
 8005db8:	4668      	mov	r0, sp
 8005dba:	2388      	movs	r3, #136	; 0x88
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	f7fa fe1e 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    for(i=0;i<32;i++)
 8005dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dc6:	6028      	str	r0, [r5, #0]
 8005dc8:	6069      	str	r1, [r5, #4]
 8005dca:	60aa      	str	r2, [r5, #8]
 8005dcc:	60eb      	str	r3, [r5, #12]
 8005dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dd0:	6128      	str	r0, [r5, #16]
 8005dd2:	6169      	str	r1, [r5, #20]
 8005dd4:	61aa      	str	r2, [r5, #24]
 8005dd6:	61eb      	str	r3, [r5, #28]
        output[i] = t[i];
}
 8005dd8:	b065      	add	sp, #404	; 0x194
 8005dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dde:	bf00      	nop

08005de0 <newhope_keygen_internal>:


// API FUNCTIONS 

void newhope_keygen_internal(poly * s, poly *sk, unsigned char * seed)
{
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
  poly a;
  unsigned char noiseseed[NEWHOPE_SEEDBYTES];

  randombytes(noiseseed, 1);
 8005de6:	2300      	movs	r3, #0
{
 8005de8:	4604      	mov	r4, r0
 8005dea:	4616      	mov	r6, r2
  randombytes(noiseseed, 1);
 8005dec:	4668      	mov	r0, sp
 8005dee:	2201      	movs	r2, #1
{
 8005df0:	460d      	mov	r5, r1
  randombytes(noiseseed, 1);
 8005df2:	f000 fb2f 	bl	8006454 <randombytes>
    poly_uniform(a,seed);
 8005df6:	4631      	mov	r1, r6
 8005df8:	a808      	add	r0, sp, #32
 8005dfa:	f000 fa75 	bl	80062e8 <poly_uniform>


  gen_a(&a, seed); //unsigned

  poly_getnoise(sk,noiseseed,0);
 8005dfe:	4669      	mov	r1, sp
 8005e00:	4628      	mov	r0, r5
 8005e02:	2200      	movs	r2, #0
 8005e04:	f000 faae 	bl	8006364 <poly_getnoise>
  poly_ntt(sk); //unsigned
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 fb05 	bl	8006418 <poly_ntt>
  
  poly_getnoise(s,noiseseed,1);
 8005e0e:	4669      	mov	r1, sp
 8005e10:	4620      	mov	r0, r4
 8005e12:	2201      	movs	r2, #1
 8005e14:	f000 faa6 	bl	8006364 <poly_getnoise>
  poly_ntt(s); //unsigned
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fafd 	bl	8006418 <poly_ntt>

  asm_poly_pointwise(&a,sk,&a); //unsigned
 8005e1e:	aa08      	add	r2, sp, #32
 8005e20:	4610      	mov	r0, r2
 8005e22:	4629      	mov	r1, r5
 8005e24:	f7ff fb16 	bl	8005454 <asm_poly_pointwise>
  asm_poly_add(s,&a); //unsigned
 8005e28:	a908      	add	r1, sp, #32
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f7ff fad4 	bl	80053d8 <asm_poly_add>


}
 8005e30:	f50d 6d02 	add.w	sp, sp, #2080	; 0x820
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	bf00      	nop

08005e38 <newhope_keygen>:
void newhope_keygen(poly *send, poly *sk)
{
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	4604      	mov	r4, r0
    unsigned char  seed[NEWHOPE_SEEDBYTES];

    randombytes(seed, 2);    
 8005e3e:	2300      	movs	r3, #0
 8005e40:	4668      	mov	r0, sp
 8005e42:	2202      	movs	r2, #2
{
 8005e44:	460d      	mov	r5, r1
    randombytes(seed, 2);    
 8005e46:	f000 fb05 	bl	8006454 <randombytes>
    sha3256(seed, seed, NEWHOPE_SEEDBYTES);
 8005e4a:	4669      	mov	r1, sp
 8005e4c:	4668      	mov	r0, sp
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f7ff ff82 	bl	8005d58 <sha3256>
    newhope_keygen_internal(send, sk,seed);
 8005e54:	466a      	mov	r2, sp
 8005e56:	4629      	mov	r1, r5
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7ff ffc1 	bl	8005de0 <newhope_keygen_internal>
  poly_densify(pk);
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 f95a 	bl	8006118 <poly_densify>
    pk->v[(POLY_BYTES/2)+i] = (seed[i*2]<<8)|seed[(i*2)+1];
 8005e64:	f89d 6002 	ldrb.w	r6, [sp, #2]
 8005e68:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005e6c:	f89d 5003 	ldrb.w	r5, [sp, #3]
 8005e70:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005e74:	f89d c000 	ldrb.w	ip, [sp]
 8005e78:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005e7c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8005e80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005e84:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8005e88:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8005e8c:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8005e90:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005e94:	f8a4 5702 	strh.w	r5, [r4, #1794]	; 0x702
 8005e98:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8005e9c:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8005ea0:	f8a4 3700 	strh.w	r3, [r4, #1792]	; 0x700
 8005ea4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005ea8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005eac:	f89d 700a 	ldrb.w	r7, [sp, #10]
 8005eb0:	f8a4 0704 	strh.w	r0, [r4, #1796]	; 0x704
 8005eb4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8005eb8:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8005ebc:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005ec0:	f8a4 1706 	strh.w	r1, [r4, #1798]	; 0x706
 8005ec4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005ec8:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8005ecc:	f89d 700e 	ldrb.w	r7, [sp, #14]
 8005ed0:	f8a4 2708 	strh.w	r2, [r4, #1800]	; 0x708
 8005ed4:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8005ed8:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8005edc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8005ee0:	f8a4 370a 	strh.w	r3, [r4, #1802]	; 0x70a
 8005ee4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8005ee8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005eec:	f89d 7012 	ldrb.w	r7, [sp, #18]
 8005ef0:	f8a4 570c 	strh.w	r5, [r4, #1804]	; 0x70c
 8005ef4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8005ef8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8005efc:	f8a4 070e 	strh.w	r0, [r4, #1806]	; 0x70e
 8005f00:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8005f04:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8005f08:	f8a4 1710 	strh.w	r1, [r4, #1808]	; 0x710
 8005f0c:	f8a4 2712 	strh.w	r2, [r4, #1810]	; 0x712
 8005f10:	f8a4 3714 	strh.w	r3, [r4, #1812]	; 0x714
 8005f14:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8005f18:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8005f1c:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8005f20:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8005f24:	f89d c016 	ldrb.w	ip, [sp, #22]
 8005f28:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8005f2c:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8005f30:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8005f34:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8005f38:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8005f3c:	f89d 601e 	ldrb.w	r6, [sp, #30]
 8005f40:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005f44:	f8a4 0718 	strh.w	r0, [r4, #1816]	; 0x718
 8005f48:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
 8005f4c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8005f50:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8005f54:	f8a4 5716 	strh.w	r5, [r4, #1814]	; 0x716
 8005f58:	f8a4 171a 	strh.w	r1, [r4, #1818]	; 0x71a
 8005f5c:	f8a4 271c 	strh.w	r2, [r4, #1820]	; 0x71c
 8005f60:	f8a4 371e 	strh.w	r3, [r4, #1822]	; 0x71e

    encode_ap(send, seed);
}
 8005f64:	b009      	add	sp, #36	; 0x24
 8005f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f68 <newhope_shareda>:
  encode_bp(send, received);

}

void newhope_shareda(unsigned char *sharedkey, poly *sk, poly *received)
{
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6a:	f6ad 0d0c 	subw	sp, sp, #2060	; 0x80c
 8005f6e:	460d      	mov	r5, r1
 8005f70:	4607      	mov	r7, r0
 8005f72:	f202 61fe 	addw	r1, r2, #1790	; 0x6fe
 8005f76:	ab02      	add	r3, sp, #8
 8005f78:	f60d 0608 	addw	r6, sp, #2056	; 0x808
    c->v[8*i+0] = (b->v[(POLY_BYTES/2)+i] >> 8) & 0x03;
 8005f7c:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 8005f80:	f3c4 2001 	ubfx	r0, r4, #8, #2
    c->v[8*i+1] = (b->v[(POLY_BYTES/2)+i] >> 10)& 0x03;
 8005f84:	f3c4 2c81 	ubfx	ip, r4, #10, #2
    c->v[8*i+0] = (b->v[(POLY_BYTES/2)+i] >> 8) & 0x03;
 8005f88:	8018      	strh	r0, [r3, #0]
    c->v[8*i+2] = (b->v[(POLY_BYTES/2)+i] >> 12)& 0x03;
 8005f8a:	f3c4 3001 	ubfx	r0, r4, #12, #2
    c->v[8*i+1] = (b->v[(POLY_BYTES/2)+i] >> 10)& 0x03;
 8005f8e:	f8a3 c002 	strh.w	ip, [r3, #2]
    c->v[8*i+2] = (b->v[(POLY_BYTES/2)+i] >> 12)& 0x03;
 8005f92:	8098      	strh	r0, [r3, #4]
    c->v[8*i+3] = (b->v[(POLY_BYTES/2)+i] >> 14);
 8005f94:	ea4f 3c94 	mov.w	ip, r4, lsr #14
    c->v[8*i+4] =  b->v[(POLY_BYTES/2)+i]       & 0x03;
 8005f98:	f004 0003 	and.w	r0, r4, #3
    c->v[8*i+3] = (b->v[(POLY_BYTES/2)+i] >> 14);
 8005f9c:	f8a3 c006 	strh.w	ip, [r3, #6]
    c->v[8*i+4] =  b->v[(POLY_BYTES/2)+i]       & 0x03;
 8005fa0:	8118      	strh	r0, [r3, #8]
    c->v[8*i+5] = (b->v[(POLY_BYTES/2)+i] >> 2) & 0x03;
 8005fa2:	f3c4 0c81 	ubfx	ip, r4, #2, #2
    c->v[8*i+6] = (b->v[(POLY_BYTES/2)+i] >> 4) & 0x03;
 8005fa6:	f3c4 1001 	ubfx	r0, r4, #4, #2
    c->v[8*i+7] = (b->v[(POLY_BYTES/2)+i] >> 6) & 0x03;
 8005faa:	f3c4 1481 	ubfx	r4, r4, #6, #2
    c->v[8*i+5] = (b->v[(POLY_BYTES/2)+i] >> 2) & 0x03;
 8005fae:	f8a3 c00a 	strh.w	ip, [r3, #10]
    c->v[8*i+6] = (b->v[(POLY_BYTES/2)+i] >> 4) & 0x03;
 8005fb2:	8198      	strh	r0, [r3, #12]
    c->v[8*i+7] = (b->v[(POLY_BYTES/2)+i] >> 6) & 0x03;
 8005fb4:	81dc      	strh	r4, [r3, #14]
  for(i=0;i<PARAM_N/8;i++)
 8005fb6:	3310      	adds	r3, #16
 8005fb8:	429e      	cmp	r6, r3
 8005fba:	d1df      	bne.n	8005f7c <newhope_shareda+0x14>
  poly_amplify(b);
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	9201      	str	r2, [sp, #4]
 8005fc0:	f000 f83c 	bl	800603c <poly_amplify>


  decode_bp(received,&c);


  asm_poly_pointwise(sk,sk,received);
 8005fc4:	9a01      	ldr	r2, [sp, #4]
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f7ff fa43 	bl	8005454 <asm_poly_pointwise>
  poly_bitrev(sk);
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fa20 	bl	8006414 <poly_bitrev>
  poly_invntt(sk);
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f000 fa2d 	bl	8006434 <poly_invntt>
 
  asm_rec(sharedkey, sk, &c);
 8005fda:	aa02      	add	r2, sp, #8
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7fe fce7 	bl	80049b2 <asm_rec>
  sha3256(sharedkey, sharedkey, 32); 
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff feb5 	bl	8005d58 <sha3256>

}
 8005fee:	f60d 0d0c 	addw	sp, sp, #2060	; 0x80c
 8005ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ff4 <bitrev_vector>:
void bitrev_vector(uint16_t* poly)
{
    unsigned int i,r;
    uint16_t tmp;

    for(i = 0; i < 992; i++)
 8005ff4:	4910      	ldr	r1, [pc, #64]	; (8006038 <bitrev_vector+0x44>)
 8005ff6:	2301      	movs	r3, #1
    {
        r = bitrev_table[i];
 8005ff8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
        if (i < r)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d916      	bls.n	800602e <bitrev_vector+0x3a>
{
 8006000:	b430      	push	{r4, r5}
        {
          tmp = poly[i];
          poly[i] = poly[r];
 8006002:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
          tmp = poly[i];
 8006006:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
          poly[i] = poly[r];
 800600a:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
    for(i = 0; i < 992; i++)
 800600e:	3301      	adds	r3, #1
 8006010:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
          poly[r] = tmp;
 8006014:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
    for(i = 0; i < 992; i++)
 8006018:	d007      	beq.n	800602a <bitrev_vector+0x36>
        r = bitrev_table[i];
 800601a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
        if (i < r)
 800601e:	429a      	cmp	r2, r3
 8006020:	d8ef      	bhi.n	8006002 <bitrev_vector+0xe>
    for(i = 0; i < 992; i++)
 8006022:	3301      	adds	r3, #1
 8006024:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8006028:	d1f7      	bne.n	800601a <bitrev_vector+0x26>
        }
    }
}
 800602a:	bc30      	pop	{r4, r5}
 800602c:	4770      	bx	lr
    for(i = 0; i < 992; i++)
 800602e:	3301      	adds	r3, #1
 8006030:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8006034:	d1e0      	bne.n	8005ff8 <bitrev_vector+0x4>
 8006036:	4770      	bx	lr
 8006038:	08007ba4 	.word	0x08007ba4

0800603c <poly_amplify>:




void poly_amplify(poly *p)
{
 800603c:	b430      	push	{r4, r5}
 800603e:	f5a0 61e0 	sub.w	r1, r0, #1792	; 0x700
 8006042:	4603      	mov	r3, r0
  int i;
  for(i=(PARAM_N/8)-1;i>-1;i--)
  {
    p->v[(8*i)+7] =  ((p->v[(7*i)+6] & 0xff) << 6) | (p->v[(7*i)+6])>> 10;   
 8006044:	f8b0 46fe 	ldrh.w	r4, [r0, #1790]	; 0x6fe
 8006048:	01a2      	lsls	r2, r4, #6
 800604a:	f402 527f 	and.w	r2, r2, #16320	; 0x3fc0
 800604e:	ea42 2294 	orr.w	r2, r2, r4, lsr #10
 8006052:	f8a3 27fe 	strh.w	r2, [r3, #2046]	; 0x7fe
    p->v[(8*i)+6] =  ((p->v[7*i+6] & 0x300) << 4) | ((p->v[(7*i)+5] & 0xff) << 4) | p->v[7*i+5] >> 12;
 8006056:	f8b0 56fc 	ldrh.w	r5, [r0, #1788]	; 0x6fc
 800605a:	f8b0 26fe 	ldrh.w	r2, [r0, #1790]	; 0x6fe
 800605e:	012c      	lsls	r4, r5, #4
 8006060:	0112      	lsls	r2, r2, #4
 8006062:	f404 647f 	and.w	r4, r4, #4080	; 0xff0
 8006066:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800606a:	4322      	orrs	r2, r4
 800606c:	ea42 3215 	orr.w	r2, r2, r5, lsr #12
 8006070:	f8a3 27fc 	strh.w	r2, [r3, #2044]	; 0x7fc
    p->v[(8*i)+5] =  ((p->v[(7*i)+5] & 0xf00) << 2 )| ((p->v[7*i+4] & 0xff) << 2) | p->v[7*i+4] >> 14;
 8006074:	f8b0 56fa 	ldrh.w	r5, [r0, #1786]	; 0x6fa
 8006078:	f8b0 26fc 	ldrh.w	r2, [r0, #1788]	; 0x6fc
 800607c:	00ac      	lsls	r4, r5, #2
 800607e:	0092      	lsls	r2, r2, #2
 8006080:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
 8006084:	f402 5270 	and.w	r2, r2, #15360	; 0x3c00
 8006088:	4322      	orrs	r2, r4
 800608a:	ea42 3295 	orr.w	r2, r2, r5, lsr #14
 800608e:	f8a3 27fa 	strh.w	r2, [r3, #2042]	; 0x7fa
    p->v[(8*i)+4] =  (p->v[(7*i)+4] & 0x3f00) | (p->v[(7*i)+3] & 0xff);
 8006092:	f8b0 26fa 	ldrh.w	r2, [r0, #1786]	; 0x6fa
 8006096:	f890 46f8 	ldrb.w	r4, [r0, #1784]	; 0x6f8
 800609a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
 800609e:	4322      	orrs	r2, r4
 80060a0:	f8a3 27f8 	strh.w	r2, [r3, #2040]	; 0x7f8
    p->v[(8*i)+3] =  ((p->v[7*i+3] >>2) & 0x3fc0) | (p->v[(7*i)+2] &0xff ) >> 2;
 80060a4:	f8b0 26f8 	ldrh.w	r2, [r0, #1784]	; 0x6f8
 80060a8:	f8b0 46f6 	ldrh.w	r4, [r0, #1782]	; 0x6f6
 80060ac:	0892      	lsrs	r2, r2, #2
 80060ae:	f3c4 0485 	ubfx	r4, r4, #2, #6
 80060b2:	f402 527f 	and.w	r2, r2, #16320	; 0x3fc0
 80060b6:	4322      	orrs	r2, r4
 80060b8:	f8a3 27f6 	strh.w	r2, [r3, #2038]	; 0x7f6
    p->v[(8*i)+2] =  ((p->v[(7*i)+2] & 3) << 12) | ((p->v[(7*i)+2] >> 8) << 4) | (p->v[(7*i)+1] & 240) >> 4;
 80060bc:	f8b0 46f6 	ldrh.w	r4, [r0, #1782]	; 0x6f6
 80060c0:	f8b0 56f4 	ldrh.w	r5, [r0, #1780]	; 0x6f4
 80060c4:	0322      	lsls	r2, r4, #12
 80060c6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80060ca:	0a24      	lsrs	r4, r4, #8
 80060cc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80060d0:	f3c5 1403 	ubfx	r4, r5, #4, #4
 80060d4:	4322      	orrs	r2, r4
 80060d6:	f8a3 27f4 	strh.w	r2, [r3, #2036]	; 0x7f4
    p->v[(8*i)+1] =  ((p->v[(7*i)+1] & 0xf) << 10) | ((p->v[7*i+1] >> 8) << 2) |  ((p->v[(7*i)+0] >> 6) & 3);
 80060da:	f8b0 46f4 	ldrh.w	r4, [r0, #1780]	; 0x6f4
 80060de:	f8b0 56f2 	ldrh.w	r5, [r0, #1778]	; 0x6f2
 80060e2:	02a2      	lsls	r2, r4, #10
 80060e4:	f402 5270 	and.w	r2, r2, #15360	; 0x3c00
 80060e8:	0a24      	lsrs	r4, r4, #8
 80060ea:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80060ee:	f3c5 1481 	ubfx	r4, r5, #6, #2
 80060f2:	4322      	orrs	r2, r4
 80060f4:	f8a3 27f2 	strh.w	r2, [r3, #2034]	; 0x7f2
    p->v[(8*i)+0] =  p->v[7*i+0]>>8 | (p->v[7*i+0]&63)<<8;
 80060f8:	f8b0 46f2 	ldrh.w	r4, [r0, #1778]	; 0x6f2
 80060fc:	0222      	lsls	r2, r4, #8
 80060fe:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
 8006102:	380e      	subs	r0, #14
 8006104:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
  for(i=(PARAM_N/8)-1;i>-1;i--)
 8006108:	4288      	cmp	r0, r1
    p->v[(8*i)+0] =  p->v[7*i+0]>>8 | (p->v[7*i+0]&63)<<8;
 800610a:	f8a3 27f0 	strh.w	r2, [r3, #2032]	; 0x7f0
  for(i=(PARAM_N/8)-1;i>-1;i--)
 800610e:	f1a3 0310 	sub.w	r3, r3, #16
 8006112:	d197      	bne.n	8006044 <poly_amplify+0x8>
  }
}
 8006114:	bc30      	pop	{r4, r5}
 8006116:	4770      	bx	lr

08006118 <poly_densify>:
  }
}


void poly_densify(poly *p)
{
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	b085      	sub	sp, #20
 800611e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006122:	4607      	mov	r7, r0
 8006124:	9303      	str	r3, [sp, #12]
    t4 = barrett_reduce(p->v[8*i+4]); //Make sure that coefficients have only 14 bits
    t5 = barrett_reduce(p->v[8*i+5]);
    t6 = barrett_reduce(p->v[8*i+6]);
    t7 = barrett_reduce(p->v[8*i+7]);

    m = t0 - PARAM_Q;
 8006126:	9002      	str	r0, [sp, #8]
    t0 = barrett_reduce(p->v[8*i+0]); //Make sure that coefficients have only 14 bits
 8006128:	8838      	ldrh	r0, [r7, #0]
 800612a:	f000 f9d7 	bl	80064dc <barrett_reduce>
 800612e:	4680      	mov	r8, r0
    t1 = barrett_reduce(p->v[8*i+1]);
 8006130:	8878      	ldrh	r0, [r7, #2]
 8006132:	f000 f9d3 	bl	80064dc <barrett_reduce>
 8006136:	4682      	mov	sl, r0
    t2 = barrett_reduce(p->v[8*i+2]);
 8006138:	88b8      	ldrh	r0, [r7, #4]
 800613a:	f000 f9cf 	bl	80064dc <barrett_reduce>
 800613e:	4683      	mov	fp, r0
    t3 = barrett_reduce(p->v[8*i+3]);
 8006140:	88f8      	ldrh	r0, [r7, #6]
 8006142:	f000 f9cb 	bl	80064dc <barrett_reduce>
 8006146:	4605      	mov	r5, r0
    t4 = barrett_reduce(p->v[8*i+4]); //Make sure that coefficients have only 14 bits
 8006148:	8938      	ldrh	r0, [r7, #8]
 800614a:	f000 f9c7 	bl	80064dc <barrett_reduce>
 800614e:	4606      	mov	r6, r0
    t5 = barrett_reduce(p->v[8*i+5]);
 8006150:	8978      	ldrh	r0, [r7, #10]
 8006152:	f000 f9c3 	bl	80064dc <barrett_reduce>
 8006156:	4603      	mov	r3, r0
    t6 = barrett_reduce(p->v[8*i+6]);
 8006158:	89b8      	ldrh	r0, [r7, #12]
    t5 = barrett_reduce(p->v[8*i+5]);
 800615a:	9301      	str	r3, [sp, #4]
    t6 = barrett_reduce(p->v[8*i+6]);
 800615c:	f000 f9be 	bl	80064dc <barrett_reduce>
 8006160:	4681      	mov	r9, r0
    t7 = barrett_reduce(p->v[8*i+7]);
 8006162:	89f8      	ldrh	r0, [r7, #14]
 8006164:	f000 f9ba 	bl	80064dc <barrett_reduce>
 8006168:	4602      	mov	r2, r0
    m = t1 - PARAM_Q;
    c = m;
    c >>= 15;
    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]

    m = t2 - PARAM_Q;
 800616a:	f50b 404f 	add.w	r0, fp, #52992	; 0xcf00
 800616e:	30ff      	adds	r0, #255	; 0xff
 8006170:	fa1f fc80 	uxth.w	ip, r0
    c = m;
    c >>= 15;
    t2 = m ^ ((t2^m)&c); // <Make sure that coefficients are in [0,q]
 8006174:	ea8b 0b0c 	eor.w	fp, fp, ip
    c >>= 15;
 8006178:	f340 3cc0 	sbfx	ip, r0, #15, #1

    m = t3 - PARAM_Q;
 800617c:	f505 434f 	add.w	r3, r5, #52992	; 0xcf00
    t2 = m ^ ((t2^m)&c); // <Make sure that coefficients are in [0,q]
 8006180:	ea0b 0b0c 	and.w	fp, fp, ip
    m = t3 - PARAM_Q;
 8006184:	33ff      	adds	r3, #255	; 0xff
    m = t1 - PARAM_Q;
 8006186:	f50a 414f 	add.w	r1, sl, #52992	; 0xcf00
    t2 = m ^ ((t2^m)&c); // <Make sure that coefficients are in [0,q]
 800618a:	ea80 0b0b 	eor.w	fp, r0, fp
    m = t1 - PARAM_Q;
 800618e:	31ff      	adds	r1, #255	; 0xff
    m = t3 - PARAM_Q;
 8006190:	fa1f fe83 	uxth.w	lr, r3
    t2 = m ^ ((t2^m)&c); // <Make sure that coefficients are in [0,q]
 8006194:	fa1f f08b 	uxth.w	r0, fp
 8006198:	9000      	str	r0, [sp, #0]
    m = t1 - PARAM_Q;
 800619a:	fa1f fc81 	uxth.w	ip, r1
    c = m;
    c >>= 15;
 800619e:	f343 30c0 	sbfx	r0, r3, #15, #1
    t3 = m ^ ((t3^m)&c); // <Make sure that coefficients are in [0,q]
 80061a2:	ea85 050e 	eor.w	r5, r5, lr
 80061a6:	4005      	ands	r5, r0
    c >>= 15;
 80061a8:	f341 3ec0 	sbfx	lr, r1, #15, #1
    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]
 80061ac:	ea8a 0c0c 	eor.w	ip, sl, ip
    m = t5 - PARAM_Q;
    c = m;
    c >>= 15;
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]

    m = t6 - PARAM_Q;
 80061b0:	f509 4a4f 	add.w	sl, r9, #52992	; 0xcf00
 80061b4:	f10a 0aff 	add.w	sl, sl, #255	; 0xff
    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]
 80061b8:	ea0c 0c0e 	and.w	ip, ip, lr
    t3 = m ^ ((t3^m)&c); // <Make sure that coefficients are in [0,q]
 80061bc:	406b      	eors	r3, r5
    c = m;
    c >>= 15;
    t7 = m ^ ((t7^m)&c); // <Make sure that coefficients are in [0,q]

    p->v[(7*i)+0] = ((t0 & 0xff)<<8) | ((t0 >> 8) | ((  t1 << 6)& 0xff)) ;
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 80061be:	9800      	ldr	r0, [sp, #0]
    m = t5 - PARAM_Q;
 80061c0:	9d01      	ldr	r5, [sp, #4]
    m = t7 - PARAM_Q;
 80061c2:	f502 4e4f 	add.w	lr, r2, #52992	; 0xcf00
    t3 = m ^ ((t3^m)&c); // <Make sure that coefficients are in [0,q]
 80061c6:	b29c      	uxth	r4, r3
    m = t7 - PARAM_Q;
 80061c8:	f10e 0eff 	add.w	lr, lr, #255	; 0xff
    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]
 80061cc:	ea81 010c 	eor.w	r1, r1, ip
    m = t6 - PARAM_Q;
 80061d0:	fa1f f38a 	uxth.w	r3, sl
    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]
 80061d4:	b289      	uxth	r1, r1
    m = t0 - PARAM_Q;
 80061d6:	f508 4c4f 	add.w	ip, r8, #52992	; 0xcf00
    t6 = m ^ ((t6^m)&c); // <Make sure that coefficients are in [0,q]
 80061da:	ea89 0303 	eor.w	r3, r9, r3
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 80061de:	ea4f 1900 	mov.w	r9, r0, lsl #4
    m = t7 - PARAM_Q;
 80061e2:	fa1f f08e 	uxth.w	r0, lr
    m = t0 - PARAM_Q;
 80061e6:	f10c 0cff 	add.w	ip, ip, #255	; 0xff
    m = t4 - PARAM_Q;
 80061ea:	f506 4b4f 	add.w	fp, r6, #52992	; 0xcf00
    t7 = m ^ ((t7^m)&c); // <Make sure that coefficients are in [0,q]
 80061ee:	4042      	eors	r2, r0
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 80061f0:	fa5f f989 	uxtb.w	r9, r9
 80061f4:	0888      	lsrs	r0, r1, #2
    m = t4 - PARAM_Q;
 80061f6:	f10b 0bff 	add.w	fp, fp, #255	; 0xff
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 80061fa:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
    m = t0 - PARAM_Q;
 80061fe:	fa1f f08c 	uxth.w	r0, ip
    t0 = m ^ ((t0^m)&c); // <Make sure that coefficients are in [0,q]
 8006202:	ea88 0800 	eor.w	r8, r8, r0
    m = t4 - PARAM_Q;
 8006206:	fa1f f08b 	uxth.w	r0, fp
    t4 = m ^ ((t4^m)&c); // <Make sure that coefficients are in [0,q]
 800620a:	4046      	eors	r6, r0
    m = t5 - PARAM_Q;
 800620c:	f505 454f 	add.w	r5, r5, #52992	; 0xcf00
    c >>= 15;
 8006210:	f34a 30c0 	sbfx	r0, sl, #15, #1
    m = t5 - PARAM_Q;
 8006214:	35ff      	adds	r5, #255	; 0xff
    t6 = m ^ ((t6^m)&c); // <Make sure that coefficients are in [0,q]
 8006216:	4003      	ands	r3, r0
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]
 8006218:	9801      	ldr	r0, [sp, #4]
    t6 = m ^ ((t6^m)&c); // <Make sure that coefficients are in [0,q]
 800621a:	ea8a 0a03 	eor.w	sl, sl, r3
    m = t5 - PARAM_Q;
 800621e:	b2ab      	uxth	r3, r5
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]
 8006220:	4043      	eors	r3, r0
    c >>= 15;
 8006222:	f34e 30c0 	sbfx	r0, lr, #15, #1
    t7 = m ^ ((t7^m)&c); // <Make sure that coefficients are in [0,q]
 8006226:	4002      	ands	r2, r0
 8006228:	ea8e 0e02 	eor.w	lr, lr, r2
    c >>= 15;
 800622c:	f34c 32c0 	sbfx	r2, ip, #15, #1
    t0 = m ^ ((t0^m)&c); // <Make sure that coefficients are in [0,q]
 8006230:	ea08 0802 	and.w	r8, r8, r2
    c >>= 15;
 8006234:	f34b 32c0 	sbfx	r2, fp, #15, #1
    t4 = m ^ ((t4^m)&c); // <Make sure that coefficients are in [0,q]
 8006238:	4016      	ands	r6, r2
    c >>= 15;
 800623a:	f345 32c0 	sbfx	r2, r5, #15, #1
    t0 = m ^ ((t0^m)&c); // <Make sure that coefficients are in [0,q]
 800623e:	ea8c 0c08 	eor.w	ip, ip, r8
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]
 8006242:	4013      	ands	r3, r2
    t0 = m ^ ((t0^m)&c); // <Make sure that coefficients are in [0,q]
 8006244:	fa1f f08c 	uxth.w	r0, ip
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]
 8006248:	405d      	eors	r5, r3
    p->v[(7*i)+0] = ((t0 & 0xff)<<8) | ((t0 >> 8) | ((  t1 << 6)& 0xff)) ;
 800624a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800624e:	018b      	lsls	r3, r1, #6
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 8006250:	9a00      	ldr	r2, [sp, #0]
    t7 = m ^ ((t7^m)&c); // <Make sure that coefficients are in [0,q]
 8006252:	fa1f fe8e 	uxth.w	lr, lr
    p->v[(7*i)+0] = ((t0 & 0xff)<<8) | ((t0 >> 8) | ((  t1 << 6)& 0xff)) ;
 8006256:	b2db      	uxtb	r3, r3
 8006258:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
    t4 = m ^ ((t4^m)&c); // <Make sure that coefficients are in [0,q]
 800625c:	ea8b 0b06 	eor.w	fp, fp, r6
    t6 = m ^ ((t6^m)&c); // <Make sure that coefficients are in [0,q]
 8006260:	fa1f fa8a 	uxth.w	sl, sl
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 8006264:	00a6      	lsls	r6, r4, #2
    p->v[(7*i)+0] = ((t0 & 0xff)<<8) | ((t0 >> 8) | ((  t1 << 6)& 0xff)) ;
 8006266:	ea4c 0c03 	orr.w	ip, ip, r3
    p->v[(7*i)+3] = ((t3 >> 6)<<8)   | (t4 & 0xff);
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
    p->v[(7*i)+6] = (((t6 >> 12) | (t7 << 2))<<8) | ((t7 >> 6)& 0xff);
 800626a:	ea4f 038e 	mov.w	r3, lr, lsl #2
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]
 800626e:	b2ad      	uxth	r5, r5
    p->v[(7*i)+6] = (((t6 >> 12) | (t7 << 2))<<8) | ((t7 >> 6)& 0xff);
 8006270:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 8006274:	ea4f 1812 	mov.w	r8, r2, lsr #4
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
 8006278:	f3cb 2007 	ubfx	r0, fp, #8, #8
    p->v[(7*i)+3] = ((t3 >> 6)<<8)   | (t4 & 0xff);
 800627c:	09a2      	lsrs	r2, r4, #6
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 800627e:	ea49 2191 	orr.w	r1, r9, r1, lsr #10
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 8006282:	9c00      	ldr	r4, [sp, #0]
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
 8006284:	ea4f 190a 	mov.w	r9, sl, lsl #4
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 8006288:	b2f6      	uxtb	r6, r6
    p->v[(7*i)+6] = (((t6 >> 12) | (t7 << 2))<<8) | ((t7 >> 6)& 0xff);
 800628a:	f3ce 1e87 	ubfx	lr, lr, #6, #8
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
 800628e:	ea40 1085 	orr.w	r0, r0, r5, lsl #6
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
 8006292:	ea49 2995 	orr.w	r9, r9, r5, lsr #10
    p->v[(7*i)+6] = (((t6 >> 12) | (t7 << 2))<<8) | ((t7 >> 6)& 0xff);
 8006296:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 800629a:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 800629e:	9b02      	ldr	r3, [sp, #8]
    p->v[(7*i)+3] = ((t3 >> 6)<<8)   | (t4 & 0xff);
 80062a0:	fa5f fb8b 	uxtb.w	fp, fp
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
 80062a4:	f3c5 0587 	ubfx	r5, r5, #2, #8
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
 80062a8:	f3ca 1a07 	ubfx	sl, sl, #4, #8
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 80062ac:	ea46 3614 	orr.w	r6, r6, r4, lsr #12
    p->v[(7*i)+3] = ((t3 >> 6)<<8)   | (t4 & 0xff);
 80062b0:	ea4b 2b02 	orr.w	fp, fp, r2, lsl #8
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
 80062b4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
 80062b8:	ea4a 2a09 	orr.w	sl, sl, r9, lsl #8
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 80062bc:	8059      	strh	r1, [r3, #2]
    p->v[(7*i)+0] = ((t0 & 0xff)<<8) | ((t0 >> 8) | ((  t1 << 6)& 0xff)) ;
 80062be:	f8a3 c000 	strh.w	ip, [r3]
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 80062c2:	809e      	strh	r6, [r3, #4]
    p->v[(7*i)+3] = ((t3 >> 6)<<8)   | (t4 & 0xff);
 80062c4:	f8a3 b006 	strh.w	fp, [r3, #6]
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
 80062c8:	8118      	strh	r0, [r3, #8]
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
 80062ca:	f8a3 a00a 	strh.w	sl, [r3, #10]
    p->v[(7*i)+6] = (((t6 >> 12) | (t7 << 2))<<8) | ((t7 >> 6)& 0xff);
 80062ce:	f8a3 e00c 	strh.w	lr, [r3, #12]
  for(i=0;i<PARAM_N/8;i++)
 80062d2:	330e      	adds	r3, #14
 80062d4:	9302      	str	r3, [sp, #8]
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	3710      	adds	r7, #16
 80062da:	42bb      	cmp	r3, r7
 80062dc:	f47f af24 	bne.w	8006128 <poly_densify+0x10>
  }
}
 80062e0:	b005      	add	sp, #20
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop

080062e8 <poly_uniform>:



void poly_uniform(poly *a, const unsigned char *seed)
{
 80062e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062ec:	b0b3      	sub	sp, #204	; 0xcc
 80062ee:	af00      	add	r7, sp, #0
  uint16_t val;
  uint64_t state[25];                   
  unsigned int nblocks=4;
  uint8_t buf[SHAKE128_RATE*nblocks];

  shake128_absorb_asm(state, seed, NEWHOPE_SEEDBYTES);
 80062f0:	2220      	movs	r2, #32
  uint8_t buf[SHAKE128_RATE*nblocks];
 80062f2:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
{
 80062f6:	4680      	mov	r8, r0
  shake128_absorb_asm(state, seed, NEWHOPE_SEEDBYTES);
 80062f8:	4638      	mov	r0, r7
 80062fa:	f7ff fcc9 	bl	8005c90 <shake128_absorb_asm>
  
  shake128_squeezeblocks_asm((unsigned char *) buf, nblocks, state);
 80062fe:	463a      	mov	r2, r7
 8006300:	4668      	mov	r0, sp
 8006302:	2104      	movs	r1, #4
 8006304:	f7ff fcf0 	bl	8005ce8 <shake128_squeezeblocks_asm>
  unsigned int pos=0, ctr=0;
 8006308:	2200      	movs	r2, #0
  uint8_t buf[SHAKE128_RATE*nblocks];
 800630a:	466d      	mov	r5, sp
  unsigned int pos=0, ctr=0;
 800630c:	4614      	mov	r4, r2
  unsigned int nblocks=4;
 800630e:	f04f 0c04 	mov.w	ip, #4

  while(ctr < PARAM_N)
  {
    val = (buf[pos] | ((uint16_t) buf[pos+1] << 8));
    if(val < 5*PARAM_Q)
 8006312:	f24f 0904 	movw	r9, #61444	; 0xf004
      a->v[ctr++] = val;
    pos += 2;
    if(pos > SHAKE128_RATE*nblocks-2)
 8006316:	26a8      	movs	r6, #168	; 0xa8
 8006318:	e002      	b.n	8006320 <poly_uniform+0x38>
  while(ctr < PARAM_N)
 800631a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800631e:	d01d      	beq.n	800635c <poly_uniform+0x74>
    val = (buf[pos] | ((uint16_t) buf[pos+1] << 8));
 8006320:	18ab      	adds	r3, r5, r2
 8006322:	5ca9      	ldrb	r1, [r5, r2]
 8006324:	7858      	ldrb	r0, [r3, #1]
    if(pos > SHAKE128_RATE*nblocks-2)
 8006326:	fb06 f30c 	mul.w	r3, r6, ip
    val = (buf[pos] | ((uint16_t) buf[pos+1] << 8));
 800632a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    if(val < 5*PARAM_Q)
 800632e:	4549      	cmp	r1, r9
    pos += 2;
 8006330:	f102 0202 	add.w	r2, r2, #2
    if(pos > SHAKE128_RATE*nblocks-2)
 8006334:	f1a3 0302 	sub.w	r3, r3, #2
      a->v[ctr++] = val;
 8006338:	bf9c      	itt	ls
 800633a:	f828 1014 	strhls.w	r1, [r8, r4, lsl #1]
 800633e:	3401      	addls	r4, #1
    if(pos > SHAKE128_RATE*nblocks-2)
 8006340:	4293      	cmp	r3, r2
 8006342:	d2ea      	bcs.n	800631a <poly_uniform+0x32>
    {
      nblocks=1;
      shake128_squeezeblocks_asm((unsigned char *) buf,nblocks,state);
 8006344:	463a      	mov	r2, r7
 8006346:	2101      	movs	r1, #1
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff fccd 	bl	8005ce8 <shake128_squeezeblocks_asm>
  while(ctr < PARAM_N)
 800634e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
      nblocks=1;
 8006352:	f04f 0c01 	mov.w	ip, #1
      pos = 0;
 8006356:	f04f 0200 	mov.w	r2, #0
  while(ctr < PARAM_N)
 800635a:	d1e1      	bne.n	8006320 <poly_uniform+0x38>
    }
  }
}
 800635c:	37cc      	adds	r7, #204	; 0xcc
 800635e:	46bd      	mov	sp, r7
 8006360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006364 <poly_getnoise>:

void poly_getnoise(poly *r, unsigned char *seed, unsigned char nonce)
{
 8006364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006368:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414

  uint32_t *tp, t,d, a, b;
  tp = (uint32_t *) buf;

  for(i=1;i<8;i++)
    n[i] = 0;
 800636c:	2600      	movs	r6, #0
 800636e:	af02      	add	r7, sp, #8
 8006370:	f1a0 0802 	sub.w	r8, r0, #2
{
 8006374:	4689      	mov	r9, r1
 8006376:	f20d 450c 	addw	r5, sp, #1036	; 0x40c
        for(j=0;j<8;j++){
          d += (t >> j) & 0x01010101;
        }
        a = ((d >> 8) & 0xff) + (d & 0xff);
        b = (d >> 24) + ((d >> 16) & 0xff);
        r->v[i+k*(PARAM_N/4)] = PARAM_Q + a - b;
 800637a:	f243 0401 	movw	r4, #12289	; 0x3001
  n[0] = nonce;
 800637e:	703a      	strb	r2, [r7, #0]
    n[i] = 0;
 8006380:	707e      	strb	r6, [r7, #1]
 8006382:	807e      	strh	r6, [r7, #2]
 8006384:	607e      	str	r6, [r7, #4]
      crypto_stream_chacha20(buf,PARAM_N,n,seed);
 8006386:	e9cd 7900 	strd	r7, r9, [sp]
 800638a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800638e:	2300      	movs	r3, #0
 8006390:	a804      	add	r0, sp, #16
 8006392:	f7ff fba9 	bl	8005ae8 <crypto_stream_chacha20>
      for(i=0;i<PARAM_N/4;i++){
 8006396:	a903      	add	r1, sp, #12
      crypto_stream_chacha20(buf,PARAM_N,n,seed);
 8006398:	4640      	mov	r0, r8
        t = tp[i];
 800639a:	f851 3f04 	ldr.w	r3, [r1, #4]!
          d += (t >> j) & 0x01010101;
 800639e:	085a      	lsrs	r2, r3, #1
 80063a0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80063a4:	f00c 3c01 	and.w	ip, ip, #16843009	; 0x1010101
 80063a8:	f002 3201 	and.w	r2, r2, #16843009	; 0x1010101
 80063ac:	f003 3e01 	and.w	lr, r3, #16843009	; 0x1010101
 80063b0:	4462      	add	r2, ip
 80063b2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80063b6:	4472      	add	r2, lr
 80063b8:	f00c 3c01 	and.w	ip, ip, #16843009	; 0x1010101
 80063bc:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80063c0:	4462      	add	r2, ip
 80063c2:	f00e 3e01 	and.w	lr, lr, #16843009	; 0x1010101
 80063c6:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 80063ca:	4496      	add	lr, r2
 80063cc:	f00c 3c01 	and.w	ip, ip, #16843009	; 0x1010101
 80063d0:	099a      	lsrs	r2, r3, #6
 80063d2:	44f4      	add	ip, lr
 80063d4:	f002 3201 	and.w	r2, r2, #16843009	; 0x1010101
 80063d8:	09db      	lsrs	r3, r3, #7
 80063da:	4462      	add	r2, ip
 80063dc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80063e0:	4413      	add	r3, r2
        a = ((d >> 8) & 0xff) + (d & 0xff);
 80063e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80063e6:	fa52 f283 	uxtab	r2, r2, r3
        b = (d >> 24) + ((d >> 16) & 0xff);
 80063ea:	f3c3 4c07 	ubfx	ip, r3, #16, #8
        r->v[i+k*(PARAM_N/4)] = PARAM_Q + a - b;
 80063ee:	4422      	add	r2, r4
        b = (d >> 24) + ((d >> 16) & 0xff);
 80063f0:	eb0c 6313 	add.w	r3, ip, r3, lsr #24
        r->v[i+k*(PARAM_N/4)] = PARAM_Q + a - b;
 80063f4:	1ad3      	subs	r3, r2, r3
      for(i=0;i<PARAM_N/4;i++){
 80063f6:	42a9      	cmp	r1, r5
        r->v[i+k*(PARAM_N/4)] = PARAM_Q + a - b;
 80063f8:	f820 3f02 	strh.w	r3, [r0, #2]!
      for(i=0;i<PARAM_N/4;i++){
 80063fc:	d1cd      	bne.n	800639a <poly_getnoise+0x36>
  for (k=0;k<4;k++){
 80063fe:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8006402:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006406:	f508 7800 	add.w	r8, r8, #512	; 0x200
 800640a:	d1bc      	bne.n	8006386 <poly_getnoise+0x22>
      }
  }
}
 800640c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 8006410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006414 <poly_bitrev>:


void poly_bitrev(poly *r)
{
  bitrev_vector(r->v);
 8006414:	f7ff bdee 	b.w	8005ff4 <bitrev_vector>

08006418 <poly_ntt>:
}


void poly_ntt(poly *r)
{
 8006418:	b510      	push	{r4, lr}
  asm_mulcoef_otf(r->v, omegas_montgomery); 
 800641a:	4905      	ldr	r1, [pc, #20]	; (8006430 <poly_ntt+0x18>)
{
 800641c:	4604      	mov	r4, r0
  asm_mulcoef_otf(r->v, omegas_montgomery); 
 800641e:	f7fe fe35 	bl	800508c <asm_mulcoef_otf>
  asm_ntt((uint16_t *)r->v, omegas_montgomery);
 8006422:	4620      	mov	r0, r4
 8006424:	4902      	ldr	r1, [pc, #8]	; (8006430 <poly_ntt+0x18>)
}
 8006426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  asm_ntt((uint16_t *)r->v, omegas_montgomery);
 800642a:	f7fe bbbd 	b.w	8004ba8 <asm_ntt>
 800642e:	bf00      	nop
 8006430:	080087a4 	.word	0x080087a4

08006434 <poly_invntt>:

void poly_invntt(poly *r)
{
 8006434:	b510      	push	{r4, lr}
  asm_ntt((uint16_t *)r->v, omegas_inv_montgomery);
 8006436:	4905      	ldr	r1, [pc, #20]	; (800644c <poly_invntt+0x18>)
{
 8006438:	4604      	mov	r4, r0
  asm_ntt((uint16_t *)r->v, omegas_inv_montgomery);
 800643a:	f7fe fbb5 	bl	8004ba8 <asm_ntt>
  asm_mulcoef(r->v, psis_inv_montgomery);
 800643e:	4620      	mov	r0, r4
 8006440:	4903      	ldr	r1, [pc, #12]	; (8006450 <poly_invntt+0x1c>)
}
 8006442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  asm_mulcoef(r->v, psis_inv_montgomery);
 8006446:	f7fe bea9 	b.w	800519c <asm_mulcoef>
 800644a:	bf00      	nop
 800644c:	080083a4 	.word	0x080083a4
 8006450:	08008ba4 	.word	0x08008ba4

08006454 <randombytes>:

/* Should be replaced by a secure source of randomness followed by a call to SHA-3*/


void randombytes(unsigned char *x,unsigned long long xlen)
{
 8006454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i;
  unsigned char a[32] = {160,168,20,235,215,132,214,153,241,122,10,29,232,59,88,218,161,54,250,5,108,190,135,52,243,20,150,168,242,201,99,202};
 8006458:	f8df a074 	ldr.w	sl, [pc, #116]	; 80064d0 <randombytes+0x7c>
  unsigned char b[32] = {123,191,73,222,176,209,3,73,220,117,251,159,99,65,99,133,31,35,236,102,76,23,91,24,201,253,69,169,172,43,4,0};
 800645c:	f8df e074 	ldr.w	lr, [pc, #116]	; 80064d4 <randombytes+0x80>
  unsigned char c[32] = {46,202,34,101,97,180,47,34,48,181,211,80,44,146,180,168,173,17,189,131,36,44,249,222,248,63,227,115,153,173,176,148};  
 8006460:	f8df c074 	ldr.w	ip, [pc, #116]	; 80064d8 <randombytes+0x84>
{
 8006464:	4691      	mov	r9, r2
 8006466:	4698      	mov	r8, r3
 8006468:	4604      	mov	r4, r0
  unsigned char a[32] = {160,168,20,235,215,132,214,153,241,122,10,29,232,59,88,218,161,54,250,5,108,190,135,52,243,20,150,168,242,201,99,202};
 800646a:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
{
 800646e:	b098      	sub	sp, #96	; 0x60
  unsigned char a[32] = {160,168,20,235,215,132,214,153,241,122,10,29,232,59,88,218,161,54,250,5,108,190,135,52,243,20,150,168,242,201,99,202};
 8006470:	466d      	mov	r5, sp
 8006472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006474:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8006478:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  unsigned char b[32] = {123,191,73,222,176,209,3,73,220,117,251,159,99,65,99,133,31,35,236,102,76,23,91,24,201,253,69,169,172,43,4,0};
 800647c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006480:	ad08      	add	r5, sp, #32
 8006482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006484:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8006488:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  unsigned char c[32] = {46,202,34,101,97,180,47,34,48,181,211,80,44,146,180,168,173,17,189,131,36,44,249,222,248,63,227,115,153,173,176,148};  
 800648c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006490:	ad10      	add	r5, sp, #64	; 0x40
 8006492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006494:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
{
 8006498:	464e      	mov	r6, r9
 800649a:	4647      	mov	r7, r8
  unsigned char c[32] = {46,202,34,101,97,180,47,34,48,181,211,80,44,146,180,168,173,17,189,131,36,44,249,222,248,63,227,115,153,173,176,148};  
 800649c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  
  if (xlen == 0){
 80064a0:	ea56 0307 	orrs.w	r3, r6, r7
 80064a4:	d10d      	bne.n	80064c2 <randombytes+0x6e>
 80064a6:	466d      	mov	r5, sp
 80064a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064aa:	6020      	str	r0, [r4, #0]
 80064ac:	6061      	str	r1, [r4, #4]
 80064ae:	60a2      	str	r2, [r4, #8]
 80064b0:	60e3      	str	r3, [r4, #12]
 80064b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064b4:	6120      	str	r0, [r4, #16]
 80064b6:	6161      	str	r1, [r4, #20]
 80064b8:	61a2      	str	r2, [r4, #24]
 80064ba:	61e3      	str	r3, [r4, #28]
    }
  }

  //return sha3256(x, result_of_RNG, 32);

}
 80064bc:	b018      	add	sp, #96	; 0x60
 80064be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (xlen ==1){
 80064c2:	2f00      	cmp	r7, #0
 80064c4:	bf06      	itte	eq
 80064c6:	2e01      	cmpeq	r6, #1
 80064c8:	ad08      	addeq	r5, sp, #32
 80064ca:	ad10      	addne	r5, sp, #64	; 0x40
 80064cc:	e7ec      	b.n	80064a8 <randombytes+0x54>
 80064ce:	bf00      	nop
 80064d0:	080093a4 	.word	0x080093a4
 80064d4:	080093c8 	.word	0x080093c8
 80064d8:	080093e8 	.word	0x080093e8

080064dc <barrett_reduce>:

uint16_t barrett_reduce(uint16_t a)
{
  uint32_t u;

  u = ((uint32_t) a * 5) >> 16;
 80064dc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80064e0:	0c1b      	lsrs	r3, r3, #16
  u *= PARAM_Q;
 80064e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80064e6:	eb03 3302 	add.w	r3, r3, r2, lsl #12
  a -= u;
 80064ea:	1ac0      	subs	r0, r0, r3
  return a;
}
 80064ec:	b280      	uxth	r0, r0
 80064ee:	4770      	bx	lr

080064f0 <test_keys>:
    }
 }

}

int test_keys(){
 80064f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064f4:	f5ad 5d88 	sub.w	sp, sp, #4352	; 0x1100
 80064f8:	b083      	sub	sp, #12
  poly send,sk_a;
  uint16_t i,e=1;
  unsigned char key_a[32];

  trigger_high();
 80064fa:	f7ff fae5 	bl	8005ac8 <trigger_high>
  newhope_keygen(&send, &sk_a);
 80064fe:	f60d 1108 	addw	r1, sp, #2312	; 0x908
 8006502:	a842      	add	r0, sp, #264	; 0x108
 8006504:	f7ff fc98 	bl	8005e38 <newhope_keygen>
  trigger_low();
 8006508:	f7ff fae6 	bl	8005ad8 <trigger_low>
  signal_host();
 800650c:	f000 f8b0 	bl	8006670 <signal_host>
  for(i=0;i<1024;i+=128){
 8006510:	ac02      	add	r4, sp, #8
 8006512:	43e7      	mvns	r7, r4
 8006514:	2500      	movs	r5, #0
 8006516:	f20d 1609 	addw	r6, sp, #265	; 0x109
    for (j=0;j<256;j+=2){
 800651a:	1c63      	adds	r3, r4, #1
      sendbytes[j] = sendx->v[i+j/2]  >> 8;
 800651c:	18fa      	adds	r2, r7, r3
 800651e:	a942      	add	r1, sp, #264	; 0x108
 8006520:	eb05 0262 	add.w	r2, r5, r2, asr #1
 8006524:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006528:	0a11      	lsrs	r1, r2, #8
 800652a:	f803 1c01 	strb.w	r1, [r3, #-1]
      sendbytes[j+1] = sendx->v[i+j/2]& 0xff;
 800652e:	f803 2b02 	strb.w	r2, [r3], #2
    for (j=0;j<256;j+=2){
 8006532:	429e      	cmp	r6, r3
 8006534:	d1f2      	bne.n	800651c <test_keys+0x2c>
    dma_transmit(sendbytes, 256);while (!dma_done());
 8006536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f880 	bl	8006640 <dma_transmit>
 8006540:	f000 f888 	bl	8006654 <dma_done>
 8006544:	2800      	cmp	r0, #0
 8006546:	d0fb      	beq.n	8006540 <test_keys+0x50>
  for(i=0;i<1024;i+=128){
 8006548:	3580      	adds	r5, #128	; 0x80
 800654a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800654e:	d1e4      	bne.n	800651a <test_keys+0x2a>
  for(i=0;i<1024;i+=128){
 8006550:	2500      	movs	r5, #0
 8006552:	43e7      	mvns	r7, r4
    signal_host();
 8006554:	f000 f88c 	bl	8006670 <signal_host>
    dma_request(sendbytes, 256); while (!dma_done());
 8006558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800655c:	4620      	mov	r0, r4
 800655e:	f000 f867 	bl	8006630 <dma_request>
 8006562:	f000 f877 	bl	8006654 <dma_done>
 8006566:	2800      	cmp	r0, #0
 8006568:	d0fb      	beq.n	8006562 <test_keys+0x72>
 800656a:	1c63      	adds	r3, r4, #1
      sendx->v[i+(j/2)] = sendbytes[j+1] | (uint16_t)sendbytes[j] << 8; 
 800656c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006570:	18fa      	adds	r2, r7, r3
 8006572:	f813 1b02 	ldrb.w	r1, [r3], #2
 8006576:	eb05 0262 	add.w	r2, r5, r2, asr #1
 800657a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800657e:	a842      	add	r0, sp, #264	; 0x108
    for (j=0;j<256;j+=2){
 8006580:	429e      	cmp	r6, r3
      sendx->v[i+(j/2)] = sendbytes[j+1] | (uint16_t)sendbytes[j] << 8; 
 8006582:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
    for (j=0;j<256;j+=2){
 8006586:	d1f1      	bne.n	800656c <test_keys+0x7c>
  for(i=0;i<1024;i+=128){
 8006588:	3580      	adds	r5, #128	; 0x80
 800658a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800658e:	d1e1      	bne.n	8006554 <test_keys+0x64>

  send_x(&send);
  request(&send);
  newhope_shareda(key_a, &sk_a, &send);
 8006590:	4602      	mov	r2, r0
 8006592:	f60d 1108 	addw	r1, sp, #2312	; 0x908
 8006596:	4620      	mov	r0, r4
 8006598:	f7ff fce6 	bl	8005f68 <newhope_shareda>
  out[5] = '\0';
 800659c:	2300      	movs	r3, #0
 800659e:	f88d 3005 	strb.w	r3, [sp, #5]
  signal_host();
 80065a2:	f000 f865 	bl	8006670 <signal_host>
  for (i=0;i<32;i++){
 80065a6:	f89d 6001 	ldrb.w	r6, [sp, #1]
 80065aa:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80065ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80065b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80065b6:	f814 7c08 	ldrb.w	r7, [r4, #-8]
 80065ba:	f8df c070 	ldr.w	ip, [pc, #112]	; 800662c <test_keys+0x13c>
 80065be:	1e63      	subs	r3, r4, #1
 80065c0:	f104 0e1f 	add.w	lr, r4, #31
  int i,e=1;
 80065c4:	2101      	movs	r1, #1
    if(key_a[i] != key_stored[i]){
 80065c6:	f81c 9f01 	ldrb.w	r9, [ip, #1]!
 80065ca:	f813 8f01 	ldrb.w	r8, [r3, #1]!
 80065ce:	45c1      	cmp	r9, r8
 80065d0:	d005      	beq.n	80065de <test_keys+0xee>
      out[4] = 'r';
 80065d2:	2272      	movs	r2, #114	; 0x72
      out[2] = 'r';
 80065d4:	4615      	mov	r5, r2
      out[1] = 'r';
 80065d6:	4616      	mov	r6, r2
      out[3] = 'o';
 80065d8:	206f      	movs	r0, #111	; 0x6f
      out[0] = 'E';
 80065da:	2745      	movs	r7, #69	; 0x45
      e= 0;
 80065dc:	2100      	movs	r1, #0
  for (i=0;i<32;i++){
 80065de:	4573      	cmp	r3, lr
 80065e0:	d1f1      	bne.n	80065c6 <test_keys+0xd6>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f367 0307 	bfi	r3, r7, #0, #8
 80065e8:	f366 230f 	bfi	r3, r6, #8, #8
 80065ec:	f365 4317 	bfi	r3, r5, #16, #8
 80065f0:	f360 631f 	bfi	r3, r0, #24, #8
 80065f4:	f88d 2004 	strb.w	r2, [sp, #4]
  if(e){
 80065f8:	f844 3c08 	str.w	r3, [r4, #-8]
 80065fc:	b129      	cbz	r1, 800660a <test_keys+0x11a>
    out[0] = 'D';
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <test_keys+0x138>)
 8006600:	f844 3c08 	str.w	r3, [r4, #-8]
    out[4] = '!';
 8006604:	2321      	movs	r3, #33	; 0x21
 8006606:	f88d 3004 	strb.w	r3, [sp, #4]
  dma_transmit(out, 6); while (!dma_done());
 800660a:	4668      	mov	r0, sp
 800660c:	2106      	movs	r1, #6
 800660e:	f000 f817 	bl	8006640 <dma_transmit>
 8006612:	f000 f81f 	bl	8006654 <dma_done>
 8006616:	2800      	cmp	r0, #0
 8006618:	d0fb      	beq.n	8006612 <test_keys+0x122>
  check_key(key_a);
  return 0;
}
 800661a:	2000      	movs	r0, #0
 800661c:	f50d 5d88 	add.w	sp, sp, #4352	; 0x1100
 8006620:	b003      	add	sp, #12
 8006622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006626:	bf00      	nop
 8006628:	656e6f44 	.word	0x656e6f44
 800662c:	0800940b 	.word	0x0800940b

08006630 <dma_request>:
    dma_set_number_of_data(DMA1, DMA_CHANNEL5, datasize);

    dma_enable_channel(DMA1, DMA_CHANNEL5);
    //signal_host();
    usart_enable_rx_dma(USART2);*/
	HAL_UART_Receive_IT(&huart1, buffer, datasize);
 8006630:	b28a      	uxth	r2, r1
 8006632:	4601      	mov	r1, r0
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <dma_request+0xc>)
 8006636:	f001 b8a3 	b.w	8007780 <HAL_UART_Receive_IT>
 800663a:	bf00      	nop
 800663c:	200000e8 	.word	0x200000e8

08006640 <dma_transmit>:
    usart_enable_tx_dma(USART2);*/
//	uint8_t buffer_tx[datasize];
//	for(int i=0;i<datasize;i++) {
//		buffer_tx[i] = buffer[i];
//	}
	HAL_UART_Transmit(&huart1, buffer, datasize, 99999);
 8006640:	b28a      	uxth	r2, r1
 8006642:	4b02      	ldr	r3, [pc, #8]	; (800664c <dma_transmit+0xc>)
 8006644:	4601      	mov	r1, r0
 8006646:	4802      	ldr	r0, [pc, #8]	; (8006650 <dma_transmit+0x10>)
 8006648:	f000 bf8e 	b.w	8007568 <HAL_UART_Transmit>
 800664c:	0001869f 	.word	0x0001869f
 8006650:	200000e8 	.word	0x200000e8

08006654 <dma_done>:
}

int dma_done(void)
{
    return (huart1.gState == HAL_UART_STATE_READY & huart1.RxState == HAL_UART_STATE_READY);
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <dma_done+0x18>)
 8006656:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 800665a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
}
 800665e:	2820      	cmp	r0, #32
 8006660:	bf08      	it	eq
 8006662:	2b20      	cmpeq	r3, #32
 8006664:	bf0c      	ite	eq
 8006666:	2001      	moveq	r0, #1
 8006668:	2000      	movne	r0, #0
 800666a:	4770      	bx	lr
 800666c:	200000e8 	.word	0x200000e8

08006670 <signal_host>:
    dma_clear_interrupt_flags(DMA1, DMA_CHANNEL5, DMA_TCIF);
    dma_disable_channel(DMA1, DMA_CHANNEL4);
    dma_disable_channel(DMA1, DMA_CHANNEL5);
}*/

void signal_host(void) {
 8006670:	b530      	push	{r4, r5, lr}
 8006672:	b083      	sub	sp, #12
	//usart_send_blocking(USART2, '\n');
}


void recv_signal_host(const unsigned char value) {
	uint8_t buffer_rx[1] = {300};  // placeholder; value can't be higher than 255
 8006674:	232c      	movs	r3, #44	; 0x2c
	while(buffer_rx[0] != value) {
		HAL_UART_Receive(&huart1, buffer_rx, 1, 99999);
 8006676:	4d0c      	ldr	r5, [pc, #48]	; (80066a8 <signal_host+0x38>)
 8006678:	4c0c      	ldr	r4, [pc, #48]	; (80066ac <signal_host+0x3c>)
	uint8_t buffer_rx[1] = {300};  // placeholder; value can't be higher than 255
 800667a:	f88d 3004 	strb.w	r3, [sp, #4]
		HAL_UART_Receive(&huart1, buffer_rx, 1, 99999);
 800667e:	2201      	movs	r2, #1
 8006680:	462b      	mov	r3, r5
 8006682:	a901      	add	r1, sp, #4
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fff7 	bl	8007678 <HAL_UART_Receive>
	while(buffer_rx[0] != value) {
 800668a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800668e:	2a0a      	cmp	r2, #10
 8006690:	d1f5      	bne.n	800667e <signal_host+0xe>
	uint8_t buffer_tx[1] = {10};
 8006692:	f88d 2004 	strb.w	r2, [sp, #4]
	HAL_UART_Transmit(&huart1, buffer_tx, 1, 99999);
 8006696:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <signal_host+0x38>)
 8006698:	4804      	ldr	r0, [pc, #16]	; (80066ac <signal_host+0x3c>)
 800669a:	a901      	add	r1, sp, #4
 800669c:	2201      	movs	r2, #1
 800669e:	f000 ff63 	bl	8007568 <HAL_UART_Transmit>
}
 80066a2:	b003      	add	sp, #12
 80066a4:	bd30      	pop	{r4, r5, pc}
 80066a6:	bf00      	nop
 80066a8:	0001869f 	.word	0x0001869f
 80066ac:	200000e8 	.word	0x200000e8

080066b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80066b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066b4:	480d      	ldr	r0, [pc, #52]	; (80066ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066b6:	490e      	ldr	r1, [pc, #56]	; (80066f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066b8:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066bc:	e002      	b.n	80066c4 <LoopCopyDataInit>

080066be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066c2:	3304      	adds	r3, #4

080066c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066c8:	d3f9      	bcc.n	80066be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066ca:	4a0b      	ldr	r2, [pc, #44]	; (80066f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066cc:	4c0b      	ldr	r4, [pc, #44]	; (80066fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80066ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066d0:	e001      	b.n	80066d6 <LoopFillZerobss>

080066d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066d4:	3204      	adds	r2, #4

080066d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066d8:	d3fb      	bcc.n	80066d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80066da:	f7ff f9eb 	bl	8005ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066de:	f001 fa07 	bl	8007af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066e2:	f7ff f8c3 	bl	800586c <main>
  bx  lr    
 80066e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80066e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80066ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80066f4:	08009444 	.word	0x08009444
  ldr r2, =_sbss
 80066f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80066fc:	20000130 	.word	0x20000130

08006700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006700:	e7fe      	b.n	8006700 <ADC_IRQHandler>
	...

08006704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006704:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_InitTick+0x3c>)
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <HAL_InitTick+0x40>)
 800670a:	7812      	ldrb	r2, [r2, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
{
 800670e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006714:	fbb0 f0f2 	udiv	r0, r0, r2
 8006718:	fbb3 f0f0 	udiv	r0, r3, r0
 800671c:	f000 f89c 	bl	8006858 <HAL_SYSTICK_Config>
 8006720:	b908      	cbnz	r0, 8006726 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006722:	2d0f      	cmp	r5, #15
 8006724:	d901      	bls.n	800672a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8006726:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800672c:	4602      	mov	r2, r0
 800672e:	4629      	mov	r1, r5
 8006730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006734:	f000 f84a 	bl	80067cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006738:	4b03      	ldr	r3, [pc, #12]	; (8006748 <HAL_InitTick+0x44>)
 800673a:	4620      	mov	r0, r4
 800673c:	601d      	str	r5, [r3, #0]
}
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	20000004 	.word	0x20000004
 8006744:	20000000 	.word	0x20000000
 8006748:	20000008 	.word	0x20000008

0800674c <HAL_Init>:
{
 800674c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800674e:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_Init+0x30>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006756:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800675e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006766:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006768:	2003      	movs	r0, #3
 800676a:	f000 f81b 	bl	80067a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800676e:	2000      	movs	r0, #0
 8006770:	f7ff ffc8 	bl	8006704 <HAL_InitTick>
  HAL_MspInit();
 8006774:	f7ff f8e0 	bl	8005938 <HAL_MspInit>
}
 8006778:	2000      	movs	r0, #0
 800677a:	bd08      	pop	{r3, pc}
 800677c:	40023c00 	.word	0x40023c00

08006780 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006780:	4a03      	ldr	r2, [pc, #12]	; (8006790 <HAL_IncTick+0x10>)
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <HAL_IncTick+0x14>)
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	440b      	add	r3, r1
 800678a:	6013      	str	r3, [r2, #0]
}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	2000012c 	.word	0x2000012c
 8006794:	20000004 	.word	0x20000004

08006798 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006798:	4b01      	ldr	r3, [pc, #4]	; (80067a0 <HAL_GetTick+0x8>)
 800679a:	6818      	ldr	r0, [r3, #0]
}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	2000012c 	.word	0x2000012c

080067a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067a4:	4908      	ldr	r1, [pc, #32]	; (80067c8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80067a6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067aa:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ac:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80067b0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067b2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80067c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80067c4:	60cb      	str	r3, [r1, #12]
 80067c6:	4770      	bx	lr
 80067c8:	e000ed00 	.word	0xe000ed00

080067cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_NVIC_SetPriority+0x68>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067d4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067d6:	f1c3 0507 	rsb	r5, r3, #7
 80067da:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067dc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067e0:	bf28      	it	cs
 80067e2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067e4:	2c06      	cmp	r4, #6
 80067e6:	d919      	bls.n	800681c <HAL_NVIC_SetPriority+0x50>
 80067e8:	3b03      	subs	r3, #3
 80067ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067ee:	409c      	lsls	r4, r3
 80067f0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067f8:	40ac      	lsls	r4, r5
 80067fa:	ea21 0104 	bic.w	r1, r1, r4
 80067fe:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006800:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006802:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006806:	db0c      	blt.n	8006822 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006808:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800680c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006810:	0109      	lsls	r1, r1, #4
 8006812:	b2c9      	uxtb	r1, r1
 8006814:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006818:	bc30      	pop	{r4, r5}
 800681a:	4770      	bx	lr
 800681c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800681e:	4613      	mov	r3, r2
 8006820:	e7e8      	b.n	80067f4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006822:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_NVIC_SetPriority+0x6c>)
 8006824:	f000 000f 	and.w	r0, r0, #15
 8006828:	0109      	lsls	r1, r1, #4
 800682a:	4403      	add	r3, r0
 800682c:	b2c9      	uxtb	r1, r1
 800682e:	7619      	strb	r1, [r3, #24]
 8006830:	bc30      	pop	{r4, r5}
 8006832:	4770      	bx	lr
 8006834:	e000ed00 	.word	0xe000ed00
 8006838:	e000ecfc 	.word	0xe000ecfc

0800683c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800683c:	2800      	cmp	r0, #0
 800683e:	db07      	blt.n	8006850 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006840:	f000 011f 	and.w	r1, r0, #31
 8006844:	4a03      	ldr	r2, [pc, #12]	; (8006854 <HAL_NVIC_EnableIRQ+0x18>)
 8006846:	0940      	lsrs	r0, r0, #5
 8006848:	2301      	movs	r3, #1
 800684a:	408b      	lsls	r3, r1
 800684c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000e100 	.word	0xe000e100

08006858 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006858:	3801      	subs	r0, #1
 800685a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800685e:	d20e      	bcs.n	800687e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006862:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006864:	4c08      	ldr	r4, [pc, #32]	; (8006888 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006866:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006868:	20f0      	movs	r0, #240	; 0xf0
 800686a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800686e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006870:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006872:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006874:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8006876:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800687a:	6019      	str	r1, [r3, #0]
 800687c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800687e:	2001      	movs	r0, #1
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	e000e010 	.word	0xe000e010
 8006888:	e000ed00 	.word	0xe000ed00

0800688c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8006890:	f7ff ff82 	bl	8006798 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006894:	2c00      	cmp	r4, #0
 8006896:	d054      	beq.n	8006942 <HAL_DMA_Init+0xb6>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006898:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800689a:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 800689c:	2100      	movs	r1, #0
 800689e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80068a2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	4605      	mov	r5, r0
 80068ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068b0:	e005      	b.n	80068be <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068b2:	f7ff ff71 	bl	8006798 <HAL_GetTick>
 80068b6:	1b43      	subs	r3, r0, r5
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d83b      	bhi.n	8006934 <HAL_DMA_Init+0xa8>
 80068bc:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	07d1      	lsls	r1, r2, #31
 80068c2:	d4f6      	bmi.n	80068b2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068c4:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c8:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068cc:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068ce:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 80068d0:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068d2:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d4:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d8:	4302      	orrs	r2, r0
 80068da:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80068dc:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068de:	4935      	ldr	r1, [pc, #212]	; (80069b4 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068e0:	4332      	orrs	r2, r6
 80068e2:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80068e4:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068e8:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068ea:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ec:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068f0:	d029      	beq.n	8006946 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068f2:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068f4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068f6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068fa:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	492e      	ldr	r1, [pc, #184]	; (80069b8 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8006900:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006902:	3a10      	subs	r2, #16
 8006904:	fba1 0102 	umull	r0, r1, r1, r2
 8006908:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800690a:	482c      	ldr	r0, [pc, #176]	; (80069bc <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800690c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006910:	5c41      	ldrb	r1, [r0, r1]
 8006912:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006914:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8006918:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800691a:	bf88      	it	hi
 800691c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800691e:	223f      	movs	r2, #63	; 0x3f
 8006920:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8006922:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006924:	2100      	movs	r1, #0
 8006926:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006928:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800692a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800692c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8006930:	4608      	mov	r0, r1
}
 8006932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006934:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006936:	2220      	movs	r2, #32
 8006938:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800693a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800693e:	4618      	mov	r0, r3
}
 8006940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006942:	2001      	movs	r0, #1
}
 8006944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006946:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 800694a:	4328      	orrs	r0, r5
 800694c:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 800694e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8006950:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8006952:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006954:	f020 0007 	bic.w	r0, r0, #7
 8006958:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 800695a:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800695e:	2d00      	cmp	r5, #0
 8006960:	d0cc      	beq.n	80068fc <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006962:	b17e      	cbz	r6, 8006984 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006964:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8006968:	d012      	beq.n	8006990 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800696a:	2a02      	cmp	r2, #2
 800696c:	d903      	bls.n	8006976 <HAL_DMA_Init+0xea>
 800696e:	2a03      	cmp	r2, #3
 8006970:	d1c4      	bne.n	80068fc <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006972:	01ea      	lsls	r2, r5, #7
 8006974:	d5c2      	bpl.n	80068fc <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8006976:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006978:	2240      	movs	r2, #64	; 0x40
 800697a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800697c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8006980:	4618      	mov	r0, r3
}
 8006982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8006984:	2a01      	cmp	r2, #1
 8006986:	d011      	beq.n	80069ac <HAL_DMA_Init+0x120>
 8006988:	f032 0202 	bics.w	r2, r2, #2
 800698c:	d1b6      	bne.n	80068fc <HAL_DMA_Init+0x70>
 800698e:	e7f0      	b.n	8006972 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8006990:	2a03      	cmp	r2, #3
 8006992:	d8b3      	bhi.n	80068fc <HAL_DMA_Init+0x70>
 8006994:	a101      	add	r1, pc, #4	; (adr r1, 800699c <HAL_DMA_Init+0x110>)
 8006996:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800699a:	bf00      	nop
 800699c:	08006977 	.word	0x08006977
 80069a0:	08006973 	.word	0x08006973
 80069a4:	08006977 	.word	0x08006977
 80069a8:	080069ad 	.word	0x080069ad
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069ac:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80069b0:	d1a4      	bne.n	80068fc <HAL_DMA_Init+0x70>
 80069b2:	e7e0      	b.n	8006976 <HAL_DMA_Init+0xea>
 80069b4:	f010803f 	.word	0xf010803f
 80069b8:	aaaaaaab 	.word	0xaaaaaaab
 80069bc:	0800942c 	.word	0x0800942c

080069c0 <HAL_DMA_Abort>:
{
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80069c6:	f7ff fee7 	bl	8006798 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ca:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d006      	beq.n	80069e0 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 80069d2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069d4:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80069d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069da:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80069dc:	2001      	movs	r0, #1
}
 80069de:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069e0:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f022 0216 	bic.w	r2, r2, #22
 80069ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f2:	4605      	mov	r5, r0
 80069f4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069f6:	b331      	cbz	r1, 8006a46 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	f022 0208 	bic.w	r2, r2, #8
 80069fe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a08:	e005      	b.n	8006a16 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a0a:	f7ff fec5 	bl	8006798 <HAL_GetTick>
 8006a0e:	1b43      	subs	r3, r0, r5
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d80f      	bhi.n	8006a34 <HAL_DMA_Abort+0x74>
 8006a14:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f013 0301 	ands.w	r3, r3, #1
 8006a1c:	d1f5      	bne.n	8006a0a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a1e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a20:	223f      	movs	r2, #63	; 0x3f
 8006a22:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8006a24:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a26:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8006a28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8006a2c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  return HAL_OK;
 8006a30:	4618      	mov	r0, r3
}
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a34:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8006a36:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a38:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a3a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006a3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a40:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8006a44:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	d1d5      	bne.n	80069f8 <HAL_DMA_Abort+0x38>
 8006a4c:	e7d8      	b.n	8006a00 <HAL_DMA_Abort+0x40>
 8006a4e:	bf00      	nop

08006a50 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a50:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d003      	beq.n	8006a60 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8006a60:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a62:	2305      	movs	r3, #5
 8006a64:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006a70:	2000      	movs	r0, #0
}
 8006a72:	4770      	bx	lr

08006a74 <HAL_DMA_IRQHandler>:
{
 8006a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a78:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006a7a:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8006a7e:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a80:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8006a82:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a84:	4971      	ldr	r1, [pc, #452]	; (8006c4c <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a86:	2208      	movs	r2, #8
 8006a88:	409a      	lsls	r2, r3
 8006a8a:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a8c:	680d      	ldr	r5, [r1, #0]
{
 8006a8e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a90:	d004      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a92:	6801      	ldr	r1, [r0, #0]
 8006a94:	680f      	ldr	r7, [r1, #0]
 8006a96:	0778      	lsls	r0, r7, #29
 8006a98:	f100 808a 	bmi.w	8006bb0 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	4222      	tst	r2, r4
 8006aa2:	d004      	beq.n	8006aae <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006aa4:	f8d8 1000 	ldr.w	r1, [r8]
 8006aa8:	6949      	ldr	r1, [r1, #20]
 8006aaa:	0609      	lsls	r1, r1, #24
 8006aac:	d478      	bmi.n	8006ba0 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006aae:	2204      	movs	r2, #4
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	4222      	tst	r2, r4
 8006ab4:	d004      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006ab6:	f8d8 1000 	ldr.w	r1, [r8]
 8006aba:	6809      	ldr	r1, [r1, #0]
 8006abc:	078f      	lsls	r7, r1, #30
 8006abe:	d467      	bmi.n	8006b90 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	4222      	tst	r2, r4
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ac8:	f8d8 1000 	ldr.w	r1, [r8]
 8006acc:	680f      	ldr	r7, [r1, #0]
 8006ace:	0738      	lsls	r0, r7, #28
 8006ad0:	d449      	bmi.n	8006b66 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	4222      	tst	r2, r4
 8006ad8:	d017      	beq.n	8006b0a <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ada:	f8d8 1000 	ldr.w	r1, [r8]
 8006ade:	680c      	ldr	r4, [r1, #0]
 8006ae0:	06e0      	lsls	r0, r4, #27
 8006ae2:	d512      	bpl.n	8006b0a <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ae4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ae6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8006aea:	2a05      	cmp	r2, #5
 8006aec:	d073      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aee:	680b      	ldr	r3, [r1, #0]
 8006af0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006af4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006af6:	f000 8090 	beq.w	8006c1a <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006afa:	0319      	lsls	r1, r3, #12
 8006afc:	f140 809b 	bpl.w	8006c36 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8006b00:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8006b04:	b10b      	cbz	r3, 8006b0a <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8006b06:	4640      	mov	r0, r8
 8006b08:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b0a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8006b0e:	b33b      	cbz	r3, 8006b60 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b10:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8006b14:	07da      	lsls	r2, r3, #31
 8006b16:	d51b      	bpl.n	8006b50 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8006b18:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b1c:	494c      	ldr	r1, [pc, #304]	; (8006c50 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b1e:	2305      	movs	r3, #5
 8006b20:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006b24:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b26:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b30:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8006b32:	e002      	b.n	8006b3a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	07db      	lsls	r3, r3, #31
 8006b38:	d504      	bpl.n	8006b44 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	42ab      	cmp	r3, r5
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	d9f7      	bls.n	8006b34 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8006b44:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8006b46:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8006b48:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006b4c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8006b50:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8006b54:	b123      	cbz	r3, 8006b60 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8006b56:	4640      	mov	r0, r8
}
 8006b58:	b002      	add	sp, #8
 8006b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8006b5e:	4718      	bx	r3
}
 8006b60:	b002      	add	sp, #8
 8006b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b66:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b68:	680a      	ldr	r2, [r1, #0]
 8006b6a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b6e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b70:	d12a      	bne.n	8006bc8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b72:	05d7      	lsls	r7, r2, #23
 8006b74:	d403      	bmi.n	8006b7e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b76:	680a      	ldr	r2, [r1, #0]
 8006b78:	f022 0208 	bic.w	r2, r2, #8
 8006b7c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8006b7e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d0a5      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8006b86:	4640      	mov	r0, r8
 8006b88:	4790      	blx	r2
 8006b8a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8006b8e:	e7a0      	b.n	8006ad2 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b90:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b92:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8006b96:	f042 0204 	orr.w	r2, r2, #4
 8006b9a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8006b9e:	e78f      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ba0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ba2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8006ba6:	f042 0202 	orr.w	r2, r2, #2
 8006baa:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8006bae:	e77e      	b.n	8006aae <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006bb0:	680f      	ldr	r7, [r1, #0]
 8006bb2:	f027 0704 	bic.w	r7, r7, #4
 8006bb6:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bb8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bba:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8006bc6:	e769      	b.n	8006a9c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bc8:	0312      	lsls	r2, r2, #12
 8006bca:	d5d8      	bpl.n	8006b7e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bcc:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	d1d8      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x112>
 8006bd4:	e77d      	b.n	8006ad2 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bd6:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bd8:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bdc:	f022 0216 	bic.w	r2, r2, #22
 8006be0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006be2:	694a      	ldr	r2, [r1, #20]
 8006be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006be8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bea:	b354      	cbz	r4, 8006c42 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bec:	680a      	ldr	r2, [r1, #0]
 8006bee:	f022 0208 	bic.w	r2, r2, #8
 8006bf2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bf4:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8006bf6:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8006bfe:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8006c00:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c02:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8006c04:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8006c08:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d0a7      	beq.n	8006b60 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8006c10:	4640      	mov	r0, r8
}
 8006c12:	b002      	add	sp, #8
 8006c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8006c18:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c1a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006c1e:	f47f af6f 	bne.w	8006b00 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c22:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006c24:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c26:	f022 0210 	bic.w	r2, r2, #16
 8006c2a:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8006c2c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006c30:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 8006c34:	e764      	b.n	8006b00 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8006c36:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f47f af63 	bne.w	8006b06 <HAL_DMA_IRQHandler+0x92>
 8006c40:	e763      	b.n	8006b0a <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c42:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8006c46:	2a00      	cmp	r2, #0
 8006c48:	d1d0      	bne.n	8006bec <HAL_DMA_IRQHandler+0x178>
 8006c4a:	e7d3      	b.n	8006bf4 <HAL_DMA_IRQHandler+0x180>
 8006c4c:	20000000 	.word	0x20000000
 8006c50:	1b4e81b5 	.word	0x1b4e81b5

08006c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c5a:	f8df a210 	ldr.w	sl, [pc, #528]	; 8006e6c <HAL_GPIO_Init+0x218>
 8006c5e:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c60:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8006e70 <HAL_GPIO_Init+0x21c>
{
 8006c64:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	46d9      	mov	r9, fp
 8006c6a:	e003      	b.n	8006c74 <HAL_GPIO_Init+0x20>
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	f000 8088 	beq.w	8006d84 <HAL_GPIO_Init+0x130>
    ioposition = 0x01U << position;
 8006c74:	2201      	movs	r2, #1
 8006c76:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c78:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8006c7c:	438a      	bics	r2, r1
 8006c7e:	d1f5      	bne.n	8006c6c <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c80:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8006c84:	f005 0203 	and.w	r2, r5, #3
 8006c88:	1e54      	subs	r4, r2, #1
 8006c8a:	2c01      	cmp	r4, #1
 8006c8c:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8006c90:	d97b      	bls.n	8006d8a <HAL_GPIO_Init+0x136>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c92:	2a03      	cmp	r2, #3
 8006c94:	f040 80b9 	bne.w	8006e0a <HAL_GPIO_Init+0x1b6>
 8006c98:	40ba      	lsls	r2, r7
 8006c9a:	43d4      	mvns	r4, r2
 8006c9c:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8006c9e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ca0:	9c00      	ldr	r4, [sp, #0]
 8006ca2:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ca4:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ca6:	00ee      	lsls	r6, r5, #3
      GPIOx->MODER = temp;
 8006ca8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006caa:	d5df      	bpl.n	8006c6c <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cac:	2200      	movs	r2, #0
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8006cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cb8:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8006cbc:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8006cc0:	f023 0403 	bic.w	r4, r3, #3
 8006cc4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006cc8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006ccc:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8006cd0:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006cd2:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cd6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006cd8:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006cda:	00b6      	lsls	r6, r6, #2
 8006cdc:	220f      	movs	r2, #15
 8006cde:	40b2      	lsls	r2, r6
 8006ce0:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ce4:	4f5a      	ldr	r7, [pc, #360]	; (8006e50 <HAL_GPIO_Init+0x1fc>)
 8006ce6:	42b8      	cmp	r0, r7
 8006ce8:	d020      	beq.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006cea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006cee:	42b8      	cmp	r0, r7
 8006cf0:	f000 8090 	beq.w	8006e14 <HAL_GPIO_Init+0x1c0>
 8006cf4:	4f57      	ldr	r7, [pc, #348]	; (8006e54 <HAL_GPIO_Init+0x200>)
 8006cf6:	42b8      	cmp	r0, r7
 8006cf8:	f000 8091 	beq.w	8006e1e <HAL_GPIO_Init+0x1ca>
 8006cfc:	4f56      	ldr	r7, [pc, #344]	; (8006e58 <HAL_GPIO_Init+0x204>)
 8006cfe:	42b8      	cmp	r0, r7
 8006d00:	f000 8092 	beq.w	8006e28 <HAL_GPIO_Init+0x1d4>
 8006d04:	4f55      	ldr	r7, [pc, #340]	; (8006e5c <HAL_GPIO_Init+0x208>)
 8006d06:	42b8      	cmp	r0, r7
 8006d08:	f000 8093 	beq.w	8006e32 <HAL_GPIO_Init+0x1de>
 8006d0c:	4f54      	ldr	r7, [pc, #336]	; (8006e60 <HAL_GPIO_Init+0x20c>)
 8006d0e:	42b8      	cmp	r0, r7
 8006d10:	f000 8094 	beq.w	8006e3c <HAL_GPIO_Init+0x1e8>
 8006d14:	4f53      	ldr	r7, [pc, #332]	; (8006e64 <HAL_GPIO_Init+0x210>)
 8006d16:	42b8      	cmp	r0, r7
 8006d18:	f000 8095 	beq.w	8006e46 <HAL_GPIO_Init+0x1f2>
 8006d1c:	4f52      	ldr	r7, [pc, #328]	; (8006e68 <HAL_GPIO_Init+0x214>)
 8006d1e:	42b8      	cmp	r0, r7
 8006d20:	bf0c      	ite	eq
 8006d22:	2707      	moveq	r7, #7
 8006d24:	2708      	movne	r7, #8
 8006d26:	fa07 f606 	lsl.w	r6, r7, r6
 8006d2a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d2c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8006d2e:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 8006d32:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d36:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8006d38:	bf54      	ite	pl
 8006d3a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8006d3c:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8006d40:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8006d44:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d48:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8006d4a:	bf54      	ite	pl
 8006d4c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006d4e:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8006d52:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d56:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d5a:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8006d5c:	bf54      	ite	pl
 8006d5e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006d60:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8006d64:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8006d68:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d6c:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d6e:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8006d72:	bf54      	ite	pl
 8006d74:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8006d76:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d7a:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8006d7c:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d80:	f47f af78 	bne.w	8006c74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d84:	b005      	add	sp, #20
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8006d8a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d8c:	2403      	movs	r4, #3
 8006d8e:	40bc      	lsls	r4, r7
 8006d90:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d94:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8006d98:	40be      	lsls	r6, r7
 8006d9a:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8006d9e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8006da0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006da4:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006da8:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006dac:	409e      	lsls	r6, r3
 8006dae:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006db2:	43e4      	mvns	r4, r4
 8006db4:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8006db6:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8006db8:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006dba:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dbe:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8006dc2:	40be      	lsls	r6, r7
 8006dc4:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dc8:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006dca:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dcc:	d001      	beq.n	8006dd2 <HAL_GPIO_Init+0x17e>
 8006dce:	40ba      	lsls	r2, r7
 8006dd0:	e765      	b.n	8006c9e <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8006dd2:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8006dd6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dda:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006dde:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8006de2:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006de4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006de8:	240f      	movs	r4, #15
 8006dea:	fa04 f60e 	lsl.w	r6, r4, lr
 8006dee:	9c01      	ldr	r4, [sp, #4]
 8006df0:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006df4:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006df8:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006dfa:	fa04 f60e 	lsl.w	r6, r4, lr
 8006dfe:	9c01      	ldr	r4, [sp, #4]
 8006e00:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8006e02:	40ba      	lsls	r2, r7
 8006e04:	f8c8 6020 	str.w	r6, [r8, #32]
 8006e08:	e749      	b.n	8006c9e <HAL_GPIO_Init+0x4a>
 8006e0a:	2403      	movs	r4, #3
 8006e0c:	40bc      	lsls	r4, r7
 8006e0e:	43e4      	mvns	r4, r4
 8006e10:	9400      	str	r4, [sp, #0]
 8006e12:	e7d1      	b.n	8006db8 <HAL_GPIO_Init+0x164>
 8006e14:	2701      	movs	r7, #1
 8006e16:	fa07 f606 	lsl.w	r6, r7, r6
 8006e1a:	4332      	orrs	r2, r6
 8006e1c:	e786      	b.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006e1e:	2702      	movs	r7, #2
 8006e20:	fa07 f606 	lsl.w	r6, r7, r6
 8006e24:	4332      	orrs	r2, r6
 8006e26:	e781      	b.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006e28:	2703      	movs	r7, #3
 8006e2a:	fa07 f606 	lsl.w	r6, r7, r6
 8006e2e:	4332      	orrs	r2, r6
 8006e30:	e77c      	b.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006e32:	2704      	movs	r7, #4
 8006e34:	fa07 f606 	lsl.w	r6, r7, r6
 8006e38:	4332      	orrs	r2, r6
 8006e3a:	e777      	b.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006e3c:	2705      	movs	r7, #5
 8006e3e:	fa07 f606 	lsl.w	r6, r7, r6
 8006e42:	4332      	orrs	r2, r6
 8006e44:	e772      	b.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006e46:	2706      	movs	r7, #6
 8006e48:	fa07 f606 	lsl.w	r6, r7, r6
 8006e4c:	4332      	orrs	r2, r6
 8006e4e:	e76d      	b.n	8006d2c <HAL_GPIO_Init+0xd8>
 8006e50:	40020000 	.word	0x40020000
 8006e54:	40020800 	.word	0x40020800
 8006e58:	40020c00 	.word	0x40020c00
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40021400 	.word	0x40021400
 8006e64:	40021800 	.word	0x40021800
 8006e68:	40021c00 	.word	0x40021c00
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40013c00 	.word	0x40013c00

08006e74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e74:	b902      	cbnz	r2, 8006e78 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e76:	0409      	lsls	r1, r1, #16
 8006e78:	6181      	str	r1, [r0, #24]
  }
}
 8006e7a:	4770      	bx	lr

08006e7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f000 81a5 	beq.w	80071cc <HAL_RCC_OscConfig+0x350>
{
 8006e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e86:	6803      	ldr	r3, [r0, #0]
 8006e88:	07dd      	lsls	r5, r3, #31
{
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e8e:	d52f      	bpl.n	8006ef0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e90:	49ac      	ldr	r1, [pc, #688]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8006e92:	688a      	ldr	r2, [r1, #8]
 8006e94:	f002 020c 	and.w	r2, r2, #12
 8006e98:	2a04      	cmp	r2, #4
 8006e9a:	f000 80ec 	beq.w	8007076 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9e:	688a      	ldr	r2, [r1, #8]
 8006ea0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ea4:	2a08      	cmp	r2, #8
 8006ea6:	f000 80e2 	beq.w	800706e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eaa:	6863      	ldr	r3, [r4, #4]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb0:	f000 80eb 	beq.w	800708a <HAL_RCC_OscConfig+0x20e>
 8006eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb8:	f000 8178 	beq.w	80071ac <HAL_RCC_OscConfig+0x330>
 8006ebc:	4da1      	ldr	r5, [pc, #644]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8006ebe:	682a      	ldr	r2, [r5, #0]
 8006ec0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	682a      	ldr	r2, [r5, #0]
 8006ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ecc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f040 80e0 	bne.w	8007094 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed4:	f7ff fc60 	bl	8006798 <HAL_GetTick>
 8006ed8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eda:	e005      	b.n	8006ee8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006edc:	f7ff fc5c 	bl	8006798 <HAL_GetTick>
 8006ee0:	1b80      	subs	r0, r0, r6
 8006ee2:	2864      	cmp	r0, #100	; 0x64
 8006ee4:	f200 8100 	bhi.w	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	039b      	lsls	r3, r3, #14
 8006eec:	d4f6      	bmi.n	8006edc <HAL_RCC_OscConfig+0x60>
 8006eee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ef0:	079f      	lsls	r7, r3, #30
 8006ef2:	d528      	bpl.n	8006f46 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ef4:	4a93      	ldr	r2, [pc, #588]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8006ef6:	6891      	ldr	r1, [r2, #8]
 8006ef8:	f011 0f0c 	tst.w	r1, #12
 8006efc:	f000 8090 	beq.w	8007020 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f00:	6891      	ldr	r1, [r2, #8]
 8006f02:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f06:	2908      	cmp	r1, #8
 8006f08:	f000 8086 	beq.w	8007018 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f0c:	68e3      	ldr	r3, [r4, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8106 	beq.w	8007120 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f14:	4b8c      	ldr	r3, [pc, #560]	; (8007148 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f16:	4e8b      	ldr	r6, [pc, #556]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006f1c:	f7ff fc3c 	bl	8006798 <HAL_GetTick>
 8006f20:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f22:	e005      	b.n	8006f30 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f24:	f7ff fc38 	bl	8006798 <HAL_GetTick>
 8006f28:	1b40      	subs	r0, r0, r5
 8006f2a:	2802      	cmp	r0, #2
 8006f2c:	f200 80dc 	bhi.w	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f30:	6833      	ldr	r3, [r6, #0]
 8006f32:	0798      	lsls	r0, r3, #30
 8006f34:	d5f6      	bpl.n	8006f24 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f36:	6833      	ldr	r3, [r6, #0]
 8006f38:	6922      	ldr	r2, [r4, #16]
 8006f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006f3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006f42:	6033      	str	r3, [r6, #0]
 8006f44:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f46:	071a      	lsls	r2, r3, #28
 8006f48:	d452      	bmi.n	8006ff0 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f4a:	0758      	lsls	r0, r3, #29
 8006f4c:	d52f      	bpl.n	8006fae <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4e:	4a7d      	ldr	r2, [pc, #500]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8006f50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006f52:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8006f56:	d07e      	beq.n	8007056 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8006f58:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5a:	4e7c      	ldr	r6, [pc, #496]	; (800714c <HAL_RCC_OscConfig+0x2d0>)
 8006f5c:	6833      	ldr	r3, [r6, #0]
 8006f5e:	05d9      	lsls	r1, r3, #23
 8006f60:	f140 80b2 	bpl.w	80070c8 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f64:	68a3      	ldr	r3, [r4, #8]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	f000 80c2 	beq.w	80070f0 <HAL_RCC_OscConfig+0x274>
 8006f6c:	2b05      	cmp	r3, #5
 8006f6e:	f000 812f 	beq.w	80071d0 <HAL_RCC_OscConfig+0x354>
 8006f72:	4e74      	ldr	r6, [pc, #464]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8006f74:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8006f76:	f022 0201 	bic.w	r2, r2, #1
 8006f7a:	6732      	str	r2, [r6, #112]	; 0x70
 8006f7c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8006f7e:	f022 0204 	bic.w	r2, r2, #4
 8006f82:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 80b8 	bne.w	80070fa <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f8a:	f7ff fc05 	bl	8006798 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f8e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006f92:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f94:	e005      	b.n	8006fa2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f96:	f7ff fbff 	bl	8006798 <HAL_GetTick>
 8006f9a:	1bc0      	subs	r0, r0, r7
 8006f9c:	4540      	cmp	r0, r8
 8006f9e:	f200 80a3 	bhi.w	80070e8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006fa4:	0798      	lsls	r0, r3, #30
 8006fa6:	d4f6      	bmi.n	8006f96 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	f040 8109 	bne.w	80071c0 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fae:	69a0      	ldr	r0, [r4, #24]
 8006fb0:	b1d0      	cbz	r0, 8006fe8 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fb2:	4d64      	ldr	r5, [pc, #400]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8006fb4:	68ab      	ldr	r3, [r5, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	f000 80cc 	beq.w	8007158 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc0:	4b63      	ldr	r3, [pc, #396]	; (8007150 <HAL_RCC_OscConfig+0x2d4>)
 8006fc2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006fc6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc8:	f000 810c 	beq.w	80071e4 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fcc:	f7ff fbe4 	bl	8006798 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd0:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8006fd2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd4:	e005      	b.n	8006fe2 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fd6:	f7ff fbdf 	bl	8006798 <HAL_GetTick>
 8006fda:	1b40      	subs	r0, r0, r5
 8006fdc:	2802      	cmp	r0, #2
 8006fde:	f200 8083 	bhi.w	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	d4f6      	bmi.n	8006fd6 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006fe8:	2000      	movs	r0, #0
}
 8006fea:	b002      	add	sp, #8
 8006fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ff0:	6963      	ldr	r3, [r4, #20]
 8006ff2:	b303      	cbz	r3, 8007036 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8006ff4:	4b57      	ldr	r3, [pc, #348]	; (8007154 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ff6:	4e53      	ldr	r6, [pc, #332]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006ffc:	f7ff fbcc 	bl	8006798 <HAL_GetTick>
 8007000:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007002:	e004      	b.n	800700e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007004:	f7ff fbc8 	bl	8006798 <HAL_GetTick>
 8007008:	1b40      	subs	r0, r0, r5
 800700a:	2802      	cmp	r0, #2
 800700c:	d86c      	bhi.n	80070e8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007010:	079b      	lsls	r3, r3, #30
 8007012:	d5f7      	bpl.n	8007004 <HAL_RCC_OscConfig+0x188>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	e798      	b.n	8006f4a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007018:	6852      	ldr	r2, [r2, #4]
 800701a:	0256      	lsls	r6, r2, #9
 800701c:	f53f af76 	bmi.w	8006f0c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007020:	4a48      	ldr	r2, [pc, #288]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	0795      	lsls	r5, r2, #30
 8007026:	d543      	bpl.n	80070b0 <HAL_RCC_OscConfig+0x234>
 8007028:	68e2      	ldr	r2, [r4, #12]
 800702a:	2a01      	cmp	r2, #1
 800702c:	d040      	beq.n	80070b0 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 800702e:	2001      	movs	r0, #1
}
 8007030:	b002      	add	sp, #8
 8007032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007036:	4a47      	ldr	r2, [pc, #284]	; (8007154 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007038:	4e42      	ldr	r6, [pc, #264]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800703a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800703c:	f7ff fbac 	bl	8006798 <HAL_GetTick>
 8007040:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007042:	e004      	b.n	800704e <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007044:	f7ff fba8 	bl	8006798 <HAL_GetTick>
 8007048:	1b40      	subs	r0, r0, r5
 800704a:	2802      	cmp	r0, #2
 800704c:	d84c      	bhi.n	80070e8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800704e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007050:	079f      	lsls	r7, r3, #30
 8007052:	d4f7      	bmi.n	8007044 <HAL_RCC_OscConfig+0x1c8>
 8007054:	e7de      	b.n	8007014 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800705a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705e:	6413      	str	r3, [r2, #64]	; 0x40
 8007060:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800706a:	2501      	movs	r5, #1
 800706c:	e775      	b.n	8006f5a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800706e:	684a      	ldr	r2, [r1, #4]
 8007070:	0250      	lsls	r0, r2, #9
 8007072:	f57f af1a 	bpl.w	8006eaa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007076:	4a33      	ldr	r2, [pc, #204]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	0391      	lsls	r1, r2, #14
 800707c:	f57f af38 	bpl.w	8006ef0 <HAL_RCC_OscConfig+0x74>
 8007080:	6862      	ldr	r2, [r4, #4]
 8007082:	2a00      	cmp	r2, #0
 8007084:	f47f af34 	bne.w	8006ef0 <HAL_RCC_OscConfig+0x74>
 8007088:	e7d1      	b.n	800702e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800708a:	4a2e      	ldr	r2, [pc, #184]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 800708c:	6813      	ldr	r3, [r2, #0]
 800708e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007092:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007094:	f7ff fb80 	bl	8006798 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007098:	4e2a      	ldr	r6, [pc, #168]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800709a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709c:	e004      	b.n	80070a8 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800709e:	f7ff fb7b 	bl	8006798 <HAL_GetTick>
 80070a2:	1b40      	subs	r0, r0, r5
 80070a4:	2864      	cmp	r0, #100	; 0x64
 80070a6:	d81f      	bhi.n	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	039a      	lsls	r2, r3, #14
 80070ac:	d5f7      	bpl.n	800709e <HAL_RCC_OscConfig+0x222>
 80070ae:	e71e      	b.n	8006eee <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b0:	4924      	ldr	r1, [pc, #144]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 80070b2:	6920      	ldr	r0, [r4, #16]
 80070b4:	680a      	ldr	r2, [r1, #0]
 80070b6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80070ba:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80070be:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070c0:	071a      	lsls	r2, r3, #28
 80070c2:	f57f af42 	bpl.w	8006f4a <HAL_RCC_OscConfig+0xce>
 80070c6:	e793      	b.n	8006ff0 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80070d0:	f7ff fb62 	bl	8006798 <HAL_GetTick>
 80070d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d6:	6833      	ldr	r3, [r6, #0]
 80070d8:	05da      	lsls	r2, r3, #23
 80070da:	f53f af43 	bmi.w	8006f64 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070de:	f7ff fb5b 	bl	8006798 <HAL_GetTick>
 80070e2:	1bc0      	subs	r0, r0, r7
 80070e4:	2802      	cmp	r0, #2
 80070e6:	d9f6      	bls.n	80070d6 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80070e8:	2003      	movs	r0, #3
}
 80070ea:	b002      	add	sp, #8
 80070ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070f0:	4a14      	ldr	r2, [pc, #80]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
 80070f2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80070fa:	f7ff fb4d 	bl	8006798 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fe:	4f11      	ldr	r7, [pc, #68]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8007100:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007102:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007106:	e004      	b.n	8007112 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007108:	f7ff fb46 	bl	8006798 <HAL_GetTick>
 800710c:	1b80      	subs	r0, r0, r6
 800710e:	4540      	cmp	r0, r8
 8007110:	d8ea      	bhi.n	80070e8 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007114:	079b      	lsls	r3, r3, #30
 8007116:	d5f7      	bpl.n	8007108 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8007118:	2d00      	cmp	r5, #0
 800711a:	f43f af48 	beq.w	8006fae <HAL_RCC_OscConfig+0x132>
 800711e:	e04f      	b.n	80071c0 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8007120:	4a09      	ldr	r2, [pc, #36]	; (8007148 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007122:	4e08      	ldr	r6, [pc, #32]	; (8007144 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8007124:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007126:	f7ff fb37 	bl	8006798 <HAL_GetTick>
 800712a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712c:	e004      	b.n	8007138 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800712e:	f7ff fb33 	bl	8006798 <HAL_GetTick>
 8007132:	1b40      	subs	r0, r0, r5
 8007134:	2802      	cmp	r0, #2
 8007136:	d8d7      	bhi.n	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007138:	6833      	ldr	r3, [r6, #0]
 800713a:	0799      	lsls	r1, r3, #30
 800713c:	d4f7      	bmi.n	800712e <HAL_RCC_OscConfig+0x2b2>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	e701      	b.n	8006f46 <HAL_RCC_OscConfig+0xca>
 8007142:	bf00      	nop
 8007144:	40023800 	.word	0x40023800
 8007148:	42470000 	.word	0x42470000
 800714c:	40007000 	.word	0x40007000
 8007150:	42470060 	.word	0x42470060
 8007154:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007158:	2801      	cmp	r0, #1
 800715a:	f43f af46 	beq.w	8006fea <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 800715e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007160:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007162:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007166:	4291      	cmp	r1, r2
 8007168:	f47f af61 	bne.w	800702e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716c:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800716e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007172:	4291      	cmp	r1, r2
 8007174:	f47f af5b 	bne.w	800702e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007178:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800717a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800717e:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007180:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8007184:	f47f af53 	bne.w	800702e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007188:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800718a:	0852      	lsrs	r2, r2, #1
 800718c:	3a01      	subs	r2, #1
 800718e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007192:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8007196:	f47f af4a 	bne.w	800702e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800719a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800719c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80071a4:	bf14      	ite	ne
 80071a6:	2001      	movne	r0, #1
 80071a8:	2000      	moveq	r0, #0
 80071aa:	e71e      	b.n	8006fea <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ac:	4b24      	ldr	r3, [pc, #144]	; (8007240 <HAL_RCC_OscConfig+0x3c4>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071bc:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071be:	e769      	b.n	8007094 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c0:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <HAL_RCC_OscConfig+0x3c4>)
 80071c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80071c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ca:	e6f0      	b.n	8006fae <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80071cc:	2001      	movs	r0, #1
}
 80071ce:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d0:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <HAL_RCC_OscConfig+0x3c4>)
 80071d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071d4:	f042 0204 	orr.w	r2, r2, #4
 80071d8:	671a      	str	r2, [r3, #112]	; 0x70
 80071da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071e2:	e78a      	b.n	80070fa <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80071e4:	f7ff fad8 	bl	8006798 <HAL_GetTick>
 80071e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ea:	e005      	b.n	80071f8 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ec:	f7ff fad4 	bl	8006798 <HAL_GetTick>
 80071f0:	1b80      	subs	r0, r0, r6
 80071f2:	2802      	cmp	r0, #2
 80071f4:	f63f af78 	bhi.w	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	0199      	lsls	r1, r3, #6
 80071fc:	d4f6      	bmi.n	80071ec <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071fe:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8007202:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8007206:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007208:	4333      	orrs	r3, r6
 800720a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800720e:	0852      	lsrs	r2, r2, #1
 8007210:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007214:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8007216:	490b      	ldr	r1, [pc, #44]	; (8007244 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007218:	4e09      	ldr	r6, [pc, #36]	; (8007240 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800721a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800721e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007220:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007222:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8007224:	f7ff fab8 	bl	8006798 <HAL_GetTick>
 8007228:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722a:	e005      	b.n	8007238 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800722c:	f7ff fab4 	bl	8006798 <HAL_GetTick>
 8007230:	1b00      	subs	r0, r0, r4
 8007232:	2802      	cmp	r0, #2
 8007234:	f63f af58 	bhi.w	80070e8 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007238:	6833      	ldr	r3, [r6, #0]
 800723a:	019a      	lsls	r2, r3, #6
 800723c:	d5f6      	bpl.n	800722c <HAL_RCC_OscConfig+0x3b0>
 800723e:	e6d3      	b.n	8006fe8 <HAL_RCC_OscConfig+0x16c>
 8007240:	40023800 	.word	0x40023800
 8007244:	42470060 	.word	0x42470060

08007248 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007248:	4917      	ldr	r1, [pc, #92]	; (80072a8 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800724a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800724c:	688b      	ldr	r3, [r1, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
 8007252:	2b04      	cmp	r3, #4
 8007254:	d01b      	beq.n	800728e <HAL_RCC_GetSysClockFreq+0x46>
 8007256:	2b08      	cmp	r3, #8
 8007258:	d117      	bne.n	800728a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800725a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800725c:	684b      	ldr	r3, [r1, #4]
 800725e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007262:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007266:	d114      	bne.n	8007292 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007268:	6849      	ldr	r1, [r1, #4]
 800726a:	4810      	ldr	r0, [pc, #64]	; (80072ac <HAL_RCC_GetSysClockFreq+0x64>)
 800726c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007270:	fba1 0100 	umull	r0, r1, r1, r0
 8007274:	f7fe f938 	bl	80054e8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <HAL_RCC_GetSysClockFreq+0x60>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007280:	3301      	adds	r3, #1
 8007282:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8007284:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007288:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800728a:	4808      	ldr	r0, [pc, #32]	; (80072ac <HAL_RCC_GetSysClockFreq+0x64>)
}
 800728c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800728e:	4808      	ldr	r0, [pc, #32]	; (80072b0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8007290:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007292:	684b      	ldr	r3, [r1, #4]
 8007294:	4806      	ldr	r0, [pc, #24]	; (80072b0 <HAL_RCC_GetSysClockFreq+0x68>)
 8007296:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800729a:	fba3 0100 	umull	r0, r1, r3, r0
 800729e:	2300      	movs	r3, #0
 80072a0:	f7fe f922 	bl	80054e8 <__aeabi_uldivmod>
 80072a4:	e7e8      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x30>
 80072a6:	bf00      	nop
 80072a8:	40023800 	.word	0x40023800
 80072ac:	00f42400 	.word	0x00f42400
 80072b0:	017d7840 	.word	0x017d7840

080072b4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f000 8087 	beq.w	80073c8 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072ba:	4a48      	ldr	r2, [pc, #288]	; (80073dc <HAL_RCC_ClockConfig+0x128>)
 80072bc:	6813      	ldr	r3, [r2, #0]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	428b      	cmp	r3, r1
{
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	460d      	mov	r5, r1
 80072ca:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072cc:	d209      	bcs.n	80072e2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	b2cb      	uxtb	r3, r1
 80072d0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	428b      	cmp	r3, r1
 80072da:	d002      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80072dc:	2001      	movs	r0, #1
}
 80072de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	0798      	lsls	r0, r3, #30
 80072e6:	d514      	bpl.n	8007312 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e8:	0759      	lsls	r1, r3, #29
 80072ea:	d504      	bpl.n	80072f6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072ec:	493c      	ldr	r1, [pc, #240]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 80072ee:	688a      	ldr	r2, [r1, #8]
 80072f0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80072f4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f6:	071a      	lsls	r2, r3, #28
 80072f8:	d504      	bpl.n	8007304 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072fa:	4939      	ldr	r1, [pc, #228]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 80072fc:	688a      	ldr	r2, [r1, #8]
 80072fe:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8007302:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007304:	4936      	ldr	r1, [pc, #216]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 8007306:	68a0      	ldr	r0, [r4, #8]
 8007308:	688a      	ldr	r2, [r1, #8]
 800730a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800730e:	4302      	orrs	r2, r0
 8007310:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007312:	07df      	lsls	r7, r3, #31
 8007314:	d521      	bpl.n	800735a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	2a01      	cmp	r2, #1
 800731a:	d057      	beq.n	80073cc <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800731c:	1e93      	subs	r3, r2, #2
 800731e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007320:	4b2f      	ldr	r3, [pc, #188]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 8007322:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007324:	d94d      	bls.n	80073c2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007326:	0799      	lsls	r1, r3, #30
 8007328:	d5d8      	bpl.n	80072dc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800732a:	4e2d      	ldr	r6, [pc, #180]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 800732c:	68b3      	ldr	r3, [r6, #8]
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	4313      	orrs	r3, r2
 8007334:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007336:	f7ff fa2f 	bl	8006798 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800733a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800733e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007340:	e004      	b.n	800734c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007342:	f7ff fa29 	bl	8006798 <HAL_GetTick>
 8007346:	1bc0      	subs	r0, r0, r7
 8007348:	4540      	cmp	r0, r8
 800734a:	d844      	bhi.n	80073d6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734c:	68b3      	ldr	r3, [r6, #8]
 800734e:	6862      	ldr	r2, [r4, #4]
 8007350:	f003 030c 	and.w	r3, r3, #12
 8007354:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007358:	d1f3      	bne.n	8007342 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800735a:	4a20      	ldr	r2, [pc, #128]	; (80073dc <HAL_RCC_ClockConfig+0x128>)
 800735c:	6813      	ldr	r3, [r2, #0]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	42ab      	cmp	r3, r5
 8007364:	d906      	bls.n	8007374 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	b2eb      	uxtb	r3, r5
 8007368:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	42ab      	cmp	r3, r5
 8007372:	d1b3      	bne.n	80072dc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	075a      	lsls	r2, r3, #29
 8007378:	d506      	bpl.n	8007388 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800737a:	4919      	ldr	r1, [pc, #100]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 800737c:	68e0      	ldr	r0, [r4, #12]
 800737e:	688a      	ldr	r2, [r1, #8]
 8007380:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007384:	4302      	orrs	r2, r0
 8007386:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007388:	071b      	lsls	r3, r3, #28
 800738a:	d507      	bpl.n	800739c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800738c:	4a14      	ldr	r2, [pc, #80]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	6893      	ldr	r3, [r2, #8]
 8007392:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007396:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800739a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800739c:	f7ff ff54 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 80073a0:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 80073a2:	4c10      	ldr	r4, [pc, #64]	; (80073e4 <HAL_RCC_ClockConfig+0x130>)
 80073a4:	6892      	ldr	r2, [r2, #8]
 80073a6:	4910      	ldr	r1, [pc, #64]	; (80073e8 <HAL_RCC_ClockConfig+0x134>)
 80073a8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80073ac:	4603      	mov	r3, r0
 80073ae:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80073b0:	480e      	ldr	r0, [pc, #56]	; (80073ec <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073b2:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80073b4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073b6:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80073b8:	f7ff f9a4 	bl	8006704 <HAL_InitTick>
  return HAL_OK;
 80073bc:	2000      	movs	r0, #0
}
 80073be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c2:	0198      	lsls	r0, r3, #6
 80073c4:	d4b1      	bmi.n	800732a <HAL_RCC_ClockConfig+0x76>
 80073c6:	e789      	b.n	80072dc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80073c8:	2001      	movs	r0, #1
}
 80073ca:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <HAL_RCC_ClockConfig+0x12c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	039e      	lsls	r6, r3, #14
 80073d2:	d4aa      	bmi.n	800732a <HAL_RCC_ClockConfig+0x76>
 80073d4:	e782      	b.n	80072dc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80073d6:	2003      	movs	r0, #3
 80073d8:	e781      	b.n	80072de <HAL_RCC_ClockConfig+0x2a>
 80073da:	bf00      	nop
 80073dc:	40023c00 	.word	0x40023c00
 80073e0:	40023800 	.word	0x40023800
 80073e4:	08007b7c 	.word	0x08007b7c
 80073e8:	20000000 	.word	0x20000000
 80073ec:	20000008 	.word	0x20000008

080073f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <HAL_RCC_GetPCLK1Freq+0x14>)
 80073f2:	4a05      	ldr	r2, [pc, #20]	; (8007408 <HAL_RCC_GetPCLK1Freq+0x18>)
 80073f4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80073f6:	4905      	ldr	r1, [pc, #20]	; (800740c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073f8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80073fc:	6808      	ldr	r0, [r1, #0]
 80073fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8007400:	40d8      	lsrs	r0, r3
 8007402:	4770      	bx	lr
 8007404:	40023800 	.word	0x40023800
 8007408:	08007b8c 	.word	0x08007b8c
 800740c:	20000000 	.word	0x20000000

08007410 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007412:	4a05      	ldr	r2, [pc, #20]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007414:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007416:	4905      	ldr	r1, [pc, #20]	; (800742c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007418:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800741c:	6808      	ldr	r0, [r1, #0]
 800741e:	5cd3      	ldrb	r3, [r2, r3]
}
 8007420:	40d8      	lsrs	r0, r3
 8007422:	4770      	bx	lr
 8007424:	40023800 	.word	0x40023800
 8007428:	08007b8c 	.word	0x08007b8c
 800742c:	20000000 	.word	0x20000000

08007430 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007430:	2800      	cmp	r0, #0
 8007432:	f000 8090 	beq.w	8007556 <HAL_UART_Init+0x126>
{
 8007436:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007438:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800743c:	4604      	mov	r4, r0
 800743e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8082 	beq.w	800754c <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007448:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800744a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800744c:	2224      	movs	r2, #36	; 0x24
 800744e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8007452:	68d8      	ldr	r0, [r3, #12]
 8007454:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007458:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800745c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800745e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007460:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007462:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8007466:	4329      	orrs	r1, r5
 8007468:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800746a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800746c:	6965      	ldr	r5, [r4, #20]
 800746e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8007470:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007474:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8007476:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800747a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800747c:	430a      	orrs	r2, r1
 800747e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007484:	4935      	ldr	r1, [pc, #212]	; (800755c <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007486:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800748a:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800748c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800748e:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007490:	d035      	beq.n	80074fe <HAL_UART_Init+0xce>
 8007492:	4a33      	ldr	r2, [pc, #204]	; (8007560 <HAL_UART_Init+0x130>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d032      	beq.n	80074fe <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007498:	f7ff ffaa 	bl	80073f0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800749c:	69e3      	ldr	r3, [r4, #28]
 800749e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a2:	d032      	beq.n	800750a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	4e2f      	ldr	r6, [pc, #188]	; (8007564 <HAL_UART_Init+0x134>)
 80074a8:	2119      	movs	r1, #25
 80074aa:	009a      	lsls	r2, r3, #2
 80074ac:	fba0 0101 	umull	r0, r1, r0, r1
 80074b0:	0f9b      	lsrs	r3, r3, #30
 80074b2:	f7fe f819 	bl	80054e8 <__aeabi_uldivmod>
 80074b6:	fba6 2500 	umull	r2, r5, r6, r0
 80074ba:	096d      	lsrs	r5, r5, #5
 80074bc:	2164      	movs	r1, #100	; 0x64
 80074be:	fb01 0215 	mls	r2, r1, r5, r0
 80074c2:	0112      	lsls	r2, r2, #4
 80074c4:	3232      	adds	r2, #50	; 0x32
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	fba6 1202 	umull	r1, r2, r6, r2
 80074cc:	012d      	lsls	r5, r5, #4
 80074ce:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 80074d2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074dc:	695a      	ldr	r2, [r3, #20]
 80074de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80074e4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80074e8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80074ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ee:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074f2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80074fa:	4628      	mov	r0, r5
}
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80074fe:	f7ff ff87 	bl	8007410 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007502:	69e3      	ldr	r3, [r4, #28]
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007508:	d1cc      	bne.n	80074a4 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	4e15      	ldr	r6, [pc, #84]	; (8007564 <HAL_UART_Init+0x134>)
 800750e:	1892      	adds	r2, r2, r2
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	f04f 0119 	mov.w	r1, #25
 8007518:	415b      	adcs	r3, r3
 800751a:	fba0 0101 	umull	r0, r1, r0, r1
 800751e:	f7fd ffe3 	bl	80054e8 <__aeabi_uldivmod>
 8007522:	fba6 2100 	umull	r2, r1, r6, r0
 8007526:	094d      	lsrs	r5, r1, #5
 8007528:	2164      	movs	r1, #100	; 0x64
 800752a:	fb01 0215 	mls	r2, r1, r5, r0
 800752e:	00d2      	lsls	r2, r2, #3
 8007530:	3232      	adds	r2, #50	; 0x32
 8007532:	fba6 1202 	umull	r1, r2, r6, r2
 8007536:	f3c2 1142 	ubfx	r1, r2, #5, #3
 800753a:	0912      	lsrs	r2, r2, #4
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8007542:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007546:	440a      	add	r2, r1
 8007548:	609a      	str	r2, [r3, #8]
 800754a:	e7c3      	b.n	80074d4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800754c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8007550:	f7fe fa0e 	bl	8005970 <HAL_UART_MspInit>
 8007554:	e778      	b.n	8007448 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8007556:	2001      	movs	r0, #1
}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40011000 	.word	0x40011000
 8007560:	40011400 	.word	0x40011400
 8007564:	51eb851f 	.word	0x51eb851f

08007568 <HAL_UART_Transmit>:
{
 8007568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800756c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800756e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8007572:	2820      	cmp	r0, #32
 8007574:	d168      	bne.n	8007648 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8007576:	4688      	mov	r8, r1
 8007578:	2900      	cmp	r1, #0
 800757a:	d040      	beq.n	80075fe <HAL_UART_Transmit+0x96>
 800757c:	4617      	mov	r7, r2
 800757e:	2a00      	cmp	r2, #0
 8007580:	d03d      	beq.n	80075fe <HAL_UART_Transmit+0x96>
 8007582:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8007584:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007588:	2b01      	cmp	r3, #1
 800758a:	d05d      	beq.n	8007648 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800758c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800758e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	f04f 0900 	mov.w	r9, #0
 8007594:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8007598:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800759c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80075a0:	f7ff f8fa 	bl	8006798 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a4:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80075a6:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80075ac:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80075ae:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b0:	d04d      	beq.n	800764e <HAL_UART_Transmit+0xe6>
    while (huart->TxXferCount > 0U)
 80075b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80075b4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80075b6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80075b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d058      	beq.n	8007672 <HAL_UART_Transmit+0x10a>
 80075c0:	6822      	ldr	r2, [r4, #0]
 80075c2:	1c69      	adds	r1, r5, #1
 80075c4:	d11e      	bne.n	8007604 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	061b      	lsls	r3, r3, #24
 80075ca:	d5fc      	bpl.n	80075c6 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80075cc:	f1b8 0f00 	cmp.w	r8, #0
 80075d0:	d035      	beq.n	800763e <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d2:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075d6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80075d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29b      	uxth	r3, r3
 80075de:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1ec      	bne.n	80075c2 <HAL_UART_Transmit+0x5a>
 80075e8:	1c68      	adds	r0, r5, #1
 80075ea:	d136      	bne.n	800765a <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ec:	6813      	ldr	r3, [r2, #0]
 80075ee:	0659      	lsls	r1, r3, #25
 80075f0:	d5fc      	bpl.n	80075ec <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80075f2:	2320      	movs	r3, #32
 80075f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80075f8:	2000      	movs	r0, #0
}
 80075fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80075fe:	2001      	movs	r0, #1
}
 8007600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	061f      	lsls	r7, r3, #24
 8007608:	d4e0      	bmi.n	80075cc <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800760a:	b12d      	cbz	r5, 8007618 <HAL_UART_Transmit+0xb0>
 800760c:	f7ff f8c4 	bl	8006798 <HAL_GetTick>
 8007610:	1b80      	subs	r0, r0, r6
 8007612:	4285      	cmp	r5, r0
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	d2d4      	bcs.n	80075c2 <HAL_UART_Transmit+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007618:	68d3      	ldr	r3, [r2, #12]
 800761a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800761e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007622:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007624:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8007628:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800762c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8007630:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8007634:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8007638:	2003      	movs	r0, #3
}
 800763a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800763e:	f839 3b02 	ldrh.w	r3, [r9], #2
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	e7c6      	b.n	80075d6 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8007648:	2002      	movs	r0, #2
}
 800764a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1ae      	bne.n	80075b2 <HAL_UART_Transmit+0x4a>
 8007654:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8007656:	4698      	mov	r8, r3
 8007658:	e7ab      	b.n	80075b2 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765a:	6813      	ldr	r3, [r2, #0]
 800765c:	065b      	lsls	r3, r3, #25
 800765e:	d4c8      	bmi.n	80075f2 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007660:	2d00      	cmp	r5, #0
 8007662:	d0d9      	beq.n	8007618 <HAL_UART_Transmit+0xb0>
 8007664:	f7ff f898 	bl	8006798 <HAL_GetTick>
 8007668:	1b80      	subs	r0, r0, r6
 800766a:	4285      	cmp	r5, r0
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	d2bb      	bcs.n	80075e8 <HAL_UART_Transmit+0x80>
 8007670:	e7d2      	b.n	8007618 <HAL_UART_Transmit+0xb0>
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	e7b8      	b.n	80075e8 <HAL_UART_Transmit+0x80>
 8007676:	bf00      	nop

08007678 <HAL_UART_Receive>:
{
 8007678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800767c:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800767e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8007682:	2820      	cmp	r0, #32
 8007684:	d173      	bne.n	800776e <HAL_UART_Receive+0xf6>
    if ((pData == NULL) || (Size == 0U))
 8007686:	4688      	mov	r8, r1
 8007688:	2900      	cmp	r1, #0
 800768a:	d046      	beq.n	800771a <HAL_UART_Receive+0xa2>
 800768c:	4617      	mov	r7, r2
 800768e:	2a00      	cmp	r2, #0
 8007690:	d043      	beq.n	800771a <HAL_UART_Receive+0xa2>
 8007692:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8007694:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d068      	beq.n	800776e <HAL_UART_Receive+0xf6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800769e:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 80076a2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 80076a8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    tickstart = HAL_GetTick();
 80076b4:	f7ff f870 	bl	8006798 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b8:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80076ba:	85a7      	strh	r7, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80076c0:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 80076c2:	85e7      	strh	r7, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	d056      	beq.n	8007774 <HAL_UART_Receive+0xfc>
    while (huart->RxXferCount > 0U)
 80076c6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 80076c8:	2200      	movs	r2, #0
    while (huart->RxXferCount > 0U)
 80076ca:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80076cc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80076d0:	b1eb      	cbz	r3, 800770e <HAL_UART_Receive+0x96>
 80076d2:	1c68      	adds	r0, r5, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	d123      	bne.n	8007720 <HAL_UART_Receive+0xa8>
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	0699      	lsls	r1, r3, #26
 80076dc:	d5fc      	bpl.n	80076d8 <HAL_UART_Receive+0x60>
      if (pdata8bits == NULL)
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	d03e      	beq.n	8007762 <HAL_UART_Receive+0xea>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076e4:	68a3      	ldr	r3, [r4, #8]
 80076e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ea:	d004      	beq.n	80076f6 <HAL_UART_Receive+0x7e>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d134      	bne.n	800775a <HAL_UART_Receive+0xe2>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d131      	bne.n	800775a <HAL_UART_Receive+0xe2>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076f6:	6853      	ldr	r3, [r2, #4]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f808 3b01 	strb.w	r3, [r8], #1
      huart->RxXferCount--;
 80076fe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8007700:	3a01      	subs	r2, #1
 8007702:	b292      	uxth	r2, r2
 8007704:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007706:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e1      	bne.n	80076d2 <HAL_UART_Receive+0x5a>
    huart->RxState = HAL_UART_STATE_READY;
 800770e:	2320      	movs	r3, #32
 8007710:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8007714:	2000      	movs	r0, #0
}
 8007716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800771a:	2001      	movs	r0, #1
}
 800771c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007720:	6813      	ldr	r3, [r2, #0]
 8007722:	069b      	lsls	r3, r3, #26
 8007724:	d4db      	bmi.n	80076de <HAL_UART_Receive+0x66>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007726:	b12d      	cbz	r5, 8007734 <HAL_UART_Receive+0xbc>
 8007728:	f7ff f836 	bl	8006798 <HAL_GetTick>
 800772c:	1b80      	subs	r0, r0, r6
 800772e:	4285      	cmp	r5, r0
 8007730:	d2cf      	bcs.n	80076d2 <HAL_UART_Receive+0x5a>
 8007732:	6822      	ldr	r2, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007734:	68d3      	ldr	r3, [r2, #12]
 8007736:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800773a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800773e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8007744:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007746:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007748:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800774c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8007750:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        return HAL_TIMEOUT;
 8007754:	2003      	movs	r0, #3
}
 8007756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800775a:	6853      	ldr	r3, [r2, #4]
 800775c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007760:	e7cb      	b.n	80076fa <HAL_UART_Receive+0x82>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007762:	6853      	ldr	r3, [r2, #4]
 8007764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007768:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 800776c:	e7c7      	b.n	80076fe <HAL_UART_Receive+0x86>
    return HAL_BUSY;
 800776e:	2002      	movs	r0, #2
}
 8007770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1a5      	bne.n	80076c6 <HAL_UART_Receive+0x4e>
 800777a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800777c:	4698      	mov	r8, r3
 800777e:	e7a2      	b.n	80076c6 <HAL_UART_Receive+0x4e>

08007780 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007780:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007784:	2b20      	cmp	r3, #32
 8007786:	d123      	bne.n	80077d0 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8007788:	b301      	cbz	r1, 80077cc <HAL_UART_Receive_IT+0x4c>
 800778a:	b1fa      	cbz	r2, 80077cc <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 800778c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d01d      	beq.n	80077d0 <HAL_UART_Receive_IT+0x50>
{
 8007794:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007796:	2300      	movs	r3, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007798:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779a:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800779c:	2522      	movs	r5, #34	; 0x22
  huart->RxXferCount = Size;
 800779e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  __HAL_UNLOCK(huart);
 80077a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a4:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077a6:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077aa:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 80077ac:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077ae:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 80077b2:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077b4:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077b6:	6962      	ldr	r2, [r4, #20]
 80077b8:	f042 0201 	orr.w	r2, r2, #1
 80077bc:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077be:	68e2      	ldr	r2, [r4, #12]
 80077c0:	f042 0220 	orr.w	r2, r2, #32
    return(UART_Start_Receive_IT(huart, pData, Size));
 80077c4:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077c6:	60e2      	str	r2, [r4, #12]
}
 80077c8:	bc30      	pop	{r4, r5}
 80077ca:	4770      	bx	lr
      return HAL_ERROR;
 80077cc:	2001      	movs	r0, #1
 80077ce:	4770      	bx	lr
    return HAL_BUSY;
 80077d0:	2002      	movs	r0, #2
}
 80077d2:	4770      	bx	lr

080077d4 <HAL_UART_TxCpltCallback>:
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop

080077d8 <HAL_UART_RxCpltCallback>:
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop

080077dc <HAL_UART_ErrorCallback>:
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <UART_DMAAbortOnError>:
{
 80077e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077e8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80077ea:	f7ff fff7 	bl	80077dc <HAL_UART_ErrorCallback>
}
 80077ee:	bd08      	pop	{r3, pc}

080077f0 <HAL_UARTEx_RxEventCallback>:
}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop

080077f4 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f4:	6883      	ldr	r3, [r0, #8]
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80077fa:	b510      	push	{r4, lr}
 80077fc:	4604      	mov	r4, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fe:	d02f      	beq.n	8007860 <UART_Receive_IT.part.0+0x6c>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007800:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007802:	b333      	cbz	r3, 8007852 <UART_Receive_IT.part.0+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800780e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007810:	3301      	adds	r3, #1
 8007812:	62a3      	str	r3, [r4, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007814:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007816:	3b01      	subs	r3, #1
 8007818:	b29b      	uxth	r3, r3
 800781a:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800781c:	b9bb      	cbnz	r3, 800784e <UART_Receive_IT.part.0+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	f022 0220 	bic.w	r2, r2, #32
 8007826:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800782e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007830:	695a      	ldr	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007832:	2120      	movs	r1, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800783a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800783e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007840:	2a01      	cmp	r2, #1
 8007842:	d01d      	beq.n	8007880 <UART_Receive_IT.part.0+0x8c>
       HAL_UART_RxCpltCallback(huart);
 8007844:	4620      	mov	r0, r4
 8007846:	f7ff ffc7 	bl	80077d8 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	2300      	movs	r3, #0
 800784c:	6323      	str	r3, [r4, #48]	; 0x30
}
 800784e:	2000      	movs	r0, #0
 8007850:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1d5      	bne.n	8007804 <UART_Receive_IT.part.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	7013      	strb	r3, [r2, #0]
 800785e:	e7d6      	b.n	800780e <UART_Receive_IT.part.0+0x1a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007860:	6903      	ldr	r3, [r0, #16]
 8007862:	b943      	cbnz	r3, 8007876 <UART_Receive_IT.part.0+0x82>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007864:	6802      	ldr	r2, [r0, #0]
 8007866:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007868:	6852      	ldr	r2, [r2, #4]
 800786a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800786e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8007872:	6283      	str	r3, [r0, #40]	; 0x28
 8007874:	e7ce      	b.n	8007814 <UART_Receive_IT.part.0+0x20>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007876:	6823      	ldr	r3, [r4, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007878:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	7013      	strb	r3, [r2, #0]
 800787e:	e7c6      	b.n	800780e <UART_Receive_IT.part.0+0x1a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007882:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	f022 0210 	bic.w	r2, r2, #16
 8007888:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800788a:	4620      	mov	r0, r4
 800788c:	f7ff ffb0 	bl	80077f0 <HAL_UARTEx_RxEventCallback>
 8007890:	e7db      	b.n	800784a <UART_Receive_IT.part.0+0x56>
 8007892:	bf00      	nop

08007894 <HAL_UART_IRQHandler>:
{
 8007894:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007896:	6803      	ldr	r3, [r0, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800789a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800789c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800789e:	0716      	lsls	r6, r2, #28
{
 80078a0:	b082      	sub	sp, #8
 80078a2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80078a4:	d14f      	bne.n	8007946 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078a6:	0696      	lsls	r6, r2, #26
 80078a8:	d502      	bpl.n	80078b0 <HAL_UART_IRQHandler+0x1c>
 80078aa:	068d      	lsls	r5, r1, #26
 80078ac:	f100 8091 	bmi.w	80079d2 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80078b2:	2801      	cmp	r0, #1
 80078b4:	d00b      	beq.n	80078ce <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078b6:	0616      	lsls	r6, r2, #24
 80078b8:	d502      	bpl.n	80078c0 <HAL_UART_IRQHandler+0x2c>
 80078ba:	060d      	lsls	r5, r1, #24
 80078bc:	f100 8093 	bmi.w	80079e6 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078c0:	0650      	lsls	r0, r2, #25
 80078c2:	d502      	bpl.n	80078ca <HAL_UART_IRQHandler+0x36>
 80078c4:	064a      	lsls	r2, r1, #25
 80078c6:	f100 80ac 	bmi.w	8007a22 <HAL_UART_IRQHandler+0x18e>
}
 80078ca:	b002      	add	sp, #8
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80078ce:	06d5      	lsls	r5, r2, #27
 80078d0:	d5f1      	bpl.n	80078b6 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80078d2:	06c8      	lsls	r0, r1, #27
 80078d4:	d5ef      	bpl.n	80078b6 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078d6:	2100      	movs	r1, #0
 80078d8:	9101      	str	r1, [sp, #4]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80078ea:	f000 80d3 	beq.w	8007a94 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80078f0:	6802      	ldr	r2, [r0, #0]
 80078f2:	6852      	ldr	r2, [r2, #4]
 80078f4:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d0e7      	beq.n	80078ca <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80078fa:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80078fc:	4295      	cmp	r5, r2
 80078fe:	d9e4      	bls.n	80078ca <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007900:	69c6      	ldr	r6, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8007902:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007904:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8007908:	d016      	beq.n	8007938 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007910:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007912:	695a      	ldr	r2, [r3, #20]
 8007914:	f022 0201 	bic.w	r2, r2, #1
 8007918:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791a:	695a      	ldr	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800791c:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007922:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8007924:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007928:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	f022 0210 	bic.w	r2, r2, #16
 8007930:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007932:	f7ff f845 	bl	80069c0 <HAL_DMA_Abort>
 8007936:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007938:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800793a:	1a69      	subs	r1, r5, r1
 800793c:	b289      	uxth	r1, r1
 800793e:	4620      	mov	r0, r4
 8007940:	f7ff ff56 	bl	80077f0 <HAL_UARTEx_RxEventCallback>
 8007944:	e7c1      	b.n	80078ca <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007946:	f005 0501 	and.w	r5, r5, #1
 800794a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800794e:	4328      	orrs	r0, r5
 8007950:	d0ae      	beq.n	80078b0 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007952:	07d0      	lsls	r0, r2, #31
 8007954:	d505      	bpl.n	8007962 <HAL_UART_IRQHandler+0xce>
 8007956:	05ce      	lsls	r6, r1, #23
 8007958:	d503      	bpl.n	8007962 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800795a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800795c:	f040 0001 	orr.w	r0, r0, #1
 8007960:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007962:	0750      	lsls	r0, r2, #29
 8007964:	d52c      	bpl.n	80079c0 <HAL_UART_IRQHandler+0x12c>
 8007966:	b12d      	cbz	r5, 8007974 <HAL_UART_IRQHandler+0xe0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007968:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800796a:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800796c:	f040 0002 	orr.w	r0, r0, #2
 8007970:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007972:	d429      	bmi.n	80079c8 <HAL_UART_IRQHandler+0x134>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007974:	0716      	lsls	r6, r2, #28
 8007976:	d507      	bpl.n	8007988 <HAL_UART_IRQHandler+0xf4>
 8007978:	f001 0020 	and.w	r0, r1, #32
 800797c:	4328      	orrs	r0, r5
 800797e:	d003      	beq.n	8007988 <HAL_UART_IRQHandler+0xf4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007980:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007982:	f040 0008 	orr.w	r0, r0, #8
 8007986:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007988:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800798a:	2800      	cmp	r0, #0
 800798c:	d09d      	beq.n	80078ca <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800798e:	0690      	lsls	r0, r2, #26
 8007990:	d509      	bpl.n	80079a6 <HAL_UART_IRQHandler+0x112>
 8007992:	068a      	lsls	r2, r1, #26
 8007994:	d507      	bpl.n	80079a6 <HAL_UART_IRQHandler+0x112>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007996:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800799a:	2a22      	cmp	r2, #34	; 0x22
 800799c:	d103      	bne.n	80079a6 <HAL_UART_IRQHandler+0x112>
 800799e:	4620      	mov	r0, r4
 80079a0:	f7ff ff28 	bl	80077f4 <UART_Receive_IT.part.0>
 80079a4:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079a6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079a8:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ae:	f005 0508 	and.w	r5, r5, #8
 80079b2:	4315      	orrs	r5, r2
 80079b4:	d140      	bne.n	8007a38 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff ff10 	bl	80077dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079bc:	6425      	str	r5, [r4, #64]	; 0x40
 80079be:	e784      	b.n	80078ca <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079c0:	0790      	lsls	r0, r2, #30
 80079c2:	d5d7      	bpl.n	8007974 <HAL_UART_IRQHandler+0xe0>
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	d0d5      	beq.n	8007974 <HAL_UART_IRQHandler+0xe0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80079ca:	f040 0004 	orr.w	r0, r0, #4
 80079ce:	6420      	str	r0, [r4, #64]	; 0x40
 80079d0:	e7d0      	b.n	8007974 <HAL_UART_IRQHandler+0xe0>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079d2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80079d6:	2b22      	cmp	r3, #34	; 0x22
 80079d8:	f47f af77 	bne.w	80078ca <HAL_UART_IRQHandler+0x36>
}
 80079dc:	b002      	add	sp, #8
 80079de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079e2:	f7ff bf07 	b.w	80077f4 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80079ea:	2a21      	cmp	r2, #33	; 0x21
 80079ec:	f47f af6d 	bne.w	80078ca <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f0:	68a2      	ldr	r2, [r4, #8]
 80079f2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80079f6:	d06e      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079f8:	6a22      	ldr	r2, [r4, #32]
 80079fa:	1c51      	adds	r1, r2, #1
 80079fc:	6221      	str	r1, [r4, #32]
 80079fe:	7812      	ldrb	r2, [r2, #0]
 8007a00:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8007a02:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007a04:	3a01      	subs	r2, #1
 8007a06:	b292      	uxth	r2, r2
 8007a08:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	f47f af5d 	bne.w	80078ca <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a16:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1e:	60da      	str	r2, [r3, #12]
 8007a20:	e753      	b.n	80078ca <HAL_UART_IRQHandler+0x36>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a22:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007a24:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2a:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007a2c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8007a2e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8007a32:	f7ff fecf 	bl	80077d4 <HAL_UART_TxCpltCallback>
    return;
 8007a36:	e748      	b.n	80078ca <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a4a:	2a01      	cmp	r2, #1
 8007a4c:	d103      	bne.n	8007a56 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	f022 0210 	bic.w	r2, r2, #16
 8007a54:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007a58:	2120      	movs	r1, #32
 8007a5a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	695a      	ldr	r2, [r3, #20]
 8007a62:	0656      	lsls	r6, r2, #25
 8007a64:	d512      	bpl.n	8007a8c <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a66:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007a68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a6e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007a70:	b160      	cbz	r0, 8007a8c <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a72:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <HAL_UART_IRQHandler+0x258>)
 8007a74:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a76:	f7fe ffeb 	bl	8006a50 <HAL_DMA_Abort_IT>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	f43f af25 	beq.w	80078ca <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a80:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a82:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8007a84:	b002      	add	sp, #8
 8007a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a8a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff fea5 	bl	80077dc <HAL_UART_ErrorCallback>
 8007a92:	e71a      	b.n	80078ca <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a94:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8007a96:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007a98:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a9a:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	f43f af14 	beq.w	80078ca <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007aa4:	1a08      	subs	r0, r1, r0
 8007aa6:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	f43f af0e 	beq.w	80078ca <HAL_UART_IRQHandler+0x36>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aae:	68d8      	ldr	r0, [r3, #12]
 8007ab0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8007ab4:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab6:	6958      	ldr	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007ab8:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	f020 0001 	bic.w	r0, r0, #1
 8007abe:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac4:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	f022 0210 	bic.w	r2, r2, #16
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007acc:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ace:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ad0:	f7ff fe8e 	bl	80077f0 <HAL_UARTEx_RxEventCallback>
 8007ad4:	e6f9      	b.n	80078ca <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad6:	6922      	ldr	r2, [r4, #16]
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	d18d      	bne.n	80079f8 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007adc:	6a22      	ldr	r2, [r4, #32]
 8007ade:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007ae2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007ae6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ae8:	6222      	str	r2, [r4, #32]
 8007aea:	e78a      	b.n	8007a02 <HAL_UART_IRQHandler+0x16e>
 8007aec:	080077e1 	.word	0x080077e1

08007af0 <__libc_init_array>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4d0d      	ldr	r5, [pc, #52]	; (8007b28 <__libc_init_array+0x38>)
 8007af4:	4c0d      	ldr	r4, [pc, #52]	; (8007b2c <__libc_init_array+0x3c>)
 8007af6:	1b64      	subs	r4, r4, r5
 8007af8:	10a4      	asrs	r4, r4, #2
 8007afa:	2600      	movs	r6, #0
 8007afc:	42a6      	cmp	r6, r4
 8007afe:	d109      	bne.n	8007b14 <__libc_init_array+0x24>
 8007b00:	4d0b      	ldr	r5, [pc, #44]	; (8007b30 <__libc_init_array+0x40>)
 8007b02:	4c0c      	ldr	r4, [pc, #48]	; (8007b34 <__libc_init_array+0x44>)
 8007b04:	f000 f82e 	bl	8007b64 <_init>
 8007b08:	1b64      	subs	r4, r4, r5
 8007b0a:	10a4      	asrs	r4, r4, #2
 8007b0c:	2600      	movs	r6, #0
 8007b0e:	42a6      	cmp	r6, r4
 8007b10:	d105      	bne.n	8007b1e <__libc_init_array+0x2e>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b18:	4798      	blx	r3
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7ee      	b.n	8007afc <__libc_init_array+0xc>
 8007b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b22:	4798      	blx	r3
 8007b24:	3601      	adds	r6, #1
 8007b26:	e7f2      	b.n	8007b0e <__libc_init_array+0x1e>
 8007b28:	0800943c 	.word	0x0800943c
 8007b2c:	0800943c 	.word	0x0800943c
 8007b30:	0800943c 	.word	0x0800943c
 8007b34:	08009440 	.word	0x08009440

08007b38 <memcpy>:
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b40:	d100      	bne.n	8007b44 <memcpy+0xc>
 8007b42:	4770      	bx	lr
 8007b44:	b510      	push	{r4, lr}
 8007b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	d1f9      	bne.n	8007b46 <memcpy+0xe>
 8007b52:	bd10      	pop	{r4, pc}

08007b54 <memset>:
 8007b54:	4402      	add	r2, r0
 8007b56:	4603      	mov	r3, r0
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d100      	bne.n	8007b5e <memset+0xa>
 8007b5c:	4770      	bx	lr
 8007b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b62:	e7f9      	b.n	8007b58 <memset+0x4>

08007b64 <_init>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	bf00      	nop
 8007b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6a:	bc08      	pop	{r3}
 8007b6c:	469e      	mov	lr, r3
 8007b6e:	4770      	bx	lr

08007b70 <_fini>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr
