
new_hope_sca_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  08000200  08000200  00010200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b0  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c4  0800a8c4  0002080c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8cc  0800a8cc  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d0  0800a8d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000080c  20000000  0800a8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000080c  0800b0e0  0002080c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  0800b0e0  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b448  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f6  00000000  00000000  0002bc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002e180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f342  00000000  00000000  0002f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccfe  00000000  00000000  0004e64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb07a  00000000  00000000  0005b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001163c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000217c  00000000  00000000  00116418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000080c 	.word	0x2000080c
 800021c:	00000000 	.word	0x00000000
 8000220:	080097fc 	.word	0x080097fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000810 	.word	0x20000810
 800023c:	080097fc 	.word	0x080097fc
	...

08000300 <KeccakF1600_Initialize>:
@ void KeccakF1600_Initialize( void )
@
.align 8
.global   KeccakF1600_Initialize
KeccakF1600_Initialize:
	bx		lr
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	f3af 8000 	nop.w
 8000308:	f3af 8000 	nop.w
 800030c:	f3af 8000 	nop.w
 8000310:	f3af 8000 	nop.w
 8000314:	f3af 8000 	nop.w
 8000318:	f3af 8000 	nop.w
 800031c:	f3af 8000 	nop.w
 8000320:	f3af 8000 	nop.w
 8000324:	f3af 8000 	nop.w
 8000328:	f3af 8000 	nop.w
 800032c:	f3af 8000 	nop.w
 8000330:	f3af 8000 	nop.w
 8000334:	f3af 8000 	nop.w
 8000338:	f3af 8000 	nop.w
 800033c:	f3af 8000 	nop.w
	...

08000400 <KeccakF1600_StateInitialize>:
@ void KeccakF1600_StateInitialize(void *state)
@
.align 8
.global   KeccakF1600_StateInitialize
KeccakF1600_StateInitialize:
	push	{r4 - r5}
 8000400:	b430      	push	{r4, r5}

	movs	r1, #0
 8000402:	2100      	movs	r1, #0
	movs	r2, #0
 8000404:	2200      	movs	r2, #0
	movs	r3, #0
 8000406:	2300      	movs	r3, #0
	movs	r4, #0
 8000408:	2400      	movs	r4, #0
	movs	r5, #0
 800040a:	2500      	movs	r5, #0
	stmia	r0!, { r1 - r5 }
 800040c:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800040e:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000410:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000412:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000414:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000416:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 8000418:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800041a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800041c:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
	stmia	r0!, { r1 - r5 }
 800041e:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}

	pop		{r4 - r5}
 8000420:	bc30      	pop	{r4, r5}
	bx		lr
 8000422:	4770      	bx	lr
 8000424:	f3af 8000 	nop.w
 8000428:	f3af 8000 	nop.w
 800042c:	f3af 8000 	nop.w
 8000430:	f3af 8000 	nop.w
 8000434:	f3af 8000 	nop.w
 8000438:	f3af 8000 	nop.w
 800043c:	f3af 8000 	nop.w
	...

08000500 <KeccakF1600_StateComplementBit>:
@	void KeccakF1600_StateComplementBit(void *state, unsigned int position)
@
.align 8
.global   KeccakF1600_StateComplementBit
KeccakF1600_StateComplementBit:
	push	{r4, lr}
 8000500:	b510      	push	{r4, lr}
	movs	r3, #1
 8000502:	2301      	movs	r3, #1
	ands	r3, r3, r1
 8000504:	400b      	ands	r3, r1
	lsrs	r2, r1, #6
 8000506:	098a      	lsrs	r2, r1, #6
	lsls	r4, r3, #2
 8000508:	009c      	lsls	r4, r3, #2
	adds	r0, r0, r4
 800050a:	1900      	adds	r0, r0, r4
	lsls	r4, r2, #3
 800050c:	00d4      	lsls	r4, r2, #3
	adds	r0, r0, r4
 800050e:	1900      	adds	r0, r0, r4
	lsls	r3, r1, #32-6
 8000510:	068b      	lsls	r3, r1, #26
	lsrs	r3, r3, #32-5
 8000512:	0edb      	lsrs	r3, r3, #27
	movs	r2, #1
 8000514:	2201      	movs	r2, #1
	lsls	r2, r2, r3
 8000516:	409a      	lsls	r2, r3
	ldr		r3, [r0]
 8000518:	6803      	ldr	r3, [r0, #0]
	eors	r3, r3, r2
 800051a:	4053      	eors	r3, r2
	str		r3, [r0]
 800051c:	6003      	str	r3, [r0, #0]
	pop		{r4, pc}
 800051e:	bd10      	pop	{r4, pc}
	bx		lr
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	f3af 8000 	nop.w
 8000528:	f3af 8000 	nop.w
 800052c:	f3af 8000 	nop.w
 8000530:	f3af 8000 	nop.w
 8000534:	f3af 8000 	nop.w
 8000538:	f3af 8000 	nop.w
 800053c:	f3af 8000 	nop.w
	...

08000600 <KeccakF1600_StateXORBytes>:
@ void KeccakF1600_StateXORBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateXORBytes
KeccakF1600_StateXORBytes:
	cmp		r3, #0									@ .if length != 0
 8000600:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateXORBytes_Exit1
 8000602:	d02b      	beq.n	800065c <KeccakF1600_StateXORBytes_Exit1>
	push	{r4 - r6, lr}							@ then
 8000604:	b570      	push	{r4, r5, r6, lr}
	mov		r4, r8
 8000606:	4644      	mov	r4, r8
	mov		r5, r9
 8000608:	464d      	mov	r5, r9
	mov		r6, r10
 800060a:	4656      	mov	r6, sl
	push	{r4 - r7}
 800060c:	b4f0      	push	{r4, r5, r6, r7}
	lsrs	r4, r2, #3								@ offset &= ~7
 800060e:	08d4      	lsrs	r4, r2, #3
	lsls	r4, r4, #3
 8000610:	00e4      	lsls	r4, r4, #3
	adds	r0, r0, r4								@ add whole lane offset to state pointer
 8000612:	1900      	adds	r0, r0, r4
	lsls	r2, r2, #29								@ offset &= 7 (part not lane aligned)
 8000614:	0752      	lsls	r2, r2, #29
	lsrs	r2, r2, #29
 8000616:	0f52      	lsrs	r2, r2, #29
	beq		KeccakF1600_StateXORBytes_CheckLanes	@ .if offset != 0
 8000618:	d00c      	beq.n	8000634 <KeccakF1600_StateXORBytes_CheckLanes>
	movs	r4, r3									@ then, do remaining bytes in first lane
 800061a:	001c      	movs	r4, r3
	movs	r5, #8
 800061c:	2508      	movs	r5, #8
	subs	r5, r2									@ max size in lane = 8 - offset
 800061e:	1aad      	subs	r5, r5, r2
	cmp		r4, r5
 8000620:	42ac      	cmp	r4, r5
	ble		KeccakF1600_StateXORBytes_BytesAlign
 8000622:	dd00      	ble.n	8000626 <KeccakF1600_StateXORBytes_BytesAlign>
	movs	r4, r5
 8000624:	002c      	movs	r4, r5

08000626 <KeccakF1600_StateXORBytes_BytesAlign>:
KeccakF1600_StateXORBytes_BytesAlign:
	subs	r3, r3, r4								@ size left
 8000626:	1b1b      	subs	r3, r3, r4
	mov		r10, r3
 8000628:	469a      	mov	sl, r3
	movs	r3, r4
 800062a:	0023      	movs	r3, r4
	adr		r7, KeccakF1600_StateXORBytes_ToBitInterleavingConstants
 800062c:	a70c      	add	r7, pc, #48	; (adr r7, 8000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>)
	bl		__KeccakF1600_StateXORBytesInLane
 800062e:	f000 f967 	bl	8000900 <__KeccakF1600_StateXORBytesInLane>
	mov		r3, r10
 8000632:	4653      	mov	r3, sl

08000634 <KeccakF1600_StateXORBytes_CheckLanes>:
KeccakF1600_StateXORBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
 8000634:	08da      	lsrs	r2, r3, #3
	beq		KeccakF1600_StateXORBytes_Bytes
 8000636:	d006      	beq.n	8000646 <KeccakF1600_StateXORBytes_Bytes>
	mov		r10, r3
 8000638:	469a      	mov	sl, r3
	adr		r3, KeccakF1600_StateXORBytes_ToBitInterleavingConstants
 800063a:	a309      	add	r3, pc, #36	; (adr r3, 8000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>)
	bl		__KeccakF1600_StateXORLanes
 800063c:	f000 f860 	bl	8000700 <__KeccakF1600_StateXORLanes>
	mov		r3, r10
 8000640:	4653      	mov	r3, sl
	lsls	r3, r3, #29
 8000642:	075b      	lsls	r3, r3, #29
	lsrs	r3, r3, #29
 8000644:	0f5b      	lsrs	r3, r3, #29

08000646 <KeccakF1600_StateXORBytes_Bytes>:
KeccakF1600_StateXORBytes_Bytes:
	cmp		r3, #0
 8000646:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateXORBytes_Exit
 8000648:	d003      	beq.n	8000652 <KeccakF1600_StateXORBytes_Exit>
	movs	r2, #0
 800064a:	2200      	movs	r2, #0
	adr		r7, KeccakF1600_StateXORBytes_ToBitInterleavingConstants
 800064c:	a704      	add	r7, pc, #16	; (adr r7, 8000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>)
	bl		__KeccakF1600_StateXORBytesInLane
 800064e:	f000 f957 	bl	8000900 <__KeccakF1600_StateXORBytesInLane>

08000652 <KeccakF1600_StateXORBytes_Exit>:
KeccakF1600_StateXORBytes_Exit:
	pop		{r4 - r7}
 8000652:	bcf0      	pop	{r4, r5, r6, r7}
	mov		r8, r4
 8000654:	46a0      	mov	r8, r4
	mov		r9, r5
 8000656:	46a9      	mov	r9, r5
	mov		r10, r6
 8000658:	46b2      	mov	sl, r6
	pop		{r4 - r6, pc}
 800065a:	bd70      	pop	{r4, r5, r6, pc}

0800065c <KeccakF1600_StateXORBytes_Exit1>:
KeccakF1600_StateXORBytes_Exit1:
	bx		lr
 800065c:	4770      	bx	lr
	nop
 800065e:	bf00      	nop

08000660 <KeccakF1600_StateXORBytes_ToBitInterleavingConstants>:
 8000660:	55555555 	.word	0x55555555
 8000664:	33333333 	.word	0x33333333
 8000668:	0f0f0f0f 	.word	0x0f0f0f0f
 800066c:	00ff00ff 	.word	0x00ff00ff
 8000670:	aaaaaaaa 	.word	0xaaaaaaaa
 8000674:	cccccccc 	.word	0xcccccccc
 8000678:	f0f0f0f0 	.word	0xf0f0f0f0
 800067c:	ff00ff00 	.word	0xff00ff00
	...

08000700 <__KeccakF1600_StateXORLanes>:
@
@  Changed: r2-r9
@
.align 8
__KeccakF1600_StateXORLanes:
	lsls	r4, r1, #30
 8000700:	078c      	lsls	r4, r1, #30
	bne		__KeccakF1600_StateXORLanes_LoopUnaligned
 8000702:	d156      	bne.n	80007b2 <__KeccakF1600_StateXORLanes_LoopUnaligned>

08000704 <__KeccakF1600_StateXORLanes_LoopAligned>:
__KeccakF1600_StateXORLanes_LoopAligned:
	ldmia	r1!, {r6,r7}
 8000704:	c9c0      	ldmia	r1!, {r6, r7}
	mov		r8, r6
 8000706:	46b0      	mov	r8, r6
	mov		r9, r7
 8000708:	46b9      	mov	r9, r7
	toBitInterleaving	r8, r9, r6, r7, r5, r4, r3
 800070a:	4646      	mov	r6, r8
 800070c:	681d      	ldr	r5, [r3, #0]
 800070e:	402e      	ands	r6, r5
 8000710:	0875      	lsrs	r5, r6, #1
 8000712:	432e      	orrs	r6, r5
 8000714:	685d      	ldr	r5, [r3, #4]
 8000716:	402e      	ands	r6, r5
 8000718:	08b5      	lsrs	r5, r6, #2
 800071a:	432e      	orrs	r6, r5
 800071c:	689d      	ldr	r5, [r3, #8]
 800071e:	402e      	ands	r6, r5
 8000720:	0935      	lsrs	r5, r6, #4
 8000722:	432e      	orrs	r6, r5
 8000724:	68dd      	ldr	r5, [r3, #12]
 8000726:	402e      	ands	r6, r5
 8000728:	0a35      	lsrs	r5, r6, #8
 800072a:	432e      	orrs	r6, r5
 800072c:	464f      	mov	r7, r9
 800072e:	681d      	ldr	r5, [r3, #0]
 8000730:	402f      	ands	r7, r5
 8000732:	087d      	lsrs	r5, r7, #1
 8000734:	432f      	orrs	r7, r5
 8000736:	685d      	ldr	r5, [r3, #4]
 8000738:	402f      	ands	r7, r5
 800073a:	08bd      	lsrs	r5, r7, #2
 800073c:	432f      	orrs	r7, r5
 800073e:	689d      	ldr	r5, [r3, #8]
 8000740:	402f      	ands	r7, r5
 8000742:	093d      	lsrs	r5, r7, #4
 8000744:	432f      	orrs	r7, r5
 8000746:	68dd      	ldr	r5, [r3, #12]
 8000748:	402f      	ands	r7, r5
 800074a:	0a3d      	lsrs	r5, r7, #8
 800074c:	432f      	orrs	r7, r5
 800074e:	0436      	lsls	r6, r6, #16
 8000750:	0c36      	lsrs	r6, r6, #16
 8000752:	043f      	lsls	r7, r7, #16
 8000754:	433e      	orrs	r6, r7
 8000756:	4647      	mov	r7, r8
 8000758:	691d      	ldr	r5, [r3, #16]
 800075a:	402f      	ands	r7, r5
 800075c:	007d      	lsls	r5, r7, #1
 800075e:	432f      	orrs	r7, r5
 8000760:	695d      	ldr	r5, [r3, #20]
 8000762:	402f      	ands	r7, r5
 8000764:	00bd      	lsls	r5, r7, #2
 8000766:	432f      	orrs	r7, r5
 8000768:	699d      	ldr	r5, [r3, #24]
 800076a:	402f      	ands	r7, r5
 800076c:	013d      	lsls	r5, r7, #4
 800076e:	432f      	orrs	r7, r5
 8000770:	69dd      	ldr	r5, [r3, #28]
 8000772:	402f      	ands	r7, r5
 8000774:	023d      	lsls	r5, r7, #8
 8000776:	432f      	orrs	r7, r5
 8000778:	464c      	mov	r4, r9
 800077a:	691d      	ldr	r5, [r3, #16]
 800077c:	402c      	ands	r4, r5
 800077e:	0065      	lsls	r5, r4, #1
 8000780:	432c      	orrs	r4, r5
 8000782:	695d      	ldr	r5, [r3, #20]
 8000784:	402c      	ands	r4, r5
 8000786:	00a5      	lsls	r5, r4, #2
 8000788:	432c      	orrs	r4, r5
 800078a:	699d      	ldr	r5, [r3, #24]
 800078c:	402c      	ands	r4, r5
 800078e:	0125      	lsls	r5, r4, #4
 8000790:	432c      	orrs	r4, r5
 8000792:	69dd      	ldr	r5, [r3, #28]
 8000794:	402c      	ands	r4, r5
 8000796:	0225      	lsls	r5, r4, #8
 8000798:	432c      	orrs	r4, r5
 800079a:	0c3f      	lsrs	r7, r7, #16
 800079c:	0c24      	lsrs	r4, r4, #16
 800079e:	0424      	lsls	r4, r4, #16
 80007a0:	4327      	orrs	r7, r4
	ldr     r5, [r0]
 80007a2:	6805      	ldr	r5, [r0, #0]
	eors	r6, r6, r5
 80007a4:	406e      	eors	r6, r5
	ldr     r5, [r0, #4]
 80007a6:	6845      	ldr	r5, [r0, #4]
	eors	r7, r7, r5
 80007a8:	406f      	eors	r7, r5
	stmia	r0!, {r6,r7}
 80007aa:	c0c0      	stmia	r0!, {r6, r7}
	subs	r2, r2, #1
 80007ac:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateXORLanes_LoopAligned
 80007ae:	d1a9      	bne.n	8000704 <__KeccakF1600_StateXORLanes_LoopAligned>
	bx		lr
 80007b0:	4770      	bx	lr

080007b2 <__KeccakF1600_StateXORLanes_LoopUnaligned>:
__KeccakF1600_StateXORLanes_LoopUnaligned:
	ldrb	r6, [r1, #0]
 80007b2:	780e      	ldrb	r6, [r1, #0]
	ldrb	r4, [r1, #1]
 80007b4:	784c      	ldrb	r4, [r1, #1]
	lsls	r4, r4, #8
 80007b6:	0224      	lsls	r4, r4, #8
	orrs	r6, r6, r4
 80007b8:	4326      	orrs	r6, r4
	ldrb	r4, [r1, #2]
 80007ba:	788c      	ldrb	r4, [r1, #2]
	lsls	r4, r4, #16
 80007bc:	0424      	lsls	r4, r4, #16
	orrs	r6, r6, r4
 80007be:	4326      	orrs	r6, r4
	ldrb	r4, [r1, #3]
 80007c0:	78cc      	ldrb	r4, [r1, #3]
	lsls	r4, r4, #24
 80007c2:	0624      	lsls	r4, r4, #24
	orrs	r6, r6, r4
 80007c4:	4326      	orrs	r6, r4
	ldrb	r7, [r1, #4]
 80007c6:	790f      	ldrb	r7, [r1, #4]
	ldrb	r4, [r1, #5]
 80007c8:	794c      	ldrb	r4, [r1, #5]
	lsls	r4, r4, #8
 80007ca:	0224      	lsls	r4, r4, #8
	orrs	r7, r7, r4
 80007cc:	4327      	orrs	r7, r4
	ldrb	r4, [r1, #6]
 80007ce:	798c      	ldrb	r4, [r1, #6]
	lsls	r4, r4, #16
 80007d0:	0424      	lsls	r4, r4, #16
	orrs	r7, r7, r4
 80007d2:	4327      	orrs	r7, r4
	ldrb	r4, [r1, #7]
 80007d4:	79cc      	ldrb	r4, [r1, #7]
	lsls	r4, r4, #24
 80007d6:	0624      	lsls	r4, r4, #24
	orrs	r7, r7, r4
 80007d8:	4327      	orrs	r7, r4
	adds	r1, r1, #8
 80007da:	3108      	adds	r1, #8
	mov		r8, r6
 80007dc:	46b0      	mov	r8, r6
	mov		r9, r7
 80007de:	46b9      	mov	r9, r7
	toBitInterleaving	r8, r9, r6, r7, r5, r4, r3
 80007e0:	4646      	mov	r6, r8
 80007e2:	681d      	ldr	r5, [r3, #0]
 80007e4:	402e      	ands	r6, r5
 80007e6:	0875      	lsrs	r5, r6, #1
 80007e8:	432e      	orrs	r6, r5
 80007ea:	685d      	ldr	r5, [r3, #4]
 80007ec:	402e      	ands	r6, r5
 80007ee:	08b5      	lsrs	r5, r6, #2
 80007f0:	432e      	orrs	r6, r5
 80007f2:	689d      	ldr	r5, [r3, #8]
 80007f4:	402e      	ands	r6, r5
 80007f6:	0935      	lsrs	r5, r6, #4
 80007f8:	432e      	orrs	r6, r5
 80007fa:	68dd      	ldr	r5, [r3, #12]
 80007fc:	402e      	ands	r6, r5
 80007fe:	0a35      	lsrs	r5, r6, #8
 8000800:	432e      	orrs	r6, r5
 8000802:	464f      	mov	r7, r9
 8000804:	681d      	ldr	r5, [r3, #0]
 8000806:	402f      	ands	r7, r5
 8000808:	087d      	lsrs	r5, r7, #1
 800080a:	432f      	orrs	r7, r5
 800080c:	685d      	ldr	r5, [r3, #4]
 800080e:	402f      	ands	r7, r5
 8000810:	08bd      	lsrs	r5, r7, #2
 8000812:	432f      	orrs	r7, r5
 8000814:	689d      	ldr	r5, [r3, #8]
 8000816:	402f      	ands	r7, r5
 8000818:	093d      	lsrs	r5, r7, #4
 800081a:	432f      	orrs	r7, r5
 800081c:	68dd      	ldr	r5, [r3, #12]
 800081e:	402f      	ands	r7, r5
 8000820:	0a3d      	lsrs	r5, r7, #8
 8000822:	432f      	orrs	r7, r5
 8000824:	0436      	lsls	r6, r6, #16
 8000826:	0c36      	lsrs	r6, r6, #16
 8000828:	043f      	lsls	r7, r7, #16
 800082a:	433e      	orrs	r6, r7
 800082c:	4647      	mov	r7, r8
 800082e:	691d      	ldr	r5, [r3, #16]
 8000830:	402f      	ands	r7, r5
 8000832:	007d      	lsls	r5, r7, #1
 8000834:	432f      	orrs	r7, r5
 8000836:	695d      	ldr	r5, [r3, #20]
 8000838:	402f      	ands	r7, r5
 800083a:	00bd      	lsls	r5, r7, #2
 800083c:	432f      	orrs	r7, r5
 800083e:	699d      	ldr	r5, [r3, #24]
 8000840:	402f      	ands	r7, r5
 8000842:	013d      	lsls	r5, r7, #4
 8000844:	432f      	orrs	r7, r5
 8000846:	69dd      	ldr	r5, [r3, #28]
 8000848:	402f      	ands	r7, r5
 800084a:	023d      	lsls	r5, r7, #8
 800084c:	432f      	orrs	r7, r5
 800084e:	464c      	mov	r4, r9
 8000850:	691d      	ldr	r5, [r3, #16]
 8000852:	402c      	ands	r4, r5
 8000854:	0065      	lsls	r5, r4, #1
 8000856:	432c      	orrs	r4, r5
 8000858:	695d      	ldr	r5, [r3, #20]
 800085a:	402c      	ands	r4, r5
 800085c:	00a5      	lsls	r5, r4, #2
 800085e:	432c      	orrs	r4, r5
 8000860:	699d      	ldr	r5, [r3, #24]
 8000862:	402c      	ands	r4, r5
 8000864:	0125      	lsls	r5, r4, #4
 8000866:	432c      	orrs	r4, r5
 8000868:	69dd      	ldr	r5, [r3, #28]
 800086a:	402c      	ands	r4, r5
 800086c:	0225      	lsls	r5, r4, #8
 800086e:	432c      	orrs	r4, r5
 8000870:	0c3f      	lsrs	r7, r7, #16
 8000872:	0c24      	lsrs	r4, r4, #16
 8000874:	0424      	lsls	r4, r4, #16
 8000876:	4327      	orrs	r7, r4
	ldr     r5, [r0]
 8000878:	6805      	ldr	r5, [r0, #0]
	eors	r6, r6, r5
 800087a:	406e      	eors	r6, r5
	ldr     r5, [r0, #4]
 800087c:	6845      	ldr	r5, [r0, #4]
	eors	r7, r7, r5
 800087e:	406f      	eors	r7, r5
	stmia	r0!, {r6, r7}
 8000880:	c0c0      	stmia	r0!, {r6, r7}
	subs	r2, r2, #1
 8000882:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateXORLanes_LoopUnaligned
 8000884:	d195      	bne.n	80007b2 <__KeccakF1600_StateXORLanes_LoopUnaligned>
	bx		lr
 8000886:	4770      	bx	lr
 8000888:	f3af 8000 	nop.w
 800088c:	f3af 8000 	nop.w
 8000890:	f3af 8000 	nop.w
 8000894:	f3af 8000 	nop.w
 8000898:	f3af 8000 	nop.w
 800089c:	f3af 8000 	nop.w
 80008a0:	f3af 8000 	nop.w
 80008a4:	f3af 8000 	nop.w
 80008a8:	f3af 8000 	nop.w
 80008ac:	f3af 8000 	nop.w
 80008b0:	f3af 8000 	nop.w
 80008b4:	f3af 8000 	nop.w
 80008b8:	f3af 8000 	nop.w
 80008bc:	f3af 8000 	nop.w
	...

08000900 <__KeccakF1600_StateXORBytesInLane>:
@
@  Changed: r2-r9
@
.align 8
__KeccakF1600_StateXORBytesInLane:
	movs	r4, #0
 8000900:	2400      	movs	r4, #0
	movs	r5, #0
 8000902:	2500      	movs	r5, #0
	push	{ r4 - r5 }
 8000904:	b430      	push	{r4, r5}
	add		r2, r2, sp
 8000906:	446a      	add	r2, sp

08000908 <__KeccakF1600_StateXORBytesInLane_Loop>:
__KeccakF1600_StateXORBytesInLane_Loop:
	ldrb	r5, [r1]
 8000908:	780d      	ldrb	r5, [r1, #0]
	strb	r5, [r2]
 800090a:	7015      	strb	r5, [r2, #0]
	adds	r1, r1, #1
 800090c:	3101      	adds	r1, #1
	adds	r2, r2, #1
 800090e:	3201      	adds	r2, #1
	subs	r3, r3, #1
 8000910:	3b01      	subs	r3, #1
	bne		__KeccakF1600_StateXORBytesInLane_Loop
 8000912:	d1f9      	bne.n	8000908 <__KeccakF1600_StateXORBytesInLane_Loop>
	pop		{ r4 - r5 }
 8000914:	bc30      	pop	{r4, r5}
	mov		r8, r4
 8000916:	46a0      	mov	r8, r4
	mov		r9, r5
 8000918:	46a9      	mov	r9, r5
	toBitInterleaving	r8, r9, r4, r5, r6, r2, r7
 800091a:	4644      	mov	r4, r8
 800091c:	683e      	ldr	r6, [r7, #0]
 800091e:	4034      	ands	r4, r6
 8000920:	0866      	lsrs	r6, r4, #1
 8000922:	4334      	orrs	r4, r6
 8000924:	687e      	ldr	r6, [r7, #4]
 8000926:	4034      	ands	r4, r6
 8000928:	08a6      	lsrs	r6, r4, #2
 800092a:	4334      	orrs	r4, r6
 800092c:	68be      	ldr	r6, [r7, #8]
 800092e:	4034      	ands	r4, r6
 8000930:	0926      	lsrs	r6, r4, #4
 8000932:	4334      	orrs	r4, r6
 8000934:	68fe      	ldr	r6, [r7, #12]
 8000936:	4034      	ands	r4, r6
 8000938:	0a26      	lsrs	r6, r4, #8
 800093a:	4334      	orrs	r4, r6
 800093c:	464d      	mov	r5, r9
 800093e:	683e      	ldr	r6, [r7, #0]
 8000940:	4035      	ands	r5, r6
 8000942:	086e      	lsrs	r6, r5, #1
 8000944:	4335      	orrs	r5, r6
 8000946:	687e      	ldr	r6, [r7, #4]
 8000948:	4035      	ands	r5, r6
 800094a:	08ae      	lsrs	r6, r5, #2
 800094c:	4335      	orrs	r5, r6
 800094e:	68be      	ldr	r6, [r7, #8]
 8000950:	4035      	ands	r5, r6
 8000952:	092e      	lsrs	r6, r5, #4
 8000954:	4335      	orrs	r5, r6
 8000956:	68fe      	ldr	r6, [r7, #12]
 8000958:	4035      	ands	r5, r6
 800095a:	0a2e      	lsrs	r6, r5, #8
 800095c:	4335      	orrs	r5, r6
 800095e:	0424      	lsls	r4, r4, #16
 8000960:	0c24      	lsrs	r4, r4, #16
 8000962:	042d      	lsls	r5, r5, #16
 8000964:	432c      	orrs	r4, r5
 8000966:	4645      	mov	r5, r8
 8000968:	693e      	ldr	r6, [r7, #16]
 800096a:	4035      	ands	r5, r6
 800096c:	006e      	lsls	r6, r5, #1
 800096e:	4335      	orrs	r5, r6
 8000970:	697e      	ldr	r6, [r7, #20]
 8000972:	4035      	ands	r5, r6
 8000974:	00ae      	lsls	r6, r5, #2
 8000976:	4335      	orrs	r5, r6
 8000978:	69be      	ldr	r6, [r7, #24]
 800097a:	4035      	ands	r5, r6
 800097c:	012e      	lsls	r6, r5, #4
 800097e:	4335      	orrs	r5, r6
 8000980:	69fe      	ldr	r6, [r7, #28]
 8000982:	4035      	ands	r5, r6
 8000984:	022e      	lsls	r6, r5, #8
 8000986:	4335      	orrs	r5, r6
 8000988:	464a      	mov	r2, r9
 800098a:	693e      	ldr	r6, [r7, #16]
 800098c:	4032      	ands	r2, r6
 800098e:	0056      	lsls	r6, r2, #1
 8000990:	4332      	orrs	r2, r6
 8000992:	697e      	ldr	r6, [r7, #20]
 8000994:	4032      	ands	r2, r6
 8000996:	0096      	lsls	r6, r2, #2
 8000998:	4332      	orrs	r2, r6
 800099a:	69be      	ldr	r6, [r7, #24]
 800099c:	4032      	ands	r2, r6
 800099e:	0116      	lsls	r6, r2, #4
 80009a0:	4332      	orrs	r2, r6
 80009a2:	69fe      	ldr	r6, [r7, #28]
 80009a4:	4032      	ands	r2, r6
 80009a6:	0216      	lsls	r6, r2, #8
 80009a8:	4332      	orrs	r2, r6
 80009aa:	0c2d      	lsrs	r5, r5, #16
 80009ac:	0c12      	lsrs	r2, r2, #16
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	4315      	orrs	r5, r2
	ldr     r6, [r0]
 80009b2:	6806      	ldr	r6, [r0, #0]
	eors	r4, r4, r6
 80009b4:	4074      	eors	r4, r6
	ldr     r6, [r0, #4]
 80009b6:	6846      	ldr	r6, [r0, #4]
	eors	r5, r5, r6
 80009b8:	4075      	eors	r5, r6
	stmia	r0!, { r4, r5 }
 80009ba:	c030      	stmia	r0!, {r4, r5}
	bx		lr
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
	...

08000a00 <KeccakF1600_StateExtractBytes>:
@ void KeccakF1600_StateExtractBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
@
.align 8
.global   KeccakF1600_StateExtractBytes
KeccakF1600_StateExtractBytes:
	cmp		r3, #0									@ .if length != 0
 8000a00:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateExtractBytes_Exit1
 8000a02:	d027      	beq.n	8000a54 <KeccakF1600_StateExtractBytes_Exit1>
	push	{r4 - r6, lr}							@ then
 8000a04:	b570      	push	{r4, r5, r6, lr}
	mov		r4, r8
 8000a06:	4644      	mov	r4, r8
	push	{r4, r7}
 8000a08:	b490      	push	{r4, r7}
	lsrs	r4, r2, #3								@ offset &= ~7
 8000a0a:	08d4      	lsrs	r4, r2, #3
	lsls	r4, r4, #3
 8000a0c:	00e4      	lsls	r4, r4, #3
	adds	r0, r0, r4								@ add whole lane offset to state pointer
 8000a0e:	1900      	adds	r0, r0, r4
	lsls	r2, r2, #29								@ offset &= 7 (part not lane aligned)
 8000a10:	0752      	lsls	r2, r2, #29
	lsrs	r2, r2, #29
 8000a12:	0f52      	lsrs	r2, r2, #29
	beq		KeccakF1600_StateExtractBytes_CheckLanes	@ .if offset != 0
 8000a14:	d00c      	beq.n	8000a30 <KeccakF1600_StateExtractBytes_CheckLanes>
	movs	r4, r3									@ then, do remaining bytes in first lane
 8000a16:	001c      	movs	r4, r3
	movs	r5, #8
 8000a18:	2508      	movs	r5, #8
	subs	r5, r2									@ max size in lane = 8 - offset
 8000a1a:	1aad      	subs	r5, r5, r2
	cmp		r4, r5
 8000a1c:	42ac      	cmp	r4, r5
	ble		KeccakF1600_StateExtractBytes_BytesAlign
 8000a1e:	dd00      	ble.n	8000a22 <KeccakF1600_StateExtractBytes_BytesAlign>
	movs	r4, r5
 8000a20:	002c      	movs	r4, r5

08000a22 <KeccakF1600_StateExtractBytes_BytesAlign>:
KeccakF1600_StateExtractBytes_BytesAlign:
	subs	r3, r3, r4								@ size left
 8000a22:	1b1b      	subs	r3, r3, r4
	mov		r8, r3
 8000a24:	4698      	mov	r8, r3
	movs	r3, r4
 8000a26:	0023      	movs	r3, r4
	adr		r7, KeccakF1600_StateExtractBytes_FromBitInterleavingConstants
 8000a28:	a70b      	add	r7, pc, #44	; (adr r7, 8000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>)
	bl		__KeccakF1600_StateExtractBytesInLane
 8000a2a:	f000 f969 	bl	8000d00 <__KeccakF1600_StateExtractBytesInLane>
	mov		r3, r8
 8000a2e:	4643      	mov	r3, r8

08000a30 <KeccakF1600_StateExtractBytes_CheckLanes>:
KeccakF1600_StateExtractBytes_CheckLanes:
	lsrs	r2, r3, #3								@ .if length >= 8
 8000a30:	08da      	lsrs	r2, r3, #3
	beq		KeccakF1600_StateExtractBytes_Bytes
 8000a32:	d006      	beq.n	8000a42 <KeccakF1600_StateExtractBytes_Bytes>
	mov		r8, r3
 8000a34:	4698      	mov	r8, r3
	adr		r3, KeccakF1600_StateExtractBytes_FromBitInterleavingConstants
 8000a36:	a308      	add	r3, pc, #32	; (adr r3, 8000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>)
	bl		__KeccakF1600_StateExtractLanes
 8000a38:	f000 f862 	bl	8000b00 <__KeccakF1600_StateExtractLanes>
	mov		r3, r8
 8000a3c:	4643      	mov	r3, r8
	lsls	r3, r3, #29
 8000a3e:	075b      	lsls	r3, r3, #29
	lsrs	r3, r3, #29
 8000a40:	0f5b      	lsrs	r3, r3, #29

08000a42 <KeccakF1600_StateExtractBytes_Bytes>:
KeccakF1600_StateExtractBytes_Bytes:
	cmp		r3, #0
 8000a42:	2b00      	cmp	r3, #0
	beq		KeccakF1600_StateExtractBytes_Exit
 8000a44:	d003      	beq.n	8000a4e <KeccakF1600_StateExtractBytes_Exit>
	movs	r2, #0
 8000a46:	2200      	movs	r2, #0
	adr		r7, KeccakF1600_StateExtractBytes_FromBitInterleavingConstants
 8000a48:	a703      	add	r7, pc, #12	; (adr r7, 8000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>)
	bl		__KeccakF1600_StateExtractBytesInLane
 8000a4a:	f000 f959 	bl	8000d00 <__KeccakF1600_StateExtractBytesInLane>

08000a4e <KeccakF1600_StateExtractBytes_Exit>:
KeccakF1600_StateExtractBytes_Exit:
	pop		{r4,r7}
 8000a4e:	bc90      	pop	{r4, r7}
	mov		r8, r4
 8000a50:	46a0      	mov	r8, r4
	pop		{r4 - r6, pc}
 8000a52:	bd70      	pop	{r4, r5, r6, pc}

08000a54 <KeccakF1600_StateExtractBytes_Exit1>:
KeccakF1600_StateExtractBytes_Exit1:
	bx		lr
 8000a54:	4770      	bx	lr
	nop
 8000a56:	bf00      	nop

08000a58 <KeccakF1600_StateExtractBytes_FromBitInterleavingConstants>:
 8000a58:	0000ff00 	.word	0x0000ff00
 8000a5c:	00f000f0 	.word	0x00f000f0
 8000a60:	0c0c0c0c 	.word	0x0c0c0c0c
 8000a64:	22222222 	.word	0x22222222
 8000a68:	f3af 8000 	nop.w
 8000a6c:	f3af 8000 	nop.w
 8000a70:	f3af 8000 	nop.w
 8000a74:	f3af 8000 	nop.w
 8000a78:	f3af 8000 	nop.w
 8000a7c:	f3af 8000 	nop.w
	...

08000b00 <__KeccakF1600_StateExtractLanes>:
@
@  Changed: r2-r7
@
.align 8
__KeccakF1600_StateExtractLanes:
	lsls	r4, r1, #30
 8000b00:	078c      	lsls	r4, r1, #30
	bne		__KeccakF1600_StateExtractLanes_LoopUnaligned
 8000b02:	d145      	bne.n	8000b90 <__KeccakF1600_StateExtractLanes_LoopUnaligned>

08000b04 <__KeccakF1600_StateExtractLanes_LoopAligned>:
__KeccakF1600_StateExtractLanes_LoopAligned:
	ldmia	r0!, {r6,r7}
 8000b04:	c8c0      	ldmia	r0!, {r6, r7}
	fromBitInterleaving	r6, r7, r5, r4, r3
 8000b06:	0035      	movs	r5, r6
 8000b08:	0436      	lsls	r6, r6, #16
 8000b0a:	0c36      	lsrs	r6, r6, #16
 8000b0c:	043c      	lsls	r4, r7, #16
 8000b0e:	4326      	orrs	r6, r4
 8000b10:	0c3f      	lsrs	r7, r7, #16
 8000b12:	043f      	lsls	r7, r7, #16
 8000b14:	0c2d      	lsrs	r5, r5, #16
 8000b16:	432f      	orrs	r7, r5
 8000b18:	0a35      	lsrs	r5, r6, #8
 8000b1a:	4075      	eors	r5, r6
 8000b1c:	681c      	ldr	r4, [r3, #0]
 8000b1e:	4025      	ands	r5, r4
 8000b20:	406e      	eors	r6, r5
 8000b22:	022d      	lsls	r5, r5, #8
 8000b24:	406e      	eors	r6, r5
 8000b26:	0935      	lsrs	r5, r6, #4
 8000b28:	4075      	eors	r5, r6
 8000b2a:	685c      	ldr	r4, [r3, #4]
 8000b2c:	4025      	ands	r5, r4
 8000b2e:	406e      	eors	r6, r5
 8000b30:	012d      	lsls	r5, r5, #4
 8000b32:	406e      	eors	r6, r5
 8000b34:	08b5      	lsrs	r5, r6, #2
 8000b36:	4075      	eors	r5, r6
 8000b38:	689c      	ldr	r4, [r3, #8]
 8000b3a:	4025      	ands	r5, r4
 8000b3c:	406e      	eors	r6, r5
 8000b3e:	00ad      	lsls	r5, r5, #2
 8000b40:	406e      	eors	r6, r5
 8000b42:	0875      	lsrs	r5, r6, #1
 8000b44:	4075      	eors	r5, r6
 8000b46:	68dc      	ldr	r4, [r3, #12]
 8000b48:	4025      	ands	r5, r4
 8000b4a:	406e      	eors	r6, r5
 8000b4c:	006d      	lsls	r5, r5, #1
 8000b4e:	406e      	eors	r6, r5
 8000b50:	0a3d      	lsrs	r5, r7, #8
 8000b52:	407d      	eors	r5, r7
 8000b54:	681c      	ldr	r4, [r3, #0]
 8000b56:	4025      	ands	r5, r4
 8000b58:	406f      	eors	r7, r5
 8000b5a:	022d      	lsls	r5, r5, #8
 8000b5c:	406f      	eors	r7, r5
 8000b5e:	093d      	lsrs	r5, r7, #4
 8000b60:	407d      	eors	r5, r7
 8000b62:	685c      	ldr	r4, [r3, #4]
 8000b64:	4025      	ands	r5, r4
 8000b66:	406f      	eors	r7, r5
 8000b68:	012d      	lsls	r5, r5, #4
 8000b6a:	406f      	eors	r7, r5
 8000b6c:	08bd      	lsrs	r5, r7, #2
 8000b6e:	407d      	eors	r5, r7
 8000b70:	689c      	ldr	r4, [r3, #8]
 8000b72:	4025      	ands	r5, r4
 8000b74:	406f      	eors	r7, r5
 8000b76:	00ad      	lsls	r5, r5, #2
 8000b78:	406f      	eors	r7, r5
 8000b7a:	087d      	lsrs	r5, r7, #1
 8000b7c:	407d      	eors	r5, r7
 8000b7e:	68dc      	ldr	r4, [r3, #12]
 8000b80:	4025      	ands	r5, r4
 8000b82:	406f      	eors	r7, r5
 8000b84:	006d      	lsls	r5, r5, #1
 8000b86:	406f      	eors	r7, r5
	stmia	r1!, {r6,r7}
 8000b88:	c1c0      	stmia	r1!, {r6, r7}
	subs	r2, r2, #1
 8000b8a:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateExtractLanes_LoopAligned
 8000b8c:	d1ba      	bne.n	8000b04 <__KeccakF1600_StateExtractLanes_LoopAligned>
	bx		lr
 8000b8e:	4770      	bx	lr

08000b90 <__KeccakF1600_StateExtractLanes_LoopUnaligned>:
__KeccakF1600_StateExtractLanes_LoopUnaligned:
	ldmia	r0!, {r6,r7}
 8000b90:	c8c0      	ldmia	r0!, {r6, r7}
	fromBitInterleaving	r6, r7, r5, r4, r3
 8000b92:	0035      	movs	r5, r6
 8000b94:	0436      	lsls	r6, r6, #16
 8000b96:	0c36      	lsrs	r6, r6, #16
 8000b98:	043c      	lsls	r4, r7, #16
 8000b9a:	4326      	orrs	r6, r4
 8000b9c:	0c3f      	lsrs	r7, r7, #16
 8000b9e:	043f      	lsls	r7, r7, #16
 8000ba0:	0c2d      	lsrs	r5, r5, #16
 8000ba2:	432f      	orrs	r7, r5
 8000ba4:	0a35      	lsrs	r5, r6, #8
 8000ba6:	4075      	eors	r5, r6
 8000ba8:	681c      	ldr	r4, [r3, #0]
 8000baa:	4025      	ands	r5, r4
 8000bac:	406e      	eors	r6, r5
 8000bae:	022d      	lsls	r5, r5, #8
 8000bb0:	406e      	eors	r6, r5
 8000bb2:	0935      	lsrs	r5, r6, #4
 8000bb4:	4075      	eors	r5, r6
 8000bb6:	685c      	ldr	r4, [r3, #4]
 8000bb8:	4025      	ands	r5, r4
 8000bba:	406e      	eors	r6, r5
 8000bbc:	012d      	lsls	r5, r5, #4
 8000bbe:	406e      	eors	r6, r5
 8000bc0:	08b5      	lsrs	r5, r6, #2
 8000bc2:	4075      	eors	r5, r6
 8000bc4:	689c      	ldr	r4, [r3, #8]
 8000bc6:	4025      	ands	r5, r4
 8000bc8:	406e      	eors	r6, r5
 8000bca:	00ad      	lsls	r5, r5, #2
 8000bcc:	406e      	eors	r6, r5
 8000bce:	0875      	lsrs	r5, r6, #1
 8000bd0:	4075      	eors	r5, r6
 8000bd2:	68dc      	ldr	r4, [r3, #12]
 8000bd4:	4025      	ands	r5, r4
 8000bd6:	406e      	eors	r6, r5
 8000bd8:	006d      	lsls	r5, r5, #1
 8000bda:	406e      	eors	r6, r5
 8000bdc:	0a3d      	lsrs	r5, r7, #8
 8000bde:	407d      	eors	r5, r7
 8000be0:	681c      	ldr	r4, [r3, #0]
 8000be2:	4025      	ands	r5, r4
 8000be4:	406f      	eors	r7, r5
 8000be6:	022d      	lsls	r5, r5, #8
 8000be8:	406f      	eors	r7, r5
 8000bea:	093d      	lsrs	r5, r7, #4
 8000bec:	407d      	eors	r5, r7
 8000bee:	685c      	ldr	r4, [r3, #4]
 8000bf0:	4025      	ands	r5, r4
 8000bf2:	406f      	eors	r7, r5
 8000bf4:	012d      	lsls	r5, r5, #4
 8000bf6:	406f      	eors	r7, r5
 8000bf8:	08bd      	lsrs	r5, r7, #2
 8000bfa:	407d      	eors	r5, r7
 8000bfc:	689c      	ldr	r4, [r3, #8]
 8000bfe:	4025      	ands	r5, r4
 8000c00:	406f      	eors	r7, r5
 8000c02:	00ad      	lsls	r5, r5, #2
 8000c04:	406f      	eors	r7, r5
 8000c06:	087d      	lsrs	r5, r7, #1
 8000c08:	407d      	eors	r5, r7
 8000c0a:	68dc      	ldr	r4, [r3, #12]
 8000c0c:	4025      	ands	r5, r4
 8000c0e:	406f      	eors	r7, r5
 8000c10:	006d      	lsls	r5, r5, #1
 8000c12:	406f      	eors	r7, r5
	strb	r6, [r1, #0]
 8000c14:	700e      	strb	r6, [r1, #0]
	lsrs	r6, r6, #8
 8000c16:	0a36      	lsrs	r6, r6, #8
	strb	r6, [r1, #1]
 8000c18:	704e      	strb	r6, [r1, #1]
	lsrs	r6, r6, #8
 8000c1a:	0a36      	lsrs	r6, r6, #8
	strb	r6, [r1, #2]
 8000c1c:	708e      	strb	r6, [r1, #2]
	lsrs	r6, r6, #8
 8000c1e:	0a36      	lsrs	r6, r6, #8
	strb	r6, [r1, #3]
 8000c20:	70ce      	strb	r6, [r1, #3]
	strb	r7, [r1, #4]
 8000c22:	710f      	strb	r7, [r1, #4]
	lsrs	r7, r7, #8
 8000c24:	0a3f      	lsrs	r7, r7, #8
	strb	r7, [r1, #5]
 8000c26:	714f      	strb	r7, [r1, #5]
	lsrs	r7, r7, #8
 8000c28:	0a3f      	lsrs	r7, r7, #8
	strb	r7, [r1, #6]
 8000c2a:	718f      	strb	r7, [r1, #6]
	lsrs	r7, r7, #8
 8000c2c:	0a3f      	lsrs	r7, r7, #8
	strb	r7, [r1, #7]
 8000c2e:	71cf      	strb	r7, [r1, #7]
	adds	r1, r1, #8
 8000c30:	3108      	adds	r1, #8
	subs	r2, r2, #1
 8000c32:	3a01      	subs	r2, #1
	bne		__KeccakF1600_StateExtractLanes_LoopUnaligned
 8000c34:	d1ac      	bne.n	8000b90 <__KeccakF1600_StateExtractLanes_LoopUnaligned>
	bx		lr
 8000c36:	4770      	bx	lr
 8000c38:	f3af 8000 	nop.w
 8000c3c:	f3af 8000 	nop.w
	...

08000d00 <__KeccakF1600_StateExtractBytesInLane>:
@
@  Changed: r2-r7
@
.align 8
__KeccakF1600_StateExtractBytesInLane:
	ldmia	r0!, {r4,r5}
 8000d00:	c830      	ldmia	r0!, {r4, r5}
	push	{r0, r3}
 8000d02:	b409      	push	{r0, r3}
	fromBitInterleaving	r4, r5, r0, r3, r7
 8000d04:	0020      	movs	r0, r4
 8000d06:	0424      	lsls	r4, r4, #16
 8000d08:	0c24      	lsrs	r4, r4, #16
 8000d0a:	042b      	lsls	r3, r5, #16
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	0c2d      	lsrs	r5, r5, #16
 8000d10:	042d      	lsls	r5, r5, #16
 8000d12:	0c00      	lsrs	r0, r0, #16
 8000d14:	4305      	orrs	r5, r0
 8000d16:	0a20      	lsrs	r0, r4, #8
 8000d18:	4060      	eors	r0, r4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	4018      	ands	r0, r3
 8000d1e:	4044      	eors	r4, r0
 8000d20:	0200      	lsls	r0, r0, #8
 8000d22:	4044      	eors	r4, r0
 8000d24:	0920      	lsrs	r0, r4, #4
 8000d26:	4060      	eors	r0, r4
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4018      	ands	r0, r3
 8000d2c:	4044      	eors	r4, r0
 8000d2e:	0100      	lsls	r0, r0, #4
 8000d30:	4044      	eors	r4, r0
 8000d32:	08a0      	lsrs	r0, r4, #2
 8000d34:	4060      	eors	r0, r4
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	4018      	ands	r0, r3
 8000d3a:	4044      	eors	r4, r0
 8000d3c:	0080      	lsls	r0, r0, #2
 8000d3e:	4044      	eors	r4, r0
 8000d40:	0860      	lsrs	r0, r4, #1
 8000d42:	4060      	eors	r0, r4
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4018      	ands	r0, r3
 8000d48:	4044      	eors	r4, r0
 8000d4a:	0040      	lsls	r0, r0, #1
 8000d4c:	4044      	eors	r4, r0
 8000d4e:	0a28      	lsrs	r0, r5, #8
 8000d50:	4068      	eors	r0, r5
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	4018      	ands	r0, r3
 8000d56:	4045      	eors	r5, r0
 8000d58:	0200      	lsls	r0, r0, #8
 8000d5a:	4045      	eors	r5, r0
 8000d5c:	0928      	lsrs	r0, r5, #4
 8000d5e:	4068      	eors	r0, r5
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4018      	ands	r0, r3
 8000d64:	4045      	eors	r5, r0
 8000d66:	0100      	lsls	r0, r0, #4
 8000d68:	4045      	eors	r5, r0
 8000d6a:	08a8      	lsrs	r0, r5, #2
 8000d6c:	4068      	eors	r0, r5
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4018      	ands	r0, r3
 8000d72:	4045      	eors	r5, r0
 8000d74:	0080      	lsls	r0, r0, #2
 8000d76:	4045      	eors	r5, r0
 8000d78:	0868      	lsrs	r0, r5, #1
 8000d7a:	4068      	eors	r0, r5
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4018      	ands	r0, r3
 8000d80:	4045      	eors	r5, r0
 8000d82:	0040      	lsls	r0, r0, #1
 8000d84:	4045      	eors	r5, r0
	pop		{r0, r3}
 8000d86:	bc09      	pop	{r0, r3}
	push	{r4, r5}
 8000d88:	b430      	push	{r4, r5}
	mov		r4, sp
 8000d8a:	466c      	mov	r4, sp
	adds	r4, r4, r2
 8000d8c:	18a4      	adds	r4, r4, r2

08000d8e <__KeccakF1600_StateExtractBytesInLane_Loop>:
__KeccakF1600_StateExtractBytesInLane_Loop:
	ldrb	r2, [r4]
 8000d8e:	7822      	ldrb	r2, [r4, #0]
	adds	r4, r4, #1
 8000d90:	3401      	adds	r4, #1
	strb	r2, [r1]
 8000d92:	700a      	strb	r2, [r1, #0]
	adds	r1, r1, #1
 8000d94:	3101      	adds	r1, #1
	subs	r3, r3, #1
 8000d96:	3b01      	subs	r3, #1
	bne		__KeccakF1600_StateExtractBytesInLane_Loop
 8000d98:	d1f9      	bne.n	8000d8e <__KeccakF1600_StateExtractBytesInLane_Loop>
	add		sp, #8
 8000d9a:	b002      	add	sp, #8
	bx		lr
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	f3af 8000 	nop.w
 8000da4:	f3af 8000 	nop.w
 8000da8:	f3af 8000 	nop.w
 8000dac:	f3af 8000 	nop.w
 8000db0:	f3af 8000 	nop.w
 8000db4:	f3af 8000 	nop.w
 8000db8:	f3af 8000 	nop.w
 8000dbc:	f3af 8000 	nop.w
	...

08000e00 <KeccakF1600_StatePermute>:
@ void KeccakF1600_StatePermute( void *state )
@
.align 8
.global   KeccakF1600_StatePermute
KeccakF1600_StatePermute:
	adr		r1, KeccakF1600_StatePermute_RoundConstantsWithTerminator
 8000e00:	a13f      	add	r1, pc, #252	; (adr r1, 8000f00 <KeccakF1600_StatePermute_RoundConstantsWithTerminator>)
	b		KeccakP1600_StatePermute
 8000e02:	e0fd      	b.n	8001000 <KeccakP1600_StatePermute>
 8000e04:	f3af 8000 	nop.w
 8000e08:	f3af 8000 	nop.w
 8000e0c:	f3af 8000 	nop.w
 8000e10:	f3af 8000 	nop.w
 8000e14:	f3af 8000 	nop.w
 8000e18:	f3af 8000 	nop.w
 8000e1c:	f3af 8000 	nop.w
 8000e20:	f3af 8000 	nop.w
 8000e24:	f3af 8000 	nop.w
 8000e28:	f3af 8000 	nop.w
 8000e2c:	f3af 8000 	nop.w
 8000e30:	f3af 8000 	nop.w
 8000e34:	f3af 8000 	nop.w
 8000e38:	f3af 8000 	nop.w
 8000e3c:	f3af 8000 	nop.w
	...

08000f00 <KeccakF1600_StatePermute_RoundConstantsWithTerminator>:
 8000f00:	00000001 	.word	0x00000001
	...
 8000f0c:	00000089 	.word	0x00000089
 8000f10:	00000000 	.word	0x00000000
 8000f14:	8000008b 	.word	0x8000008b
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	80008080 	.word	0x80008080
 8000f20:	00000001 	.word	0x00000001
 8000f24:	0000008b 	.word	0x0000008b
 8000f28:	00000001 	.word	0x00000001
 8000f2c:	00008000 	.word	0x00008000
 8000f30:	00000001 	.word	0x00000001
 8000f34:	80008088 	.word	0x80008088
 8000f38:	00000001 	.word	0x00000001
 8000f3c:	80000082 	.word	0x80000082
 8000f40:	00000000 	.word	0x00000000
 8000f44:	0000000b 	.word	0x0000000b
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	0000000a 	.word	0x0000000a
 8000f50:	00000001 	.word	0x00000001
 8000f54:	00008082 	.word	0x00008082
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	00008003 	.word	0x00008003
 8000f60:	00000001 	.word	0x00000001
 8000f64:	0000808b 	.word	0x0000808b
 8000f68:	00000001 	.word	0x00000001
 8000f6c:	8000000b 	.word	0x8000000b
 8000f70:	00000001 	.word	0x00000001
 8000f74:	8000008a 	.word	0x8000008a
 8000f78:	00000001 	.word	0x00000001
 8000f7c:	80000081 	.word	0x80000081
 8000f80:	00000000 	.word	0x00000000
 8000f84:	80000081 	.word	0x80000081
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	80000008 	.word	0x80000008
 8000f90:	00000000 	.word	0x00000000
 8000f94:	00000083 	.word	0x00000083
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	80008003 	.word	0x80008003
 8000fa0:	00000001 	.word	0x00000001
 8000fa4:	80008088 	.word	0x80008088
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	80000088 	.word	0x80000088
 8000fb0:	00000001 	.word	0x00000001
 8000fb4:	00008000 	.word	0x00008000
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	80008082 	.word	0x80008082
 8000fc0:	000000ff 	.word	0x000000ff
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	f3af 8000 	nop.w
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	f3af 8000 	nop.w
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	f3af 8000 	nop.w
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	f3af 8000 	nop.w
 8000fec:	f3af 8000 	nop.w
 8000ff0:	f3af 8000 	nop.w
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	f3af 8000 	nop.w

08001000 <KeccakP1600_StatePermute>:
@
@ void KeccakP1600_StatePermute( void *state, void * rc )
@
.align 8
KeccakP1600_StatePermute:
	push	{ r4 - r6, lr }
 8001000:	b570      	push	{r4, r5, r6, lr}
	mov		r2, r8
 8001002:	4642      	mov	r2, r8
	mov		r3, r9
 8001004:	464b      	mov	r3, r9
	mov		r4, r10
 8001006:	4654      	mov	r4, sl
	mov		r5, r11
 8001008:	465d      	mov	r5, fp
	mov		r6, r12
 800100a:	4666      	mov	r6, ip
	push	{ r2 - r7 }
 800100c:	b4fc      	push	{r2, r3, r4, r5, r6, r7}
	sub		sp, #mSize
 800100e:	b086      	sub	sp, #24
	str		r1, [sp, #mRC]
 8001010:	9105      	str	r1, [sp, #20]

08001012 <KeccakP1600_StatePermute_RoundLoop>:
KeccakP1600_StatePermute_RoundLoop:
	KeccakRound0
 8001012:	221f      	movs	r2, #31
 8001014:	6a03      	ldr	r3, [r0, #32]
 8001016:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001018:	404b      	eors	r3, r1
 800101a:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800101c:	404b      	eors	r3, r1
 800101e:	3080      	adds	r0, #128	; 0x80
 8001020:	6981      	ldr	r1, [r0, #24]
 8001022:	404b      	eors	r3, r1
 8001024:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001026:	3880      	subs	r0, #128	; 0x80
 8001028:	404b      	eors	r3, r1
 800102a:	68c7      	ldr	r7, [r0, #12]
 800102c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800102e:	404f      	eors	r7, r1
 8001030:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001032:	404f      	eors	r7, r1
 8001034:	3080      	adds	r0, #128	; 0x80
 8001036:	6841      	ldr	r1, [r0, #4]
 8001038:	404f      	eors	r7, r1
 800103a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800103c:	3880      	subs	r0, #128	; 0x80
 800103e:	404f      	eors	r7, r1
 8001040:	003e      	movs	r6, r7
 8001042:	41d6      	rors	r6, r2
 8001044:	405e      	eors	r6, r3
 8001046:	9600      	str	r6, [sp, #0]
 8001048:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800104a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800104c:	404e      	eors	r6, r1
 800104e:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8001050:	404e      	eors	r6, r1
 8001052:	3080      	adds	r0, #128	; 0x80
 8001054:	69c1      	ldr	r1, [r0, #28]
 8001056:	404e      	eors	r6, r1
 8001058:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800105a:	3880      	subs	r0, #128	; 0x80
 800105c:	404e      	eors	r6, r1
 800105e:	6885      	ldr	r5, [r0, #8]
 8001060:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001062:	404d      	eors	r5, r1
 8001064:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001066:	404d      	eors	r5, r1
 8001068:	3080      	adds	r0, #128	; 0x80
 800106a:	6801      	ldr	r1, [r0, #0]
 800106c:	404d      	eors	r5, r1
 800106e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001070:	3880      	subs	r0, #128	; 0x80
 8001072:	404d      	eors	r5, r1
 8001074:	4629      	mov	r1, r5
 8001076:	4071      	eors	r1, r6
 8001078:	4688      	mov	r8, r1
 800107a:	46ae      	mov	lr, r5
 800107c:	9101      	str	r1, [sp, #4]
 800107e:	6905      	ldr	r5, [r0, #16]
 8001080:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001082:	404d      	eors	r5, r1
 8001084:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001086:	404d      	eors	r5, r1
 8001088:	3080      	adds	r0, #128	; 0x80
 800108a:	6881      	ldr	r1, [r0, #8]
 800108c:	404d      	eors	r5, r1
 800108e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001090:	3880      	subs	r0, #128	; 0x80
 8001092:	404d      	eors	r5, r1
 8001094:	41d6      	rors	r6, r2
 8001096:	406e      	eors	r6, r5
 8001098:	9602      	str	r6, [sp, #8]
 800109a:	6944      	ldr	r4, [r0, #20]
 800109c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800109e:	404c      	eors	r4, r1
 80010a0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80010a2:	404c      	eors	r4, r1
 80010a4:	3080      	adds	r0, #128	; 0x80
 80010a6:	68c1      	ldr	r1, [r0, #12]
 80010a8:	404c      	eors	r4, r1
 80010aa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80010ac:	3880      	subs	r0, #128	; 0x80
 80010ae:	404c      	eors	r4, r1
 80010b0:	4063      	eors	r3, r4
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80010b8:	404b      	eors	r3, r1
 80010ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80010bc:	404b      	eors	r3, r1
 80010be:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80010c0:	404b      	eors	r3, r1
 80010c2:	3080      	adds	r0, #128	; 0x80
 80010c4:	6a01      	ldr	r1, [r0, #32]
 80010c6:	3880      	subs	r0, #128	; 0x80
 80010c8:	404b      	eors	r3, r1
 80010ca:	41d4      	rors	r4, r2
 80010cc:	405c      	eors	r4, r3
 80010ce:	46a2      	mov	sl, r4
 80010d0:	6846      	ldr	r6, [r0, #4]
 80010d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80010d4:	404e      	eors	r6, r1
 80010d6:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80010d8:	404e      	eors	r6, r1
 80010da:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80010dc:	404e      	eors	r6, r1
 80010de:	3080      	adds	r0, #128	; 0x80
 80010e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80010e2:	3880      	subs	r0, #128	; 0x80
 80010e4:	404e      	eors	r6, r1
 80010e6:	4629      	mov	r1, r5
 80010e8:	4071      	eors	r1, r6
 80010ea:	468b      	mov	fp, r1
 80010ec:	69c4      	ldr	r4, [r0, #28]
 80010ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80010f0:	404c      	eors	r4, r1
 80010f2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80010f4:	404c      	eors	r4, r1
 80010f6:	3080      	adds	r0, #128	; 0x80
 80010f8:	6941      	ldr	r1, [r0, #20]
 80010fa:	404c      	eors	r4, r1
 80010fc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80010fe:	3880      	subs	r0, #128	; 0x80
 8001100:	404c      	eors	r4, r1
 8001102:	4671      	mov	r1, lr
 8001104:	0025      	movs	r5, r4
 8001106:	41d5      	rors	r5, r2
 8001108:	404d      	eors	r5, r1
 800110a:	9504      	str	r5, [sp, #16]
 800110c:	6985      	ldr	r5, [r0, #24]
 800110e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001110:	404d      	eors	r5, r1
 8001112:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001114:	404d      	eors	r5, r1
 8001116:	3080      	adds	r0, #128	; 0x80
 8001118:	6901      	ldr	r1, [r0, #16]
 800111a:	404d      	eors	r5, r1
 800111c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800111e:	3880      	subs	r0, #128	; 0x80
 8001120:	404d      	eors	r5, r1
 8001122:	406f      	eors	r7, r5
 8001124:	41d6      	rors	r6, r2
 8001126:	406e      	eors	r6, r5
 8001128:	46b4      	mov	ip, r6
 800112a:	405c      	eors	r4, r3
 800112c:	46a6      	mov	lr, r4
 800112e:	003a      	movs	r2, r7
 8001130:	9902      	ldr	r1, [sp, #8]
 8001132:	4689      	mov	r9, r1
 8001134:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8001136:	3080      	adds	r0, #128	; 0x80
 8001138:	6846      	ldr	r6, [r0, #4]
 800113a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800113c:	3880      	subs	r0, #128	; 0x80
 800113e:	6983      	ldr	r3, [r0, #24]
 8001140:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001142:	4641      	mov	r1, r8
 8001144:	404d      	eors	r5, r1
 8001146:	4057      	eors	r7, r2
 8001148:	4659      	mov	r1, fp
 800114a:	404e      	eors	r6, r1
 800114c:	4649      	mov	r1, r9
 800114e:	404b      	eors	r3, r1
 8001150:	4661      	mov	r1, ip
 8001152:	404c      	eors	r4, r1
 8001154:	211e      	movs	r1, #30
 8001156:	41cd      	rors	r5, r1
 8001158:	2109      	movs	r1, #9
 800115a:	41ce      	rors	r6, r1
 800115c:	2101      	movs	r1, #1
 800115e:	41cf      	rors	r7, r1
 8001160:	2112      	movs	r1, #18
 8001162:	41cb      	rors	r3, r1
 8001164:	2116      	movs	r1, #22
 8001166:	41cc      	rors	r4, r1
 8001168:	0029      	movs	r1, r5
 800116a:	43a1      	bics	r1, r4
 800116c:	4059      	eors	r1, r3
 800116e:	6541      	str	r1, [r0, #84]	; 0x54
 8001170:	0031      	movs	r1, r6
 8001172:	43a9      	bics	r1, r5
 8001174:	4061      	eors	r1, r4
 8001176:	3080      	adds	r0, #128	; 0x80
 8001178:	6041      	str	r1, [r0, #4]
 800117a:	439c      	bics	r4, r3
 800117c:	407c      	eors	r4, r7
 800117e:	3880      	subs	r0, #128	; 0x80
 8001180:	6484      	str	r4, [r0, #72]	; 0x48
 8001182:	43bb      	bics	r3, r7
 8001184:	4073      	eors	r3, r6
 8001186:	6183      	str	r3, [r0, #24]
 8001188:	43b7      	bics	r7, r6
 800118a:	406f      	eors	r7, r5
 800118c:	3080      	adds	r0, #128	; 0x80
 800118e:	6347      	str	r7, [r0, #52]	; 0x34
 8001190:	3880      	subs	r0, #128	; 0x80
 8001192:	3080      	adds	r0, #128	; 0x80
 8001194:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8001196:	3880      	subs	r0, #128	; 0x80
 8001198:	6883      	ldr	r3, [r0, #8]
 800119a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800119c:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800119e:	3080      	adds	r0, #128	; 0x80
 80011a0:	69c6      	ldr	r6, [r0, #28]
 80011a2:	4641      	mov	r1, r8
 80011a4:	404f      	eors	r7, r1
 80011a6:	4054      	eors	r4, r2
 80011a8:	4651      	mov	r1, sl
 80011aa:	404b      	eors	r3, r1
 80011ac:	4649      	mov	r1, r9
 80011ae:	404d      	eors	r5, r1
 80011b0:	4671      	mov	r1, lr
 80011b2:	404e      	eors	r6, r1
 80011b4:	2117      	movs	r1, #23
 80011b6:	41cf      	rors	r7, r1
 80011b8:	211d      	movs	r1, #29
 80011ba:	41cc      	rors	r4, r1
 80011bc:	2114      	movs	r1, #20
 80011be:	41cd      	rors	r5, r1
 80011c0:	211c      	movs	r1, #28
 80011c2:	41ce      	rors	r6, r1
 80011c4:	0029      	movs	r1, r5
 80011c6:	43a1      	bics	r1, r4
 80011c8:	4059      	eors	r1, r3
 80011ca:	6241      	str	r1, [r0, #36]	; 0x24
 80011cc:	0031      	movs	r1, r6
 80011ce:	43a9      	bics	r1, r5
 80011d0:	4061      	eors	r1, r4
 80011d2:	3880      	subs	r0, #128	; 0x80
 80011d4:	6081      	str	r1, [r0, #8]
 80011d6:	439c      	bics	r4, r3
 80011d8:	407c      	eors	r4, r7
 80011da:	3080      	adds	r0, #128	; 0x80
 80011dc:	61c4      	str	r4, [r0, #28]
 80011de:	43bb      	bics	r3, r7
 80011e0:	4073      	eors	r3, r6
 80011e2:	3880      	subs	r0, #128	; 0x80
 80011e4:	6683      	str	r3, [r0, #104]	; 0x68
 80011e6:	43b7      	bics	r7, r6
 80011e8:	406f      	eors	r7, r5
 80011ea:	63c7      	str	r7, [r0, #60]	; 0x3c
 80011ec:	9900      	ldr	r1, [sp, #0]
 80011ee:	4688      	mov	r8, r1
 80011f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011f2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80011f4:	3080      	adds	r0, #128	; 0x80
 80011f6:	68c6      	ldr	r6, [r0, #12]
 80011f8:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80011fa:	3880      	subs	r0, #128	; 0x80
 80011fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011fe:	4641      	mov	r1, r8
 8001200:	404c      	eors	r4, r1
 8001202:	4056      	eors	r6, r2
 8001204:	4651      	mov	r1, sl
 8001206:	404d      	eors	r5, r1
 8001208:	4649      	mov	r1, r9
 800120a:	404f      	eors	r7, r1
 800120c:	4671      	mov	r1, lr
 800120e:	404b      	eors	r3, r1
 8001210:	210e      	movs	r1, #14
 8001212:	41cc      	rors	r4, r1
 8001214:	211b      	movs	r1, #27
 8001216:	41cd      	rors	r5, r1
 8001218:	2118      	movs	r1, #24
 800121a:	41ce      	rors	r6, r1
 800121c:	2104      	movs	r1, #4
 800121e:	41cf      	rors	r7, r1
 8001220:	2112      	movs	r1, #18
 8001222:	41cb      	rors	r3, r1
 8001224:	0029      	movs	r1, r5
 8001226:	43a1      	bics	r1, r4
 8001228:	4059      	eors	r1, r3
 800122a:	6281      	str	r1, [r0, #40]	; 0x28
 800122c:	0031      	movs	r1, r6
 800122e:	43a9      	bics	r1, r5
 8001230:	4061      	eors	r1, r4
 8001232:	6581      	str	r1, [r0, #88]	; 0x58
 8001234:	439c      	bics	r4, r3
 8001236:	407c      	eors	r4, r7
 8001238:	6244      	str	r4, [r0, #36]	; 0x24
 800123a:	43bb      	bics	r3, r7
 800123c:	4073      	eors	r3, r6
 800123e:	3080      	adds	r0, #128	; 0x80
 8001240:	6383      	str	r3, [r0, #56]	; 0x38
 8001242:	43b7      	bics	r7, r6
 8001244:	406f      	eors	r7, r5
 8001246:	60c7      	str	r7, [r0, #12]
 8001248:	3880      	subs	r0, #128	; 0x80
 800124a:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800124c:	3080      	adds	r0, #128	; 0x80
 800124e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001250:	3880      	subs	r0, #128	; 0x80
 8001252:	6943      	ldr	r3, [r0, #20]
 8001254:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001256:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8001258:	4641      	mov	r1, r8
 800125a:	404e      	eors	r6, r1
 800125c:	4053      	eors	r3, r2
 800125e:	4659      	mov	r1, fp
 8001260:	404f      	eors	r7, r1
 8001262:	4649      	mov	r1, r9
 8001264:	404c      	eors	r4, r1
 8001266:	4661      	mov	r1, ip
 8001268:	404d      	eors	r5, r1
 800126a:	210c      	movs	r1, #12
 800126c:	41ce      	rors	r6, r1
 800126e:	211f      	movs	r1, #31
 8001270:	41cf      	rors	r7, r1
 8001272:	2101      	movs	r1, #1
 8001274:	41cb      	rors	r3, r1
 8001276:	2105      	movs	r1, #5
 8001278:	41cc      	rors	r4, r1
 800127a:	210d      	movs	r1, #13
 800127c:	41cd      	rors	r5, r1
 800127e:	0029      	movs	r1, r5
 8001280:	43a1      	bics	r1, r4
 8001282:	4059      	eors	r1, r3
 8001284:	6781      	str	r1, [r0, #120]	; 0x78
 8001286:	0031      	movs	r1, r6
 8001288:	43a9      	bics	r1, r5
 800128a:	4061      	eors	r1, r4
 800128c:	3080      	adds	r0, #128	; 0x80
 800128e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001290:	439c      	bics	r4, r3
 8001292:	407c      	eors	r4, r7
 8001294:	3880      	subs	r0, #128	; 0x80
 8001296:	6704      	str	r4, [r0, #112]	; 0x70
 8001298:	43bb      	bics	r3, r7
 800129a:	4073      	eors	r3, r6
 800129c:	6403      	str	r3, [r0, #64]	; 0x40
 800129e:	43b7      	bics	r7, r6
 80012a0:	406f      	eors	r7, r5
 80012a2:	6147      	str	r7, [r0, #20]
 80012a4:	9903      	ldr	r1, [sp, #12]
 80012a6:	4689      	mov	r9, r1
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012ac:	6e45      	ldr	r5, [r0, #100]	; 0x64
 80012ae:	3080      	adds	r0, #128	; 0x80
 80012b0:	6946      	ldr	r6, [r0, #20]
 80012b2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80012b4:	4641      	mov	r1, r8
 80012b6:	404b      	eors	r3, r1
 80012b8:	4055      	eors	r5, r2
 80012ba:	4651      	mov	r1, sl
 80012bc:	404c      	eors	r4, r1
 80012be:	4649      	mov	r1, r9
 80012c0:	404e      	eors	r6, r1
 80012c2:	4661      	mov	r1, ip
 80012c4:	404f      	eors	r7, r1
 80012c6:	210a      	movs	r1, #10
 80012c8:	41cc      	rors	r4, r1
 80012ca:	210a      	movs	r1, #10
 80012cc:	41cd      	rors	r5, r1
 80012ce:	2115      	movs	r1, #21
 80012d0:	41ce      	rors	r6, r1
 80012d2:	2119      	movs	r1, #25
 80012d4:	41cf      	rors	r7, r1
 80012d6:	0031      	movs	r1, r6
 80012d8:	43a9      	bics	r1, r5
 80012da:	4061      	eors	r1, r4
 80012dc:	3880      	subs	r0, #128	; 0x80
 80012de:	6301      	str	r1, [r0, #48]	; 0x30
 80012e0:	0039      	movs	r1, r7
 80012e2:	43b1      	bics	r1, r6
 80012e4:	4069      	eors	r1, r5
 80012e6:	6641      	str	r1, [r0, #100]	; 0x64
 80012e8:	0019      	movs	r1, r3
 80012ea:	43b9      	bics	r1, r7
 80012ec:	4071      	eors	r1, r6
 80012ee:	3080      	adds	r0, #128	; 0x80
 80012f0:	6141      	str	r1, [r0, #20]
 80012f2:	0021      	movs	r1, r4
 80012f4:	4399      	bics	r1, r3
 80012f6:	4079      	eors	r1, r7
 80012f8:	6401      	str	r1, [r0, #64]	; 0x40
 80012fa:	3880      	subs	r0, #128	; 0x80
 80012fc:	9905      	ldr	r1, [sp, #20]
 80012fe:	43a5      	bics	r5, r4
 8001300:	680c      	ldr	r4, [r1, #0]
 8001302:	406b      	eors	r3, r5
 8001304:	4063      	eors	r3, r4
 8001306:	6003      	str	r3, [r0, #0]
 8001308:	9a04      	ldr	r2, [sp, #16]
 800130a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800130c:	3080      	adds	r0, #128	; 0x80
 800130e:	6806      	ldr	r6, [r0, #0]
 8001310:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001312:	3880      	subs	r0, #128	; 0x80
 8001314:	69c3      	ldr	r3, [r0, #28]
 8001316:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001318:	4641      	mov	r1, r8
 800131a:	404d      	eors	r5, r1
 800131c:	4057      	eors	r7, r2
 800131e:	4651      	mov	r1, sl
 8001320:	404e      	eors	r6, r1
 8001322:	4649      	mov	r1, r9
 8001324:	404b      	eors	r3, r1
 8001326:	4671      	mov	r1, lr
 8001328:	404c      	eors	r4, r1
 800132a:	211f      	movs	r1, #31
 800132c:	41cd      	rors	r5, r1
 800132e:	210a      	movs	r1, #10
 8001330:	41ce      	rors	r6, r1
 8001332:	2102      	movs	r1, #2
 8001334:	41cf      	rors	r7, r1
 8001336:	2112      	movs	r1, #18
 8001338:	41cb      	rors	r3, r1
 800133a:	2116      	movs	r1, #22
 800133c:	41cc      	rors	r4, r1
 800133e:	0029      	movs	r1, r5
 8001340:	43a1      	bics	r1, r4
 8001342:	4059      	eors	r1, r3
 8001344:	6501      	str	r1, [r0, #80]	; 0x50
 8001346:	0031      	movs	r1, r6
 8001348:	43a9      	bics	r1, r5
 800134a:	4061      	eors	r1, r4
 800134c:	3080      	adds	r0, #128	; 0x80
 800134e:	6001      	str	r1, [r0, #0]
 8001350:	439c      	bics	r4, r3
 8001352:	407c      	eors	r4, r7
 8001354:	3880      	subs	r0, #128	; 0x80
 8001356:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001358:	43bb      	bics	r3, r7
 800135a:	4073      	eors	r3, r6
 800135c:	61c3      	str	r3, [r0, #28]
 800135e:	43b7      	bics	r7, r6
 8001360:	406f      	eors	r7, r5
 8001362:	3080      	adds	r0, #128	; 0x80
 8001364:	6307      	str	r7, [r0, #48]	; 0x30
 8001366:	3880      	subs	r0, #128	; 0x80
 8001368:	3080      	adds	r0, #128	; 0x80
 800136a:	6a07      	ldr	r7, [r0, #32]
 800136c:	3880      	subs	r0, #128	; 0x80
 800136e:	68c3      	ldr	r3, [r0, #12]
 8001370:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001372:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8001374:	3080      	adds	r0, #128	; 0x80
 8001376:	6986      	ldr	r6, [r0, #24]
 8001378:	4641      	mov	r1, r8
 800137a:	404f      	eors	r7, r1
 800137c:	4054      	eors	r4, r2
 800137e:	4659      	mov	r1, fp
 8001380:	404b      	eors	r3, r1
 8001382:	4649      	mov	r1, r9
 8001384:	404d      	eors	r5, r1
 8001386:	4661      	mov	r1, ip
 8001388:	404e      	eors	r6, r1
 800138a:	2117      	movs	r1, #23
 800138c:	41cf      	rors	r7, r1
 800138e:	211f      	movs	r1, #31
 8001390:	41cb      	rors	r3, r1
 8001392:	211d      	movs	r1, #29
 8001394:	41cc      	rors	r4, r1
 8001396:	2113      	movs	r1, #19
 8001398:	41cd      	rors	r5, r1
 800139a:	211c      	movs	r1, #28
 800139c:	41ce      	rors	r6, r1
 800139e:	0029      	movs	r1, r5
 80013a0:	43a1      	bics	r1, r4
 80013a2:	4059      	eors	r1, r3
 80013a4:	6201      	str	r1, [r0, #32]
 80013a6:	0031      	movs	r1, r6
 80013a8:	43a9      	bics	r1, r5
 80013aa:	4061      	eors	r1, r4
 80013ac:	3880      	subs	r0, #128	; 0x80
 80013ae:	60c1      	str	r1, [r0, #12]
 80013b0:	439c      	bics	r4, r3
 80013b2:	407c      	eors	r4, r7
 80013b4:	3080      	adds	r0, #128	; 0x80
 80013b6:	6184      	str	r4, [r0, #24]
 80013b8:	43bb      	bics	r3, r7
 80013ba:	4073      	eors	r3, r6
 80013bc:	3880      	subs	r0, #128	; 0x80
 80013be:	66c3      	str	r3, [r0, #108]	; 0x6c
 80013c0:	43b7      	bics	r7, r6
 80013c2:	406f      	eors	r7, r5
 80013c4:	6387      	str	r7, [r0, #56]	; 0x38
 80013c6:	9901      	ldr	r1, [sp, #4]
 80013c8:	4688      	mov	r8, r1
 80013ca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013cc:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80013ce:	3080      	adds	r0, #128	; 0x80
 80013d0:	6886      	ldr	r6, [r0, #8]
 80013d2:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80013d4:	3880      	subs	r0, #128	; 0x80
 80013d6:	6a03      	ldr	r3, [r0, #32]
 80013d8:	4641      	mov	r1, r8
 80013da:	404c      	eors	r4, r1
 80013dc:	4056      	eors	r6, r2
 80013de:	4659      	mov	r1, fp
 80013e0:	404d      	eors	r5, r1
 80013e2:	4649      	mov	r1, r9
 80013e4:	404f      	eors	r7, r1
 80013e6:	4661      	mov	r1, ip
 80013e8:	404b      	eors	r3, r1
 80013ea:	210e      	movs	r1, #14
 80013ec:	41cc      	rors	r4, r1
 80013ee:	211b      	movs	r1, #27
 80013f0:	41cd      	rors	r5, r1
 80013f2:	2119      	movs	r1, #25
 80013f4:	41ce      	rors	r6, r1
 80013f6:	2104      	movs	r1, #4
 80013f8:	41cf      	rors	r7, r1
 80013fa:	2113      	movs	r1, #19
 80013fc:	41cb      	rors	r3, r1
 80013fe:	0029      	movs	r1, r5
 8001400:	43a1      	bics	r1, r4
 8001402:	4059      	eors	r1, r3
 8001404:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001406:	0031      	movs	r1, r6
 8001408:	43a9      	bics	r1, r5
 800140a:	4061      	eors	r1, r4
 800140c:	65c1      	str	r1, [r0, #92]	; 0x5c
 800140e:	439c      	bics	r4, r3
 8001410:	407c      	eors	r4, r7
 8001412:	6204      	str	r4, [r0, #32]
 8001414:	43bb      	bics	r3, r7
 8001416:	4073      	eors	r3, r6
 8001418:	3080      	adds	r0, #128	; 0x80
 800141a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800141c:	43b7      	bics	r7, r6
 800141e:	406f      	eors	r7, r5
 8001420:	6087      	str	r7, [r0, #8]
 8001422:	3880      	subs	r0, #128	; 0x80
 8001424:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
 8001426:	3080      	adds	r0, #128	; 0x80
 8001428:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800142a:	3880      	subs	r0, #128	; 0x80
 800142c:	6903      	ldr	r3, [r0, #16]
 800142e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001430:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001432:	4641      	mov	r1, r8
 8001434:	404e      	eors	r6, r1
 8001436:	4053      	eors	r3, r2
 8001438:	4651      	mov	r1, sl
 800143a:	404f      	eors	r7, r1
 800143c:	4649      	mov	r1, r9
 800143e:	404c      	eors	r4, r1
 8001440:	4671      	mov	r1, lr
 8001442:	404d      	eors	r5, r1
 8001444:	210b      	movs	r1, #11
 8001446:	41ce      	rors	r6, r1
 8001448:	211f      	movs	r1, #31
 800144a:	41cf      	rors	r7, r1
 800144c:	2101      	movs	r1, #1
 800144e:	41cb      	rors	r3, r1
 8001450:	2104      	movs	r1, #4
 8001452:	41cc      	rors	r4, r1
 8001454:	210c      	movs	r1, #12
 8001456:	41cd      	rors	r5, r1
 8001458:	0029      	movs	r1, r5
 800145a:	43a1      	bics	r1, r4
 800145c:	4059      	eors	r1, r3
 800145e:	67c1      	str	r1, [r0, #124]	; 0x7c
 8001460:	0031      	movs	r1, r6
 8001462:	43a9      	bics	r1, r5
 8001464:	4061      	eors	r1, r4
 8001466:	3080      	adds	r0, #128	; 0x80
 8001468:	6281      	str	r1, [r0, #40]	; 0x28
 800146a:	439c      	bics	r4, r3
 800146c:	407c      	eors	r4, r7
 800146e:	3880      	subs	r0, #128	; 0x80
 8001470:	6744      	str	r4, [r0, #116]	; 0x74
 8001472:	43bb      	bics	r3, r7
 8001474:	4073      	eors	r3, r6
 8001476:	6443      	str	r3, [r0, #68]	; 0x44
 8001478:	43b7      	bics	r7, r6
 800147a:	406f      	eors	r7, r5
 800147c:	6107      	str	r7, [r0, #16]
 800147e:	9902      	ldr	r1, [sp, #8]
 8001480:	4689      	mov	r9, r1
 8001482:	6843      	ldr	r3, [r0, #4]
 8001484:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001486:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8001488:	3080      	adds	r0, #128	; 0x80
 800148a:	6906      	ldr	r6, [r0, #16]
 800148c:	6c47      	ldr	r7, [r0, #68]	; 0x44
 800148e:	4641      	mov	r1, r8
 8001490:	404b      	eors	r3, r1
 8001492:	4055      	eors	r5, r2
 8001494:	4659      	mov	r1, fp
 8001496:	404c      	eors	r4, r1
 8001498:	4649      	mov	r1, r9
 800149a:	404e      	eors	r6, r1
 800149c:	4671      	mov	r1, lr
 800149e:	404f      	eors	r7, r1
 80014a0:	210a      	movs	r1, #10
 80014a2:	41cc      	rors	r4, r1
 80014a4:	210b      	movs	r1, #11
 80014a6:	41cd      	rors	r5, r1
 80014a8:	2116      	movs	r1, #22
 80014aa:	41ce      	rors	r6, r1
 80014ac:	2119      	movs	r1, #25
 80014ae:	41cf      	rors	r7, r1
 80014b0:	0031      	movs	r1, r6
 80014b2:	43a9      	bics	r1, r5
 80014b4:	4061      	eors	r1, r4
 80014b6:	3880      	subs	r0, #128	; 0x80
 80014b8:	6341      	str	r1, [r0, #52]	; 0x34
 80014ba:	0039      	movs	r1, r7
 80014bc:	43b1      	bics	r1, r6
 80014be:	4069      	eors	r1, r5
 80014c0:	6601      	str	r1, [r0, #96]	; 0x60
 80014c2:	0019      	movs	r1, r3
 80014c4:	43b9      	bics	r1, r7
 80014c6:	4071      	eors	r1, r6
 80014c8:	3080      	adds	r0, #128	; 0x80
 80014ca:	6101      	str	r1, [r0, #16]
 80014cc:	0021      	movs	r1, r4
 80014ce:	4399      	bics	r1, r3
 80014d0:	4079      	eors	r1, r7
 80014d2:	6441      	str	r1, [r0, #68]	; 0x44
 80014d4:	3880      	subs	r0, #128	; 0x80
 80014d6:	9905      	ldr	r1, [sp, #20]
 80014d8:	43a5      	bics	r5, r4
 80014da:	684c      	ldr	r4, [r1, #4]
 80014dc:	406b      	eors	r3, r5
 80014de:	4063      	eors	r3, r4
 80014e0:	6043      	str	r3, [r0, #4]
	KeccakRound1
 80014e2:	221f      	movs	r2, #31
 80014e4:	3080      	adds	r0, #128	; 0x80
 80014e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014e8:	3880      	subs	r0, #128	; 0x80
 80014ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80014ec:	404b      	eors	r3, r1
 80014ee:	3080      	adds	r0, #128	; 0x80
 80014f0:	6981      	ldr	r1, [r0, #24]
 80014f2:	404b      	eors	r3, r1
 80014f4:	3880      	subs	r0, #128	; 0x80
 80014f6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80014f8:	404b      	eors	r3, r1
 80014fa:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80014fc:	404b      	eors	r3, r1
 80014fe:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8001500:	3080      	adds	r0, #128	; 0x80
 8001502:	6801      	ldr	r1, [r0, #0]
 8001504:	404f      	eors	r7, r1
 8001506:	3880      	subs	r0, #128	; 0x80
 8001508:	6881      	ldr	r1, [r0, #8]
 800150a:	404f      	eors	r7, r1
 800150c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800150e:	404f      	eors	r7, r1
 8001510:	3080      	adds	r0, #128	; 0x80
 8001512:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001514:	3880      	subs	r0, #128	; 0x80
 8001516:	404f      	eors	r7, r1
 8001518:	003e      	movs	r6, r7
 800151a:	41d6      	rors	r6, r2
 800151c:	405e      	eors	r6, r3
 800151e:	9600      	str	r6, [sp, #0]
 8001520:	3080      	adds	r0, #128	; 0x80
 8001522:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001524:	3880      	subs	r0, #128	; 0x80
 8001526:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001528:	404e      	eors	r6, r1
 800152a:	3080      	adds	r0, #128	; 0x80
 800152c:	69c1      	ldr	r1, [r0, #28]
 800152e:	404e      	eors	r6, r1
 8001530:	3880      	subs	r0, #128	; 0x80
 8001532:	6a01      	ldr	r1, [r0, #32]
 8001534:	404e      	eors	r6, r1
 8001536:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8001538:	404e      	eors	r6, r1
 800153a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800153c:	3080      	adds	r0, #128	; 0x80
 800153e:	6841      	ldr	r1, [r0, #4]
 8001540:	404d      	eors	r5, r1
 8001542:	3880      	subs	r0, #128	; 0x80
 8001544:	68c1      	ldr	r1, [r0, #12]
 8001546:	404d      	eors	r5, r1
 8001548:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800154a:	404d      	eors	r5, r1
 800154c:	3080      	adds	r0, #128	; 0x80
 800154e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001550:	3880      	subs	r0, #128	; 0x80
 8001552:	404d      	eors	r5, r1
 8001554:	4629      	mov	r1, r5
 8001556:	4071      	eors	r1, r6
 8001558:	4688      	mov	r8, r1
 800155a:	46ae      	mov	lr, r5
 800155c:	9101      	str	r1, [sp, #4]
 800155e:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8001560:	3080      	adds	r0, #128	; 0x80
 8001562:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001564:	404d      	eors	r5, r1
 8001566:	3880      	subs	r0, #128	; 0x80
 8001568:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800156a:	404d      	eors	r5, r1
 800156c:	3080      	adds	r0, #128	; 0x80
 800156e:	68c1      	ldr	r1, [r0, #12]
 8001570:	404d      	eors	r5, r1
 8001572:	3880      	subs	r0, #128	; 0x80
 8001574:	6901      	ldr	r1, [r0, #16]
 8001576:	404d      	eors	r5, r1
 8001578:	41d6      	rors	r6, r2
 800157a:	406e      	eors	r6, r5
 800157c:	9602      	str	r6, [sp, #8]
 800157e:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001580:	3080      	adds	r0, #128	; 0x80
 8001582:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001584:	404c      	eors	r4, r1
 8001586:	3880      	subs	r0, #128	; 0x80
 8001588:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800158a:	404c      	eors	r4, r1
 800158c:	3080      	adds	r0, #128	; 0x80
 800158e:	6881      	ldr	r1, [r0, #8]
 8001590:	404c      	eors	r4, r1
 8001592:	3880      	subs	r0, #128	; 0x80
 8001594:	6941      	ldr	r1, [r0, #20]
 8001596:	404c      	eors	r4, r1
 8001598:	4063      	eors	r3, r4
 800159a:	9303      	str	r3, [sp, #12]
 800159c:	6803      	ldr	r3, [r0, #0]
 800159e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80015a0:	404b      	eors	r3, r1
 80015a2:	3080      	adds	r0, #128	; 0x80
 80015a4:	6a01      	ldr	r1, [r0, #32]
 80015a6:	404b      	eors	r3, r1
 80015a8:	3880      	subs	r0, #128	; 0x80
 80015aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80015ac:	404b      	eors	r3, r1
 80015ae:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80015b0:	404b      	eors	r3, r1
 80015b2:	41d4      	rors	r4, r2
 80015b4:	405c      	eors	r4, r3
 80015b6:	46a2      	mov	sl, r4
 80015b8:	6846      	ldr	r6, [r0, #4]
 80015ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80015bc:	404e      	eors	r6, r1
 80015be:	3080      	adds	r0, #128	; 0x80
 80015c0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80015c2:	404e      	eors	r6, r1
 80015c4:	3880      	subs	r0, #128	; 0x80
 80015c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80015c8:	404e      	eors	r6, r1
 80015ca:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80015cc:	404e      	eors	r6, r1
 80015ce:	4629      	mov	r1, r5
 80015d0:	4071      	eors	r1, r6
 80015d2:	468b      	mov	fp, r1
 80015d4:	3080      	adds	r0, #128	; 0x80
 80015d6:	6904      	ldr	r4, [r0, #16]
 80015d8:	3880      	subs	r0, #128	; 0x80
 80015da:	69c1      	ldr	r1, [r0, #28]
 80015dc:	404c      	eors	r4, r1
 80015de:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80015e0:	404c      	eors	r4, r1
 80015e2:	3080      	adds	r0, #128	; 0x80
 80015e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80015e6:	404c      	eors	r4, r1
 80015e8:	3880      	subs	r0, #128	; 0x80
 80015ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80015ec:	404c      	eors	r4, r1
 80015ee:	4671      	mov	r1, lr
 80015f0:	0025      	movs	r5, r4
 80015f2:	41d5      	rors	r5, r2
 80015f4:	404d      	eors	r5, r1
 80015f6:	9504      	str	r5, [sp, #16]
 80015f8:	3080      	adds	r0, #128	; 0x80
 80015fa:	6945      	ldr	r5, [r0, #20]
 80015fc:	3880      	subs	r0, #128	; 0x80
 80015fe:	6981      	ldr	r1, [r0, #24]
 8001600:	404d      	eors	r5, r1
 8001602:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001604:	404d      	eors	r5, r1
 8001606:	3080      	adds	r0, #128	; 0x80
 8001608:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800160a:	404d      	eors	r5, r1
 800160c:	3880      	subs	r0, #128	; 0x80
 800160e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001610:	404d      	eors	r5, r1
 8001612:	406f      	eors	r7, r5
 8001614:	41d6      	rors	r6, r2
 8001616:	406e      	eors	r6, r5
 8001618:	46b4      	mov	ip, r6
 800161a:	405c      	eors	r4, r3
 800161c:	46a6      	mov	lr, r4
 800161e:	003a      	movs	r2, r7
 8001620:	9902      	ldr	r1, [sp, #8]
 8001622:	4689      	mov	r9, r1
 8001624:	3080      	adds	r0, #128	; 0x80
 8001626:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001628:	3880      	subs	r0, #128	; 0x80
 800162a:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800162c:	6947      	ldr	r7, [r0, #20]
 800162e:	3080      	adds	r0, #128	; 0x80
 8001630:	6943      	ldr	r3, [r0, #20]
 8001632:	3880      	subs	r0, #128	; 0x80
 8001634:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001636:	4641      	mov	r1, r8
 8001638:	404d      	eors	r5, r1
 800163a:	4057      	eors	r7, r2
 800163c:	4659      	mov	r1, fp
 800163e:	404e      	eors	r6, r1
 8001640:	4649      	mov	r1, r9
 8001642:	404b      	eors	r3, r1
 8001644:	4661      	mov	r1, ip
 8001646:	404c      	eors	r4, r1
 8001648:	211e      	movs	r1, #30
 800164a:	41cd      	rors	r5, r1
 800164c:	2109      	movs	r1, #9
 800164e:	41ce      	rors	r6, r1
 8001650:	2101      	movs	r1, #1
 8001652:	41cf      	rors	r7, r1
 8001654:	2112      	movs	r1, #18
 8001656:	41cb      	rors	r3, r1
 8001658:	2116      	movs	r1, #22
 800165a:	41cc      	rors	r4, r1
 800165c:	0029      	movs	r1, r5
 800165e:	43a1      	bics	r1, r4
 8001660:	4059      	eors	r1, r3
 8001662:	3080      	adds	r0, #128	; 0x80
 8001664:	6241      	str	r1, [r0, #36]	; 0x24
 8001666:	0031      	movs	r1, r6
 8001668:	43a9      	bics	r1, r5
 800166a:	4061      	eors	r1, r4
 800166c:	3880      	subs	r0, #128	; 0x80
 800166e:	65c1      	str	r1, [r0, #92]	; 0x5c
 8001670:	439c      	bics	r4, r3
 8001672:	407c      	eors	r4, r7
 8001674:	6484      	str	r4, [r0, #72]	; 0x48
 8001676:	43bb      	bics	r3, r7
 8001678:	4073      	eors	r3, r6
 800167a:	3080      	adds	r0, #128	; 0x80
 800167c:	6143      	str	r3, [r0, #20]
 800167e:	43b7      	bics	r7, r6
 8001680:	406f      	eors	r7, r5
 8001682:	3880      	subs	r0, #128	; 0x80
 8001684:	6147      	str	r7, [r0, #20]
 8001686:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8001688:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800168a:	3080      	adds	r0, #128	; 0x80
 800168c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800168e:	3880      	subs	r0, #128	; 0x80
 8001690:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8001692:	6a06      	ldr	r6, [r0, #32]
 8001694:	4641      	mov	r1, r8
 8001696:	404f      	eors	r7, r1
 8001698:	4054      	eors	r4, r2
 800169a:	4651      	mov	r1, sl
 800169c:	404b      	eors	r3, r1
 800169e:	4649      	mov	r1, r9
 80016a0:	404d      	eors	r5, r1
 80016a2:	4671      	mov	r1, lr
 80016a4:	404e      	eors	r6, r1
 80016a6:	2117      	movs	r1, #23
 80016a8:	41cf      	rors	r7, r1
 80016aa:	211d      	movs	r1, #29
 80016ac:	41cc      	rors	r4, r1
 80016ae:	2114      	movs	r1, #20
 80016b0:	41cd      	rors	r5, r1
 80016b2:	211c      	movs	r1, #28
 80016b4:	41ce      	rors	r6, r1
 80016b6:	0029      	movs	r1, r5
 80016b8:	43a1      	bics	r1, r4
 80016ba:	4059      	eors	r1, r3
 80016bc:	6781      	str	r1, [r0, #120]	; 0x78
 80016be:	0031      	movs	r1, r6
 80016c0:	43a9      	bics	r1, r5
 80016c2:	4061      	eors	r1, r4
 80016c4:	6301      	str	r1, [r0, #48]	; 0x30
 80016c6:	439c      	bics	r4, r3
 80016c8:	407c      	eors	r4, r7
 80016ca:	6204      	str	r4, [r0, #32]
 80016cc:	43bb      	bics	r3, r7
 80016ce:	4073      	eors	r3, r6
 80016d0:	66c3      	str	r3, [r0, #108]	; 0x6c
 80016d2:	43b7      	bics	r7, r6
 80016d4:	406f      	eors	r7, r5
 80016d6:	3080      	adds	r0, #128	; 0x80
 80016d8:	6307      	str	r7, [r0, #48]	; 0x30
 80016da:	3880      	subs	r0, #128	; 0x80
 80016dc:	9900      	ldr	r1, [sp, #0]
 80016de:	4688      	mov	r8, r1
 80016e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80016e2:	68c5      	ldr	r5, [r0, #12]
 80016e4:	3080      	adds	r0, #128	; 0x80
 80016e6:	6886      	ldr	r6, [r0, #8]
 80016e8:	3880      	subs	r0, #128	; 0x80
 80016ea:	6c47      	ldr	r7, [r0, #68]	; 0x44
 80016ec:	3080      	adds	r0, #128	; 0x80
 80016ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016f0:	4641      	mov	r1, r8
 80016f2:	404c      	eors	r4, r1
 80016f4:	4056      	eors	r6, r2
 80016f6:	4651      	mov	r1, sl
 80016f8:	404d      	eors	r5, r1
 80016fa:	4649      	mov	r1, r9
 80016fc:	404f      	eors	r7, r1
 80016fe:	4671      	mov	r1, lr
 8001700:	404b      	eors	r3, r1
 8001702:	210e      	movs	r1, #14
 8001704:	41cc      	rors	r4, r1
 8001706:	211b      	movs	r1, #27
 8001708:	41cd      	rors	r5, r1
 800170a:	2118      	movs	r1, #24
 800170c:	41ce      	rors	r6, r1
 800170e:	2104      	movs	r1, #4
 8001710:	41cf      	rors	r7, r1
 8001712:	2112      	movs	r1, #18
 8001714:	41cb      	rors	r3, r1
 8001716:	0029      	movs	r1, r5
 8001718:	43a1      	bics	r1, r4
 800171a:	4059      	eors	r1, r3
 800171c:	3880      	subs	r0, #128	; 0x80
 800171e:	6541      	str	r1, [r0, #84]	; 0x54
 8001720:	0031      	movs	r1, r6
 8001722:	43a9      	bics	r1, r5
 8001724:	4061      	eors	r1, r4
 8001726:	60c1      	str	r1, [r0, #12]
 8001728:	439c      	bics	r4, r3
 800172a:	407c      	eors	r4, r7
 800172c:	3080      	adds	r0, #128	; 0x80
 800172e:	6444      	str	r4, [r0, #68]	; 0x44
 8001730:	43bb      	bics	r3, r7
 8001732:	4073      	eors	r3, r6
 8001734:	3880      	subs	r0, #128	; 0x80
 8001736:	6443      	str	r3, [r0, #68]	; 0x44
 8001738:	43b7      	bics	r7, r6
 800173a:	406f      	eors	r7, r5
 800173c:	3080      	adds	r0, #128	; 0x80
 800173e:	6087      	str	r7, [r0, #8]
 8001740:	3880      	subs	r0, #128	; 0x80
 8001742:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001744:	3080      	adds	r0, #128	; 0x80
 8001746:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001748:	3880      	subs	r0, #128	; 0x80
 800174a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800174c:	6984      	ldr	r4, [r0, #24]
 800174e:	3080      	adds	r0, #128	; 0x80
 8001750:	6985      	ldr	r5, [r0, #24]
 8001752:	4641      	mov	r1, r8
 8001754:	404e      	eors	r6, r1
 8001756:	4053      	eors	r3, r2
 8001758:	4659      	mov	r1, fp
 800175a:	404f      	eors	r7, r1
 800175c:	4649      	mov	r1, r9
 800175e:	404c      	eors	r4, r1
 8001760:	4661      	mov	r1, ip
 8001762:	404d      	eors	r5, r1
 8001764:	210c      	movs	r1, #12
 8001766:	41ce      	rors	r6, r1
 8001768:	211f      	movs	r1, #31
 800176a:	41cf      	rors	r7, r1
 800176c:	2101      	movs	r1, #1
 800176e:	41cb      	rors	r3, r1
 8001770:	2105      	movs	r1, #5
 8001772:	41cc      	rors	r4, r1
 8001774:	210d      	movs	r1, #13
 8001776:	41cd      	rors	r5, r1
 8001778:	0029      	movs	r1, r5
 800177a:	43a1      	bics	r1, r4
 800177c:	4059      	eors	r1, r3
 800177e:	3880      	subs	r0, #128	; 0x80
 8001780:	6281      	str	r1, [r0, #40]	; 0x28
 8001782:	0031      	movs	r1, r6
 8001784:	43a9      	bics	r1, r5
 8001786:	4061      	eors	r1, r4
 8001788:	3080      	adds	r0, #128	; 0x80
 800178a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800178c:	439c      	bics	r4, r3
 800178e:	407c      	eors	r4, r7
 8001790:	6184      	str	r4, [r0, #24]
 8001792:	43bb      	bics	r3, r7
 8001794:	4073      	eors	r3, r6
 8001796:	3880      	subs	r0, #128	; 0x80
 8001798:	6183      	str	r3, [r0, #24]
 800179a:	43b7      	bics	r7, r6
 800179c:	406f      	eors	r7, r5
 800179e:	6607      	str	r7, [r0, #96]	; 0x60
 80017a0:	9903      	ldr	r1, [sp, #12]
 80017a2:	4689      	mov	r9, r1
 80017a4:	6803      	ldr	r3, [r0, #0]
 80017a6:	3080      	adds	r0, #128	; 0x80
 80017a8:	6844      	ldr	r4, [r0, #4]
 80017aa:	3880      	subs	r0, #128	; 0x80
 80017ac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80017ae:	3080      	adds	r0, #128	; 0x80
 80017b0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80017b2:	3880      	subs	r0, #128	; 0x80
 80017b4:	6f47      	ldr	r7, [r0, #116]	; 0x74
 80017b6:	4641      	mov	r1, r8
 80017b8:	404b      	eors	r3, r1
 80017ba:	4055      	eors	r5, r2
 80017bc:	4651      	mov	r1, sl
 80017be:	404c      	eors	r4, r1
 80017c0:	4649      	mov	r1, r9
 80017c2:	404e      	eors	r6, r1
 80017c4:	4661      	mov	r1, ip
 80017c6:	404f      	eors	r7, r1
 80017c8:	210a      	movs	r1, #10
 80017ca:	41cc      	rors	r4, r1
 80017cc:	210a      	movs	r1, #10
 80017ce:	41cd      	rors	r5, r1
 80017d0:	2115      	movs	r1, #21
 80017d2:	41ce      	rors	r6, r1
 80017d4:	2119      	movs	r1, #25
 80017d6:	41cf      	rors	r7, r1
 80017d8:	0031      	movs	r1, r6
 80017da:	43a9      	bics	r1, r5
 80017dc:	4061      	eors	r1, r4
 80017de:	3080      	adds	r0, #128	; 0x80
 80017e0:	6041      	str	r1, [r0, #4]
 80017e2:	0039      	movs	r1, r7
 80017e4:	43b1      	bics	r1, r6
 80017e6:	4069      	eors	r1, r5
 80017e8:	3880      	subs	r0, #128	; 0x80
 80017ea:	63c1      	str	r1, [r0, #60]	; 0x3c
 80017ec:	0019      	movs	r1, r3
 80017ee:	43b9      	bics	r1, r7
 80017f0:	4071      	eors	r1, r6
 80017f2:	3080      	adds	r0, #128	; 0x80
 80017f4:	63c1      	str	r1, [r0, #60]	; 0x3c
 80017f6:	0021      	movs	r1, r4
 80017f8:	4399      	bics	r1, r3
 80017fa:	4079      	eors	r1, r7
 80017fc:	3880      	subs	r0, #128	; 0x80
 80017fe:	6741      	str	r1, [r0, #116]	; 0x74
 8001800:	9905      	ldr	r1, [sp, #20]
 8001802:	43a5      	bics	r5, r4
 8001804:	688c      	ldr	r4, [r1, #8]
 8001806:	406b      	eors	r3, r5
 8001808:	4063      	eors	r3, r4
 800180a:	6003      	str	r3, [r0, #0]
 800180c:	9a04      	ldr	r2, [sp, #16]
 800180e:	3080      	adds	r0, #128	; 0x80
 8001810:	6a05      	ldr	r5, [r0, #32]
 8001812:	3880      	subs	r0, #128	; 0x80
 8001814:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8001816:	6907      	ldr	r7, [r0, #16]
 8001818:	3080      	adds	r0, #128	; 0x80
 800181a:	6903      	ldr	r3, [r0, #16]
 800181c:	3880      	subs	r0, #128	; 0x80
 800181e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001820:	4641      	mov	r1, r8
 8001822:	404d      	eors	r5, r1
 8001824:	4057      	eors	r7, r2
 8001826:	4651      	mov	r1, sl
 8001828:	404e      	eors	r6, r1
 800182a:	4649      	mov	r1, r9
 800182c:	404b      	eors	r3, r1
 800182e:	4671      	mov	r1, lr
 8001830:	404c      	eors	r4, r1
 8001832:	211f      	movs	r1, #31
 8001834:	41cd      	rors	r5, r1
 8001836:	210a      	movs	r1, #10
 8001838:	41ce      	rors	r6, r1
 800183a:	2102      	movs	r1, #2
 800183c:	41cf      	rors	r7, r1
 800183e:	2112      	movs	r1, #18
 8001840:	41cb      	rors	r3, r1
 8001842:	2116      	movs	r1, #22
 8001844:	41cc      	rors	r4, r1
 8001846:	0029      	movs	r1, r5
 8001848:	43a1      	bics	r1, r4
 800184a:	4059      	eors	r1, r3
 800184c:	3080      	adds	r0, #128	; 0x80
 800184e:	6201      	str	r1, [r0, #32]
 8001850:	0031      	movs	r1, r6
 8001852:	43a9      	bics	r1, r5
 8001854:	4061      	eors	r1, r4
 8001856:	3880      	subs	r0, #128	; 0x80
 8001858:	6581      	str	r1, [r0, #88]	; 0x58
 800185a:	439c      	bics	r4, r3
 800185c:	407c      	eors	r4, r7
 800185e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001860:	43bb      	bics	r3, r7
 8001862:	4073      	eors	r3, r6
 8001864:	3080      	adds	r0, #128	; 0x80
 8001866:	6103      	str	r3, [r0, #16]
 8001868:	43b7      	bics	r7, r6
 800186a:	406f      	eors	r7, r5
 800186c:	3880      	subs	r0, #128	; 0x80
 800186e:	6107      	str	r7, [r0, #16]
 8001870:	6fc7      	ldr	r7, [r0, #124]	; 0x7c
 8001872:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001874:	3080      	adds	r0, #128	; 0x80
 8001876:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001878:	3880      	subs	r0, #128	; 0x80
 800187a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800187c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800187e:	4641      	mov	r1, r8
 8001880:	404f      	eors	r7, r1
 8001882:	4054      	eors	r4, r2
 8001884:	4659      	mov	r1, fp
 8001886:	404b      	eors	r3, r1
 8001888:	4649      	mov	r1, r9
 800188a:	404d      	eors	r5, r1
 800188c:	4661      	mov	r1, ip
 800188e:	404e      	eors	r6, r1
 8001890:	2117      	movs	r1, #23
 8001892:	41cf      	rors	r7, r1
 8001894:	211f      	movs	r1, #31
 8001896:	41cb      	rors	r3, r1
 8001898:	211d      	movs	r1, #29
 800189a:	41cc      	rors	r4, r1
 800189c:	2113      	movs	r1, #19
 800189e:	41cd      	rors	r5, r1
 80018a0:	211c      	movs	r1, #28
 80018a2:	41ce      	rors	r6, r1
 80018a4:	0029      	movs	r1, r5
 80018a6:	43a1      	bics	r1, r4
 80018a8:	4059      	eors	r1, r3
 80018aa:	67c1      	str	r1, [r0, #124]	; 0x7c
 80018ac:	0031      	movs	r1, r6
 80018ae:	43a9      	bics	r1, r5
 80018b0:	4061      	eors	r1, r4
 80018b2:	6341      	str	r1, [r0, #52]	; 0x34
 80018b4:	439c      	bics	r4, r3
 80018b6:	407c      	eors	r4, r7
 80018b8:	6244      	str	r4, [r0, #36]	; 0x24
 80018ba:	43bb      	bics	r3, r7
 80018bc:	4073      	eors	r3, r6
 80018be:	6683      	str	r3, [r0, #104]	; 0x68
 80018c0:	43b7      	bics	r7, r6
 80018c2:	406f      	eors	r7, r5
 80018c4:	3080      	adds	r0, #128	; 0x80
 80018c6:	6347      	str	r7, [r0, #52]	; 0x34
 80018c8:	3880      	subs	r0, #128	; 0x80
 80018ca:	9901      	ldr	r1, [sp, #4]
 80018cc:	4688      	mov	r8, r1
 80018ce:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80018d0:	6885      	ldr	r5, [r0, #8]
 80018d2:	3080      	adds	r0, #128	; 0x80
 80018d4:	68c6      	ldr	r6, [r0, #12]
 80018d6:	3880      	subs	r0, #128	; 0x80
 80018d8:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80018da:	3080      	adds	r0, #128	; 0x80
 80018dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018de:	4641      	mov	r1, r8
 80018e0:	404c      	eors	r4, r1
 80018e2:	4056      	eors	r6, r2
 80018e4:	4659      	mov	r1, fp
 80018e6:	404d      	eors	r5, r1
 80018e8:	4649      	mov	r1, r9
 80018ea:	404f      	eors	r7, r1
 80018ec:	4661      	mov	r1, ip
 80018ee:	404b      	eors	r3, r1
 80018f0:	210e      	movs	r1, #14
 80018f2:	41cc      	rors	r4, r1
 80018f4:	211b      	movs	r1, #27
 80018f6:	41cd      	rors	r5, r1
 80018f8:	2119      	movs	r1, #25
 80018fa:	41ce      	rors	r6, r1
 80018fc:	2104      	movs	r1, #4
 80018fe:	41cf      	rors	r7, r1
 8001900:	2113      	movs	r1, #19
 8001902:	41cb      	rors	r3, r1
 8001904:	0029      	movs	r1, r5
 8001906:	43a1      	bics	r1, r4
 8001908:	4059      	eors	r1, r3
 800190a:	3880      	subs	r0, #128	; 0x80
 800190c:	6501      	str	r1, [r0, #80]	; 0x50
 800190e:	0031      	movs	r1, r6
 8001910:	43a9      	bics	r1, r5
 8001912:	4061      	eors	r1, r4
 8001914:	6081      	str	r1, [r0, #8]
 8001916:	439c      	bics	r4, r3
 8001918:	407c      	eors	r4, r7
 800191a:	3080      	adds	r0, #128	; 0x80
 800191c:	6404      	str	r4, [r0, #64]	; 0x40
 800191e:	43bb      	bics	r3, r7
 8001920:	4073      	eors	r3, r6
 8001922:	3880      	subs	r0, #128	; 0x80
 8001924:	6403      	str	r3, [r0, #64]	; 0x40
 8001926:	43b7      	bics	r7, r6
 8001928:	406f      	eors	r7, r5
 800192a:	3080      	adds	r0, #128	; 0x80
 800192c:	60c7      	str	r7, [r0, #12]
 800192e:	3880      	subs	r0, #128	; 0x80
 8001930:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001932:	3080      	adds	r0, #128	; 0x80
 8001934:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8001936:	3880      	subs	r0, #128	; 0x80
 8001938:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800193a:	69c4      	ldr	r4, [r0, #28]
 800193c:	3080      	adds	r0, #128	; 0x80
 800193e:	69c5      	ldr	r5, [r0, #28]
 8001940:	4641      	mov	r1, r8
 8001942:	404e      	eors	r6, r1
 8001944:	4053      	eors	r3, r2
 8001946:	4651      	mov	r1, sl
 8001948:	404f      	eors	r7, r1
 800194a:	4649      	mov	r1, r9
 800194c:	404c      	eors	r4, r1
 800194e:	4671      	mov	r1, lr
 8001950:	404d      	eors	r5, r1
 8001952:	210b      	movs	r1, #11
 8001954:	41ce      	rors	r6, r1
 8001956:	211f      	movs	r1, #31
 8001958:	41cf      	rors	r7, r1
 800195a:	2101      	movs	r1, #1
 800195c:	41cb      	rors	r3, r1
 800195e:	2104      	movs	r1, #4
 8001960:	41cc      	rors	r4, r1
 8001962:	210c      	movs	r1, #12
 8001964:	41cd      	rors	r5, r1
 8001966:	0029      	movs	r1, r5
 8001968:	43a1      	bics	r1, r4
 800196a:	4059      	eors	r1, r3
 800196c:	3880      	subs	r0, #128	; 0x80
 800196e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001970:	0031      	movs	r1, r6
 8001972:	43a9      	bics	r1, r5
 8001974:	4061      	eors	r1, r4
 8001976:	3080      	adds	r0, #128	; 0x80
 8001978:	6281      	str	r1, [r0, #40]	; 0x28
 800197a:	439c      	bics	r4, r3
 800197c:	407c      	eors	r4, r7
 800197e:	61c4      	str	r4, [r0, #28]
 8001980:	43bb      	bics	r3, r7
 8001982:	4073      	eors	r3, r6
 8001984:	3880      	subs	r0, #128	; 0x80
 8001986:	61c3      	str	r3, [r0, #28]
 8001988:	43b7      	bics	r7, r6
 800198a:	406f      	eors	r7, r5
 800198c:	6647      	str	r7, [r0, #100]	; 0x64
 800198e:	9902      	ldr	r1, [sp, #8]
 8001990:	4689      	mov	r9, r1
 8001992:	6843      	ldr	r3, [r0, #4]
 8001994:	3080      	adds	r0, #128	; 0x80
 8001996:	6804      	ldr	r4, [r0, #0]
 8001998:	3880      	subs	r0, #128	; 0x80
 800199a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800199c:	3080      	adds	r0, #128	; 0x80
 800199e:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80019a0:	3880      	subs	r0, #128	; 0x80
 80019a2:	6f07      	ldr	r7, [r0, #112]	; 0x70
 80019a4:	4641      	mov	r1, r8
 80019a6:	404b      	eors	r3, r1
 80019a8:	4055      	eors	r5, r2
 80019aa:	4659      	mov	r1, fp
 80019ac:	404c      	eors	r4, r1
 80019ae:	4649      	mov	r1, r9
 80019b0:	404e      	eors	r6, r1
 80019b2:	4671      	mov	r1, lr
 80019b4:	404f      	eors	r7, r1
 80019b6:	210a      	movs	r1, #10
 80019b8:	41cc      	rors	r4, r1
 80019ba:	210b      	movs	r1, #11
 80019bc:	41cd      	rors	r5, r1
 80019be:	2116      	movs	r1, #22
 80019c0:	41ce      	rors	r6, r1
 80019c2:	2119      	movs	r1, #25
 80019c4:	41cf      	rors	r7, r1
 80019c6:	0031      	movs	r1, r6
 80019c8:	43a9      	bics	r1, r5
 80019ca:	4061      	eors	r1, r4
 80019cc:	3080      	adds	r0, #128	; 0x80
 80019ce:	6001      	str	r1, [r0, #0]
 80019d0:	0039      	movs	r1, r7
 80019d2:	43b1      	bics	r1, r6
 80019d4:	4069      	eors	r1, r5
 80019d6:	3880      	subs	r0, #128	; 0x80
 80019d8:	6381      	str	r1, [r0, #56]	; 0x38
 80019da:	0019      	movs	r1, r3
 80019dc:	43b9      	bics	r1, r7
 80019de:	4071      	eors	r1, r6
 80019e0:	3080      	adds	r0, #128	; 0x80
 80019e2:	6381      	str	r1, [r0, #56]	; 0x38
 80019e4:	0021      	movs	r1, r4
 80019e6:	4399      	bics	r1, r3
 80019e8:	4079      	eors	r1, r7
 80019ea:	3880      	subs	r0, #128	; 0x80
 80019ec:	6701      	str	r1, [r0, #112]	; 0x70
 80019ee:	9905      	ldr	r1, [sp, #20]
 80019f0:	43a5      	bics	r5, r4
 80019f2:	68cc      	ldr	r4, [r1, #12]
 80019f4:	406b      	eors	r3, r5
 80019f6:	4063      	eors	r3, r4
 80019f8:	6043      	str	r3, [r0, #4]
	KeccakRound2
 80019fa:	221f      	movs	r2, #31
 80019fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80019fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a00:	404b      	eors	r3, r1
 8001a02:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001a04:	404b      	eors	r3, r1
 8001a06:	3080      	adds	r0, #128	; 0x80
 8001a08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a0a:	404b      	eors	r3, r1
 8001a0c:	69c1      	ldr	r1, [r0, #28]
 8001a0e:	3880      	subs	r0, #128	; 0x80
 8001a10:	404b      	eors	r3, r1
 8001a12:	3080      	adds	r0, #128	; 0x80
 8001a14:	6807      	ldr	r7, [r0, #0]
 8001a16:	3880      	subs	r0, #128	; 0x80
 8001a18:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001a1a:	404f      	eors	r7, r1
 8001a1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a1e:	404f      	eors	r7, r1
 8001a20:	6881      	ldr	r1, [r0, #8]
 8001a22:	404f      	eors	r7, r1
 8001a24:	3080      	adds	r0, #128	; 0x80
 8001a26:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a28:	3880      	subs	r0, #128	; 0x80
 8001a2a:	404f      	eors	r7, r1
 8001a2c:	003e      	movs	r6, r7
 8001a2e:	41d6      	rors	r6, r2
 8001a30:	405e      	eors	r6, r3
 8001a32:	9600      	str	r6, [sp, #0]
 8001a34:	6f06      	ldr	r6, [r0, #112]	; 0x70
 8001a36:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001a38:	404e      	eors	r6, r1
 8001a3a:	6a01      	ldr	r1, [r0, #32]
 8001a3c:	404e      	eors	r6, r1
 8001a3e:	3080      	adds	r0, #128	; 0x80
 8001a40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a42:	404e      	eors	r6, r1
 8001a44:	6981      	ldr	r1, [r0, #24]
 8001a46:	3880      	subs	r0, #128	; 0x80
 8001a48:	404e      	eors	r6, r1
 8001a4a:	3080      	adds	r0, #128	; 0x80
 8001a4c:	6845      	ldr	r5, [r0, #4]
 8001a4e:	3880      	subs	r0, #128	; 0x80
 8001a50:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001a52:	404d      	eors	r5, r1
 8001a54:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a56:	404d      	eors	r5, r1
 8001a58:	68c1      	ldr	r1, [r0, #12]
 8001a5a:	404d      	eors	r5, r1
 8001a5c:	3080      	adds	r0, #128	; 0x80
 8001a5e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a60:	3880      	subs	r0, #128	; 0x80
 8001a62:	404d      	eors	r5, r1
 8001a64:	4629      	mov	r1, r5
 8001a66:	4071      	eors	r1, r6
 8001a68:	4688      	mov	r8, r1
 8001a6a:	46ae      	mov	lr, r5
 8001a6c:	9101      	str	r1, [sp, #4]
 8001a6e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001a70:	6941      	ldr	r1, [r0, #20]
 8001a72:	404d      	eors	r5, r1
 8001a74:	3080      	adds	r0, #128	; 0x80
 8001a76:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a78:	404d      	eors	r5, r1
 8001a7a:	6881      	ldr	r1, [r0, #8]
 8001a7c:	404d      	eors	r5, r1
 8001a7e:	3880      	subs	r0, #128	; 0x80
 8001a80:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001a82:	404d      	eors	r5, r1
 8001a84:	41d6      	rors	r6, r2
 8001a86:	406e      	eors	r6, r5
 8001a88:	9602      	str	r6, [sp, #8]
 8001a8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a8c:	6901      	ldr	r1, [r0, #16]
 8001a8e:	404c      	eors	r4, r1
 8001a90:	3080      	adds	r0, #128	; 0x80
 8001a92:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a94:	404c      	eors	r4, r1
 8001a96:	68c1      	ldr	r1, [r0, #12]
 8001a98:	404c      	eors	r4, r1
 8001a9a:	3880      	subs	r0, #128	; 0x80
 8001a9c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001a9e:	404c      	eors	r4, r1
 8001aa0:	4063      	eors	r3, r4
 8001aa2:	9303      	str	r3, [sp, #12]
 8001aa4:	6803      	ldr	r3, [r0, #0]
 8001aa6:	3080      	adds	r0, #128	; 0x80
 8001aa8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001aaa:	404b      	eors	r3, r1
 8001aac:	3880      	subs	r0, #128	; 0x80
 8001aae:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8001ab0:	404b      	eors	r3, r1
 8001ab2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001ab4:	404b      	eors	r3, r1
 8001ab6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ab8:	404b      	eors	r3, r1
 8001aba:	41d4      	rors	r4, r2
 8001abc:	405c      	eors	r4, r3
 8001abe:	46a2      	mov	sl, r4
 8001ac0:	6846      	ldr	r6, [r0, #4]
 8001ac2:	3080      	adds	r0, #128	; 0x80
 8001ac4:	6a01      	ldr	r1, [r0, #32]
 8001ac6:	404e      	eors	r6, r1
 8001ac8:	3880      	subs	r0, #128	; 0x80
 8001aca:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8001acc:	404e      	eors	r6, r1
 8001ace:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001ad0:	404e      	eors	r6, r1
 8001ad2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001ad4:	404e      	eors	r6, r1
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	4071      	eors	r1, r6
 8001ada:	468b      	mov	fp, r1
 8001adc:	3080      	adds	r0, #128	; 0x80
 8001ade:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ae0:	6901      	ldr	r1, [r0, #16]
 8001ae2:	404c      	eors	r4, r1
 8001ae4:	3880      	subs	r0, #128	; 0x80
 8001ae6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8001ae8:	404c      	eors	r4, r1
 8001aea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001aec:	404c      	eors	r4, r1
 8001aee:	6981      	ldr	r1, [r0, #24]
 8001af0:	404c      	eors	r4, r1
 8001af2:	4671      	mov	r1, lr
 8001af4:	0025      	movs	r5, r4
 8001af6:	41d5      	rors	r5, r2
 8001af8:	404d      	eors	r5, r1
 8001afa:	9504      	str	r5, [sp, #16]
 8001afc:	3080      	adds	r0, #128	; 0x80
 8001afe:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001b00:	6941      	ldr	r1, [r0, #20]
 8001b02:	404d      	eors	r5, r1
 8001b04:	3880      	subs	r0, #128	; 0x80
 8001b06:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001b08:	404d      	eors	r5, r1
 8001b0a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b0c:	404d      	eors	r5, r1
 8001b0e:	69c1      	ldr	r1, [r0, #28]
 8001b10:	404d      	eors	r5, r1
 8001b12:	406f      	eors	r7, r5
 8001b14:	41d6      	rors	r6, r2
 8001b16:	406e      	eors	r6, r5
 8001b18:	46b4      	mov	ip, r6
 8001b1a:	405c      	eors	r4, r3
 8001b1c:	46a6      	mov	lr, r4
 8001b1e:	003a      	movs	r2, r7
 8001b20:	9902      	ldr	r1, [sp, #8]
 8001b22:	4689      	mov	r9, r1
 8001b24:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8001b26:	6886      	ldr	r6, [r0, #8]
 8001b28:	6e07      	ldr	r7, [r0, #96]	; 0x60
 8001b2a:	3080      	adds	r0, #128	; 0x80
 8001b2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001b2e:	3880      	subs	r0, #128	; 0x80
 8001b30:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001b32:	4641      	mov	r1, r8
 8001b34:	404d      	eors	r5, r1
 8001b36:	4057      	eors	r7, r2
 8001b38:	4659      	mov	r1, fp
 8001b3a:	404e      	eors	r6, r1
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	404b      	eors	r3, r1
 8001b40:	4661      	mov	r1, ip
 8001b42:	404c      	eors	r4, r1
 8001b44:	211e      	movs	r1, #30
 8001b46:	41cd      	rors	r5, r1
 8001b48:	2109      	movs	r1, #9
 8001b4a:	41ce      	rors	r6, r1
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	41cf      	rors	r7, r1
 8001b50:	2112      	movs	r1, #18
 8001b52:	41cb      	rors	r3, r1
 8001b54:	2116      	movs	r1, #22
 8001b56:	41cc      	rors	r4, r1
 8001b58:	0029      	movs	r1, r5
 8001b5a:	43a1      	bics	r1, r4
 8001b5c:	4059      	eors	r1, r3
 8001b5e:	6781      	str	r1, [r0, #120]	; 0x78
 8001b60:	0031      	movs	r1, r6
 8001b62:	43a9      	bics	r1, r5
 8001b64:	4061      	eors	r1, r4
 8001b66:	6081      	str	r1, [r0, #8]
 8001b68:	439c      	bics	r4, r3
 8001b6a:	407c      	eors	r4, r7
 8001b6c:	6484      	str	r4, [r0, #72]	; 0x48
 8001b6e:	43bb      	bics	r3, r7
 8001b70:	4073      	eors	r3, r6
 8001b72:	3080      	adds	r0, #128	; 0x80
 8001b74:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001b76:	43b7      	bics	r7, r6
 8001b78:	406f      	eors	r7, r5
 8001b7a:	3880      	subs	r0, #128	; 0x80
 8001b7c:	6607      	str	r7, [r0, #96]	; 0x60
 8001b7e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8001b80:	3080      	adds	r0, #128	; 0x80
 8001b82:	6843      	ldr	r3, [r0, #4]
 8001b84:	3880      	subs	r0, #128	; 0x80
 8001b86:	6904      	ldr	r4, [r0, #16]
 8001b88:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8001b8a:	3080      	adds	r0, #128	; 0x80
 8001b8c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001b8e:	4641      	mov	r1, r8
 8001b90:	404f      	eors	r7, r1
 8001b92:	4054      	eors	r4, r2
 8001b94:	4651      	mov	r1, sl
 8001b96:	404b      	eors	r3, r1
 8001b98:	4649      	mov	r1, r9
 8001b9a:	404d      	eors	r5, r1
 8001b9c:	4671      	mov	r1, lr
 8001b9e:	404e      	eors	r6, r1
 8001ba0:	2117      	movs	r1, #23
 8001ba2:	41cf      	rors	r7, r1
 8001ba4:	211d      	movs	r1, #29
 8001ba6:	41cc      	rors	r4, r1
 8001ba8:	2114      	movs	r1, #20
 8001baa:	41cd      	rors	r5, r1
 8001bac:	211c      	movs	r1, #28
 8001bae:	41ce      	rors	r6, r1
 8001bb0:	0029      	movs	r1, r5
 8001bb2:	43a1      	bics	r1, r4
 8001bb4:	4059      	eors	r1, r3
 8001bb6:	3880      	subs	r0, #128	; 0x80
 8001bb8:	6281      	str	r1, [r0, #40]	; 0x28
 8001bba:	0031      	movs	r1, r6
 8001bbc:	43a9      	bics	r1, r5
 8001bbe:	4061      	eors	r1, r4
 8001bc0:	3080      	adds	r0, #128	; 0x80
 8001bc2:	6041      	str	r1, [r0, #4]
 8001bc4:	439c      	bics	r4, r3
 8001bc6:	407c      	eors	r4, r7
 8001bc8:	6404      	str	r4, [r0, #64]	; 0x40
 8001bca:	43bb      	bics	r3, r7
 8001bcc:	4073      	eors	r3, r6
 8001bce:	3880      	subs	r0, #128	; 0x80
 8001bd0:	6683      	str	r3, [r0, #104]	; 0x68
 8001bd2:	43b7      	bics	r7, r6
 8001bd4:	406f      	eors	r7, r5
 8001bd6:	6107      	str	r7, [r0, #16]
 8001bd8:	9900      	ldr	r1, [sp, #0]
 8001bda:	4688      	mov	r8, r1
 8001bdc:	3080      	adds	r0, #128	; 0x80
 8001bde:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001be0:	3880      	subs	r0, #128	; 0x80
 8001be2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001be4:	3080      	adds	r0, #128	; 0x80
 8001be6:	68c6      	ldr	r6, [r0, #12]
 8001be8:	3880      	subs	r0, #128	; 0x80
 8001bea:	69c7      	ldr	r7, [r0, #28]
 8001bec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001bee:	4641      	mov	r1, r8
 8001bf0:	404c      	eors	r4, r1
 8001bf2:	4056      	eors	r6, r2
 8001bf4:	4651      	mov	r1, sl
 8001bf6:	404d      	eors	r5, r1
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	404f      	eors	r7, r1
 8001bfc:	4671      	mov	r1, lr
 8001bfe:	404b      	eors	r3, r1
 8001c00:	210e      	movs	r1, #14
 8001c02:	41cc      	rors	r4, r1
 8001c04:	211b      	movs	r1, #27
 8001c06:	41cd      	rors	r5, r1
 8001c08:	2118      	movs	r1, #24
 8001c0a:	41ce      	rors	r6, r1
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	41cf      	rors	r7, r1
 8001c10:	2112      	movs	r1, #18
 8001c12:	41cb      	rors	r3, r1
 8001c14:	0029      	movs	r1, r5
 8001c16:	43a1      	bics	r1, r4
 8001c18:	4059      	eors	r1, r3
 8001c1a:	3080      	adds	r0, #128	; 0x80
 8001c1c:	6241      	str	r1, [r0, #36]	; 0x24
 8001c1e:	0031      	movs	r1, r6
 8001c20:	43a9      	bics	r1, r5
 8001c22:	4061      	eors	r1, r4
 8001c24:	3880      	subs	r0, #128	; 0x80
 8001c26:	6341      	str	r1, [r0, #52]	; 0x34
 8001c28:	439c      	bics	r4, r3
 8001c2a:	407c      	eors	r4, r7
 8001c2c:	6704      	str	r4, [r0, #112]	; 0x70
 8001c2e:	43bb      	bics	r3, r7
 8001c30:	4073      	eors	r3, r6
 8001c32:	61c3      	str	r3, [r0, #28]
 8001c34:	43b7      	bics	r7, r6
 8001c36:	406f      	eors	r7, r5
 8001c38:	3080      	adds	r0, #128	; 0x80
 8001c3a:	60c7      	str	r7, [r0, #12]
 8001c3c:	3880      	subs	r0, #128	; 0x80
 8001c3e:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8001c40:	3080      	adds	r0, #128	; 0x80
 8001c42:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001c44:	3880      	subs	r0, #128	; 0x80
 8001c46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c48:	3080      	adds	r0, #128	; 0x80
 8001c4a:	6944      	ldr	r4, [r0, #20]
 8001c4c:	3880      	subs	r0, #128	; 0x80
 8001c4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001c50:	4641      	mov	r1, r8
 8001c52:	404e      	eors	r6, r1
 8001c54:	4053      	eors	r3, r2
 8001c56:	4659      	mov	r1, fp
 8001c58:	404f      	eors	r7, r1
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	404c      	eors	r4, r1
 8001c5e:	4661      	mov	r1, ip
 8001c60:	404d      	eors	r5, r1
 8001c62:	210c      	movs	r1, #12
 8001c64:	41ce      	rors	r6, r1
 8001c66:	211f      	movs	r1, #31
 8001c68:	41cf      	rors	r7, r1
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	41cb      	rors	r3, r1
 8001c6e:	2105      	movs	r1, #5
 8001c70:	41cc      	rors	r4, r1
 8001c72:	210d      	movs	r1, #13
 8001c74:	41cd      	rors	r5, r1
 8001c76:	0029      	movs	r1, r5
 8001c78:	43a1      	bics	r1, r4
 8001c7a:	4059      	eors	r1, r3
 8001c7c:	6541      	str	r1, [r0, #84]	; 0x54
 8001c7e:	0031      	movs	r1, r6
 8001c80:	43a9      	bics	r1, r5
 8001c82:	4061      	eors	r1, r4
 8001c84:	3080      	adds	r0, #128	; 0x80
 8001c86:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001c88:	439c      	bics	r4, r3
 8001c8a:	407c      	eors	r4, r7
 8001c8c:	3880      	subs	r0, #128	; 0x80
 8001c8e:	6244      	str	r4, [r0, #36]	; 0x24
 8001c90:	43bb      	bics	r3, r7
 8001c92:	4073      	eors	r3, r6
 8001c94:	3080      	adds	r0, #128	; 0x80
 8001c96:	6143      	str	r3, [r0, #20]
 8001c98:	43b7      	bics	r7, r6
 8001c9a:	406f      	eors	r7, r5
 8001c9c:	3880      	subs	r0, #128	; 0x80
 8001c9e:	6387      	str	r7, [r0, #56]	; 0x38
 8001ca0:	9903      	ldr	r1, [sp, #12]
 8001ca2:	4689      	mov	r9, r1
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001ca8:	3080      	adds	r0, #128	; 0x80
 8001caa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001cac:	3880      	subs	r0, #128	; 0x80
 8001cae:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001cb0:	3080      	adds	r0, #128	; 0x80
 8001cb2:	69c7      	ldr	r7, [r0, #28]
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	404b      	eors	r3, r1
 8001cb8:	4055      	eors	r5, r2
 8001cba:	4651      	mov	r1, sl
 8001cbc:	404c      	eors	r4, r1
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	404e      	eors	r6, r1
 8001cc2:	4661      	mov	r1, ip
 8001cc4:	404f      	eors	r7, r1
 8001cc6:	210a      	movs	r1, #10
 8001cc8:	41cc      	rors	r4, r1
 8001cca:	210a      	movs	r1, #10
 8001ccc:	41cd      	rors	r5, r1
 8001cce:	2115      	movs	r1, #21
 8001cd0:	41ce      	rors	r6, r1
 8001cd2:	2119      	movs	r1, #25
 8001cd4:	41cf      	rors	r7, r1
 8001cd6:	0031      	movs	r1, r6
 8001cd8:	43a9      	bics	r1, r5
 8001cda:	4061      	eors	r1, r4
 8001cdc:	3880      	subs	r0, #128	; 0x80
 8001cde:	65c1      	str	r1, [r0, #92]	; 0x5c
 8001ce0:	0039      	movs	r1, r7
 8001ce2:	43b1      	bics	r1, r6
 8001ce4:	4069      	eors	r1, r5
 8001ce6:	3080      	adds	r0, #128	; 0x80
 8001ce8:	6301      	str	r1, [r0, #48]	; 0x30
 8001cea:	0019      	movs	r1, r3
 8001cec:	43b9      	bics	r1, r7
 8001cee:	4071      	eors	r1, r6
 8001cf0:	3880      	subs	r0, #128	; 0x80
 8001cf2:	6401      	str	r1, [r0, #64]	; 0x40
 8001cf4:	0021      	movs	r1, r4
 8001cf6:	4399      	bics	r1, r3
 8001cf8:	4079      	eors	r1, r7
 8001cfa:	3080      	adds	r0, #128	; 0x80
 8001cfc:	61c1      	str	r1, [r0, #28]
 8001cfe:	3880      	subs	r0, #128	; 0x80
 8001d00:	9905      	ldr	r1, [sp, #20]
 8001d02:	43a5      	bics	r5, r4
 8001d04:	690c      	ldr	r4, [r1, #16]
 8001d06:	406b      	eors	r3, r5
 8001d08:	4063      	eors	r3, r4
 8001d0a:	6003      	str	r3, [r0, #0]
 8001d0c:	9a04      	ldr	r2, [sp, #16]
 8001d0e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8001d10:	68c6      	ldr	r6, [r0, #12]
 8001d12:	6e47      	ldr	r7, [r0, #100]	; 0x64
 8001d14:	3080      	adds	r0, #128	; 0x80
 8001d16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d18:	3880      	subs	r0, #128	; 0x80
 8001d1a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	404d      	eors	r5, r1
 8001d20:	4057      	eors	r7, r2
 8001d22:	4651      	mov	r1, sl
 8001d24:	404e      	eors	r6, r1
 8001d26:	4649      	mov	r1, r9
 8001d28:	404b      	eors	r3, r1
 8001d2a:	4671      	mov	r1, lr
 8001d2c:	404c      	eors	r4, r1
 8001d2e:	211f      	movs	r1, #31
 8001d30:	41cd      	rors	r5, r1
 8001d32:	210a      	movs	r1, #10
 8001d34:	41ce      	rors	r6, r1
 8001d36:	2102      	movs	r1, #2
 8001d38:	41cf      	rors	r7, r1
 8001d3a:	2112      	movs	r1, #18
 8001d3c:	41cb      	rors	r3, r1
 8001d3e:	2116      	movs	r1, #22
 8001d40:	41cc      	rors	r4, r1
 8001d42:	0029      	movs	r1, r5
 8001d44:	43a1      	bics	r1, r4
 8001d46:	4059      	eors	r1, r3
 8001d48:	67c1      	str	r1, [r0, #124]	; 0x7c
 8001d4a:	0031      	movs	r1, r6
 8001d4c:	43a9      	bics	r1, r5
 8001d4e:	4061      	eors	r1, r4
 8001d50:	60c1      	str	r1, [r0, #12]
 8001d52:	439c      	bics	r4, r3
 8001d54:	407c      	eors	r4, r7
 8001d56:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001d58:	43bb      	bics	r3, r7
 8001d5a:	4073      	eors	r3, r6
 8001d5c:	3080      	adds	r0, #128	; 0x80
 8001d5e:	6383      	str	r3, [r0, #56]	; 0x38
 8001d60:	43b7      	bics	r7, r6
 8001d62:	406f      	eors	r7, r5
 8001d64:	3880      	subs	r0, #128	; 0x80
 8001d66:	6647      	str	r7, [r0, #100]	; 0x64
 8001d68:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001d6a:	3080      	adds	r0, #128	; 0x80
 8001d6c:	6803      	ldr	r3, [r0, #0]
 8001d6e:	3880      	subs	r0, #128	; 0x80
 8001d70:	6944      	ldr	r4, [r0, #20]
 8001d72:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8001d74:	3080      	adds	r0, #128	; 0x80
 8001d76:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001d78:	4641      	mov	r1, r8
 8001d7a:	404f      	eors	r7, r1
 8001d7c:	4054      	eors	r4, r2
 8001d7e:	4659      	mov	r1, fp
 8001d80:	404b      	eors	r3, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	404d      	eors	r5, r1
 8001d86:	4661      	mov	r1, ip
 8001d88:	404e      	eors	r6, r1
 8001d8a:	2117      	movs	r1, #23
 8001d8c:	41cf      	rors	r7, r1
 8001d8e:	211f      	movs	r1, #31
 8001d90:	41cb      	rors	r3, r1
 8001d92:	211d      	movs	r1, #29
 8001d94:	41cc      	rors	r4, r1
 8001d96:	2113      	movs	r1, #19
 8001d98:	41cd      	rors	r5, r1
 8001d9a:	211c      	movs	r1, #28
 8001d9c:	41ce      	rors	r6, r1
 8001d9e:	0029      	movs	r1, r5
 8001da0:	43a1      	bics	r1, r4
 8001da2:	4059      	eors	r1, r3
 8001da4:	3880      	subs	r0, #128	; 0x80
 8001da6:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001da8:	0031      	movs	r1, r6
 8001daa:	43a9      	bics	r1, r5
 8001dac:	4061      	eors	r1, r4
 8001dae:	3080      	adds	r0, #128	; 0x80
 8001db0:	6001      	str	r1, [r0, #0]
 8001db2:	439c      	bics	r4, r3
 8001db4:	407c      	eors	r4, r7
 8001db6:	6444      	str	r4, [r0, #68]	; 0x44
 8001db8:	43bb      	bics	r3, r7
 8001dba:	4073      	eors	r3, r6
 8001dbc:	3880      	subs	r0, #128	; 0x80
 8001dbe:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001dc0:	43b7      	bics	r7, r6
 8001dc2:	406f      	eors	r7, r5
 8001dc4:	6147      	str	r7, [r0, #20]
 8001dc6:	9901      	ldr	r1, [sp, #4]
 8001dc8:	4688      	mov	r8, r1
 8001dca:	3080      	adds	r0, #128	; 0x80
 8001dcc:	6a04      	ldr	r4, [r0, #32]
 8001dce:	3880      	subs	r0, #128	; 0x80
 8001dd0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001dd2:	3080      	adds	r0, #128	; 0x80
 8001dd4:	6886      	ldr	r6, [r0, #8]
 8001dd6:	3880      	subs	r0, #128	; 0x80
 8001dd8:	6987      	ldr	r7, [r0, #24]
 8001dda:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001ddc:	4641      	mov	r1, r8
 8001dde:	404c      	eors	r4, r1
 8001de0:	4056      	eors	r6, r2
 8001de2:	4659      	mov	r1, fp
 8001de4:	404d      	eors	r5, r1
 8001de6:	4649      	mov	r1, r9
 8001de8:	404f      	eors	r7, r1
 8001dea:	4661      	mov	r1, ip
 8001dec:	404b      	eors	r3, r1
 8001dee:	210e      	movs	r1, #14
 8001df0:	41cc      	rors	r4, r1
 8001df2:	211b      	movs	r1, #27
 8001df4:	41cd      	rors	r5, r1
 8001df6:	2119      	movs	r1, #25
 8001df8:	41ce      	rors	r6, r1
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	41cf      	rors	r7, r1
 8001dfe:	2113      	movs	r1, #19
 8001e00:	41cb      	rors	r3, r1
 8001e02:	0029      	movs	r1, r5
 8001e04:	43a1      	bics	r1, r4
 8001e06:	4059      	eors	r1, r3
 8001e08:	3080      	adds	r0, #128	; 0x80
 8001e0a:	6201      	str	r1, [r0, #32]
 8001e0c:	0031      	movs	r1, r6
 8001e0e:	43a9      	bics	r1, r5
 8001e10:	4061      	eors	r1, r4
 8001e12:	3880      	subs	r0, #128	; 0x80
 8001e14:	6301      	str	r1, [r0, #48]	; 0x30
 8001e16:	439c      	bics	r4, r3
 8001e18:	407c      	eors	r4, r7
 8001e1a:	6744      	str	r4, [r0, #116]	; 0x74
 8001e1c:	43bb      	bics	r3, r7
 8001e1e:	4073      	eors	r3, r6
 8001e20:	6183      	str	r3, [r0, #24]
 8001e22:	43b7      	bics	r7, r6
 8001e24:	406f      	eors	r7, r5
 8001e26:	3080      	adds	r0, #128	; 0x80
 8001e28:	6087      	str	r7, [r0, #8]
 8001e2a:	3880      	subs	r0, #128	; 0x80
 8001e2c:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8001e2e:	3080      	adds	r0, #128	; 0x80
 8001e30:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8001e32:	3880      	subs	r0, #128	; 0x80
 8001e34:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001e36:	3080      	adds	r0, #128	; 0x80
 8001e38:	6904      	ldr	r4, [r0, #16]
 8001e3a:	3880      	subs	r0, #128	; 0x80
 8001e3c:	6a05      	ldr	r5, [r0, #32]
 8001e3e:	4641      	mov	r1, r8
 8001e40:	404e      	eors	r6, r1
 8001e42:	4053      	eors	r3, r2
 8001e44:	4651      	mov	r1, sl
 8001e46:	404f      	eors	r7, r1
 8001e48:	4649      	mov	r1, r9
 8001e4a:	404c      	eors	r4, r1
 8001e4c:	4671      	mov	r1, lr
 8001e4e:	404d      	eors	r5, r1
 8001e50:	210b      	movs	r1, #11
 8001e52:	41ce      	rors	r6, r1
 8001e54:	211f      	movs	r1, #31
 8001e56:	41cf      	rors	r7, r1
 8001e58:	2101      	movs	r1, #1
 8001e5a:	41cb      	rors	r3, r1
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	41cc      	rors	r4, r1
 8001e60:	210c      	movs	r1, #12
 8001e62:	41cd      	rors	r5, r1
 8001e64:	0029      	movs	r1, r5
 8001e66:	43a1      	bics	r1, r4
 8001e68:	4059      	eors	r1, r3
 8001e6a:	6501      	str	r1, [r0, #80]	; 0x50
 8001e6c:	0031      	movs	r1, r6
 8001e6e:	43a9      	bics	r1, r5
 8001e70:	4061      	eors	r1, r4
 8001e72:	3080      	adds	r0, #128	; 0x80
 8001e74:	6281      	str	r1, [r0, #40]	; 0x28
 8001e76:	439c      	bics	r4, r3
 8001e78:	407c      	eors	r4, r7
 8001e7a:	3880      	subs	r0, #128	; 0x80
 8001e7c:	6204      	str	r4, [r0, #32]
 8001e7e:	43bb      	bics	r3, r7
 8001e80:	4073      	eors	r3, r6
 8001e82:	3080      	adds	r0, #128	; 0x80
 8001e84:	6103      	str	r3, [r0, #16]
 8001e86:	43b7      	bics	r7, r6
 8001e88:	406f      	eors	r7, r5
 8001e8a:	3880      	subs	r0, #128	; 0x80
 8001e8c:	63c7      	str	r7, [r0, #60]	; 0x3c
 8001e8e:	9902      	ldr	r1, [sp, #8]
 8001e90:	4689      	mov	r9, r1
 8001e92:	6843      	ldr	r3, [r0, #4]
 8001e94:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001e96:	3080      	adds	r0, #128	; 0x80
 8001e98:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001e9a:	3880      	subs	r0, #128	; 0x80
 8001e9c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001e9e:	3080      	adds	r0, #128	; 0x80
 8001ea0:	6987      	ldr	r7, [r0, #24]
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	404b      	eors	r3, r1
 8001ea6:	4055      	eors	r5, r2
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	404c      	eors	r4, r1
 8001eac:	4649      	mov	r1, r9
 8001eae:	404e      	eors	r6, r1
 8001eb0:	4671      	mov	r1, lr
 8001eb2:	404f      	eors	r7, r1
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	41cc      	rors	r4, r1
 8001eb8:	210b      	movs	r1, #11
 8001eba:	41cd      	rors	r5, r1
 8001ebc:	2116      	movs	r1, #22
 8001ebe:	41ce      	rors	r6, r1
 8001ec0:	2119      	movs	r1, #25
 8001ec2:	41cf      	rors	r7, r1
 8001ec4:	0031      	movs	r1, r6
 8001ec6:	43a9      	bics	r1, r5
 8001ec8:	4061      	eors	r1, r4
 8001eca:	3880      	subs	r0, #128	; 0x80
 8001ecc:	6581      	str	r1, [r0, #88]	; 0x58
 8001ece:	0039      	movs	r1, r7
 8001ed0:	43b1      	bics	r1, r6
 8001ed2:	4069      	eors	r1, r5
 8001ed4:	3080      	adds	r0, #128	; 0x80
 8001ed6:	6341      	str	r1, [r0, #52]	; 0x34
 8001ed8:	0019      	movs	r1, r3
 8001eda:	43b9      	bics	r1, r7
 8001edc:	4071      	eors	r1, r6
 8001ede:	3880      	subs	r0, #128	; 0x80
 8001ee0:	6441      	str	r1, [r0, #68]	; 0x44
 8001ee2:	0021      	movs	r1, r4
 8001ee4:	4399      	bics	r1, r3
 8001ee6:	4079      	eors	r1, r7
 8001ee8:	3080      	adds	r0, #128	; 0x80
 8001eea:	6181      	str	r1, [r0, #24]
 8001eec:	3880      	subs	r0, #128	; 0x80
 8001eee:	9905      	ldr	r1, [sp, #20]
 8001ef0:	43a5      	bics	r5, r4
 8001ef2:	694c      	ldr	r4, [r1, #20]
 8001ef4:	406b      	eors	r3, r5
 8001ef6:	4063      	eors	r3, r4
 8001ef8:	6043      	str	r3, [r0, #4]
	KeccakRound3
 8001efa:	221f      	movs	r2, #31
 8001efc:	3080      	adds	r0, #128	; 0x80
 8001efe:	69c3      	ldr	r3, [r0, #28]
 8001f00:	3880      	subs	r0, #128	; 0x80
 8001f02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f04:	404b      	eors	r3, r1
 8001f06:	3080      	adds	r0, #128	; 0x80
 8001f08:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001f0a:	404b      	eors	r3, r1
 8001f0c:	3880      	subs	r0, #128	; 0x80
 8001f0e:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8001f10:	404b      	eors	r3, r1
 8001f12:	6a01      	ldr	r1, [r0, #32]
 8001f14:	404b      	eors	r3, r1
 8001f16:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8001f18:	68c1      	ldr	r1, [r0, #12]
 8001f1a:	404f      	eors	r7, r1
 8001f1c:	3080      	adds	r0, #128	; 0x80
 8001f1e:	6841      	ldr	r1, [r0, #4]
 8001f20:	404f      	eors	r7, r1
 8001f22:	3880      	subs	r0, #128	; 0x80
 8001f24:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001f26:	404f      	eors	r7, r1
 8001f28:	3080      	adds	r0, #128	; 0x80
 8001f2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f2c:	3880      	subs	r0, #128	; 0x80
 8001f2e:	404f      	eors	r7, r1
 8001f30:	003e      	movs	r6, r7
 8001f32:	41d6      	rors	r6, r2
 8001f34:	405e      	eors	r6, r3
 8001f36:	9600      	str	r6, [sp, #0]
 8001f38:	3080      	adds	r0, #128	; 0x80
 8001f3a:	6986      	ldr	r6, [r0, #24]
 8001f3c:	3880      	subs	r0, #128	; 0x80
 8001f3e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001f40:	404e      	eors	r6, r1
 8001f42:	3080      	adds	r0, #128	; 0x80
 8001f44:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001f46:	404e      	eors	r6, r1
 8001f48:	3880      	subs	r0, #128	; 0x80
 8001f4a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8001f4c:	404e      	eors	r6, r1
 8001f4e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001f50:	404e      	eors	r6, r1
 8001f52:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001f54:	6881      	ldr	r1, [r0, #8]
 8001f56:	404d      	eors	r5, r1
 8001f58:	3080      	adds	r0, #128	; 0x80
 8001f5a:	6801      	ldr	r1, [r0, #0]
 8001f5c:	404d      	eors	r5, r1
 8001f5e:	3880      	subs	r0, #128	; 0x80
 8001f60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001f62:	404d      	eors	r5, r1
 8001f64:	3080      	adds	r0, #128	; 0x80
 8001f66:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f68:	3880      	subs	r0, #128	; 0x80
 8001f6a:	404d      	eors	r5, r1
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4071      	eors	r1, r6
 8001f70:	4688      	mov	r8, r1
 8001f72:	46ae      	mov	lr, r5
 8001f74:	9101      	str	r1, [sp, #4]
 8001f76:	3080      	adds	r0, #128	; 0x80
 8001f78:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001f7a:	3880      	subs	r0, #128	; 0x80
 8001f7c:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8001f7e:	404d      	eors	r5, r1
 8001f80:	6941      	ldr	r1, [r0, #20]
 8001f82:	404d      	eors	r5, r1
 8001f84:	3080      	adds	r0, #128	; 0x80
 8001f86:	68c1      	ldr	r1, [r0, #12]
 8001f88:	404d      	eors	r5, r1
 8001f8a:	3880      	subs	r0, #128	; 0x80
 8001f8c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f8e:	404d      	eors	r5, r1
 8001f90:	41d6      	rors	r6, r2
 8001f92:	406e      	eors	r6, r5
 8001f94:	9602      	str	r6, [sp, #8]
 8001f96:	3080      	adds	r0, #128	; 0x80
 8001f98:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f9a:	3880      	subs	r0, #128	; 0x80
 8001f9c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001f9e:	404c      	eors	r4, r1
 8001fa0:	6901      	ldr	r1, [r0, #16]
 8001fa2:	404c      	eors	r4, r1
 8001fa4:	3080      	adds	r0, #128	; 0x80
 8001fa6:	6881      	ldr	r1, [r0, #8]
 8001fa8:	404c      	eors	r4, r1
 8001faa:	3880      	subs	r0, #128	; 0x80
 8001fac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001fae:	404c      	eors	r4, r1
 8001fb0:	4063      	eors	r3, r4
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8001fb8:	404b      	eors	r3, r1
 8001fba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001fbc:	404b      	eors	r3, r1
 8001fbe:	3080      	adds	r0, #128	; 0x80
 8001fc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001fc2:	404b      	eors	r3, r1
 8001fc4:	3880      	subs	r0, #128	; 0x80
 8001fc6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001fc8:	404b      	eors	r3, r1
 8001fca:	41d4      	rors	r4, r2
 8001fcc:	405c      	eors	r4, r3
 8001fce:	46a2      	mov	sl, r4
 8001fd0:	6846      	ldr	r6, [r0, #4]
 8001fd2:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8001fd4:	404e      	eors	r6, r1
 8001fd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001fd8:	404e      	eors	r6, r1
 8001fda:	3080      	adds	r0, #128	; 0x80
 8001fdc:	6a01      	ldr	r1, [r0, #32]
 8001fde:	404e      	eors	r6, r1
 8001fe0:	3880      	subs	r0, #128	; 0x80
 8001fe2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001fe4:	404e      	eors	r6, r1
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4071      	eors	r1, r6
 8001fea:	468b      	mov	fp, r1
 8001fec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fee:	3080      	adds	r0, #128	; 0x80
 8001ff0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001ff2:	404c      	eors	r4, r1
 8001ff4:	3880      	subs	r0, #128	; 0x80
 8001ff6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8001ff8:	404c      	eors	r4, r1
 8001ffa:	6981      	ldr	r1, [r0, #24]
 8001ffc:	404c      	eors	r4, r1
 8001ffe:	3080      	adds	r0, #128	; 0x80
 8002000:	6941      	ldr	r1, [r0, #20]
 8002002:	3880      	subs	r0, #128	; 0x80
 8002004:	404c      	eors	r4, r1
 8002006:	4671      	mov	r1, lr
 8002008:	0025      	movs	r5, r4
 800200a:	41d5      	rors	r5, r2
 800200c:	404d      	eors	r5, r1
 800200e:	9504      	str	r5, [sp, #16]
 8002010:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002012:	3080      	adds	r0, #128	; 0x80
 8002014:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002016:	404d      	eors	r5, r1
 8002018:	3880      	subs	r0, #128	; 0x80
 800201a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800201c:	404d      	eors	r5, r1
 800201e:	69c1      	ldr	r1, [r0, #28]
 8002020:	404d      	eors	r5, r1
 8002022:	3080      	adds	r0, #128	; 0x80
 8002024:	6901      	ldr	r1, [r0, #16]
 8002026:	3880      	subs	r0, #128	; 0x80
 8002028:	404d      	eors	r5, r1
 800202a:	406f      	eors	r7, r5
 800202c:	41d6      	rors	r6, r2
 800202e:	406e      	eors	r6, r5
 8002030:	46b4      	mov	ip, r6
 8002032:	405c      	eors	r4, r3
 8002034:	46a6      	mov	lr, r4
 8002036:	003a      	movs	r2, r7
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4689      	mov	r9, r1
 800203c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800203e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002040:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8002042:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002044:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002046:	4641      	mov	r1, r8
 8002048:	404d      	eors	r5, r1
 800204a:	4057      	eors	r7, r2
 800204c:	4659      	mov	r1, fp
 800204e:	404e      	eors	r6, r1
 8002050:	4649      	mov	r1, r9
 8002052:	404b      	eors	r3, r1
 8002054:	4661      	mov	r1, ip
 8002056:	404c      	eors	r4, r1
 8002058:	211e      	movs	r1, #30
 800205a:	41cd      	rors	r5, r1
 800205c:	2109      	movs	r1, #9
 800205e:	41ce      	rors	r6, r1
 8002060:	2101      	movs	r1, #1
 8002062:	41cf      	rors	r7, r1
 8002064:	2112      	movs	r1, #18
 8002066:	41cb      	rors	r3, r1
 8002068:	2116      	movs	r1, #22
 800206a:	41cc      	rors	r4, r1
 800206c:	0029      	movs	r1, r5
 800206e:	43a1      	bics	r1, r4
 8002070:	4059      	eors	r1, r3
 8002072:	6281      	str	r1, [r0, #40]	; 0x28
 8002074:	0031      	movs	r1, r6
 8002076:	43a9      	bics	r1, r5
 8002078:	4061      	eors	r1, r4
 800207a:	6301      	str	r1, [r0, #48]	; 0x30
 800207c:	439c      	bics	r4, r3
 800207e:	407c      	eors	r4, r7
 8002080:	6484      	str	r4, [r0, #72]	; 0x48
 8002082:	43bb      	bics	r3, r7
 8002084:	4073      	eors	r3, r6
 8002086:	6403      	str	r3, [r0, #64]	; 0x40
 8002088:	43b7      	bics	r7, r6
 800208a:	406f      	eors	r7, r5
 800208c:	6387      	str	r7, [r0, #56]	; 0x38
 800208e:	6d47      	ldr	r7, [r0, #84]	; 0x54
 8002090:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002092:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8002094:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8002096:	6f46      	ldr	r6, [r0, #116]	; 0x74
 8002098:	4641      	mov	r1, r8
 800209a:	404f      	eors	r7, r1
 800209c:	4054      	eors	r4, r2
 800209e:	4651      	mov	r1, sl
 80020a0:	404b      	eors	r3, r1
 80020a2:	4649      	mov	r1, r9
 80020a4:	404d      	eors	r5, r1
 80020a6:	4671      	mov	r1, lr
 80020a8:	404e      	eors	r6, r1
 80020aa:	2117      	movs	r1, #23
 80020ac:	41cf      	rors	r7, r1
 80020ae:	211d      	movs	r1, #29
 80020b0:	41cc      	rors	r4, r1
 80020b2:	2114      	movs	r1, #20
 80020b4:	41cd      	rors	r5, r1
 80020b6:	211c      	movs	r1, #28
 80020b8:	41ce      	rors	r6, r1
 80020ba:	0029      	movs	r1, r5
 80020bc:	43a1      	bics	r1, r4
 80020be:	4059      	eors	r1, r3
 80020c0:	6541      	str	r1, [r0, #84]	; 0x54
 80020c2:	0031      	movs	r1, r6
 80020c4:	43a9      	bics	r1, r5
 80020c6:	4061      	eors	r1, r4
 80020c8:	65c1      	str	r1, [r0, #92]	; 0x5c
 80020ca:	439c      	bics	r4, r3
 80020cc:	407c      	eors	r4, r7
 80020ce:	6744      	str	r4, [r0, #116]	; 0x74
 80020d0:	43bb      	bics	r3, r7
 80020d2:	4073      	eors	r3, r6
 80020d4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80020d6:	43b7      	bics	r7, r6
 80020d8:	406f      	eors	r7, r5
 80020da:	6647      	str	r7, [r0, #100]	; 0x64
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	4688      	mov	r8, r1
 80020e0:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80020e2:	3080      	adds	r0, #128	; 0x80
 80020e4:	6805      	ldr	r5, [r0, #0]
 80020e6:	6886      	ldr	r6, [r0, #8]
 80020e8:	6907      	ldr	r7, [r0, #16]
 80020ea:	6983      	ldr	r3, [r0, #24]
 80020ec:	4641      	mov	r1, r8
 80020ee:	404c      	eors	r4, r1
 80020f0:	4056      	eors	r6, r2
 80020f2:	4651      	mov	r1, sl
 80020f4:	404d      	eors	r5, r1
 80020f6:	4649      	mov	r1, r9
 80020f8:	404f      	eors	r7, r1
 80020fa:	4671      	mov	r1, lr
 80020fc:	404b      	eors	r3, r1
 80020fe:	210e      	movs	r1, #14
 8002100:	41cc      	rors	r4, r1
 8002102:	211b      	movs	r1, #27
 8002104:	41cd      	rors	r5, r1
 8002106:	2118      	movs	r1, #24
 8002108:	41ce      	rors	r6, r1
 800210a:	2104      	movs	r1, #4
 800210c:	41cf      	rors	r7, r1
 800210e:	2112      	movs	r1, #18
 8002110:	41cb      	rors	r3, r1
 8002112:	0029      	movs	r1, r5
 8002114:	43a1      	bics	r1, r4
 8002116:	4059      	eors	r1, r3
 8002118:	3880      	subs	r0, #128	; 0x80
 800211a:	6781      	str	r1, [r0, #120]	; 0x78
 800211c:	0031      	movs	r1, r6
 800211e:	43a9      	bics	r1, r5
 8002120:	4061      	eors	r1, r4
 8002122:	3080      	adds	r0, #128	; 0x80
 8002124:	6001      	str	r1, [r0, #0]
 8002126:	439c      	bics	r4, r3
 8002128:	407c      	eors	r4, r7
 800212a:	6184      	str	r4, [r0, #24]
 800212c:	43bb      	bics	r3, r7
 800212e:	4073      	eors	r3, r6
 8002130:	6103      	str	r3, [r0, #16]
 8002132:	43b7      	bics	r7, r6
 8002134:	406f      	eors	r7, r5
 8002136:	6087      	str	r7, [r0, #8]
 8002138:	3880      	subs	r0, #128	; 0x80
 800213a:	3080      	adds	r0, #128	; 0x80
 800213c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800213e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8002140:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002142:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002144:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8002146:	4641      	mov	r1, r8
 8002148:	404e      	eors	r6, r1
 800214a:	4053      	eors	r3, r2
 800214c:	4659      	mov	r1, fp
 800214e:	404f      	eors	r7, r1
 8002150:	4649      	mov	r1, r9
 8002152:	404c      	eors	r4, r1
 8002154:	4661      	mov	r1, ip
 8002156:	404d      	eors	r5, r1
 8002158:	210c      	movs	r1, #12
 800215a:	41ce      	rors	r6, r1
 800215c:	211f      	movs	r1, #31
 800215e:	41cf      	rors	r7, r1
 8002160:	2101      	movs	r1, #1
 8002162:	41cb      	rors	r3, r1
 8002164:	2105      	movs	r1, #5
 8002166:	41cc      	rors	r4, r1
 8002168:	210d      	movs	r1, #13
 800216a:	41cd      	rors	r5, r1
 800216c:	0029      	movs	r1, r5
 800216e:	43a1      	bics	r1, r4
 8002170:	4059      	eors	r1, r3
 8002172:	6241      	str	r1, [r0, #36]	; 0x24
 8002174:	0031      	movs	r1, r6
 8002176:	43a9      	bics	r1, r5
 8002178:	4061      	eors	r1, r4
 800217a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800217c:	439c      	bics	r4, r3
 800217e:	407c      	eors	r4, r7
 8002180:	6444      	str	r4, [r0, #68]	; 0x44
 8002182:	43bb      	bics	r3, r7
 8002184:	4073      	eors	r3, r6
 8002186:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002188:	43b7      	bics	r7, r6
 800218a:	406f      	eors	r7, r5
 800218c:	6347      	str	r7, [r0, #52]	; 0x34
 800218e:	3880      	subs	r0, #128	; 0x80
 8002190:	9903      	ldr	r1, [sp, #12]
 8002192:	4689      	mov	r9, r1
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	6884      	ldr	r4, [r0, #8]
 8002198:	6905      	ldr	r5, [r0, #16]
 800219a:	6986      	ldr	r6, [r0, #24]
 800219c:	6a07      	ldr	r7, [r0, #32]
 800219e:	4641      	mov	r1, r8
 80021a0:	404b      	eors	r3, r1
 80021a2:	4055      	eors	r5, r2
 80021a4:	4651      	mov	r1, sl
 80021a6:	404c      	eors	r4, r1
 80021a8:	4649      	mov	r1, r9
 80021aa:	404e      	eors	r6, r1
 80021ac:	4661      	mov	r1, ip
 80021ae:	404f      	eors	r7, r1
 80021b0:	210a      	movs	r1, #10
 80021b2:	41cc      	rors	r4, r1
 80021b4:	210a      	movs	r1, #10
 80021b6:	41cd      	rors	r5, r1
 80021b8:	2115      	movs	r1, #21
 80021ba:	41ce      	rors	r6, r1
 80021bc:	2119      	movs	r1, #25
 80021be:	41cf      	rors	r7, r1
 80021c0:	0031      	movs	r1, r6
 80021c2:	43a9      	bics	r1, r5
 80021c4:	4061      	eors	r1, r4
 80021c6:	6081      	str	r1, [r0, #8]
 80021c8:	0039      	movs	r1, r7
 80021ca:	43b1      	bics	r1, r6
 80021cc:	4069      	eors	r1, r5
 80021ce:	6101      	str	r1, [r0, #16]
 80021d0:	0019      	movs	r1, r3
 80021d2:	43b9      	bics	r1, r7
 80021d4:	4071      	eors	r1, r6
 80021d6:	6181      	str	r1, [r0, #24]
 80021d8:	0021      	movs	r1, r4
 80021da:	4399      	bics	r1, r3
 80021dc:	4079      	eors	r1, r7
 80021de:	6201      	str	r1, [r0, #32]
 80021e0:	9905      	ldr	r1, [sp, #20]
 80021e2:	43a5      	bics	r5, r4
 80021e4:	698c      	ldr	r4, [r1, #24]
 80021e6:	406b      	eors	r3, r5
 80021e8:	4063      	eors	r3, r4
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	9a04      	ldr	r2, [sp, #16]
 80021ee:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80021f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80021f2:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80021f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80021f6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80021f8:	4641      	mov	r1, r8
 80021fa:	404d      	eors	r5, r1
 80021fc:	4057      	eors	r7, r2
 80021fe:	4651      	mov	r1, sl
 8002200:	404e      	eors	r6, r1
 8002202:	4649      	mov	r1, r9
 8002204:	404b      	eors	r3, r1
 8002206:	4671      	mov	r1, lr
 8002208:	404c      	eors	r4, r1
 800220a:	211f      	movs	r1, #31
 800220c:	41cd      	rors	r5, r1
 800220e:	210a      	movs	r1, #10
 8002210:	41ce      	rors	r6, r1
 8002212:	2102      	movs	r1, #2
 8002214:	41cf      	rors	r7, r1
 8002216:	2112      	movs	r1, #18
 8002218:	41cb      	rors	r3, r1
 800221a:	2116      	movs	r1, #22
 800221c:	41cc      	rors	r4, r1
 800221e:	0029      	movs	r1, r5
 8002220:	43a1      	bics	r1, r4
 8002222:	4059      	eors	r1, r3
 8002224:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002226:	0031      	movs	r1, r6
 8002228:	43a9      	bics	r1, r5
 800222a:	4061      	eors	r1, r4
 800222c:	6341      	str	r1, [r0, #52]	; 0x34
 800222e:	439c      	bics	r4, r3
 8002230:	407c      	eors	r4, r7
 8002232:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002234:	43bb      	bics	r3, r7
 8002236:	4073      	eors	r3, r6
 8002238:	6443      	str	r3, [r0, #68]	; 0x44
 800223a:	43b7      	bics	r7, r6
 800223c:	406f      	eors	r7, r5
 800223e:	63c7      	str	r7, [r0, #60]	; 0x3c
 8002240:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8002242:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002244:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8002246:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8002248:	6f06      	ldr	r6, [r0, #112]	; 0x70
 800224a:	4641      	mov	r1, r8
 800224c:	404f      	eors	r7, r1
 800224e:	4054      	eors	r4, r2
 8002250:	4659      	mov	r1, fp
 8002252:	404b      	eors	r3, r1
 8002254:	4649      	mov	r1, r9
 8002256:	404d      	eors	r5, r1
 8002258:	4661      	mov	r1, ip
 800225a:	404e      	eors	r6, r1
 800225c:	2117      	movs	r1, #23
 800225e:	41cf      	rors	r7, r1
 8002260:	211f      	movs	r1, #31
 8002262:	41cb      	rors	r3, r1
 8002264:	211d      	movs	r1, #29
 8002266:	41cc      	rors	r4, r1
 8002268:	2113      	movs	r1, #19
 800226a:	41cd      	rors	r5, r1
 800226c:	211c      	movs	r1, #28
 800226e:	41ce      	rors	r6, r1
 8002270:	0029      	movs	r1, r5
 8002272:	43a1      	bics	r1, r4
 8002274:	4059      	eors	r1, r3
 8002276:	6501      	str	r1, [r0, #80]	; 0x50
 8002278:	0031      	movs	r1, r6
 800227a:	43a9      	bics	r1, r5
 800227c:	4061      	eors	r1, r4
 800227e:	6581      	str	r1, [r0, #88]	; 0x58
 8002280:	439c      	bics	r4, r3
 8002282:	407c      	eors	r4, r7
 8002284:	6704      	str	r4, [r0, #112]	; 0x70
 8002286:	43bb      	bics	r3, r7
 8002288:	4073      	eors	r3, r6
 800228a:	6683      	str	r3, [r0, #104]	; 0x68
 800228c:	43b7      	bics	r7, r6
 800228e:	406f      	eors	r7, r5
 8002290:	6607      	str	r7, [r0, #96]	; 0x60
 8002292:	9901      	ldr	r1, [sp, #4]
 8002294:	4688      	mov	r8, r1
 8002296:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8002298:	3080      	adds	r0, #128	; 0x80
 800229a:	6845      	ldr	r5, [r0, #4]
 800229c:	68c6      	ldr	r6, [r0, #12]
 800229e:	6947      	ldr	r7, [r0, #20]
 80022a0:	69c3      	ldr	r3, [r0, #28]
 80022a2:	4641      	mov	r1, r8
 80022a4:	404c      	eors	r4, r1
 80022a6:	4056      	eors	r6, r2
 80022a8:	4659      	mov	r1, fp
 80022aa:	404d      	eors	r5, r1
 80022ac:	4649      	mov	r1, r9
 80022ae:	404f      	eors	r7, r1
 80022b0:	4661      	mov	r1, ip
 80022b2:	404b      	eors	r3, r1
 80022b4:	210e      	movs	r1, #14
 80022b6:	41cc      	rors	r4, r1
 80022b8:	211b      	movs	r1, #27
 80022ba:	41cd      	rors	r5, r1
 80022bc:	2119      	movs	r1, #25
 80022be:	41ce      	rors	r6, r1
 80022c0:	2104      	movs	r1, #4
 80022c2:	41cf      	rors	r7, r1
 80022c4:	2113      	movs	r1, #19
 80022c6:	41cb      	rors	r3, r1
 80022c8:	0029      	movs	r1, r5
 80022ca:	43a1      	bics	r1, r4
 80022cc:	4059      	eors	r1, r3
 80022ce:	3880      	subs	r0, #128	; 0x80
 80022d0:	67c1      	str	r1, [r0, #124]	; 0x7c
 80022d2:	0031      	movs	r1, r6
 80022d4:	43a9      	bics	r1, r5
 80022d6:	4061      	eors	r1, r4
 80022d8:	3080      	adds	r0, #128	; 0x80
 80022da:	6041      	str	r1, [r0, #4]
 80022dc:	439c      	bics	r4, r3
 80022de:	407c      	eors	r4, r7
 80022e0:	61c4      	str	r4, [r0, #28]
 80022e2:	43bb      	bics	r3, r7
 80022e4:	4073      	eors	r3, r6
 80022e6:	6143      	str	r3, [r0, #20]
 80022e8:	43b7      	bics	r7, r6
 80022ea:	406f      	eors	r7, r5
 80022ec:	60c7      	str	r7, [r0, #12]
 80022ee:	3880      	subs	r0, #128	; 0x80
 80022f0:	3080      	adds	r0, #128	; 0x80
 80022f2:	6a06      	ldr	r6, [r0, #32]
 80022f4:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80022f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022f8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80022fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80022fc:	4641      	mov	r1, r8
 80022fe:	404e      	eors	r6, r1
 8002300:	4053      	eors	r3, r2
 8002302:	4651      	mov	r1, sl
 8002304:	404f      	eors	r7, r1
 8002306:	4649      	mov	r1, r9
 8002308:	404c      	eors	r4, r1
 800230a:	4671      	mov	r1, lr
 800230c:	404d      	eors	r5, r1
 800230e:	210b      	movs	r1, #11
 8002310:	41ce      	rors	r6, r1
 8002312:	211f      	movs	r1, #31
 8002314:	41cf      	rors	r7, r1
 8002316:	2101      	movs	r1, #1
 8002318:	41cb      	rors	r3, r1
 800231a:	2104      	movs	r1, #4
 800231c:	41cc      	rors	r4, r1
 800231e:	210c      	movs	r1, #12
 8002320:	41cd      	rors	r5, r1
 8002322:	0029      	movs	r1, r5
 8002324:	43a1      	bics	r1, r4
 8002326:	4059      	eors	r1, r3
 8002328:	6201      	str	r1, [r0, #32]
 800232a:	0031      	movs	r1, r6
 800232c:	43a9      	bics	r1, r5
 800232e:	4061      	eors	r1, r4
 8002330:	6281      	str	r1, [r0, #40]	; 0x28
 8002332:	439c      	bics	r4, r3
 8002334:	407c      	eors	r4, r7
 8002336:	6404      	str	r4, [r0, #64]	; 0x40
 8002338:	43bb      	bics	r3, r7
 800233a:	4073      	eors	r3, r6
 800233c:	6383      	str	r3, [r0, #56]	; 0x38
 800233e:	43b7      	bics	r7, r6
 8002340:	406f      	eors	r7, r5
 8002342:	6307      	str	r7, [r0, #48]	; 0x30
 8002344:	3880      	subs	r0, #128	; 0x80
 8002346:	9902      	ldr	r1, [sp, #8]
 8002348:	4689      	mov	r9, r1
 800234a:	6843      	ldr	r3, [r0, #4]
 800234c:	68c4      	ldr	r4, [r0, #12]
 800234e:	6945      	ldr	r5, [r0, #20]
 8002350:	69c6      	ldr	r6, [r0, #28]
 8002352:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8002354:	4641      	mov	r1, r8
 8002356:	404b      	eors	r3, r1
 8002358:	4055      	eors	r5, r2
 800235a:	4659      	mov	r1, fp
 800235c:	404c      	eors	r4, r1
 800235e:	4649      	mov	r1, r9
 8002360:	404e      	eors	r6, r1
 8002362:	4671      	mov	r1, lr
 8002364:	404f      	eors	r7, r1
 8002366:	210a      	movs	r1, #10
 8002368:	41cc      	rors	r4, r1
 800236a:	210b      	movs	r1, #11
 800236c:	41cd      	rors	r5, r1
 800236e:	2116      	movs	r1, #22
 8002370:	41ce      	rors	r6, r1
 8002372:	2119      	movs	r1, #25
 8002374:	41cf      	rors	r7, r1
 8002376:	0031      	movs	r1, r6
 8002378:	43a9      	bics	r1, r5
 800237a:	4061      	eors	r1, r4
 800237c:	60c1      	str	r1, [r0, #12]
 800237e:	0039      	movs	r1, r7
 8002380:	43b1      	bics	r1, r6
 8002382:	4069      	eors	r1, r5
 8002384:	6141      	str	r1, [r0, #20]
 8002386:	0019      	movs	r1, r3
 8002388:	43b9      	bics	r1, r7
 800238a:	4071      	eors	r1, r6
 800238c:	61c1      	str	r1, [r0, #28]
 800238e:	0021      	movs	r1, r4
 8002390:	4399      	bics	r1, r3
 8002392:	4079      	eors	r1, r7
 8002394:	6241      	str	r1, [r0, #36]	; 0x24
 8002396:	9905      	ldr	r1, [sp, #20]
 8002398:	43a5      	bics	r5, r4
 800239a:	69cc      	ldr	r4, [r1, #28]
 800239c:	406b      	eors	r3, r5
 800239e:	4063      	eors	r3, r4
 80023a0:	3120      	adds	r1, #32
 80023a2:	680a      	ldr	r2, [r1, #0]
 80023a4:	9105      	str	r1, [sp, #20]
 80023a6:	2aff      	cmp	r2, #255	; 0xff
 80023a8:	6043      	str	r3, [r0, #4]
	beq		KeccakP1600_StatePermute_Done
 80023aa:	d003      	beq.n	80023b4 <KeccakP1600_StatePermute_Done>
	ldr		r1, =KeccakP1600_StatePermute_RoundLoop+1
 80023ac:	4900      	ldr	r1, [pc, #0]	; (80023b0 <KeccakP1600_StatePermute_RoundLoop+0x139e>)
	bx		r1
 80023ae:	4708      	bx	r1
	ldr		r1, =KeccakP1600_StatePermute_RoundLoop+1
 80023b0:	08001013 	.word	0x08001013

080023b4 <KeccakP1600_StatePermute_Done>:
	.ltorg
KeccakP1600_StatePermute_Done:
	add		sp, #mSize
 80023b4:	b006      	add	sp, #24
	pop		{ r1 - r5, r7 }
 80023b6:	bcbe      	pop	{r1, r2, r3, r4, r5, r7}
	mov		r8, r1
 80023b8:	4688      	mov	r8, r1
	mov		r9, r2
 80023ba:	4691      	mov	r9, r2
	mov		r10, r3
 80023bc:	469a      	mov	sl, r3
	mov		r11, r4
 80023be:	46a3      	mov	fp, r4
	mov		r12, r5
 80023c0:	46ac      	mov	ip, r5
	pop		{ r4 - r6, pc }
 80023c2:	bd70      	pop	{r4, r5, r6, pc}

080023c4 <asm_csc_for>:


.global	asm_csc_for;
.type	asm_csc_for, %function
asm_csc_for:
    push {r4-r7,lr}
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    
    ldm r1!,{r3,r4}
 80023c6:	c918      	ldmia	r1!, {r3, r4}
    stm r0!,{r3,r4}
 80023c8:	c018      	stmia	r0!, {r3, r4}
    eor r3,r3
 80023ca:	405b      	eors	r3, r3
    eor r4,r4
 80023cc:	4064      	eors	r4, r4
    stm r0!,{r3,r4}
 80023ce:	c018      	stmia	r0!, {r3, r4}
    


    pop {r4-r7,pc}
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bx lr
 80023d2:	4770      	bx	lr

080023d4 <asm_init>:


.global asm_init;
.type asm_init, %function
asm_init:
    push {r4-r7,lr}
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}


    ldm r3,{r4,r5,r6,r7}
 80023d6:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80023d8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

    ldm r1,{r4,r5,r6,r7}
 80023da:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80023dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    ldm r1,{r4,r5,r6,r7}
 80023de:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80023e0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}


   
    ldm r2,{r6,r7}
 80023e2:	cac0      	ldmia	r2!, {r6, r7}
    ldm r2,{r4,r5}    
 80023e4:	ca30      	ldmia	r2!, {r4, r5}
    stm r0,{r4,r5,r6,r7}
 80023e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

    pop {r4-r7,pc}
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bx lr
 80023ea:	4770      	bx	lr

080023ec <asm_quarterround>:
.global asm_quarterround
.func asm_quarterround

asm_quarterround:
	// Save low registers
	push {r4-r7}
 80023ec:	b4f0      	push	{r4, r5, r6, r7}

	// Copy high to low registers
	mov	r3, r8
 80023ee:	4643      	mov	r3, r8
	mov	r4, r9
 80023f0:	464c      	mov	r4, r9
	mov	r5, r10
 80023f2:	4655      	mov	r5, sl
	mov	r6, r11
 80023f4:	465e      	mov	r6, fp
	mov	r7, r12
 80023f6:	4667      	mov	r7, ip
	// Save high registers
	push {r3-r7}
 80023f8:	b4f8      	push	{r3, r4, r5, r6, r7}
	// See Readme for explanation of
	// register allocation.

	// Rotate constants are buffered as good as possible
	mov	r5, #16
 80023fa:	2510      	movs	r5, #16
	mov	r6, #20
 80023fc:	2614      	movs	r6, #20
	mov	r7, #24
 80023fe:	2718      	movs	r7, #24

	// Round 1
	//=======================================
	ldr	r1, [r0]
 8002400:	6801      	ldr	r1, [r0, #0]
	ldr	r2, [r0, #16]
 8002402:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #32]
 8002404:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #48]
 8002406:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002408:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800240a:	404c      	eors	r4, r1
	ror	r4, r5
 800240c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800240e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002410:	405a      	eors	r2, r3
	ror	r2, r6
 8002412:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002414:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002416:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002418:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 800241a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800241c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800241e:	405a      	eors	r2, r3
	mov	r1, #25
 8002420:	2119      	movs	r1, #25
	ror	r2, r1
 8002422:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002424:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002426:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002428:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 800242a:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 800242c:	6942      	ldr	r2, [r0, #20]
	ldr	r3, [r0, #36]
 800242e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #52]
 8002430:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002432:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002434:	404c      	eors	r4, r1
	ror	r4, r5
 8002436:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002438:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800243a:	405a      	eors	r2, r3
	ror	r2, r6
 800243c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800243e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002440:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002442:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002444:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002446:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002448:	405a      	eors	r2, r3
	mov	r1, #25
 800244a:	2119      	movs	r1, #25
	ror	r2, r1
 800244c:	41ca      	rors	r2, r1

	mov	r10, r2
 800244e:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002450:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002452:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002454:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002456:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002458:	6a83      	ldr	r3, [r0, #40]	; 0x28
	ldr	r4, [r0, #56]
 800245a:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800245c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800245e:	404c      	eors	r4, r1
	ror	r4, r5
 8002460:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002462:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002464:	405a      	eors	r2, r3
	ror	r2, r6
 8002466:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002468:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800246a:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 800246c:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800246e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002470:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002472:	405a      	eors	r2, r3
	mov	r1, #25
 8002474:	2119      	movs	r1, #25
	ror	r2, r1
 8002476:	41ca      	rors	r2, r1

	mov	r9, r2
 8002478:	4691      	mov	r9, r2
	mov	r12, r3
 800247a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 800247c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 800247e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002480:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002482:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002484:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002486:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002488:	404c      	eors	r4, r1
	ror	r4, r5
 800248a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800248c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800248e:	405a      	eors	r2, r3
	ror	r2, r6
 8002490:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002492:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002494:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002496:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002498:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800249a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800249c:	405a      	eors	r2, r3
	mov	r1, #25
 800249e:	2119      	movs	r1, #25
	ror	r2, r1
 80024a0:	41ca      	rors	r2, r1

	mov	r8, r2
 80024a2:	4690      	mov	r8, r2
	mov	r11, r3
 80024a4:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 80024a6:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 80024a8:	4652      	mov	r2, sl
	mov	r3, r12
 80024aa:	4663      	mov	r3, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024ac:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80024ae:	404c      	eors	r4, r1
	ror	r4, r5
 80024b0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024b2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80024b4:	405a      	eors	r2, r3
	ror	r2, r6
 80024b6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024b8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80024ba:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80024bc:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80024be:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024c0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80024c2:	405a      	eors	r2, r3
	mov	r1, #25
 80024c4:	2119      	movs	r1, #25
	ror	r2, r1
 80024c6:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 80024c8:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 80024ca:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 80024cc:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 80024ce:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 80024d0:	464a      	mov	r2, r9
	mov	r3, r11
 80024d2:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 80024d4:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024d6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80024d8:	404c      	eors	r4, r1
	ror	r4, r5
 80024da:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024dc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80024de:	405a      	eors	r2, r3
	ror	r2, r6
 80024e0:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80024e2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80024e4:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 80024e6:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 80024e8:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80024ea:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80024ec:	405a      	eors	r2, r3
	mov	r1, #25
 80024ee:	2119      	movs	r1, #25
	ror	r2, r1
 80024f0:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 80024f2:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 80024f4:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 80024f6:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 80024f8:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 80024fa:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 80024fc:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 80024fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002500:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002502:	404c      	eors	r4, r1
	ror	r4, r5
 8002504:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002506:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002508:	405a      	eors	r2, r3
	ror	r2, r6
 800250a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800250c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800250e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002510:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002512:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002514:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002516:	405a      	eors	r2, r3
	mov	r1, #25
 8002518:	2119      	movs	r1, #25
	ror	r2, r1
 800251a:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 800251c:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 800251e:	4698      	mov	r8, r3
	mov	r11, r4
 8002520:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002522:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002524:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002526:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002528:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800252a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800252c:	404c      	eors	r4, r1
	ror	r4, r5
 800252e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002530:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002532:	405a      	eors	r2, r3
	ror	r2, r6
 8002534:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002536:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002538:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 800253a:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 800253c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800253e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002540:	405a      	eors	r2, r3
	mov	r1, #25
 8002542:	2119      	movs	r1, #25
	ror	r2, r1
 8002544:	41ca      	rors	r2, r1

	mov	r9, r3
 8002546:	4699      	mov	r9, r3
	mov	r12, r4
 8002548:	46a4      	mov	ip, r4

	//=======================================

	// Round 2
	//=======================================
	ldr	r1, [r0]
 800254a:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 800254c:	4643      	mov	r3, r8
	mov	r4, r10
 800254e:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002550:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002552:	404c      	eors	r4, r1
	ror	r4, r5
 8002554:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002556:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002558:	405a      	eors	r2, r3
	ror	r2, r6
 800255a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800255c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800255e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002560:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002562:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002564:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002566:	405a      	eors	r2, r3
	mov	r1, #25
 8002568:	2119      	movs	r1, #25
	ror	r2, r1
 800256a:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 800256c:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 800256e:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002570:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002572:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002574:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002576:	464b      	mov	r3, r9
	mov	r4, r11
 8002578:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800257a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800257c:	404c      	eors	r4, r1
	ror	r4, r5
 800257e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002580:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002582:	405a      	eors	r2, r3
	ror	r2, r6
 8002584:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002586:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002588:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800258a:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 800258c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800258e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002590:	405a      	eors	r2, r3
	mov	r1, #25
 8002592:	2119      	movs	r1, #25
	ror	r2, r1
 8002594:	41ca      	rors	r2, r1

	mov	r10, r2
 8002596:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002598:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 800259a:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 800259c:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 800259e:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 80025a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 80025a2:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025a4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80025a6:	404c      	eors	r4, r1
	ror	r4, r5
 80025a8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025aa:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80025ac:	405a      	eors	r2, r3
	ror	r2, r6
 80025ae:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025b0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80025b2:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80025b4:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80025b6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025b8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80025ba:	405a      	eors	r2, r3
	mov	r1, #25
 80025bc:	2119      	movs	r1, #25
	ror	r2, r1
 80025be:	41ca      	rors	r2, r1

	mov	r9, r2
 80025c0:	4691      	mov	r9, r2
	mov	r12, r3
 80025c2:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 80025c4:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 80025c6:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 80025c8:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 80025ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 80025cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025ce:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80025d0:	404c      	eors	r4, r1
	ror	r4, r5
 80025d2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025d4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80025d6:	405a      	eors	r2, r3
	ror	r2, r6
 80025d8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025da:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80025dc:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80025de:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80025e0:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025e2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80025e4:	405a      	eors	r2, r3
	mov	r1, #25
 80025e6:	2119      	movs	r1, #25
	ror	r2, r1
 80025e8:	41ca      	rors	r2, r1

	mov	r8, r2
 80025ea:	4690      	mov	r8, r2
	mov	r11, r3
 80025ec:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 80025ee:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 80025f0:	4652      	mov	r2, sl
	mov	r3, r12
 80025f2:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80025f4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80025f6:	404c      	eors	r4, r1
	ror	r4, r5
 80025f8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80025fa:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80025fc:	405a      	eors	r2, r3
	ror	r2, r6
 80025fe:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002600:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002602:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002604:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002606:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002608:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800260a:	405a      	eors	r2, r3
	mov	r1, #25
 800260c:	2119      	movs	r1, #25
	ror	r2, r1
 800260e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002610:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002612:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002614:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002616:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002618:	464a      	mov	r2, r9
	mov	r3, r11
 800261a:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 800261c:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800261e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002620:	404c      	eors	r4, r1
	ror	r4, r5
 8002622:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002624:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002626:	405a      	eors	r2, r3
	ror	r2, r6
 8002628:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800262a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800262c:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800262e:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002630:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002632:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002634:	405a      	eors	r2, r3
	mov	r1, #25
 8002636:	2119      	movs	r1, #25
	ror	r2, r1
 8002638:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 800263a:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 800263c:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 800263e:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002640:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002642:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002644:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002646:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002648:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800264a:	404c      	eors	r4, r1
	ror	r4, r5
 800264c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800264e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002650:	405a      	eors	r2, r3
	ror	r2, r6
 8002652:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002654:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002656:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002658:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800265a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800265c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800265e:	405a      	eors	r2, r3
	mov	r1, #25
 8002660:	2119      	movs	r1, #25
	ror	r2, r1
 8002662:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002664:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002666:	4698      	mov	r8, r3
	mov	r11, r4
 8002668:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 800266a:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 800266c:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 800266e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002670:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002672:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002674:	404c      	eors	r4, r1
	ror	r4, r5
 8002676:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002678:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800267a:	405a      	eors	r2, r3
	ror	r2, r6
 800267c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800267e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002680:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002682:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002684:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002686:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002688:	405a      	eors	r2, r3
	mov	r1, #25
 800268a:	2119      	movs	r1, #25
	ror	r2, r1
 800268c:	41ca      	rors	r2, r1

	mov	r9, r3
 800268e:	4699      	mov	r9, r3
	mov	r12, r4
 8002690:	46a4      	mov	ip, r4

	//=======================================

	// Round 3
	//=======================================
	ldr	r1, [r0]
 8002692:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002694:	4643      	mov	r3, r8
	mov	r4, r10
 8002696:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002698:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800269a:	404c      	eors	r4, r1
	ror	r4, r5
 800269c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800269e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80026a0:	405a      	eors	r2, r3
	ror	r2, r6
 80026a2:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026a4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80026a6:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80026a8:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80026aa:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026ac:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80026ae:	405a      	eors	r2, r3
	mov	r1, #25
 80026b0:	2119      	movs	r1, #25
	ror	r2, r1
 80026b2:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 80026b4:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 80026b6:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 80026b8:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 80026ba:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 80026bc:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 80026be:	464b      	mov	r3, r9
	mov	r4, r11
 80026c0:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026c2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80026c4:	404c      	eors	r4, r1
	ror	r4, r5
 80026c6:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026c8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80026ca:	405a      	eors	r2, r3
	ror	r2, r6
 80026cc:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026ce:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80026d0:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 80026d2:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 80026d4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026d6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80026d8:	405a      	eors	r2, r3
	mov	r1, #25
 80026da:	2119      	movs	r1, #25
	ror	r2, r1
 80026dc:	41ca      	rors	r2, r1

	mov	r10, r2
 80026de:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 80026e0:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 80026e2:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 80026e4:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 80026e6:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 80026e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 80026ea:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026ec:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80026ee:	404c      	eors	r4, r1
	ror	r4, r5
 80026f0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80026f2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80026f4:	405a      	eors	r2, r3
	ror	r2, r6
 80026f6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80026f8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80026fa:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80026fc:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80026fe:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002700:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002702:	405a      	eors	r2, r3
	mov	r1, #25
 8002704:	2119      	movs	r1, #25
	ror	r2, r1
 8002706:	41ca      	rors	r2, r1

	mov	r9, r2
 8002708:	4691      	mov	r9, r2
	mov	r12, r3
 800270a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 800270c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 800270e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002710:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002712:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002714:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002716:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002718:	404c      	eors	r4, r1
	ror	r4, r5
 800271a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800271c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800271e:	405a      	eors	r2, r3
	ror	r2, r6
 8002720:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002722:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002724:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002726:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002728:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800272a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800272c:	405a      	eors	r2, r3
	mov	r1, #25
 800272e:	2119      	movs	r1, #25
	ror	r2, r1
 8002730:	41ca      	rors	r2, r1

	mov	r8, r2
 8002732:	4690      	mov	r8, r2
	mov	r11, r3
 8002734:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002736:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002738:	4652      	mov	r2, sl
	mov	r3, r12
 800273a:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800273c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800273e:	404c      	eors	r4, r1
	ror	r4, r5
 8002740:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002742:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002744:	405a      	eors	r2, r3
	ror	r2, r6
 8002746:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002748:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800274a:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 800274c:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 800274e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002750:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002752:	405a      	eors	r2, r3
	mov	r1, #25
 8002754:	2119      	movs	r1, #25
	ror	r2, r1
 8002756:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002758:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 800275a:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 800275c:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 800275e:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002760:	464a      	mov	r2, r9
	mov	r3, r11
 8002762:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002764:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002766:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002768:	404c      	eors	r4, r1
	ror	r4, r5
 800276a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800276c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800276e:	405a      	eors	r2, r3
	ror	r2, r6
 8002770:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002772:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002774:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002776:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002778:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800277a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800277c:	405a      	eors	r2, r3
	mov	r1, #25
 800277e:	2119      	movs	r1, #25
	ror	r2, r1
 8002780:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002782:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002784:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002786:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002788:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 800278a:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 800278c:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 800278e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002790:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002792:	404c      	eors	r4, r1
	ror	r4, r5
 8002794:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002796:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002798:	405a      	eors	r2, r3
	ror	r2, r6
 800279a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800279c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800279e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80027a0:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80027a2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027a4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80027a6:	405a      	eors	r2, r3
	mov	r1, #25
 80027a8:	2119      	movs	r1, #25
	ror	r2, r1
 80027aa:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 80027ac:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 80027ae:	4698      	mov	r8, r3
	mov	r11, r4
 80027b0:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 80027b2:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 80027b4:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 80027b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 80027b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027ba:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80027bc:	404c      	eors	r4, r1
	ror	r4, r5
 80027be:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027c0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80027c2:	405a      	eors	r2, r3
	ror	r2, r6
 80027c4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027c6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80027c8:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80027ca:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80027cc:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027ce:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80027d0:	405a      	eors	r2, r3
	mov	r1, #25
 80027d2:	2119      	movs	r1, #25
	ror	r2, r1
 80027d4:	41ca      	rors	r2, r1

	mov	r9, r3
 80027d6:	4699      	mov	r9, r3
	mov	r12, r4
 80027d8:	46a4      	mov	ip, r4

	//=======================================

	// Round 4
	//=======================================
	ldr	r1, [r0]
 80027da:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 80027dc:	4643      	mov	r3, r8
	mov	r4, r10
 80027de:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027e0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80027e2:	404c      	eors	r4, r1
	ror	r4, r5
 80027e4:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027e6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80027e8:	405a      	eors	r2, r3
	ror	r2, r6
 80027ea:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80027ec:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80027ee:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80027f0:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80027f2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80027f4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80027f6:	405a      	eors	r2, r3
	mov	r1, #25
 80027f8:	2119      	movs	r1, #25
	ror	r2, r1
 80027fa:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 80027fc:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 80027fe:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002800:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002802:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002804:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002806:	464b      	mov	r3, r9
	mov	r4, r11
 8002808:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800280a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800280c:	404c      	eors	r4, r1
	ror	r4, r5
 800280e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002810:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002812:	405a      	eors	r2, r3
	ror	r2, r6
 8002814:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002816:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002818:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800281a:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 800281c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800281e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002820:	405a      	eors	r2, r3
	mov	r1, #25
 8002822:	2119      	movs	r1, #25
	ror	r2, r1
 8002824:	41ca      	rors	r2, r1

	mov	r10, r2
 8002826:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002828:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 800282a:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 800282c:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 800282e:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002830:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002832:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002834:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002836:	404c      	eors	r4, r1
	ror	r4, r5
 8002838:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800283a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800283c:	405a      	eors	r2, r3
	ror	r2, r6
 800283e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002840:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002842:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002844:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002846:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002848:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800284a:	405a      	eors	r2, r3
	mov	r1, #25
 800284c:	2119      	movs	r1, #25
	ror	r2, r1
 800284e:	41ca      	rors	r2, r1

	mov	r9, r2
 8002850:	4691      	mov	r9, r2
	mov	r12, r3
 8002852:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002854:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002856:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002858:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 800285a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 800285c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800285e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002860:	404c      	eors	r4, r1
	ror	r4, r5
 8002862:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002864:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002866:	405a      	eors	r2, r3
	ror	r2, r6
 8002868:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800286a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800286c:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 800286e:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002870:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002872:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002874:	405a      	eors	r2, r3
	mov	r1, #25
 8002876:	2119      	movs	r1, #25
	ror	r2, r1
 8002878:	41ca      	rors	r2, r1

	mov	r8, r2
 800287a:	4690      	mov	r8, r2
	mov	r11, r3
 800287c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 800287e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002880:	4652      	mov	r2, sl
	mov	r3, r12
 8002882:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002884:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002886:	404c      	eors	r4, r1
	ror	r4, r5
 8002888:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800288a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800288c:	405a      	eors	r2, r3
	ror	r2, r6
 800288e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002890:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002892:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002894:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002896:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002898:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800289a:	405a      	eors	r2, r3
	mov	r1, #25
 800289c:	2119      	movs	r1, #25
	ror	r2, r1
 800289e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 80028a0:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 80028a2:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 80028a4:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 80028a6:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 80028a8:	464a      	mov	r2, r9
	mov	r3, r11
 80028aa:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 80028ac:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028ae:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80028b0:	404c      	eors	r4, r1
	ror	r4, r5
 80028b2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028b4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80028b6:	405a      	eors	r2, r3
	ror	r2, r6
 80028b8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028ba:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80028bc:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 80028be:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 80028c0:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028c2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80028c4:	405a      	eors	r2, r3
	mov	r1, #25
 80028c6:	2119      	movs	r1, #25
	ror	r2, r1
 80028c8:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 80028ca:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 80028cc:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 80028ce:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 80028d0:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 80028d2:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 80028d4:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 80028d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028d8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80028da:	404c      	eors	r4, r1
	ror	r4, r5
 80028dc:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028de:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80028e0:	405a      	eors	r2, r3
	ror	r2, r6
 80028e2:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80028e4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80028e6:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 80028e8:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 80028ea:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80028ec:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80028ee:	405a      	eors	r2, r3
	mov	r1, #25
 80028f0:	2119      	movs	r1, #25
	ror	r2, r1
 80028f2:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 80028f4:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 80028f6:	4698      	mov	r8, r3
	mov	r11, r4
 80028f8:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 80028fa:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 80028fc:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 80028fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002900:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002902:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002904:	404c      	eors	r4, r1
	ror	r4, r5
 8002906:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002908:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800290a:	405a      	eors	r2, r3
	ror	r2, r6
 800290c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800290e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002910:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002912:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002914:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002916:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002918:	405a      	eors	r2, r3
	mov	r1, #25
 800291a:	2119      	movs	r1, #25
	ror	r2, r1
 800291c:	41ca      	rors	r2, r1

	mov	r9, r3
 800291e:	4699      	mov	r9, r3
	mov	r12, r4
 8002920:	46a4      	mov	ip, r4

	//=======================================

	// Round 5
	//=======================================
	ldr	r1, [r0]
 8002922:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002924:	4643      	mov	r3, r8
	mov	r4, r10
 8002926:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002928:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800292a:	404c      	eors	r4, r1
	ror	r4, r5
 800292c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800292e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002930:	405a      	eors	r2, r3
	ror	r2, r6
 8002932:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002934:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002936:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002938:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 800293a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800293c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800293e:	405a      	eors	r2, r3
	mov	r1, #25
 8002940:	2119      	movs	r1, #25
	ror	r2, r1
 8002942:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002944:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002946:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002948:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 800294a:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 800294c:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 800294e:	464b      	mov	r3, r9
	mov	r4, r11
 8002950:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002952:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002954:	404c      	eors	r4, r1
	ror	r4, r5
 8002956:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002958:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800295a:	405a      	eors	r2, r3
	ror	r2, r6
 800295c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800295e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002960:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002962:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002964:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002966:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002968:	405a      	eors	r2, r3
	mov	r1, #25
 800296a:	2119      	movs	r1, #25
	ror	r2, r1
 800296c:	41ca      	rors	r2, r1

	mov	r10, r2
 800296e:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002970:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002972:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002974:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002976:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002978:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 800297a:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800297c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800297e:	404c      	eors	r4, r1
	ror	r4, r5
 8002980:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002982:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002984:	405a      	eors	r2, r3
	ror	r2, r6
 8002986:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002988:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800298a:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 800298c:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800298e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002990:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002992:	405a      	eors	r2, r3
	mov	r1, #25
 8002994:	2119      	movs	r1, #25
	ror	r2, r1
 8002996:	41ca      	rors	r2, r1

	mov	r9, r2
 8002998:	4691      	mov	r9, r2
	mov	r12, r3
 800299a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 800299c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 800299e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 80029a0:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 80029a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 80029a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029a6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80029a8:	404c      	eors	r4, r1
	ror	r4, r5
 80029aa:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029ac:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80029ae:	405a      	eors	r2, r3
	ror	r2, r6
 80029b0:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029b2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80029b4:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80029b6:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80029b8:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029ba:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80029bc:	405a      	eors	r2, r3
	mov	r1, #25
 80029be:	2119      	movs	r1, #25
	ror	r2, r1
 80029c0:	41ca      	rors	r2, r1

	mov	r8, r2
 80029c2:	4690      	mov	r8, r2
	mov	r11, r3
 80029c4:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 80029c6:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 80029c8:	4652      	mov	r2, sl
	mov	r3, r12
 80029ca:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029cc:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80029ce:	404c      	eors	r4, r1
	ror	r4, r5
 80029d0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029d2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80029d4:	405a      	eors	r2, r3
	ror	r2, r6
 80029d6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029d8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80029da:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 80029dc:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 80029de:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029e0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80029e2:	405a      	eors	r2, r3
	mov	r1, #25
 80029e4:	2119      	movs	r1, #25
	ror	r2, r1
 80029e6:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 80029e8:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 80029ea:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 80029ec:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 80029ee:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 80029f0:	464a      	mov	r2, r9
	mov	r3, r11
 80029f2:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 80029f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80029f6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80029f8:	404c      	eors	r4, r1
	ror	r4, r5
 80029fa:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80029fc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80029fe:	405a      	eors	r2, r3
	ror	r2, r6
 8002a00:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a02:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a04:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002a06:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002a08:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a0a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a0c:	405a      	eors	r2, r3
	mov	r1, #25
 8002a0e:	2119      	movs	r1, #25
	ror	r2, r1
 8002a10:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002a12:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002a14:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002a16:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002a18:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002a1a:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002a1c:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002a1e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a20:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a22:	404c      	eors	r4, r1
	ror	r4, r5
 8002a24:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a26:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002a28:	405a      	eors	r2, r3
	ror	r2, r6
 8002a2a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a2c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a2e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002a30:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002a32:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a34:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a36:	405a      	eors	r2, r3
	mov	r1, #25
 8002a38:	2119      	movs	r1, #25
	ror	r2, r1
 8002a3a:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002a3c:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002a3e:	4698      	mov	r8, r3
	mov	r11, r4
 8002a40:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002a42:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002a44:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002a46:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002a48:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a4a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a4c:	404c      	eors	r4, r1
	ror	r4, r5
 8002a4e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a50:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002a52:	405a      	eors	r2, r3
	ror	r2, r6
 8002a54:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a56:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a58:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002a5a:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002a5c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a5e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a60:	405a      	eors	r2, r3
	mov	r1, #25
 8002a62:	2119      	movs	r1, #25
	ror	r2, r1
 8002a64:	41ca      	rors	r2, r1

	mov	r9, r3
 8002a66:	4699      	mov	r9, r3
	mov	r12, r4
 8002a68:	46a4      	mov	ip, r4

	//=======================================

	// Round 6
	//=======================================
	ldr	r1, [r0]
 8002a6a:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002a6c:	4643      	mov	r3, r8
	mov	r4, r10
 8002a6e:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a70:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a72:	404c      	eors	r4, r1
	ror	r4, r5
 8002a74:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a76:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002a78:	405a      	eors	r2, r3
	ror	r2, r6
 8002a7a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a7c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002a7e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002a80:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002a82:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002a84:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002a86:	405a      	eors	r2, r3
	mov	r1, #25
 8002a88:	2119      	movs	r1, #25
	ror	r2, r1
 8002a8a:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002a8c:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002a8e:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002a90:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002a92:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002a94:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002a96:	464b      	mov	r3, r9
	mov	r4, r11
 8002a98:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002a9a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002a9c:	404c      	eors	r4, r1
	ror	r4, r5
 8002a9e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002aa0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002aa2:	405a      	eors	r2, r3
	ror	r2, r6
 8002aa4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002aa6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002aa8:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002aaa:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002aac:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002aae:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ab0:	405a      	eors	r2, r3
	mov	r1, #25
 8002ab2:	2119      	movs	r1, #25
	ror	r2, r1
 8002ab4:	41ca      	rors	r2, r1

	mov	r10, r2
 8002ab6:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002ab8:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002aba:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002abc:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002abe:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002ac0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002ac2:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ac4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002ac6:	404c      	eors	r4, r1
	ror	r4, r5
 8002ac8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002aca:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002acc:	405a      	eors	r2, r3
	ror	r2, r6
 8002ace:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ad0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ad2:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002ad4:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002ad6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ad8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ada:	405a      	eors	r2, r3
	mov	r1, #25
 8002adc:	2119      	movs	r1, #25
	ror	r2, r1
 8002ade:	41ca      	rors	r2, r1

	mov	r9, r2
 8002ae0:	4691      	mov	r9, r2
	mov	r12, r3
 8002ae2:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002ae4:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002ae6:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002ae8:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002aea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002aec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002aee:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002af0:	404c      	eors	r4, r1
	ror	r4, r5
 8002af2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002af4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002af6:	405a      	eors	r2, r3
	ror	r2, r6
 8002af8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002afa:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002afc:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002afe:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002b00:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b02:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b04:	405a      	eors	r2, r3
	mov	r1, #25
 8002b06:	2119      	movs	r1, #25
	ror	r2, r1
 8002b08:	41ca      	rors	r2, r1

	mov	r8, r2
 8002b0a:	4690      	mov	r8, r2
	mov	r11, r3
 8002b0c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002b0e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002b10:	4652      	mov	r2, sl
	mov	r3, r12
 8002b12:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b14:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b16:	404c      	eors	r4, r1
	ror	r4, r5
 8002b18:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b1a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b1c:	405a      	eors	r2, r3
	ror	r2, r6
 8002b1e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b20:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002b22:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002b24:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002b26:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b28:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b2a:	405a      	eors	r2, r3
	mov	r1, #25
 8002b2c:	2119      	movs	r1, #25
	ror	r2, r1
 8002b2e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002b30:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002b32:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002b34:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002b36:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002b38:	464a      	mov	r2, r9
	mov	r3, r11
 8002b3a:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002b3c:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b3e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b40:	404c      	eors	r4, r1
	ror	r4, r5
 8002b42:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b44:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b46:	405a      	eors	r2, r3
	ror	r2, r6
 8002b48:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b4a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002b4c:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002b4e:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002b50:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b52:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b54:	405a      	eors	r2, r3
	mov	r1, #25
 8002b56:	2119      	movs	r1, #25
	ror	r2, r1
 8002b58:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002b5a:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002b5c:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002b5e:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002b60:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002b62:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002b64:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002b66:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b68:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b6a:	404c      	eors	r4, r1
	ror	r4, r5
 8002b6c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b6e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b70:	405a      	eors	r2, r3
	ror	r2, r6
 8002b72:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b74:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002b76:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002b78:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002b7a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b7c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002b7e:	405a      	eors	r2, r3
	mov	r1, #25
 8002b80:	2119      	movs	r1, #25
	ror	r2, r1
 8002b82:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002b84:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002b86:	4698      	mov	r8, r3
	mov	r11, r4
 8002b88:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002b8a:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002b8c:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002b8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002b90:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b92:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002b94:	404c      	eors	r4, r1
	ror	r4, r5
 8002b96:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002b98:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002b9a:	405a      	eors	r2, r3
	ror	r2, r6
 8002b9c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002b9e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ba0:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002ba2:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002ba4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ba6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ba8:	405a      	eors	r2, r3
	mov	r1, #25
 8002baa:	2119      	movs	r1, #25
	ror	r2, r1
 8002bac:	41ca      	rors	r2, r1

	mov	r9, r3
 8002bae:	4699      	mov	r9, r3
	mov	r12, r4
 8002bb0:	46a4      	mov	ip, r4

	//=======================================

	// Round 7
	//=======================================
	ldr	r1, [r0]
 8002bb2:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002bb4:	4643      	mov	r3, r8
	mov	r4, r10
 8002bb6:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002bb8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002bba:	404c      	eors	r4, r1
	ror	r4, r5
 8002bbc:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002bbe:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002bc0:	405a      	eors	r2, r3
	ror	r2, r6
 8002bc2:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002bc4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002bc6:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002bc8:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002bca:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002bcc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002bce:	405a      	eors	r2, r3
	mov	r1, #25
 8002bd0:	2119      	movs	r1, #25
	ror	r2, r1
 8002bd2:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002bd4:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002bd6:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002bd8:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002bda:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002bdc:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002bde:	464b      	mov	r3, r9
	mov	r4, r11
 8002be0:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002be2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002be4:	404c      	eors	r4, r1
	ror	r4, r5
 8002be6:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002be8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002bea:	405a      	eors	r2, r3
	ror	r2, r6
 8002bec:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002bee:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002bf0:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002bf2:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002bf4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002bf6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002bf8:	405a      	eors	r2, r3
	mov	r1, #25
 8002bfa:	2119      	movs	r1, #25
	ror	r2, r1
 8002bfc:	41ca      	rors	r2, r1

	mov	r10, r2
 8002bfe:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002c00:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002c02:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002c04:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002c06:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002c08:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002c0a:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c0c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c0e:	404c      	eors	r4, r1
	ror	r4, r5
 8002c10:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c12:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c14:	405a      	eors	r2, r3
	ror	r2, r6
 8002c16:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c18:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c1a:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002c1c:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002c1e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c20:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c22:	405a      	eors	r2, r3
	mov	r1, #25
 8002c24:	2119      	movs	r1, #25
	ror	r2, r1
 8002c26:	41ca      	rors	r2, r1

	mov	r9, r2
 8002c28:	4691      	mov	r9, r2
	mov	r12, r3
 8002c2a:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002c2c:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002c2e:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002c30:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002c32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002c34:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c36:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c38:	404c      	eors	r4, r1
	ror	r4, r5
 8002c3a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c3c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c3e:	405a      	eors	r2, r3
	ror	r2, r6
 8002c40:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c42:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c44:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002c46:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002c48:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c4a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c4c:	405a      	eors	r2, r3
	mov	r1, #25
 8002c4e:	2119      	movs	r1, #25
	ror	r2, r1
 8002c50:	41ca      	rors	r2, r1

	mov	r8, r2
 8002c52:	4690      	mov	r8, r2
	mov	r11, r3
 8002c54:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002c56:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002c58:	4652      	mov	r2, sl
	mov	r3, r12
 8002c5a:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c5c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c5e:	404c      	eors	r4, r1
	ror	r4, r5
 8002c60:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c62:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c64:	405a      	eors	r2, r3
	ror	r2, r6
 8002c66:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c68:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c6a:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002c6c:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002c6e:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c70:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c72:	405a      	eors	r2, r3
	mov	r1, #25
 8002c74:	2119      	movs	r1, #25
	ror	r2, r1
 8002c76:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002c78:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002c7a:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002c7c:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002c7e:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002c80:	464a      	mov	r2, r9
	mov	r3, r11
 8002c82:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002c84:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c86:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002c88:	404c      	eors	r4, r1
	ror	r4, r5
 8002c8a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c8c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002c8e:	405a      	eors	r2, r3
	ror	r2, r6
 8002c90:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002c92:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002c94:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002c96:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002c98:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002c9a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002c9c:	405a      	eors	r2, r3
	mov	r1, #25
 8002c9e:	2119      	movs	r1, #25
	ror	r2, r1
 8002ca0:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002ca2:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002ca4:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002ca6:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002ca8:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002caa:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002cac:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002cae:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002cb0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002cb2:	404c      	eors	r4, r1
	ror	r4, r5
 8002cb4:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002cb6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002cb8:	405a      	eors	r2, r3
	ror	r2, r6
 8002cba:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002cbc:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002cbe:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002cc0:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002cc2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002cc4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002cc6:	405a      	eors	r2, r3
	mov	r1, #25
 8002cc8:	2119      	movs	r1, #25
	ror	r2, r1
 8002cca:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002ccc:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002cce:	4698      	mov	r8, r3
	mov	r11, r4
 8002cd0:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002cd2:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002cd4:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002cd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002cd8:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002cda:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002cdc:	404c      	eors	r4, r1
	ror	r4, r5
 8002cde:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ce0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ce2:	405a      	eors	r2, r3
	ror	r2, r6
 8002ce4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ce6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ce8:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002cea:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002cec:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002cee:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002cf0:	405a      	eors	r2, r3
	mov	r1, #25
 8002cf2:	2119      	movs	r1, #25
	ror	r2, r1
 8002cf4:	41ca      	rors	r2, r1

	mov	r9, r3
 8002cf6:	4699      	mov	r9, r3
	mov	r12, r4
 8002cf8:	46a4      	mov	ip, r4

	//=======================================

	// Round 8
	//=======================================
	ldr	r1, [r0]
 8002cfa:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002cfc:	4643      	mov	r3, r8
	mov	r4, r10
 8002cfe:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d00:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d02:	404c      	eors	r4, r1
	ror	r4, r5
 8002d04:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d06:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d08:	405a      	eors	r2, r3
	ror	r2, r6
 8002d0a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d0c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d0e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002d10:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002d12:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d14:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d16:	405a      	eors	r2, r3
	mov	r1, #25
 8002d18:	2119      	movs	r1, #25
	ror	r2, r1
 8002d1a:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002d1c:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002d1e:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002d20:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002d22:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002d24:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002d26:	464b      	mov	r3, r9
	mov	r4, r11
 8002d28:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d2a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d2c:	404c      	eors	r4, r1
	ror	r4, r5
 8002d2e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d30:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d32:	405a      	eors	r2, r3
	ror	r2, r6
 8002d34:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d36:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d38:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002d3a:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002d3c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d3e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d40:	405a      	eors	r2, r3
	mov	r1, #25
 8002d42:	2119      	movs	r1, #25
	ror	r2, r1
 8002d44:	41ca      	rors	r2, r1

	mov	r10, r2
 8002d46:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002d48:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002d4a:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002d4c:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002d4e:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002d50:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002d52:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d54:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d56:	404c      	eors	r4, r1
	ror	r4, r5
 8002d58:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d5a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d5c:	405a      	eors	r2, r3
	ror	r2, r6
 8002d5e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d60:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d62:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002d64:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002d66:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d68:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d6a:	405a      	eors	r2, r3
	mov	r1, #25
 8002d6c:	2119      	movs	r1, #25
	ror	r2, r1
 8002d6e:	41ca      	rors	r2, r1

	mov	r9, r2
 8002d70:	4691      	mov	r9, r2
	mov	r12, r3
 8002d72:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002d74:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002d76:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002d78:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002d7c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d7e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002d80:	404c      	eors	r4, r1
	ror	r4, r5
 8002d82:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d84:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002d86:	405a      	eors	r2, r3
	ror	r2, r6
 8002d88:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002d8a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002d8c:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002d8e:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002d90:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002d92:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002d94:	405a      	eors	r2, r3
	mov	r1, #25
 8002d96:	2119      	movs	r1, #25
	ror	r2, r1
 8002d98:	41ca      	rors	r2, r1

	mov	r8, r2
 8002d9a:	4690      	mov	r8, r2
	mov	r11, r3
 8002d9c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002d9e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002da0:	4652      	mov	r2, sl
	mov	r3, r12
 8002da2:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002da4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002da6:	404c      	eors	r4, r1
	ror	r4, r5
 8002da8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002daa:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002dac:	405a      	eors	r2, r3
	ror	r2, r6
 8002dae:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002db0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002db2:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002db4:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002db6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002db8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002dba:	405a      	eors	r2, r3
	mov	r1, #25
 8002dbc:	2119      	movs	r1, #25
	ror	r2, r1
 8002dbe:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002dc0:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002dc2:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002dc4:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002dc6:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002dc8:	464a      	mov	r2, r9
	mov	r3, r11
 8002dca:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002dcc:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002dce:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002dd0:	404c      	eors	r4, r1
	ror	r4, r5
 8002dd2:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002dd4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002dd6:	405a      	eors	r2, r3
	ror	r2, r6
 8002dd8:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002dda:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ddc:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002dde:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002de0:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002de2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002de4:	405a      	eors	r2, r3
	mov	r1, #25
 8002de6:	2119      	movs	r1, #25
	ror	r2, r1
 8002de8:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002dea:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002dec:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002dee:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002df0:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002df2:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002df4:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002df6:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002df8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002dfa:	404c      	eors	r4, r1
	ror	r4, r5
 8002dfc:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002dfe:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e00:	405a      	eors	r2, r3
	ror	r2, r6
 8002e02:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e04:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e06:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002e08:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002e0a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e0c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e0e:	405a      	eors	r2, r3
	mov	r1, #25
 8002e10:	2119      	movs	r1, #25
	ror	r2, r1
 8002e12:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002e14:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002e16:	4698      	mov	r8, r3
	mov	r11, r4
 8002e18:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002e1a:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002e1c:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002e1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002e20:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e22:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e24:	404c      	eors	r4, r1
	ror	r4, r5
 8002e26:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e28:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e2a:	405a      	eors	r2, r3
	ror	r2, r6
 8002e2c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e2e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e30:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002e32:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002e34:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e36:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e38:	405a      	eors	r2, r3
	mov	r1, #25
 8002e3a:	2119      	movs	r1, #25
	ror	r2, r1
 8002e3c:	41ca      	rors	r2, r1

	mov	r9, r3
 8002e3e:	4699      	mov	r9, r3
	mov	r12, r4
 8002e40:	46a4      	mov	ip, r4

	//=======================================

	// Round 9
	//=======================================
	ldr	r1, [r0]
 8002e42:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002e44:	4643      	mov	r3, r8
	mov	r4, r10
 8002e46:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e48:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e4a:	404c      	eors	r4, r1
	ror	r4, r5
 8002e4c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e4e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e50:	405a      	eors	r2, r3
	ror	r2, r6
 8002e52:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e54:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e56:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002e58:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002e5a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e5c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e5e:	405a      	eors	r2, r3
	mov	r1, #25
 8002e60:	2119      	movs	r1, #25
	ror	r2, r1
 8002e62:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002e64:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002e66:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002e68:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002e6a:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002e6c:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002e6e:	464b      	mov	r3, r9
	mov	r4, r11
 8002e70:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e72:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e74:	404c      	eors	r4, r1
	ror	r4, r5
 8002e76:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e78:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002e7a:	405a      	eors	r2, r3
	ror	r2, r6
 8002e7c:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e7e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002e80:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002e82:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002e84:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002e86:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002e88:	405a      	eors	r2, r3
	mov	r1, #25
 8002e8a:	2119      	movs	r1, #25
	ror	r2, r1
 8002e8c:	41ca      	rors	r2, r1

	mov	r10, r2
 8002e8e:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002e90:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002e92:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002e94:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002e96:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002e9a:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002e9c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002e9e:	404c      	eors	r4, r1
	ror	r4, r5
 8002ea0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ea2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ea4:	405a      	eors	r2, r3
	ror	r2, r6
 8002ea6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ea8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002eaa:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002eac:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002eae:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002eb0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002eb2:	405a      	eors	r2, r3
	mov	r1, #25
 8002eb4:	2119      	movs	r1, #25
	ror	r2, r1
 8002eb6:	41ca      	rors	r2, r1

	mov	r9, r2
 8002eb8:	4691      	mov	r9, r2
	mov	r12, r3
 8002eba:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8002ebc:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8002ebe:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8002ec0:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 8002ec2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 8002ec4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ec6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002ec8:	404c      	eors	r4, r1
	ror	r4, r5
 8002eca:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ecc:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ece:	405a      	eors	r2, r3
	ror	r2, r6
 8002ed0:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ed2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ed4:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002ed6:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002ed8:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002eda:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002edc:	405a      	eors	r2, r3
	mov	r1, #25
 8002ede:	2119      	movs	r1, #25
	ror	r2, r1
 8002ee0:	41ca      	rors	r2, r1

	mov	r8, r2
 8002ee2:	4690      	mov	r8, r2
	mov	r11, r3
 8002ee4:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 8002ee6:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8002ee8:	4652      	mov	r2, sl
	mov	r3, r12
 8002eea:	4663      	mov	r3, ip
	
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002eec:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002eee:	404c      	eors	r4, r1
	ror	r4, r5
 8002ef0:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ef2:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002ef4:	405a      	eors	r2, r3
	ror	r2, r6
 8002ef6:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ef8:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002efa:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002efc:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002efe:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f00:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f02:	405a      	eors	r2, r3
	mov	r1, #25
 8002f04:	2119      	movs	r1, #25
	ror	r2, r1
 8002f06:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8002f08:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8002f0a:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8002f0c:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8002f0e:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8002f10:	464a      	mov	r2, r9
	mov	r3, r11
 8002f12:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 8002f14:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f16:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f18:	404c      	eors	r4, r1
	ror	r4, r5
 8002f1a:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f1c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f1e:	405a      	eors	r2, r3
	ror	r2, r6
 8002f20:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f22:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f24:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002f26:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002f28:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f2a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f2c:	405a      	eors	r2, r3
	mov	r1, #25
 8002f2e:	2119      	movs	r1, #25
	ror	r2, r1
 8002f30:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 8002f32:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 8002f34:	62c3      	str	r3, [r0, #44]	; 0x2c
	mov	r10, r4
 8002f36:	46a2      	mov	sl, r4
	
	//=======================================

	ldr	r1, [r0, #8]
 8002f38:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8002f3a:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8002f3c:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8002f3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f40:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f42:	404c      	eors	r4, r1
	ror	r4, r5
 8002f44:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f46:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f48:	405a      	eors	r2, r3
	ror	r2, r6
 8002f4a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f4c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f4e:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002f50:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002f52:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f54:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f56:	405a      	eors	r2, r3
	mov	r1, #25
 8002f58:	2119      	movs	r1, #25
	ror	r2, r1
 8002f5a:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 8002f5c:	61c2      	str	r2, [r0, #28]
	mov	r8, r3
 8002f5e:	4698      	mov	r8, r3
	mov	r11, r4
 8002f60:	46a3      	mov	fp, r4
	
	//=======================================

	ldr	r1, [r0, #12]
 8002f62:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 8002f64:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 8002f66:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 8002f68:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f6a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f6c:	404c      	eors	r4, r1
	ror	r4, r5
 8002f6e:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f70:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f72:	405a      	eors	r2, r3
	ror	r2, r6
 8002f74:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f76:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f78:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 8002f7a:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8002f7c:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f7e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002f80:	405a      	eors	r2, r3
	mov	r1, #25
 8002f82:	2119      	movs	r1, #25
	ror	r2, r1
 8002f84:	41ca      	rors	r2, r1

	mov	r9, r3
 8002f86:	4699      	mov	r9, r3
	mov	r12, r4
 8002f88:	46a4      	mov	ip, r4

	//=======================================
	
	// Round 10
	//=======================================
	ldr	r1, [r0]
 8002f8a:	6801      	ldr	r1, [r0, #0]
	mov	r3, r8
 8002f8c:	4643      	mov	r3, r8
	mov	r4, r10
 8002f8e:	4654      	mov	r4, sl
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f90:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002f92:	404c      	eors	r4, r1
	ror	r4, r5
 8002f94:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002f96:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002f98:	405a      	eors	r2, r3
	ror	r2, r6
 8002f9a:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002f9c:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002f9e:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8002fa0:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8002fa2:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fa4:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002fa6:	405a      	eors	r2, r3
	mov	r1, #25
 8002fa8:	2119      	movs	r1, #25
	ror	r2, r1
 8002faa:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 8002fac:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #32]
 8002fae:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #48]
 8002fb0:	6304      	str	r4, [r0, #48]	; 0x30

	//=======================================

	ldr	r1, [r0, #4]
 8002fb2:	6841      	ldr	r1, [r0, #4]
	ldr	r2, [r0, #20]
 8002fb4:	6942      	ldr	r2, [r0, #20]
	mov	r3, r9
 8002fb6:	464b      	mov	r3, r9
	mov	r4, r11
 8002fb8:	465c      	mov	r4, fp
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002fba:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002fbc:	404c      	eors	r4, r1
	ror	r4, r5
 8002fbe:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fc0:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002fc2:	405a      	eors	r2, r3
	ror	r2, r6
 8002fc4:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002fc6:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002fc8:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 8002fca:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8002fcc:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fce:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002fd0:	405a      	eors	r2, r3
	mov	r1, #25
 8002fd2:	2119      	movs	r1, #25
	ror	r2, r1
 8002fd4:	41ca      	rors	r2, r1

	mov	r10, r2
 8002fd6:	4692      	mov	sl, r2
	str	r3, [r0, #36]
 8002fd8:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #52]
 8002fda:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #8]
 8002fdc:	6881      	ldr	r1, [r0, #8]
	ldr	r2, [r0, #24]
 8002fde:	6982      	ldr	r2, [r0, #24]
	ldr	r3, [r0, #40]
 8002fe0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	mov	r4, r12
 8002fe2:	4664      	mov	r4, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002fe4:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8002fe6:	404c      	eors	r4, r1
	ror	r4, r5
 8002fe8:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002fea:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8002fec:	405a      	eors	r2, r3
	ror	r2, r6
 8002fee:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8002ff0:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8002ff2:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8002ff4:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 8002ff6:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8002ff8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8002ffa:	405a      	eors	r2, r3
	mov	r1, #25
 8002ffc:	2119      	movs	r1, #25
	ror	r2, r1
 8002ffe:	41ca      	rors	r2, r1

	mov	r9, r2
 8003000:	4691      	mov	r9, r2
	mov	r12, r3
 8003002:	469c      	mov	ip, r3
	str	r4, [r0, #56]
 8003004:	6384      	str	r4, [r0, #56]	; 0x38
	
	//=======================================

	ldr	r1, [r0, #12]
 8003006:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #28]
 8003008:	69c2      	ldr	r2, [r0, #28]
	ldr	r3, [r0, #44]
 800300a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	ldr	r4, [r0, #60]
 800300c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800300e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8003010:	404c      	eors	r4, r1
	ror	r4, r5
 8003012:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003014:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8003016:	405a      	eors	r2, r3
	ror	r2, r6
 8003018:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800301a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800301c:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 800301e:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 8003020:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003022:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8003024:	405a      	eors	r2, r3
	mov	r1, #25
 8003026:	2119      	movs	r1, #25
	ror	r2, r1
 8003028:	41ca      	rors	r2, r1

	mov	r8, r2
 800302a:	4690      	mov	r8, r2
	mov	r11, r3
 800302c:	469b      	mov	fp, r3
	
	//=======================================

	ldr	r1, [r0, #0]
 800302e:	6801      	ldr	r1, [r0, #0]
	mov	r2, r10
 8003030:	4652      	mov	r2, sl
	mov	r3, r12
 8003032:	4663      	mov	r3, ip
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003034:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8003036:	404c      	eors	r4, r1
	ror	r4, r5
 8003038:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800303a:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 800303c:	405a      	eors	r2, r3
	ror	r2, r6
 800303e:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003040:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8003042:	404c      	eors	r4, r1
	str	r1, [r0, #0]
 8003044:	6001      	str	r1, [r0, #0]
	ror	r4, r7
 8003046:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003048:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800304a:	405a      	eors	r2, r3
	mov	r1, #25
 800304c:	2119      	movs	r1, #25
	ror	r2, r1
 800304e:	41ca      	rors	r2, r1

	str	r2, [r0, #20]
 8003050:	6142      	str	r2, [r0, #20]
	str	r3, [r0, #40]
 8003052:	6283      	str	r3, [r0, #40]	; 0x28
	str	r4, [r0, #60]
 8003054:	63c4      	str	r4, [r0, #60]	; 0x3c
	
	//=======================================

	ldr	r1, [r0, #4]
 8003056:	6841      	ldr	r1, [r0, #4]
	mov	r2, r9
 8003058:	464a      	mov	r2, r9
	mov	r3, r11
 800305a:	465b      	mov	r3, fp
	ldr	r4, [r0, #48]
 800305c:	6b04      	ldr	r4, [r0, #48]	; 0x30
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800305e:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 8003060:	404c      	eors	r4, r1
	ror	r4, r5
 8003062:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003064:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8003066:	405a      	eors	r2, r3
	ror	r2, r6
 8003068:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 800306a:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 800306c:	404c      	eors	r4, r1
	str	r1, [r0, #4]
 800306e:	6041      	str	r1, [r0, #4]
	ror	r4, r7
 8003070:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 8003072:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 8003074:	405a      	eors	r2, r3
	mov	r1, #25
 8003076:	2119      	movs	r1, #25
	ror	r2, r1
 8003078:	41ca      	rors	r2, r1

	str	r2, [r0, #24]
 800307a:	6182      	str	r2, [r0, #24]
	str	r3, [r0, #44]
 800307c:	62c3      	str	r3, [r0, #44]	; 0x2c
	str	r4, [r0, #48]
 800307e:	6304      	str	r4, [r0, #48]	; 0x30
	
	//=======================================

	ldr	r1, [r0, #8]
 8003080:	6881      	ldr	r1, [r0, #8]
	mov	r2, r8
 8003082:	4642      	mov	r2, r8
	ldr	r3, [r0, #32]
 8003084:	6a03      	ldr	r3, [r0, #32]
	ldr	r4, [r0, #52]
 8003086:	6b44      	ldr	r4, [r0, #52]	; 0x34
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003088:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 800308a:	404c      	eors	r4, r1
	ror	r4, r5
 800308c:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800308e:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 8003090:	405a      	eors	r2, r3
	ror	r2, r6
 8003092:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 8003094:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 8003096:	404c      	eors	r4, r1
	str	r1, [r0, #8]
 8003098:	6081      	str	r1, [r0, #8]
	ror	r4, r7
 800309a:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 800309c:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 800309e:	405a      	eors	r2, r3
	mov	r1, #25
 80030a0:	2119      	movs	r1, #25
	ror	r2, r1
 80030a2:	41ca      	rors	r2, r1

	str	r2, [r0, #28]
 80030a4:	61c2      	str	r2, [r0, #28]
	str	r3, [r0, #32]
 80030a6:	6203      	str	r3, [r0, #32]
	str	r4, [r0, #52]
 80030a8:	6344      	str	r4, [r0, #52]	; 0x34
	
	//=======================================

	ldr	r1, [r0, #12]
 80030aa:	68c1      	ldr	r1, [r0, #12]
	ldr	r2, [r0, #16]
 80030ac:	6902      	ldr	r2, [r0, #16]
	ldr	r3, [r0, #36]
 80030ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
	ldr	r4, [r0, #56]
 80030b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80030b2:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]),16);
	eor	r4, r1
 80030b4:	404c      	eors	r4, r1
	ror	r4, r5
 80030b6:	41ec      	rors	r4, r5
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80030b8:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]),12);
	eor	r2, r3
 80030ba:	405a      	eors	r2, r3
	ror	r2, r6
 80030bc:	41f2      	rors	r2, r6
	// x[a] = PLUS(x[a],x[b]);
	add	r1, r2
 80030be:	1889      	adds	r1, r1, r2
	// x[d] = ROTATE(XOR(x[d],x[a]), 8);
	eor	r4, r1
 80030c0:	404c      	eors	r4, r1
	str	r1, [r0, #12]
 80030c2:	60c1      	str	r1, [r0, #12]
	ror	r4, r7
 80030c4:	41fc      	rors	r4, r7
	// x[c] = PLUS(x[c],x[d]);
	add	r3, r4
 80030c6:	191b      	adds	r3, r3, r4
	// x[b] = ROTATE(XOR(x[b],x[c]), 7);
	eor	r2, r3
 80030c8:	405a      	eors	r2, r3
	mov	r1, #25
 80030ca:	2119      	movs	r1, #25
	ror	r2, r1
 80030cc:	41ca      	rors	r2, r1

	str	r2, [r0, #16]
 80030ce:	6102      	str	r2, [r0, #16]
	str	r3, [r0, #36]
 80030d0:	6243      	str	r3, [r0, #36]	; 0x24
	str	r4, [r0, #56]
 80030d2:	6384      	str	r4, [r0, #56]	; 0x38

	//=======================================

	// restore high registers
	pop {r3-r7}
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
	// Copy low to high registers
	mov	r8, r3
 80030d6:	4698      	mov	r8, r3
	mov	r9, r4
 80030d8:	46a1      	mov	r9, r4
	mov	r10, r5
 80030da:	46aa      	mov	sl, r5
	mov	r11, r6
 80030dc:	46b3      	mov	fp, r6
	mov	r12, r7
 80030de:	46bc      	mov	ip, r7

	pop {r4-r7}
 80030e0:	bcf0      	pop	{r4, r5, r6, r7}
	bx lr
 80030e2:	4770      	bx	lr

080030e4 <asm_add_and_store>:
@ 
.global asm_add_and_store
.func asm_add_and_store

asm_add_and_store:
	push {r4-r6}
 80030e4:	b470      	push	{r4, r5, r6}
	
	//=======================================
	ldr	r3, [r1]
 80030e6:	680b      	ldr	r3, [r1, #0]
	ldr	r4, [r2]
 80030e8:	6814      	ldr	r4, [r2, #0]
	
	ldr	r5, [r1, #4]
 80030ea:	684d      	ldr	r5, [r1, #4]
	ldr	r6, [r2, #4]
 80030ec:	6856      	ldr	r6, [r2, #4]
	
	add r3, r4
 80030ee:	191b      	adds	r3, r3, r4
	str	r3, [r0]
 80030f0:	6003      	str	r3, [r0, #0]

	ldr	r3, [r1, #8]
 80030f2:	688b      	ldr	r3, [r1, #8]
	ldr	r4, [r2, #8]
 80030f4:	6894      	ldr	r4, [r2, #8]

	add r5, r6
 80030f6:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #4]
 80030f8:	6045      	str	r5, [r0, #4]

	ldr	r5, [r1, #12]
 80030fa:	68cd      	ldr	r5, [r1, #12]
	ldr	r6, [r2, #12]
 80030fc:	68d6      	ldr	r6, [r2, #12]
	
	add r3, r4
 80030fe:	191b      	adds	r3, r3, r4
	str	r3, [r0, #8]
 8003100:	6083      	str	r3, [r0, #8]

	ldr	r3, [r1, #16]
 8003102:	690b      	ldr	r3, [r1, #16]
	ldr	r4, [r2, #16]
 8003104:	6914      	ldr	r4, [r2, #16]

	add r5, r6
 8003106:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #12]
 8003108:	60c5      	str	r5, [r0, #12]

	ldr	r5, [r1, #20]
 800310a:	694d      	ldr	r5, [r1, #20]
	ldr	r6, [r2, #20]
 800310c:	6956      	ldr	r6, [r2, #20]
	
	add r3, r4
 800310e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #16]
 8003110:	6103      	str	r3, [r0, #16]

	ldr	r3, [r1, #24]
 8003112:	698b      	ldr	r3, [r1, #24]
	ldr	r4, [r2, #24]
 8003114:	6994      	ldr	r4, [r2, #24]

	add r5, r6
 8003116:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #20]
 8003118:	6145      	str	r5, [r0, #20]

	ldr	r5, [r1, #28]
 800311a:	69cd      	ldr	r5, [r1, #28]
	ldr	r6, [r2, #28]
 800311c:	69d6      	ldr	r6, [r2, #28]
	
	add r3, r4
 800311e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #24]
 8003120:	6183      	str	r3, [r0, #24]

	ldr	r3, [r1, #32]
 8003122:	6a0b      	ldr	r3, [r1, #32]
	ldr	r4, [r2, #32]
 8003124:	6a14      	ldr	r4, [r2, #32]

	add r5, r6
 8003126:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #28]
 8003128:	61c5      	str	r5, [r0, #28]

	ldr	r5, [r1, #36]
 800312a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	ldr	r6, [r2, #36]
 800312c:	6a56      	ldr	r6, [r2, #36]	; 0x24
	
	add r3, r4
 800312e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #32]
 8003130:	6203      	str	r3, [r0, #32]

	ldr	r3, [r1, #40]
 8003132:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	ldr	r4, [r2, #40]
 8003134:	6a94      	ldr	r4, [r2, #40]	; 0x28

	add r5, r6
 8003136:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #36]
 8003138:	6245      	str	r5, [r0, #36]	; 0x24

	ldr	r5, [r1, #44]
 800313a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	ldr	r6, [r2, #44]
 800313c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	
	add r3, r4
 800313e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #40]
 8003140:	6283      	str	r3, [r0, #40]	; 0x28

	ldr	r3, [r1, #48]
 8003142:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	ldr	r4, [r2, #48]
 8003144:	6b14      	ldr	r4, [r2, #48]	; 0x30

	add r5, r6
 8003146:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #44]
 8003148:	62c5      	str	r5, [r0, #44]	; 0x2c

	ldr	r5, [r1, #52]
 800314a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
	ldr	r6, [r2, #52]
 800314c:	6b56      	ldr	r6, [r2, #52]	; 0x34
	
	add r3, r4
 800314e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #48]
 8003150:	6303      	str	r3, [r0, #48]	; 0x30

	ldr	r3, [r1, #56]
 8003152:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ldr	r4, [r2, #56]
 8003154:	6b94      	ldr	r4, [r2, #56]	; 0x38

	add r5, r6
 8003156:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #52]
 8003158:	6345      	str	r5, [r0, #52]	; 0x34

	ldr	r5, [r1, #60]
 800315a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
	ldr	r6, [r2, #60]
 800315c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
	
	add r3, r4
 800315e:	191b      	adds	r3, r3, r4
	str	r3, [r0, #56]
 8003160:	6383      	str	r3, [r0, #56]	; 0x38

	ldr	r3, [r1, #64]
 8003162:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	ldr	r4, [r2, #64]
 8003164:	6c14      	ldr	r4, [r2, #64]	; 0x40

	add r5, r6
 8003166:	19ad      	adds	r5, r5, r6
	str	r5, [r0, #60]
 8003168:	63c5      	str	r5, [r0, #60]	; 0x3c

	add r3, r4
 800316a:	191b      	adds	r3, r3, r4
	str	r3, [r0, #64]
 800316c:	6403      	str	r3, [r0, #64]	; 0x40
	
	//=======================================

	pop {r4-r6}
 800316e:	bc70      	pop	{r4, r5, r6}
	bx lr
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <asm_helprec_internal>:



asm_helprec_internal:

    push {r4-r7,lr}
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8003176:	4644      	mov	r4, r8
    mov r5,r10
 8003178:	4655      	mov	r5, sl
    mov r6,r11
 800317a:	465e      	mov	r6, fp
    mov r7,r12
 800317c:	4667      	mov	r7, ip
    push {r4-r7}
 800317e:	b4f0      	push	{r4, r5, r6, r7}
    mov r4,r9
 8003180:	464c      	mov	r4, r9
    mov r5,r14
 8003182:	4675      	mov	r5, lr
    push {r4,r5}
 8003184:	b430      	push	{r4, r5}


    mov r11,r2
 8003186:	4693      	mov	fp, r2

    
    mov r4,#1
 8003188:	2401      	movs	r4, #1
    and r1,r4
 800318a:	4021      	ands	r1, r4
    lsr r2,r1,#1
 800318c:	084a      	lsrs	r2, r1, #1


    mov r4,#3
 800318e:	2403      	movs	r4, #3
    lsl r4,#14
 8003190:	03a4      	lsls	r4, r4, #14
    add r4,#4
 8003192:	3404      	adds	r4, #4
    

    mul r1,r4
 8003194:	4361      	muls	r1, r4
    mul r2,r4
 8003196:	4362      	muls	r2, r4



    ldr r7,[r0]
 8003198:	6807      	ldr	r7, [r0, #0]
    uxth r6,r7
 800319a:	b2be      	uxth	r6, r7
    lsr r7,#16
 800319c:	0c3f      	lsrs	r7, r7, #16


    get_k_mov r6,r1,r12
 800319e:	00f6      	lsls	r6, r6, #3
 80031a0:	1876      	adds	r6, r6, r1
 80031a2:	232a      	movs	r3, #42	; 0x2a
 80031a4:	019c      	lsls	r4, r3, #6
 80031a6:	191b      	adds	r3, r3, r4
 80031a8:	4373      	muls	r3, r6
 80031aa:	0e5b      	lsrs	r3, r3, #25
 80031ac:	2403      	movs	r4, #3
 80031ae:	0324      	lsls	r4, r4, #12
 80031b0:	3401      	adds	r4, #1
 80031b2:	46a6      	mov	lr, r4
 80031b4:	435c      	muls	r4, r3
 80031b6:	1b34      	subs	r4, r6, r4
 80031b8:	4675      	mov	r5, lr
 80031ba:	3d01      	subs	r5, #1
 80031bc:	1b2c      	subs	r4, r5, r4
 80031be:	17e4      	asrs	r4, r4, #31
 80031c0:	1b1b      	subs	r3, r3, r4
 80031c2:	2401      	movs	r4, #1
 80031c4:	401c      	ands	r4, r3
 80031c6:	085d      	lsrs	r5, r3, #1
 80031c8:	1964      	adds	r4, r4, r5
 80031ca:	3b01      	subs	r3, #1
 80031cc:	2501      	movs	r5, #1
 80031ce:	401d      	ands	r5, r3
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	195b      	adds	r3, r3, r5
 80031d4:	4675      	mov	r5, lr
 80031d6:	006d      	lsls	r5, r5, #1
 80031d8:	4365      	muls	r5, r4
 80031da:	1b76      	subs	r6, r6, r5
 80031dc:	17f5      	asrs	r5, r6, #31
 80031de:	1976      	adds	r6, r6, r5
 80031e0:	406e      	eors	r6, r5
 80031e2:	46b4      	mov	ip, r6
 80031e4:	b418      	push	{r3, r4}
    get_k_mov r7,r2,r9
 80031e6:	00ff      	lsls	r7, r7, #3
 80031e8:	18bf      	adds	r7, r7, r2
 80031ea:	232a      	movs	r3, #42	; 0x2a
 80031ec:	019c      	lsls	r4, r3, #6
 80031ee:	191b      	adds	r3, r3, r4
 80031f0:	437b      	muls	r3, r7
 80031f2:	0e5b      	lsrs	r3, r3, #25
 80031f4:	2403      	movs	r4, #3
 80031f6:	0324      	lsls	r4, r4, #12
 80031f8:	3401      	adds	r4, #1
 80031fa:	46a6      	mov	lr, r4
 80031fc:	435c      	muls	r4, r3
 80031fe:	1b3c      	subs	r4, r7, r4
 8003200:	4675      	mov	r5, lr
 8003202:	3d01      	subs	r5, #1
 8003204:	1b2c      	subs	r4, r5, r4
 8003206:	17e4      	asrs	r4, r4, #31
 8003208:	1b1b      	subs	r3, r3, r4
 800320a:	2401      	movs	r4, #1
 800320c:	401c      	ands	r4, r3
 800320e:	085d      	lsrs	r5, r3, #1
 8003210:	1964      	adds	r4, r4, r5
 8003212:	3b01      	subs	r3, #1
 8003214:	2501      	movs	r5, #1
 8003216:	401d      	ands	r5, r3
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	195b      	adds	r3, r3, r5
 800321c:	4675      	mov	r5, lr
 800321e:	006d      	lsls	r5, r5, #1
 8003220:	4365      	muls	r5, r4
 8003222:	1b7f      	subs	r7, r7, r5
 8003224:	17fd      	asrs	r5, r7, #31
 8003226:	197f      	adds	r7, r7, r5
 8003228:	406f      	eors	r7, r5
 800322a:	46b9      	mov	r9, r7
 800322c:	b418      	push	{r3, r4}
    
  

    mov r7,#1
 800322e:	2701      	movs	r7, #1
    lsl r7,#9
 8003230:	027f      	lsls	r7, r7, #9
    ldr r7,[r0,r7]
 8003232:	59c7      	ldr	r7, [r0, r7]
    uxth r6,r7
 8003234:	b2be      	uxth	r6, r7
    lsr r7,#16
 8003236:	0c3f      	lsrs	r7, r7, #16

    get_k r6,r1,r12
 8003238:	00f6      	lsls	r6, r6, #3
 800323a:	1876      	adds	r6, r6, r1
 800323c:	232a      	movs	r3, #42	; 0x2a
 800323e:	019c      	lsls	r4, r3, #6
 8003240:	191b      	adds	r3, r3, r4
 8003242:	4373      	muls	r3, r6
 8003244:	0e5b      	lsrs	r3, r3, #25
 8003246:	2403      	movs	r4, #3
 8003248:	0324      	lsls	r4, r4, #12
 800324a:	3401      	adds	r4, #1
 800324c:	46a6      	mov	lr, r4
 800324e:	435c      	muls	r4, r3
 8003250:	1b34      	subs	r4, r6, r4
 8003252:	4675      	mov	r5, lr
 8003254:	3d01      	subs	r5, #1
 8003256:	1b2c      	subs	r4, r5, r4
 8003258:	17e4      	asrs	r4, r4, #31
 800325a:	1b1b      	subs	r3, r3, r4
 800325c:	2401      	movs	r4, #1
 800325e:	401c      	ands	r4, r3
 8003260:	085d      	lsrs	r5, r3, #1
 8003262:	1964      	adds	r4, r4, r5
 8003264:	3b01      	subs	r3, #1
 8003266:	2501      	movs	r5, #1
 8003268:	401d      	ands	r5, r3
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	195b      	adds	r3, r3, r5
 800326e:	4675      	mov	r5, lr
 8003270:	006d      	lsls	r5, r5, #1
 8003272:	4365      	muls	r5, r4
 8003274:	1b76      	subs	r6, r6, r5
 8003276:	17f5      	asrs	r5, r6, #31
 8003278:	1976      	adds	r6, r6, r5
 800327a:	406e      	eors	r6, r5
 800327c:	44b4      	add	ip, r6
 800327e:	b418      	push	{r3, r4}
    get_k r7,r2,r9
 8003280:	00ff      	lsls	r7, r7, #3
 8003282:	18bf      	adds	r7, r7, r2
 8003284:	232a      	movs	r3, #42	; 0x2a
 8003286:	019c      	lsls	r4, r3, #6
 8003288:	191b      	adds	r3, r3, r4
 800328a:	437b      	muls	r3, r7
 800328c:	0e5b      	lsrs	r3, r3, #25
 800328e:	2403      	movs	r4, #3
 8003290:	0324      	lsls	r4, r4, #12
 8003292:	3401      	adds	r4, #1
 8003294:	46a6      	mov	lr, r4
 8003296:	435c      	muls	r4, r3
 8003298:	1b3c      	subs	r4, r7, r4
 800329a:	4675      	mov	r5, lr
 800329c:	3d01      	subs	r5, #1
 800329e:	1b2c      	subs	r4, r5, r4
 80032a0:	17e4      	asrs	r4, r4, #31
 80032a2:	1b1b      	subs	r3, r3, r4
 80032a4:	2401      	movs	r4, #1
 80032a6:	401c      	ands	r4, r3
 80032a8:	085d      	lsrs	r5, r3, #1
 80032aa:	1964      	adds	r4, r4, r5
 80032ac:	3b01      	subs	r3, #1
 80032ae:	2501      	movs	r5, #1
 80032b0:	401d      	ands	r5, r3
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	195b      	adds	r3, r3, r5
 80032b6:	4675      	mov	r5, lr
 80032b8:	006d      	lsls	r5, r5, #1
 80032ba:	4365      	muls	r5, r4
 80032bc:	1b7f      	subs	r7, r7, r5
 80032be:	17fd      	asrs	r5, r7, #31
 80032c0:	197f      	adds	r7, r7, r5
 80032c2:	406f      	eors	r7, r5
 80032c4:	44b9      	add	r9, r7
 80032c6:	b418      	push	{r3, r4}


    mov r7,#1
 80032c8:	2701      	movs	r7, #1
    lsl r7,#10
 80032ca:	02bf      	lsls	r7, r7, #10
    ldr r7,[r0,r7]
 80032cc:	59c7      	ldr	r7, [r0, r7]


    uxth r6,r7
 80032ce:	b2be      	uxth	r6, r7
    lsr r7,#16
 80032d0:	0c3f      	lsrs	r7, r7, #16

    
    get_k r6,r1,r12
 80032d2:	00f6      	lsls	r6, r6, #3
 80032d4:	1876      	adds	r6, r6, r1
 80032d6:	232a      	movs	r3, #42	; 0x2a
 80032d8:	019c      	lsls	r4, r3, #6
 80032da:	191b      	adds	r3, r3, r4
 80032dc:	4373      	muls	r3, r6
 80032de:	0e5b      	lsrs	r3, r3, #25
 80032e0:	2403      	movs	r4, #3
 80032e2:	0324      	lsls	r4, r4, #12
 80032e4:	3401      	adds	r4, #1
 80032e6:	46a6      	mov	lr, r4
 80032e8:	435c      	muls	r4, r3
 80032ea:	1b34      	subs	r4, r6, r4
 80032ec:	4675      	mov	r5, lr
 80032ee:	3d01      	subs	r5, #1
 80032f0:	1b2c      	subs	r4, r5, r4
 80032f2:	17e4      	asrs	r4, r4, #31
 80032f4:	1b1b      	subs	r3, r3, r4
 80032f6:	2401      	movs	r4, #1
 80032f8:	401c      	ands	r4, r3
 80032fa:	085d      	lsrs	r5, r3, #1
 80032fc:	1964      	adds	r4, r4, r5
 80032fe:	3b01      	subs	r3, #1
 8003300:	2501      	movs	r5, #1
 8003302:	401d      	ands	r5, r3
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	195b      	adds	r3, r3, r5
 8003308:	4675      	mov	r5, lr
 800330a:	006d      	lsls	r5, r5, #1
 800330c:	4365      	muls	r5, r4
 800330e:	1b76      	subs	r6, r6, r5
 8003310:	17f5      	asrs	r5, r6, #31
 8003312:	1976      	adds	r6, r6, r5
 8003314:	406e      	eors	r6, r5
 8003316:	44b4      	add	ip, r6
 8003318:	b418      	push	{r3, r4}
    get_k r7,r2,r9
 800331a:	00ff      	lsls	r7, r7, #3
 800331c:	18bf      	adds	r7, r7, r2
 800331e:	232a      	movs	r3, #42	; 0x2a
 8003320:	019c      	lsls	r4, r3, #6
 8003322:	191b      	adds	r3, r3, r4
 8003324:	437b      	muls	r3, r7
 8003326:	0e5b      	lsrs	r3, r3, #25
 8003328:	2403      	movs	r4, #3
 800332a:	0324      	lsls	r4, r4, #12
 800332c:	3401      	adds	r4, #1
 800332e:	46a6      	mov	lr, r4
 8003330:	435c      	muls	r4, r3
 8003332:	1b3c      	subs	r4, r7, r4
 8003334:	4675      	mov	r5, lr
 8003336:	3d01      	subs	r5, #1
 8003338:	1b2c      	subs	r4, r5, r4
 800333a:	17e4      	asrs	r4, r4, #31
 800333c:	1b1b      	subs	r3, r3, r4
 800333e:	2401      	movs	r4, #1
 8003340:	401c      	ands	r4, r3
 8003342:	085d      	lsrs	r5, r3, #1
 8003344:	1964      	adds	r4, r4, r5
 8003346:	3b01      	subs	r3, #1
 8003348:	2501      	movs	r5, #1
 800334a:	401d      	ands	r5, r3
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	195b      	adds	r3, r3, r5
 8003350:	4675      	mov	r5, lr
 8003352:	006d      	lsls	r5, r5, #1
 8003354:	4365      	muls	r5, r4
 8003356:	1b7f      	subs	r7, r7, r5
 8003358:	17fd      	asrs	r5, r7, #31
 800335a:	197f      	adds	r7, r7, r5
 800335c:	406f      	eors	r7, r5
 800335e:	44b9      	add	r9, r7
 8003360:	b418      	push	{r3, r4}


    mov r7,#1
 8003362:	2701      	movs	r7, #1
    lsl r7,#9
 8003364:	027f      	lsls	r7, r7, #9
    lsl r5,r7,#1
 8003366:	007d      	lsls	r5, r7, #1
    add r7,r5
 8003368:	197f      	adds	r7, r7, r5
    ldr r7,[r0,r7]
 800336a:	59c7      	ldr	r7, [r0, r7]
    uxth r6,r7
 800336c:	b2be      	uxth	r6, r7
    lsr r7,#16
 800336e:	0c3f      	lsrs	r7, r7, #16


    lsl r6,#3
 8003370:	00f6      	lsls	r6, r6, #3
    add r6,r1
 8003372:	1876      	adds	r6, r6, r1
    f r6        @r3,r4
 8003374:	232a      	movs	r3, #42	; 0x2a
 8003376:	019c      	lsls	r4, r3, #6
 8003378:	191b      	adds	r3, r3, r4
 800337a:	4373      	muls	r3, r6
 800337c:	0e5b      	lsrs	r3, r3, #25
 800337e:	2403      	movs	r4, #3
 8003380:	0324      	lsls	r4, r4, #12
 8003382:	3401      	adds	r4, #1
 8003384:	46a6      	mov	lr, r4
 8003386:	435c      	muls	r4, r3
 8003388:	1b34      	subs	r4, r6, r4
 800338a:	4675      	mov	r5, lr
 800338c:	3d01      	subs	r5, #1
 800338e:	1b2c      	subs	r4, r5, r4
 8003390:	17e4      	asrs	r4, r4, #31
 8003392:	1b1b      	subs	r3, r3, r4
 8003394:	2401      	movs	r4, #1
 8003396:	401c      	ands	r4, r3
 8003398:	085d      	lsrs	r5, r3, #1
 800339a:	1964      	adds	r4, r4, r5
 800339c:	3b01      	subs	r3, #1
 800339e:	2501      	movs	r5, #1
 80033a0:	401d      	ands	r5, r3
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	195b      	adds	r3, r3, r5
 80033a6:	4675      	mov	r5, lr
 80033a8:	006d      	lsls	r5, r5, #1
 80033aa:	4365      	muls	r5, r4
 80033ac:	1b76      	subs	r6, r6, r5
 80033ae:	17f5      	asrs	r5, r6, #31
 80033b0:	1976      	adds	r6, r6, r5
 80033b2:	406e      	eors	r6, r5
    add r6,r12
 80033b4:	4466      	add	r6, ip

    mov r5,#3
 80033b6:	2503      	movs	r5, #3
    lsl r5,#13
 80033b8:	036d      	lsls	r5, r5, #13
    add r5,#2
 80033ba:	3502      	adds	r5, #2
    
    sub r5,#1
 80033bc:	3d01      	subs	r5, #1
    sub r6,r5,r6
 80033be:	1bae      	subs	r6, r5, r6
    
    asr r6,#31
 80033c0:	17f6      	asrs	r6, r6, #31

    and r3,r6
 80033c2:	4033      	ands	r3, r6
    mvn r5,r6
 80033c4:	43f5      	mvns	r5, r6
    and r4,r5
 80033c6:	402c      	ands	r4, r5

    eor r3,r4 
 80033c8:	4063      	eors	r3, r4


    neg r4,r3
 80033ca:	425c      	negs	r4, r3
    mov r8,r4
 80033cc:	46a0      	mov	r8, r4



    lsl r3,#1
 80033ce:	005b      	lsls	r3, r3, #1
    sub r3,r6
 80033d0:	1b9b      	subs	r3, r3, r6

    mov r4,#3
 80033d2:	2403      	movs	r4, #3
    and r3,r4
 80033d4:	4023      	ands	r3, r4


    mov r1,r3
 80033d6:	1c19      	adds	r1, r3, #0


    lsl r7,#3
 80033d8:	00ff      	lsls	r7, r7, #3
    add r7,r2
 80033da:	18bf      	adds	r7, r7, r2
    f r7    @r3,r4
 80033dc:	232a      	movs	r3, #42	; 0x2a
 80033de:	019c      	lsls	r4, r3, #6
 80033e0:	191b      	adds	r3, r3, r4
 80033e2:	437b      	muls	r3, r7
 80033e4:	0e5b      	lsrs	r3, r3, #25
 80033e6:	2403      	movs	r4, #3
 80033e8:	0324      	lsls	r4, r4, #12
 80033ea:	3401      	adds	r4, #1
 80033ec:	46a6      	mov	lr, r4
 80033ee:	435c      	muls	r4, r3
 80033f0:	1b3c      	subs	r4, r7, r4
 80033f2:	4675      	mov	r5, lr
 80033f4:	3d01      	subs	r5, #1
 80033f6:	1b2c      	subs	r4, r5, r4
 80033f8:	17e4      	asrs	r4, r4, #31
 80033fa:	1b1b      	subs	r3, r3, r4
 80033fc:	2401      	movs	r4, #1
 80033fe:	401c      	ands	r4, r3
 8003400:	085d      	lsrs	r5, r3, #1
 8003402:	1964      	adds	r4, r4, r5
 8003404:	3b01      	subs	r3, #1
 8003406:	2501      	movs	r5, #1
 8003408:	401d      	ands	r5, r3
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	195b      	adds	r3, r3, r5
 800340e:	4675      	mov	r5, lr
 8003410:	006d      	lsls	r5, r5, #1
 8003412:	4365      	muls	r5, r4
 8003414:	1b7f      	subs	r7, r7, r5
 8003416:	17fd      	asrs	r5, r7, #31
 8003418:	197f      	adds	r7, r7, r5
 800341a:	406f      	eors	r7, r5
    add r7,r9
 800341c:	444f      	add	r7, r9
 
    mvn r5,r6
 800341e:	43f5      	mvns	r5, r6

    mov r0,#3
 8003420:	2003      	movs	r0, #3
    lsl r0,#13
 8003422:	0340      	lsls	r0, r0, #13
    add r0,#2
 8003424:	3002      	adds	r0, #2


    add r7,#1
 8003426:	3701      	adds	r7, #1
    sub r7,r0,r7
 8003428:	1bc7      	subs	r7, r0, r7
    asr r7,#31
 800342a:	17ff      	asrs	r7, r7, #31


    and r3,r7
 800342c:	403b      	ands	r3, r7
    mvn r0,r7
 800342e:	43f8      	mvns	r0, r7
    and r4,r0
 8003430:	4004      	ands	r4, r0
    eor r3,r4
 8003432:	4063      	eors	r3, r4

    neg r4,r3
 8003434:	425c      	negs	r4, r3
    mov r9,r4
 8003436:	46a1      	mov	r9, r4

    lsl r3,#1
 8003438:	005b      	lsls	r3, r3, #1
    sub r3,r7
 800343a:	1bdb      	subs	r3, r3, r7
    mov r4,#3
 800343c:	2403      	movs	r4, #3
    and r3,r4
 800343e:	4023      	ands	r3, r4
    lsl r3,#16
 8003440:	041b      	lsls	r3, r3, #16
    orr r3,r1
 8003442:	430b      	orrs	r3, r1


    mov r4,#1
 8003444:	2401      	movs	r4, #1
    lsl r4,#9
 8003446:	0264      	lsls	r4, r4, #9
    lsl r2,r4,#1
 8003448:	0062      	lsls	r2, r4, #1
    add r4,r2
 800344a:	18a4      	adds	r4, r4, r2

    mov r2,r11
 800344c:	465a      	mov	r2, fp

    str r3,[r2,r4]
 800344e:	5113      	str	r3, [r2, r4]



    calculate_store r7,r0,r9
 8003450:	bc18      	pop	{r3, r4}
 8003452:	403b      	ands	r3, r7
 8003454:	4004      	ands	r4, r0
 8003456:	4063      	eors	r3, r4
 8003458:	444b      	add	r3, r9
 800345a:	2403      	movs	r4, #3
 800345c:	4023      	ands	r3, r4
    lsl r1,r3,#16
 800345e:	0419      	lsls	r1, r3, #16
    calculate_store r6,r5,r8
 8003460:	bc18      	pop	{r3, r4}
 8003462:	4033      	ands	r3, r6
 8003464:	402c      	ands	r4, r5
 8003466:	4063      	eors	r3, r4
 8003468:	4443      	add	r3, r8
 800346a:	2403      	movs	r4, #3
 800346c:	4023      	ands	r3, r4
    orr r3,r1
 800346e:	430b      	orrs	r3, r1

    mov r4,#1
 8003470:	2401      	movs	r4, #1
    lsl r4,#10
 8003472:	02a4      	lsls	r4, r4, #10
    str r3,[r2,r4]
 8003474:	5113      	str	r3, [r2, r4]


    calculate_store r7,r0,r9
 8003476:	bc18      	pop	{r3, r4}
 8003478:	403b      	ands	r3, r7
 800347a:	4004      	ands	r4, r0
 800347c:	4063      	eors	r3, r4
 800347e:	444b      	add	r3, r9
 8003480:	2403      	movs	r4, #3
 8003482:	4023      	ands	r3, r4
    lsl r1,r3,#16    
 8003484:	0419      	lsls	r1, r3, #16
    calculate_store r6,r5,r8
 8003486:	bc18      	pop	{r3, r4}
 8003488:	4033      	ands	r3, r6
 800348a:	402c      	ands	r4, r5
 800348c:	4063      	eors	r3, r4
 800348e:	4443      	add	r3, r8
 8003490:	2403      	movs	r4, #3
 8003492:	4023      	ands	r3, r4
    orr r3,r1
 8003494:	430b      	orrs	r3, r1
    
    mov r4,#1
 8003496:	2401      	movs	r4, #1
    lsl r4,#9
 8003498:	0264      	lsls	r4, r4, #9
    str r3,[r2,r4]
 800349a:	5113      	str	r3, [r2, r4]


    calculate_store r7,r0,r9
 800349c:	bc18      	pop	{r3, r4}
 800349e:	403b      	ands	r3, r7
 80034a0:	4004      	ands	r4, r0
 80034a2:	4063      	eors	r3, r4
 80034a4:	444b      	add	r3, r9
 80034a6:	2403      	movs	r4, #3
 80034a8:	4023      	ands	r3, r4
    lsl r1,r3,#16
 80034aa:	0419      	lsls	r1, r3, #16
    calculate_store r6,r5,r8
 80034ac:	bc18      	pop	{r3, r4}
 80034ae:	4033      	ands	r3, r6
 80034b0:	402c      	ands	r4, r5
 80034b2:	4063      	eors	r3, r4
 80034b4:	4443      	add	r3, r8
 80034b6:	2403      	movs	r4, #3
 80034b8:	4023      	ands	r3, r4
    orr r3,r1
 80034ba:	430b      	orrs	r3, r1

    str r3,[r2]
 80034bc:	6013      	str	r3, [r2, #0]


    pop {r4,r5}
 80034be:	bc30      	pop	{r4, r5}
    mov r9,r4
 80034c0:	46a1      	mov	r9, r4
    mov r14,r5
 80034c2:	46ae      	mov	lr, r5
    pop {r4-r7}
 80034c4:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 80034c6:	46a0      	mov	r8, r4
    mov r10,r5
 80034c8:	46aa      	mov	sl, r5
    mov r11,r6
 80034ca:	46b3      	mov	fp, r6
    mov r12,r7
 80034cc:	46bc      	mov	ip, r7

    pop {r4-r7,pc}
 80034ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d0 <asm_8bits_key>:
    ADD \inout,r2
    EOR \inout,r2
.endm

asm_8bits_key:
    push {r4-r7,lr}
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80034d2:	4644      	mov	r4, r8
    mov r5,r10
 80034d4:	4655      	mov	r5, sl
    mov r6,r11
 80034d6:	465e      	mov	r6, fp
    mov r7,r12
 80034d8:	4667      	mov	r7, ip

    push {r4,r7}
 80034da:	b490      	push	{r4, r7}

    add r1,r3
 80034dc:	18c9      	adds	r1, r1, r3
    add r2,r3
 80034de:	18d2      	adds	r2, r2, r3


    
    mov r3,#3
 80034e0:	2303      	movs	r3, #3
    lsl r3,#9
 80034e2:	025b      	lsls	r3, r3, #9
 

    ldr r4,[r2,r3]
 80034e4:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 80034e6:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80034e8:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 80034ea:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 80034ec:	b2b7      	uxth	r7, r6
    lsr r6,#16
 80034ee:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 80034f0:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 80034f2:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 80034f4:	1936      	adds	r6, r6, r4
    add r7,r5
 80034f6:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 80034f8:	4643      	mov	r3, r8
    lsr r3,#4
 80034fa:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80034fc:	435e      	muls	r6, r3
    mul r7,r3
 80034fe:	435f      	muls	r7, r3



    ldr r4,[r1]
 8003500:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 8003502:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003504:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003506:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003508:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 800350a:	4444      	add	r4, r8
    add r5,r8
 800350c:	4445      	add	r5, r8

    sub r4,r6
 800350e:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003510:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003512:	4693      	mov	fp, r2
    g  r4
 8003514:	222a      	movs	r2, #42	; 0x2a
 8003516:	0193      	lsls	r3, r2, #6
 8003518:	18d2      	adds	r2, r2, r3
 800351a:	2303      	movs	r3, #3
 800351c:	031b      	lsls	r3, r3, #12
 800351e:	3301      	adds	r3, #1
 8003520:	00de      	lsls	r6, r3, #3
 8003522:	009f      	lsls	r7, r3, #2
 8003524:	4362      	muls	r2, r4
 8003526:	0ed3      	lsrs	r3, r2, #27
 8003528:	1c3a      	adds	r2, r7, #0
 800352a:	435a      	muls	r2, r3
 800352c:	1aa2      	subs	r2, r4, r2
 800352e:	1aba      	subs	r2, r7, r2
 8003530:	3a01      	subs	r2, #1
 8003532:	17d2      	asrs	r2, r2, #31
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	2201      	movs	r2, #1
 8003538:	401a      	ands	r2, r3
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	189b      	adds	r3, r3, r2
 800353e:	4373      	muls	r3, r6
 8003540:	1b1c      	subs	r4, r3, r4
 8003542:	17e2      	asrs	r2, r4, #31
 8003544:	18a4      	adds	r4, r4, r2
 8003546:	4054      	eors	r4, r2
    mov r10,r4
 8003548:	46a2      	mov	sl, r4
    g  r5
 800354a:	222a      	movs	r2, #42	; 0x2a
 800354c:	0193      	lsls	r3, r2, #6
 800354e:	18d2      	adds	r2, r2, r3
 8003550:	2303      	movs	r3, #3
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	3301      	adds	r3, #1
 8003556:	00de      	lsls	r6, r3, #3
 8003558:	009f      	lsls	r7, r3, #2
 800355a:	436a      	muls	r2, r5
 800355c:	0ed3      	lsrs	r3, r2, #27
 800355e:	1c3a      	adds	r2, r7, #0
 8003560:	435a      	muls	r2, r3
 8003562:	1aaa      	subs	r2, r5, r2
 8003564:	1aba      	subs	r2, r7, r2
 8003566:	3a01      	subs	r2, #1
 8003568:	17d2      	asrs	r2, r2, #31
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	2201      	movs	r2, #1
 800356e:	401a      	ands	r2, r3
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	189b      	adds	r3, r3, r2
 8003574:	4373      	muls	r3, r6
 8003576:	1b5d      	subs	r5, r3, r5
 8003578:	17ea      	asrs	r2, r5, #31
 800357a:	18ad      	adds	r5, r5, r2
 800357c:	4055      	eors	r5, r2
    mov r12,r5
 800357e:	46ac      	mov	ip, r5
    mov r2,r11
 8003580:	465a      	mov	r2, fp
    
    mov r3,#3
 8003582:	2303      	movs	r3, #3
    lsl r3,#9
 8003584:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003586:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003588:	b2a5      	uxth	r5, r4
    lsr r4,#16
 800358a:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 800358c:	2301      	movs	r3, #1
    lsl r3,#9
 800358e:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003590:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003592:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003594:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003596:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003598:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 800359a:	1936      	adds	r6, r6, r4
    add r7,r5
 800359c:	197f      	adds	r7, r7, r5

    mov r4,r3
 800359e:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 80035a0:	4643      	mov	r3, r8
    lsr r3,#4
 80035a2:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80035a4:	435e      	muls	r6, r3
    mul r7,r3
 80035a6:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 80035a8:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 80035aa:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80035ac:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80035ae:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80035b0:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 80035b2:	4444      	add	r4, r8
    add r5,r8
 80035b4:	4445      	add	r5, r8

    sub r4,r6
 80035b6:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 80035b8:	1bed      	subs	r5, r5, r7


    mov r11,r2
 80035ba:	4693      	mov	fp, r2
    g r4
 80035bc:	222a      	movs	r2, #42	; 0x2a
 80035be:	0193      	lsls	r3, r2, #6
 80035c0:	18d2      	adds	r2, r2, r3
 80035c2:	2303      	movs	r3, #3
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	3301      	adds	r3, #1
 80035c8:	00de      	lsls	r6, r3, #3
 80035ca:	009f      	lsls	r7, r3, #2
 80035cc:	4362      	muls	r2, r4
 80035ce:	0ed3      	lsrs	r3, r2, #27
 80035d0:	1c3a      	adds	r2, r7, #0
 80035d2:	435a      	muls	r2, r3
 80035d4:	1aa2      	subs	r2, r4, r2
 80035d6:	1aba      	subs	r2, r7, r2
 80035d8:	3a01      	subs	r2, #1
 80035da:	17d2      	asrs	r2, r2, #31
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	2201      	movs	r2, #1
 80035e0:	401a      	ands	r2, r3
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	4373      	muls	r3, r6
 80035e8:	1b1c      	subs	r4, r3, r4
 80035ea:	17e2      	asrs	r2, r4, #31
 80035ec:	18a4      	adds	r4, r4, r2
 80035ee:	4054      	eors	r4, r2
    mov r10,r4
 80035f0:	46a2      	mov	sl, r4
    g r5 
 80035f2:	222a      	movs	r2, #42	; 0x2a
 80035f4:	0193      	lsls	r3, r2, #6
 80035f6:	18d2      	adds	r2, r2, r3
 80035f8:	2303      	movs	r3, #3
 80035fa:	031b      	lsls	r3, r3, #12
 80035fc:	3301      	adds	r3, #1
 80035fe:	00de      	lsls	r6, r3, #3
 8003600:	009f      	lsls	r7, r3, #2
 8003602:	436a      	muls	r2, r5
 8003604:	0ed3      	lsrs	r3, r2, #27
 8003606:	1c3a      	adds	r2, r7, #0
 8003608:	435a      	muls	r2, r3
 800360a:	1aaa      	subs	r2, r5, r2
 800360c:	1aba      	subs	r2, r7, r2
 800360e:	3a01      	subs	r2, #1
 8003610:	17d2      	asrs	r2, r2, #31
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	2201      	movs	r2, #1
 8003616:	401a      	ands	r2, r3
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	189b      	adds	r3, r3, r2
 800361c:	4373      	muls	r3, r6
 800361e:	1b5d      	subs	r5, r3, r5
 8003620:	17ea      	asrs	r2, r5, #31
 8003622:	18ad      	adds	r5, r5, r2
 8003624:	4055      	eors	r5, r2
    mov r12,r5
 8003626:	46ac      	mov	ip, r5

    mov r2,r11       
 8003628:	465a      	mov	r2, fp


    mov r3,#3
 800362a:	2303      	movs	r3, #3
    lsl r3,#9
 800362c:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 800362e:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003630:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003632:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003634:	2301      	movs	r3, #1
    lsl r3,#10
 8003636:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 8003638:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 800363a:	b2b7      	uxth	r7, r6
    lsr r6,#16
 800363c:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 800363e:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003640:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003642:	1936      	adds	r6, r6, r4
    add r7,r5
 8003644:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003646:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003648:	4643      	mov	r3, r8
    lsr r3,#4
 800364a:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 800364c:	435e      	muls	r6, r3
    mul r7,r3
 800364e:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003650:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003652:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003654:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003656:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003658:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 800365a:	4444      	add	r4, r8
    add r5,r8
 800365c:	4445      	add	r5, r8

    sub r4,r6
 800365e:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003660:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003662:	4693      	mov	fp, r2

    g r4
 8003664:	222a      	movs	r2, #42	; 0x2a
 8003666:	0193      	lsls	r3, r2, #6
 8003668:	18d2      	adds	r2, r2, r3
 800366a:	2303      	movs	r3, #3
 800366c:	031b      	lsls	r3, r3, #12
 800366e:	3301      	adds	r3, #1
 8003670:	00de      	lsls	r6, r3, #3
 8003672:	009f      	lsls	r7, r3, #2
 8003674:	4362      	muls	r2, r4
 8003676:	0ed3      	lsrs	r3, r2, #27
 8003678:	1c3a      	adds	r2, r7, #0
 800367a:	435a      	muls	r2, r3
 800367c:	1aa2      	subs	r2, r4, r2
 800367e:	1aba      	subs	r2, r7, r2
 8003680:	3a01      	subs	r2, #1
 8003682:	17d2      	asrs	r2, r2, #31
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	2201      	movs	r2, #1
 8003688:	401a      	ands	r2, r3
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	189b      	adds	r3, r3, r2
 800368e:	4373      	muls	r3, r6
 8003690:	1b1c      	subs	r4, r3, r4
 8003692:	17e2      	asrs	r2, r4, #31
 8003694:	18a4      	adds	r4, r4, r2
 8003696:	4054      	eors	r4, r2
    add r10,r4
 8003698:	44a2      	add	sl, r4
    
    g r5
 800369a:	222a      	movs	r2, #42	; 0x2a
 800369c:	0193      	lsls	r3, r2, #6
 800369e:	18d2      	adds	r2, r2, r3
 80036a0:	2303      	movs	r3, #3
 80036a2:	031b      	lsls	r3, r3, #12
 80036a4:	3301      	adds	r3, #1
 80036a6:	00de      	lsls	r6, r3, #3
 80036a8:	009f      	lsls	r7, r3, #2
 80036aa:	436a      	muls	r2, r5
 80036ac:	0ed3      	lsrs	r3, r2, #27
 80036ae:	1c3a      	adds	r2, r7, #0
 80036b0:	435a      	muls	r2, r3
 80036b2:	1aaa      	subs	r2, r5, r2
 80036b4:	1aba      	subs	r2, r7, r2
 80036b6:	3a01      	subs	r2, #1
 80036b8:	17d2      	asrs	r2, r2, #31
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	2201      	movs	r2, #1
 80036be:	401a      	ands	r2, r3
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	4373      	muls	r3, r6
 80036c6:	1b5d      	subs	r5, r3, r5
 80036c8:	17ea      	asrs	r2, r5, #31
 80036ca:	18ad      	adds	r5, r5, r2
 80036cc:	4055      	eors	r5, r2
    add r12,r5
 80036ce:	44ac      	add	ip, r5

    mov r2,r11  
 80036d0:	465a      	mov	r2, fp

    mov r3,#3
 80036d2:	2303      	movs	r3, #3
    lsl r3,#9
 80036d4:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 80036d6:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 80036d8:	b2b7      	uxth	r7, r6
    lsr r6,#16
 80036da:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 80036dc:	4644      	mov	r4, r8
    lsr r4,#4
 80036de:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 80036e0:	4366      	muls	r6, r4
    mul r7,r4
 80036e2:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 80036e4:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 80036e6:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80036e8:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80036ea:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80036ec:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 80036ee:	4444      	add	r4, r8
    add r5,r8
 80036f0:	4445      	add	r5, r8

    sub r4,r6
 80036f2:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 80036f4:	1bed      	subs	r5, r5, r7

    mov r11,r2
 80036f6:	4693      	mov	fp, r2

    g r4 
 80036f8:	222a      	movs	r2, #42	; 0x2a
 80036fa:	0193      	lsls	r3, r2, #6
 80036fc:	18d2      	adds	r2, r2, r3
 80036fe:	2303      	movs	r3, #3
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	3301      	adds	r3, #1
 8003704:	00de      	lsls	r6, r3, #3
 8003706:	009f      	lsls	r7, r3, #2
 8003708:	4362      	muls	r2, r4
 800370a:	0ed3      	lsrs	r3, r2, #27
 800370c:	1c3a      	adds	r2, r7, #0
 800370e:	435a      	muls	r2, r3
 8003710:	1aa2      	subs	r2, r4, r2
 8003712:	1aba      	subs	r2, r7, r2
 8003714:	3a01      	subs	r2, #1
 8003716:	17d2      	asrs	r2, r2, #31
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	2201      	movs	r2, #1
 800371c:	401a      	ands	r2, r3
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	189b      	adds	r3, r3, r2
 8003722:	4373      	muls	r3, r6
 8003724:	1b1c      	subs	r4, r3, r4
 8003726:	17e2      	asrs	r2, r4, #31
 8003728:	18a4      	adds	r4, r4, r2
 800372a:	4054      	eors	r4, r2
    add r10,r4
 800372c:	44a2      	add	sl, r4
    
    g r5
 800372e:	222a      	movs	r2, #42	; 0x2a
 8003730:	0193      	lsls	r3, r2, #6
 8003732:	18d2      	adds	r2, r2, r3
 8003734:	2303      	movs	r3, #3
 8003736:	031b      	lsls	r3, r3, #12
 8003738:	3301      	adds	r3, #1
 800373a:	00de      	lsls	r6, r3, #3
 800373c:	009f      	lsls	r7, r3, #2
 800373e:	436a      	muls	r2, r5
 8003740:	0ed3      	lsrs	r3, r2, #27
 8003742:	1c3a      	adds	r2, r7, #0
 8003744:	435a      	muls	r2, r3
 8003746:	1aaa      	subs	r2, r5, r2
 8003748:	1aba      	subs	r2, r7, r2
 800374a:	3a01      	subs	r2, #1
 800374c:	17d2      	asrs	r2, r2, #31
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	2201      	movs	r2, #1
 8003752:	401a      	ands	r2, r3
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	189b      	adds	r3, r3, r2
 8003758:	4373      	muls	r3, r6
 800375a:	1b5d      	subs	r5, r3, r5
 800375c:	17ea      	asrs	r2, r5, #31
 800375e:	18ad      	adds	r5, r5, r2
 8003760:	4055      	eors	r5, r2
    add r12,r5
 8003762:	44ac      	add	ip, r5
    mov r2,r11
 8003764:	465a      	mov	r2, fp

    mov r3,r8
 8003766:	4643      	mov	r3, r8
    lsr r3,#1
 8003768:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 800376a:	4654      	mov	r4, sl
    mov r5,r12
 800376c:	4665      	mov	r5, ip
    
    sub r4,r3
 800376e:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003770:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003772:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003774:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003776:	2301      	movs	r3, #1

    and r4,r3
 8003778:	401c      	ands	r4, r3
    lsl r4,r3
 800377a:	409c      	lsls	r4, r3
    and r5,r3
 800377c:	401d      	ands	r5, r3

    orr r5,r4
 800377e:	4325      	orrs	r5, r4
    push {r5}
 8003780:	b420      	push	{r5}


    add r1,#4
 8003782:	3104      	adds	r1, #4
    add r2,#4 
 8003784:	3204      	adds	r2, #4

    
    mov r3,#3
 8003786:	2303      	movs	r3, #3
    lsl r3,#9
 8003788:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 800378a:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 800378c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 800378e:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 8003790:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 8003792:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003794:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003796:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003798:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 800379a:	1936      	adds	r6, r6, r4
    add r7,r5
 800379c:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 800379e:	4643      	mov	r3, r8
    lsr r3,#4
 80037a0:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80037a2:	435e      	muls	r6, r3
    mul r7,r3
 80037a4:	435f      	muls	r7, r3



    ldr r4,[r1]
 80037a6:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 80037a8:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80037aa:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80037ac:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80037ae:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 80037b0:	4444      	add	r4, r8
    add r5,r8
 80037b2:	4445      	add	r5, r8

    sub r4,r6
 80037b4:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 80037b6:	1bed      	subs	r5, r5, r7
    
    mov r11,r2
 80037b8:	4693      	mov	fp, r2
    g r4
 80037ba:	222a      	movs	r2, #42	; 0x2a
 80037bc:	0193      	lsls	r3, r2, #6
 80037be:	18d2      	adds	r2, r2, r3
 80037c0:	2303      	movs	r3, #3
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	3301      	adds	r3, #1
 80037c6:	00de      	lsls	r6, r3, #3
 80037c8:	009f      	lsls	r7, r3, #2
 80037ca:	4362      	muls	r2, r4
 80037cc:	0ed3      	lsrs	r3, r2, #27
 80037ce:	1c3a      	adds	r2, r7, #0
 80037d0:	435a      	muls	r2, r3
 80037d2:	1aa2      	subs	r2, r4, r2
 80037d4:	1aba      	subs	r2, r7, r2
 80037d6:	3a01      	subs	r2, #1
 80037d8:	17d2      	asrs	r2, r2, #31
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	2201      	movs	r2, #1
 80037de:	401a      	ands	r2, r3
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	4373      	muls	r3, r6
 80037e6:	1b1c      	subs	r4, r3, r4
 80037e8:	17e2      	asrs	r2, r4, #31
 80037ea:	18a4      	adds	r4, r4, r2
 80037ec:	4054      	eors	r4, r2
    mov r10,r4
 80037ee:	46a2      	mov	sl, r4
    g r5
 80037f0:	222a      	movs	r2, #42	; 0x2a
 80037f2:	0193      	lsls	r3, r2, #6
 80037f4:	18d2      	adds	r2, r2, r3
 80037f6:	2303      	movs	r3, #3
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	3301      	adds	r3, #1
 80037fc:	00de      	lsls	r6, r3, #3
 80037fe:	009f      	lsls	r7, r3, #2
 8003800:	436a      	muls	r2, r5
 8003802:	0ed3      	lsrs	r3, r2, #27
 8003804:	1c3a      	adds	r2, r7, #0
 8003806:	435a      	muls	r2, r3
 8003808:	1aaa      	subs	r2, r5, r2
 800380a:	1aba      	subs	r2, r7, r2
 800380c:	3a01      	subs	r2, #1
 800380e:	17d2      	asrs	r2, r2, #31
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	2201      	movs	r2, #1
 8003814:	401a      	ands	r2, r3
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	189b      	adds	r3, r3, r2
 800381a:	4373      	muls	r3, r6
 800381c:	1b5d      	subs	r5, r3, r5
 800381e:	17ea      	asrs	r2, r5, #31
 8003820:	18ad      	adds	r5, r5, r2
 8003822:	4055      	eors	r5, r2
    mov r12,r5
 8003824:	46ac      	mov	ip, r5
    mov r2,r11
 8003826:	465a      	mov	r2, fp

    mov r3,#3
 8003828:	2303      	movs	r3, #3
    lsl r3,#9
 800382a:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 800382c:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 800382e:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003830:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003832:	2301      	movs	r3, #1
    lsl r3,#9
 8003834:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003836:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003838:	b2b7      	uxth	r7, r6
    lsr r6,#16
 800383a:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 800383c:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 800383e:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003840:	1936      	adds	r6, r6, r4
    add r7,r5
 8003842:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003844:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003846:	4643      	mov	r3, r8
    lsr r3,#4
 8003848:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 800384a:	435e      	muls	r6, r3
    mul r7,r3
 800384c:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 800384e:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003850:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003852:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003854:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003856:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003858:	4444      	add	r4, r8
    add r5,r8
 800385a:	4445      	add	r5, r8

    sub r4,r6
 800385c:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 800385e:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003860:	4693      	mov	fp, r2
    g r4
 8003862:	222a      	movs	r2, #42	; 0x2a
 8003864:	0193      	lsls	r3, r2, #6
 8003866:	18d2      	adds	r2, r2, r3
 8003868:	2303      	movs	r3, #3
 800386a:	031b      	lsls	r3, r3, #12
 800386c:	3301      	adds	r3, #1
 800386e:	00de      	lsls	r6, r3, #3
 8003870:	009f      	lsls	r7, r3, #2
 8003872:	4362      	muls	r2, r4
 8003874:	0ed3      	lsrs	r3, r2, #27
 8003876:	1c3a      	adds	r2, r7, #0
 8003878:	435a      	muls	r2, r3
 800387a:	1aa2      	subs	r2, r4, r2
 800387c:	1aba      	subs	r2, r7, r2
 800387e:	3a01      	subs	r2, #1
 8003880:	17d2      	asrs	r2, r2, #31
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	2201      	movs	r2, #1
 8003886:	401a      	ands	r2, r3
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	189b      	adds	r3, r3, r2
 800388c:	4373      	muls	r3, r6
 800388e:	1b1c      	subs	r4, r3, r4
 8003890:	17e2      	asrs	r2, r4, #31
 8003892:	18a4      	adds	r4, r4, r2
 8003894:	4054      	eors	r4, r2
    mov r10,r4
 8003896:	46a2      	mov	sl, r4
    g r5
 8003898:	222a      	movs	r2, #42	; 0x2a
 800389a:	0193      	lsls	r3, r2, #6
 800389c:	18d2      	adds	r2, r2, r3
 800389e:	2303      	movs	r3, #3
 80038a0:	031b      	lsls	r3, r3, #12
 80038a2:	3301      	adds	r3, #1
 80038a4:	00de      	lsls	r6, r3, #3
 80038a6:	009f      	lsls	r7, r3, #2
 80038a8:	436a      	muls	r2, r5
 80038aa:	0ed3      	lsrs	r3, r2, #27
 80038ac:	1c3a      	adds	r2, r7, #0
 80038ae:	435a      	muls	r2, r3
 80038b0:	1aaa      	subs	r2, r5, r2
 80038b2:	1aba      	subs	r2, r7, r2
 80038b4:	3a01      	subs	r2, #1
 80038b6:	17d2      	asrs	r2, r2, #31
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	2201      	movs	r2, #1
 80038bc:	401a      	ands	r2, r3
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	4373      	muls	r3, r6
 80038c4:	1b5d      	subs	r5, r3, r5
 80038c6:	17ea      	asrs	r2, r5, #31
 80038c8:	18ad      	adds	r5, r5, r2
 80038ca:	4055      	eors	r5, r2
    mov r12,r5
 80038cc:	46ac      	mov	ip, r5
    mov r2,r11
 80038ce:	465a      	mov	r2, fp

    mov r3,#3
 80038d0:	2303      	movs	r3, #3
    lsl r3,#9
 80038d2:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 80038d4:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 80038d6:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80038d8:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 80038da:	2301      	movs	r3, #1
    lsl r3,#10
 80038dc:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 80038de:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 80038e0:	b2b7      	uxth	r7, r6
    lsr r6,#16
 80038e2:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 80038e4:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 80038e6:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 80038e8:	1936      	adds	r6, r6, r4
    add r7,r5
 80038ea:	197f      	adds	r7, r7, r5

    mov r4,r3
 80038ec:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 80038ee:	4643      	mov	r3, r8
    lsr r3,#4
 80038f0:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 80038f2:	435e      	muls	r6, r3
    mul r7,r3
 80038f4:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 80038f6:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 80038f8:	b2a5      	uxth	r5, r4
    lsr r4,#16
 80038fa:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 80038fc:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 80038fe:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003900:	4444      	add	r4, r8
    add r5,r8
 8003902:	4445      	add	r5, r8

    sub r4,r6
 8003904:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003906:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003908:	4693      	mov	fp, r2
    g r4
 800390a:	222a      	movs	r2, #42	; 0x2a
 800390c:	0193      	lsls	r3, r2, #6
 800390e:	18d2      	adds	r2, r2, r3
 8003910:	2303      	movs	r3, #3
 8003912:	031b      	lsls	r3, r3, #12
 8003914:	3301      	adds	r3, #1
 8003916:	00de      	lsls	r6, r3, #3
 8003918:	009f      	lsls	r7, r3, #2
 800391a:	4362      	muls	r2, r4
 800391c:	0ed3      	lsrs	r3, r2, #27
 800391e:	1c3a      	adds	r2, r7, #0
 8003920:	435a      	muls	r2, r3
 8003922:	1aa2      	subs	r2, r4, r2
 8003924:	1aba      	subs	r2, r7, r2
 8003926:	3a01      	subs	r2, #1
 8003928:	17d2      	asrs	r2, r2, #31
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	2201      	movs	r2, #1
 800392e:	401a      	ands	r2, r3
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	189b      	adds	r3, r3, r2
 8003934:	4373      	muls	r3, r6
 8003936:	1b1c      	subs	r4, r3, r4
 8003938:	17e2      	asrs	r2, r4, #31
 800393a:	18a4      	adds	r4, r4, r2
 800393c:	4054      	eors	r4, r2
    add r10,r4
 800393e:	44a2      	add	sl, r4
    
    g r5
 8003940:	222a      	movs	r2, #42	; 0x2a
 8003942:	0193      	lsls	r3, r2, #6
 8003944:	18d2      	adds	r2, r2, r3
 8003946:	2303      	movs	r3, #3
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	3301      	adds	r3, #1
 800394c:	00de      	lsls	r6, r3, #3
 800394e:	009f      	lsls	r7, r3, #2
 8003950:	436a      	muls	r2, r5
 8003952:	0ed3      	lsrs	r3, r2, #27
 8003954:	1c3a      	adds	r2, r7, #0
 8003956:	435a      	muls	r2, r3
 8003958:	1aaa      	subs	r2, r5, r2
 800395a:	1aba      	subs	r2, r7, r2
 800395c:	3a01      	subs	r2, #1
 800395e:	17d2      	asrs	r2, r2, #31
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	2201      	movs	r2, #1
 8003964:	401a      	ands	r2, r3
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	189b      	adds	r3, r3, r2
 800396a:	4373      	muls	r3, r6
 800396c:	1b5d      	subs	r5, r3, r5
 800396e:	17ea      	asrs	r2, r5, #31
 8003970:	18ad      	adds	r5, r5, r2
 8003972:	4055      	eors	r5, r2
    add r12,r5
 8003974:	44ac      	add	ip, r5
    mov r2,r11    
 8003976:	465a      	mov	r2, fp

    mov r3,#3
 8003978:	2303      	movs	r3, #3
    lsl r3,#9
 800397a:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 800397c:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 800397e:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003980:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 8003982:	4644      	mov	r4, r8
    lsr r4,#4
 8003984:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 8003986:	4366      	muls	r6, r4
    mul r7,r4
 8003988:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 800398a:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 800398c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 800398e:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003990:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003992:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003994:	4444      	add	r4, r8
    add r5,r8
 8003996:	4445      	add	r5, r8

    sub r4,r6
 8003998:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 800399a:	1bed      	subs	r5, r5, r7

    mov r11,r2
 800399c:	4693      	mov	fp, r2


    g r4
 800399e:	222a      	movs	r2, #42	; 0x2a
 80039a0:	0193      	lsls	r3, r2, #6
 80039a2:	18d2      	adds	r2, r2, r3
 80039a4:	2303      	movs	r3, #3
 80039a6:	031b      	lsls	r3, r3, #12
 80039a8:	3301      	adds	r3, #1
 80039aa:	00de      	lsls	r6, r3, #3
 80039ac:	009f      	lsls	r7, r3, #2
 80039ae:	4362      	muls	r2, r4
 80039b0:	0ed3      	lsrs	r3, r2, #27
 80039b2:	1c3a      	adds	r2, r7, #0
 80039b4:	435a      	muls	r2, r3
 80039b6:	1aa2      	subs	r2, r4, r2
 80039b8:	1aba      	subs	r2, r7, r2
 80039ba:	3a01      	subs	r2, #1
 80039bc:	17d2      	asrs	r2, r2, #31
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	2201      	movs	r2, #1
 80039c2:	401a      	ands	r2, r3
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	4373      	muls	r3, r6
 80039ca:	1b1c      	subs	r4, r3, r4
 80039cc:	17e2      	asrs	r2, r4, #31
 80039ce:	18a4      	adds	r4, r4, r2
 80039d0:	4054      	eors	r4, r2
    add r10,r4
 80039d2:	44a2      	add	sl, r4
    

    g r5    
 80039d4:	222a      	movs	r2, #42	; 0x2a
 80039d6:	0193      	lsls	r3, r2, #6
 80039d8:	18d2      	adds	r2, r2, r3
 80039da:	2303      	movs	r3, #3
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	3301      	adds	r3, #1
 80039e0:	00de      	lsls	r6, r3, #3
 80039e2:	009f      	lsls	r7, r3, #2
 80039e4:	436a      	muls	r2, r5
 80039e6:	0ed3      	lsrs	r3, r2, #27
 80039e8:	1c3a      	adds	r2, r7, #0
 80039ea:	435a      	muls	r2, r3
 80039ec:	1aaa      	subs	r2, r5, r2
 80039ee:	1aba      	subs	r2, r7, r2
 80039f0:	3a01      	subs	r2, #1
 80039f2:	17d2      	asrs	r2, r2, #31
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	2201      	movs	r2, #1
 80039f8:	401a      	ands	r2, r3
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	189b      	adds	r3, r3, r2
 80039fe:	4373      	muls	r3, r6
 8003a00:	1b5d      	subs	r5, r3, r5
 8003a02:	17ea      	asrs	r2, r5, #31
 8003a04:	18ad      	adds	r5, r5, r2
 8003a06:	4055      	eors	r5, r2
    add r12,r5
 8003a08:	44ac      	add	ip, r5
    mov r2,r11
 8003a0a:	465a      	mov	r2, fp

    mov r3,r8
 8003a0c:	4643      	mov	r3, r8
    lsr r3,#1
 8003a0e:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 8003a10:	4654      	mov	r4, sl
    mov r5,r12
 8003a12:	4665      	mov	r5, ip
    
    sub r4,r3
 8003a14:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003a16:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003a18:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003a1a:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003a1c:	2301      	movs	r3, #1

    and r4,r3
 8003a1e:	401c      	ands	r4, r3
    mov r3,#3
 8003a20:	2303      	movs	r3, #3
    lsl r4,r3
 8003a22:	409c      	lsls	r4, r3
    and r5,r3
 8003a24:	401d      	ands	r5, r3
    mov r3,#2
 8003a26:	2302      	movs	r3, #2
    lsl r5,r3
 8003a28:	409d      	lsls	r5, r3

    orr r5,r4
 8003a2a:	4325      	orrs	r5, r4
    pop {r4}
 8003a2c:	bc10      	pop	{r4}

    orr r5,r4
 8003a2e:	4325      	orrs	r5, r4
    push {r5}
 8003a30:	b420      	push	{r5}

    add r1,#4
 8003a32:	3104      	adds	r1, #4
    add r2,#4 
 8003a34:	3204      	adds	r2, #4


    mov r3,#3
 8003a36:	2303      	movs	r3, #3
    lsl r3,#9
 8003a38:	025b      	lsls	r3, r3, #9
 

    ldr r4,[r2,r3]
 8003a3a:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003a3c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003a3e:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 8003a40:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 8003a42:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003a44:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003a46:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003a48:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003a4a:	1936      	adds	r6, r6, r4
    add r7,r5
 8003a4c:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 8003a4e:	4643      	mov	r3, r8
    lsr r3,#4
 8003a50:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003a52:	435e      	muls	r6, r3
    mul r7,r3
 8003a54:	435f      	muls	r7, r3



    ldr r4,[r1]
 8003a56:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 8003a58:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003a5a:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003a5c:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003a5e:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003a60:	4444      	add	r4, r8
    add r5,r8
 8003a62:	4445      	add	r5, r8

    sub r4,r6
 8003a64:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003a66:	1bed      	subs	r5, r5, r7
    
    mov r11,r2
 8003a68:	4693      	mov	fp, r2
    g r4    
 8003a6a:	222a      	movs	r2, #42	; 0x2a
 8003a6c:	0193      	lsls	r3, r2, #6
 8003a6e:	18d2      	adds	r2, r2, r3
 8003a70:	2303      	movs	r3, #3
 8003a72:	031b      	lsls	r3, r3, #12
 8003a74:	3301      	adds	r3, #1
 8003a76:	00de      	lsls	r6, r3, #3
 8003a78:	009f      	lsls	r7, r3, #2
 8003a7a:	4362      	muls	r2, r4
 8003a7c:	0ed3      	lsrs	r3, r2, #27
 8003a7e:	1c3a      	adds	r2, r7, #0
 8003a80:	435a      	muls	r2, r3
 8003a82:	1aa2      	subs	r2, r4, r2
 8003a84:	1aba      	subs	r2, r7, r2
 8003a86:	3a01      	subs	r2, #1
 8003a88:	17d2      	asrs	r2, r2, #31
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	401a      	ands	r2, r3
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	4373      	muls	r3, r6
 8003a96:	1b1c      	subs	r4, r3, r4
 8003a98:	17e2      	asrs	r2, r4, #31
 8003a9a:	18a4      	adds	r4, r4, r2
 8003a9c:	4054      	eors	r4, r2
    mov r10,r4
 8003a9e:	46a2      	mov	sl, r4
    g r5
 8003aa0:	222a      	movs	r2, #42	; 0x2a
 8003aa2:	0193      	lsls	r3, r2, #6
 8003aa4:	18d2      	adds	r2, r2, r3
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	031b      	lsls	r3, r3, #12
 8003aaa:	3301      	adds	r3, #1
 8003aac:	00de      	lsls	r6, r3, #3
 8003aae:	009f      	lsls	r7, r3, #2
 8003ab0:	436a      	muls	r2, r5
 8003ab2:	0ed3      	lsrs	r3, r2, #27
 8003ab4:	1c3a      	adds	r2, r7, #0
 8003ab6:	435a      	muls	r2, r3
 8003ab8:	1aaa      	subs	r2, r5, r2
 8003aba:	1aba      	subs	r2, r7, r2
 8003abc:	3a01      	subs	r2, #1
 8003abe:	17d2      	asrs	r2, r2, #31
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	4373      	muls	r3, r6
 8003acc:	1b5d      	subs	r5, r3, r5
 8003ace:	17ea      	asrs	r2, r5, #31
 8003ad0:	18ad      	adds	r5, r5, r2
 8003ad2:	4055      	eors	r5, r2
    mov r12,r5
 8003ad4:	46ac      	mov	ip, r5

    mov r2,r11
 8003ad6:	465a      	mov	r2, fp
    
    mov r3,#3
 8003ad8:	2303      	movs	r3, #3
    lsl r3,#9
 8003ada:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003adc:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003ade:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003ae0:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003ae2:	2301      	movs	r3, #1
    lsl r3,#9
 8003ae4:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003ae6:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003ae8:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003aea:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003aec:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003aee:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003af0:	1936      	adds	r6, r6, r4
    add r7,r5
 8003af2:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003af4:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003af6:	4643      	mov	r3, r8
    lsr r3,#4
 8003af8:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003afa:	435e      	muls	r6, r3
    mul r7,r3
 8003afc:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003afe:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003b00:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003b02:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003b04:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003b06:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003b08:	4444      	add	r4, r8
    add r5,r8
 8003b0a:	4445      	add	r5, r8

    sub r4,r6
 8003b0c:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003b0e:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003b10:	4693      	mov	fp, r2
    g r4
 8003b12:	222a      	movs	r2, #42	; 0x2a
 8003b14:	0193      	lsls	r3, r2, #6
 8003b16:	18d2      	adds	r2, r2, r3
 8003b18:	2303      	movs	r3, #3
 8003b1a:	031b      	lsls	r3, r3, #12
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	00de      	lsls	r6, r3, #3
 8003b20:	009f      	lsls	r7, r3, #2
 8003b22:	4362      	muls	r2, r4
 8003b24:	0ed3      	lsrs	r3, r2, #27
 8003b26:	1c3a      	adds	r2, r7, #0
 8003b28:	435a      	muls	r2, r3
 8003b2a:	1aa2      	subs	r2, r4, r2
 8003b2c:	1aba      	subs	r2, r7, r2
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	17d2      	asrs	r2, r2, #31
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	2201      	movs	r2, #1
 8003b36:	401a      	ands	r2, r3
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	4373      	muls	r3, r6
 8003b3e:	1b1c      	subs	r4, r3, r4
 8003b40:	17e2      	asrs	r2, r4, #31
 8003b42:	18a4      	adds	r4, r4, r2
 8003b44:	4054      	eors	r4, r2
    add r10,r4
 8003b46:	44a2      	add	sl, r4
    g r5
 8003b48:	222a      	movs	r2, #42	; 0x2a
 8003b4a:	0193      	lsls	r3, r2, #6
 8003b4c:	18d2      	adds	r2, r2, r3
 8003b4e:	2303      	movs	r3, #3
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	3301      	adds	r3, #1
 8003b54:	00de      	lsls	r6, r3, #3
 8003b56:	009f      	lsls	r7, r3, #2
 8003b58:	436a      	muls	r2, r5
 8003b5a:	0ed3      	lsrs	r3, r2, #27
 8003b5c:	1c3a      	adds	r2, r7, #0
 8003b5e:	435a      	muls	r2, r3
 8003b60:	1aaa      	subs	r2, r5, r2
 8003b62:	1aba      	subs	r2, r7, r2
 8003b64:	3a01      	subs	r2, #1
 8003b66:	17d2      	asrs	r2, r2, #31
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	401a      	ands	r2, r3
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	4373      	muls	r3, r6
 8003b74:	1b5d      	subs	r5, r3, r5
 8003b76:	17ea      	asrs	r2, r5, #31
 8003b78:	18ad      	adds	r5, r5, r2
 8003b7a:	4055      	eors	r5, r2
    add r12,r5
 8003b7c:	44ac      	add	ip, r5
    mov r2,r11
 8003b7e:	465a      	mov	r2, fp

    mov r3,#3
 8003b80:	2303      	movs	r3, #3
    lsl r3,#9
 8003b82:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003b84:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003b86:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003b88:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003b8a:	2301      	movs	r3, #1
    lsl r3,#10
 8003b8c:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 8003b8e:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003b90:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003b92:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003b94:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003b96:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003b98:	1936      	adds	r6, r6, r4
    add r7,r5
 8003b9a:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003b9c:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003b9e:	4643      	mov	r3, r8
    lsr r3,#4
 8003ba0:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003ba2:	435e      	muls	r6, r3
    mul r7,r3
 8003ba4:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003ba6:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003ba8:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003baa:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003bac:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003bae:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003bb0:	4444      	add	r4, r8
    add r5,r8
 8003bb2:	4445      	add	r5, r8

    sub r4,r6
 8003bb4:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003bb6:	1bed      	subs	r5, r5, r7

    mov r11,r2
 8003bb8:	4693      	mov	fp, r2
    g r4
 8003bba:	222a      	movs	r2, #42	; 0x2a
 8003bbc:	0193      	lsls	r3, r2, #6
 8003bbe:	18d2      	adds	r2, r2, r3
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	031b      	lsls	r3, r3, #12
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	00de      	lsls	r6, r3, #3
 8003bc8:	009f      	lsls	r7, r3, #2
 8003bca:	4362      	muls	r2, r4
 8003bcc:	0ed3      	lsrs	r3, r2, #27
 8003bce:	1c3a      	adds	r2, r7, #0
 8003bd0:	435a      	muls	r2, r3
 8003bd2:	1aa2      	subs	r2, r4, r2
 8003bd4:	1aba      	subs	r2, r7, r2
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	17d2      	asrs	r2, r2, #31
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	2201      	movs	r2, #1
 8003bde:	401a      	ands	r2, r3
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	4373      	muls	r3, r6
 8003be6:	1b1c      	subs	r4, r3, r4
 8003be8:	17e2      	asrs	r2, r4, #31
 8003bea:	18a4      	adds	r4, r4, r2
 8003bec:	4054      	eors	r4, r2
    add r10,r4
 8003bee:	44a2      	add	sl, r4
    
    g r5
 8003bf0:	222a      	movs	r2, #42	; 0x2a
 8003bf2:	0193      	lsls	r3, r2, #6
 8003bf4:	18d2      	adds	r2, r2, r3
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	00de      	lsls	r6, r3, #3
 8003bfe:	009f      	lsls	r7, r3, #2
 8003c00:	436a      	muls	r2, r5
 8003c02:	0ed3      	lsrs	r3, r2, #27
 8003c04:	1c3a      	adds	r2, r7, #0
 8003c06:	435a      	muls	r2, r3
 8003c08:	1aaa      	subs	r2, r5, r2
 8003c0a:	1aba      	subs	r2, r7, r2
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	17d2      	asrs	r2, r2, #31
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	2201      	movs	r2, #1
 8003c14:	401a      	ands	r2, r3
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	4373      	muls	r3, r6
 8003c1c:	1b5d      	subs	r5, r3, r5
 8003c1e:	17ea      	asrs	r2, r5, #31
 8003c20:	18ad      	adds	r5, r5, r2
 8003c22:	4055      	eors	r5, r2
    add r12,r5
 8003c24:	44ac      	add	ip, r5
    mov r2,r11
 8003c26:	465a      	mov	r2, fp

    mov r3,#3
 8003c28:	2303      	movs	r3, #3
    lsl r3,#9
 8003c2a:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 8003c2c:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003c2e:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003c30:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 8003c32:	4644      	mov	r4, r8
    lsr r4,#4
 8003c34:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 8003c36:	4366      	muls	r6, r4
    mul r7,r4
 8003c38:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 8003c3a:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 8003c3c:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003c3e:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003c40:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003c42:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003c44:	4444      	add	r4, r8
    add r5,r8
 8003c46:	4445      	add	r5, r8

    sub r4,r6
 8003c48:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003c4a:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003c4c:	4693      	mov	fp, r2
    g r4
 8003c4e:	222a      	movs	r2, #42	; 0x2a
 8003c50:	0193      	lsls	r3, r2, #6
 8003c52:	18d2      	adds	r2, r2, r3
 8003c54:	2303      	movs	r3, #3
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	3301      	adds	r3, #1
 8003c5a:	00de      	lsls	r6, r3, #3
 8003c5c:	009f      	lsls	r7, r3, #2
 8003c5e:	4362      	muls	r2, r4
 8003c60:	0ed3      	lsrs	r3, r2, #27
 8003c62:	1c3a      	adds	r2, r7, #0
 8003c64:	435a      	muls	r2, r3
 8003c66:	1aa2      	subs	r2, r4, r2
 8003c68:	1aba      	subs	r2, r7, r2
 8003c6a:	3a01      	subs	r2, #1
 8003c6c:	17d2      	asrs	r2, r2, #31
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	2201      	movs	r2, #1
 8003c72:	401a      	ands	r2, r3
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	4373      	muls	r3, r6
 8003c7a:	1b1c      	subs	r4, r3, r4
 8003c7c:	17e2      	asrs	r2, r4, #31
 8003c7e:	18a4      	adds	r4, r4, r2
 8003c80:	4054      	eors	r4, r2
    add r10,r4
 8003c82:	44a2      	add	sl, r4
    g r5
 8003c84:	222a      	movs	r2, #42	; 0x2a
 8003c86:	0193      	lsls	r3, r2, #6
 8003c88:	18d2      	adds	r2, r2, r3
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	031b      	lsls	r3, r3, #12
 8003c8e:	3301      	adds	r3, #1
 8003c90:	00de      	lsls	r6, r3, #3
 8003c92:	009f      	lsls	r7, r3, #2
 8003c94:	436a      	muls	r2, r5
 8003c96:	0ed3      	lsrs	r3, r2, #27
 8003c98:	1c3a      	adds	r2, r7, #0
 8003c9a:	435a      	muls	r2, r3
 8003c9c:	1aaa      	subs	r2, r5, r2
 8003c9e:	1aba      	subs	r2, r7, r2
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	17d2      	asrs	r2, r2, #31
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	401a      	ands	r2, r3
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	4373      	muls	r3, r6
 8003cb0:	1b5d      	subs	r5, r3, r5
 8003cb2:	17ea      	asrs	r2, r5, #31
 8003cb4:	18ad      	adds	r5, r5, r2
 8003cb6:	4055      	eors	r5, r2
    add r12,r5
 8003cb8:	44ac      	add	ip, r5
    mov r2,r11
 8003cba:	465a      	mov	r2, fp

    mov r3,r8
 8003cbc:	4643      	mov	r3, r8
    lsr r3,#1
 8003cbe:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 8003cc0:	4654      	mov	r4, sl
    mov r5,r12
 8003cc2:	4665      	mov	r5, ip
    
    sub r4,r3
 8003cc4:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003cc6:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003cc8:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003cca:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003ccc:	2301      	movs	r3, #1

    and r4,r3
 8003cce:	401c      	ands	r4, r3
    and r5,r3
 8003cd0:	401d      	ands	r5, r3

    mov r3,#5
 8003cd2:	2305      	movs	r3, #5
    lsl r4,r3
 8003cd4:	409c      	lsls	r4, r3
    mov r3,#4
 8003cd6:	2304      	movs	r3, #4
    lsl r5,r3
 8003cd8:	409d      	lsls	r5, r3

    orr r5,r4
 8003cda:	4325      	orrs	r5, r4


    pop {r4}
 8003cdc:	bc10      	pop	{r4}

    orr r5,r4
 8003cde:	4325      	orrs	r5, r4
    push {r5}
 8003ce0:	b420      	push	{r5}


    add r1,#4
 8003ce2:	3104      	adds	r1, #4
    add r2,#4 
 8003ce4:	3204      	adds	r2, #4

    
    mov r3,#3
 8003ce6:	2303      	movs	r3, #3
    lsl r3,#9
 8003ce8:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003cea:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003cec:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003cee:	0c24      	lsrs	r4, r4, #16


    ldr r6,[r2]
 8003cf0:	6816      	ldr	r6, [r2, #0]
    uxth r7,r6
 8003cf2:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003cf4:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003cf6:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003cf8:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003cfa:	1936      	adds	r6, r6, r4
    add r7,r5
 8003cfc:	197f      	adds	r7, r7, r5


    
    mov r3,r8
 8003cfe:	4643      	mov	r3, r8
    lsr r3,#4
 8003d00:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003d02:	435e      	muls	r6, r3
    mul r7,r3
 8003d04:	435f      	muls	r7, r3



    ldr r4,[r1]
 8003d06:	680c      	ldr	r4, [r1, #0]
    uxth r5,r4
 8003d08:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003d0a:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003d0c:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003d0e:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003d10:	4444      	add	r4, r8
    add r5,r8
 8003d12:	4445      	add	r5, r8

    sub r4,r6
 8003d14:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003d16:	1bed      	subs	r5, r5, r7
    
    mov r11,r2
 8003d18:	4693      	mov	fp, r2

    g r4
 8003d1a:	222a      	movs	r2, #42	; 0x2a
 8003d1c:	0193      	lsls	r3, r2, #6
 8003d1e:	18d2      	adds	r2, r2, r3
 8003d20:	2303      	movs	r3, #3
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	3301      	adds	r3, #1
 8003d26:	00de      	lsls	r6, r3, #3
 8003d28:	009f      	lsls	r7, r3, #2
 8003d2a:	4362      	muls	r2, r4
 8003d2c:	0ed3      	lsrs	r3, r2, #27
 8003d2e:	1c3a      	adds	r2, r7, #0
 8003d30:	435a      	muls	r2, r3
 8003d32:	1aa2      	subs	r2, r4, r2
 8003d34:	1aba      	subs	r2, r7, r2
 8003d36:	3a01      	subs	r2, #1
 8003d38:	17d2      	asrs	r2, r2, #31
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	401a      	ands	r2, r3
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	4373      	muls	r3, r6
 8003d46:	1b1c      	subs	r4, r3, r4
 8003d48:	17e2      	asrs	r2, r4, #31
 8003d4a:	18a4      	adds	r4, r4, r2
 8003d4c:	4054      	eors	r4, r2
    mov r10,r4
 8003d4e:	46a2      	mov	sl, r4
    
    g r5
 8003d50:	222a      	movs	r2, #42	; 0x2a
 8003d52:	0193      	lsls	r3, r2, #6
 8003d54:	18d2      	adds	r2, r2, r3
 8003d56:	2303      	movs	r3, #3
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	00de      	lsls	r6, r3, #3
 8003d5e:	009f      	lsls	r7, r3, #2
 8003d60:	436a      	muls	r2, r5
 8003d62:	0ed3      	lsrs	r3, r2, #27
 8003d64:	1c3a      	adds	r2, r7, #0
 8003d66:	435a      	muls	r2, r3
 8003d68:	1aaa      	subs	r2, r5, r2
 8003d6a:	1aba      	subs	r2, r7, r2
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	17d2      	asrs	r2, r2, #31
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	2201      	movs	r2, #1
 8003d74:	401a      	ands	r2, r3
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	4373      	muls	r3, r6
 8003d7c:	1b5d      	subs	r5, r3, r5
 8003d7e:	17ea      	asrs	r2, r5, #31
 8003d80:	18ad      	adds	r5, r5, r2
 8003d82:	4055      	eors	r5, r2
    mov r12,r5
 8003d84:	46ac      	mov	ip, r5
    mov r2,r11    
 8003d86:	465a      	mov	r2, fp
    
    mov r3,#3
 8003d88:	2303      	movs	r3, #3
    lsl r3,#9
 8003d8a:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003d8c:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003d8e:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003d90:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003d92:	2301      	movs	r3, #1
    lsl r3,#9
 8003d94:	025b      	lsls	r3, r3, #9
    

    ldr r6,[r2,r3]
 8003d96:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003d98:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003d9a:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003d9c:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003d9e:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003da0:	1936      	adds	r6, r6, r4
    add r7,r5
 8003da2:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003da4:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003da6:	4643      	mov	r3, r8
    lsr r3,#4
 8003da8:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003daa:	435e      	muls	r6, r3
    mul r7,r3
 8003dac:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003dae:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003db0:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003db2:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003db4:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003db6:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003db8:	4444      	add	r4, r8
    add r5,r8
 8003dba:	4445      	add	r5, r8

    sub r4,r6
 8003dbc:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003dbe:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003dc0:	4693      	mov	fp, r2
    g r4
 8003dc2:	222a      	movs	r2, #42	; 0x2a
 8003dc4:	0193      	lsls	r3, r2, #6
 8003dc6:	18d2      	adds	r2, r2, r3
 8003dc8:	2303      	movs	r3, #3
 8003dca:	031b      	lsls	r3, r3, #12
 8003dcc:	3301      	adds	r3, #1
 8003dce:	00de      	lsls	r6, r3, #3
 8003dd0:	009f      	lsls	r7, r3, #2
 8003dd2:	4362      	muls	r2, r4
 8003dd4:	0ed3      	lsrs	r3, r2, #27
 8003dd6:	1c3a      	adds	r2, r7, #0
 8003dd8:	435a      	muls	r2, r3
 8003dda:	1aa2      	subs	r2, r4, r2
 8003ddc:	1aba      	subs	r2, r7, r2
 8003dde:	3a01      	subs	r2, #1
 8003de0:	17d2      	asrs	r2, r2, #31
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	2201      	movs	r2, #1
 8003de6:	401a      	ands	r2, r3
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	4373      	muls	r3, r6
 8003dee:	1b1c      	subs	r4, r3, r4
 8003df0:	17e2      	asrs	r2, r4, #31
 8003df2:	18a4      	adds	r4, r4, r2
 8003df4:	4054      	eors	r4, r2
    add r10,r4
 8003df6:	44a2      	add	sl, r4
    g r5
 8003df8:	222a      	movs	r2, #42	; 0x2a
 8003dfa:	0193      	lsls	r3, r2, #6
 8003dfc:	18d2      	adds	r2, r2, r3
 8003dfe:	2303      	movs	r3, #3
 8003e00:	031b      	lsls	r3, r3, #12
 8003e02:	3301      	adds	r3, #1
 8003e04:	00de      	lsls	r6, r3, #3
 8003e06:	009f      	lsls	r7, r3, #2
 8003e08:	436a      	muls	r2, r5
 8003e0a:	0ed3      	lsrs	r3, r2, #27
 8003e0c:	1c3a      	adds	r2, r7, #0
 8003e0e:	435a      	muls	r2, r3
 8003e10:	1aaa      	subs	r2, r5, r2
 8003e12:	1aba      	subs	r2, r7, r2
 8003e14:	3a01      	subs	r2, #1
 8003e16:	17d2      	asrs	r2, r2, #31
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	4373      	muls	r3, r6
 8003e24:	1b5d      	subs	r5, r3, r5
 8003e26:	17ea      	asrs	r2, r5, #31
 8003e28:	18ad      	adds	r5, r5, r2
 8003e2a:	4055      	eors	r5, r2
    add r12,r5
 8003e2c:	44ac      	add	ip, r5

    mov r2,r11
 8003e2e:	465a      	mov	r2, fp

    mov r3,#3
 8003e30:	2303      	movs	r3, #3
    lsl r3,#9
 8003e32:	025b      	lsls	r3, r3, #9


    ldr r4,[r2,r3]
 8003e34:	58d4      	ldr	r4, [r2, r3]
    uxth r5,r4
 8003e36:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003e38:	0c24      	lsrs	r4, r4, #16

    mov r3,#1
 8003e3a:	2301      	movs	r3, #1
    lsl r3,#10
 8003e3c:	029b      	lsls	r3, r3, #10
    

    ldr r6,[r2,r3]
 8003e3e:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003e40:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003e42:	0c36      	lsrs	r6, r6, #16

    lsl r6,#1
 8003e44:	0076      	lsls	r6, r6, #1
    lsl r7,#1
 8003e46:	007f      	lsls	r7, r7, #1



    
    add r6,r4
 8003e48:	1936      	adds	r6, r6, r4
    add r7,r5
 8003e4a:	197f      	adds	r7, r7, r5

    mov r4,r3
 8003e4c:	1c1c      	adds	r4, r3, #0
    
    mov r3,r8
 8003e4e:	4643      	mov	r3, r8
    lsr r3,#4
 8003e50:	091b      	lsrs	r3, r3, #4

    mul r6,r3
 8003e52:	435e      	muls	r6, r3
    mul r7,r3
 8003e54:	435f      	muls	r7, r3



    ldr r4,[r1,r4]
 8003e56:	590c      	ldr	r4, [r1, r4]
    uxth r5,r4
 8003e58:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003e5a:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003e5c:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003e5e:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003e60:	4444      	add	r4, r8
    add r5,r8
 8003e62:	4445      	add	r5, r8

    sub r4,r6
 8003e64:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003e66:	1bed      	subs	r5, r5, r7


    mov r11,r2
 8003e68:	4693      	mov	fp, r2
    g r4
 8003e6a:	222a      	movs	r2, #42	; 0x2a
 8003e6c:	0193      	lsls	r3, r2, #6
 8003e6e:	18d2      	adds	r2, r2, r3
 8003e70:	2303      	movs	r3, #3
 8003e72:	031b      	lsls	r3, r3, #12
 8003e74:	3301      	adds	r3, #1
 8003e76:	00de      	lsls	r6, r3, #3
 8003e78:	009f      	lsls	r7, r3, #2
 8003e7a:	4362      	muls	r2, r4
 8003e7c:	0ed3      	lsrs	r3, r2, #27
 8003e7e:	1c3a      	adds	r2, r7, #0
 8003e80:	435a      	muls	r2, r3
 8003e82:	1aa2      	subs	r2, r4, r2
 8003e84:	1aba      	subs	r2, r7, r2
 8003e86:	3a01      	subs	r2, #1
 8003e88:	17d2      	asrs	r2, r2, #31
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	401a      	ands	r2, r3
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	4373      	muls	r3, r6
 8003e96:	1b1c      	subs	r4, r3, r4
 8003e98:	17e2      	asrs	r2, r4, #31
 8003e9a:	18a4      	adds	r4, r4, r2
 8003e9c:	4054      	eors	r4, r2
    add r10,r4
 8003e9e:	44a2      	add	sl, r4
    
    g r5
 8003ea0:	222a      	movs	r2, #42	; 0x2a
 8003ea2:	0193      	lsls	r3, r2, #6
 8003ea4:	18d2      	adds	r2, r2, r3
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	031b      	lsls	r3, r3, #12
 8003eaa:	3301      	adds	r3, #1
 8003eac:	00de      	lsls	r6, r3, #3
 8003eae:	009f      	lsls	r7, r3, #2
 8003eb0:	436a      	muls	r2, r5
 8003eb2:	0ed3      	lsrs	r3, r2, #27
 8003eb4:	1c3a      	adds	r2, r7, #0
 8003eb6:	435a      	muls	r2, r3
 8003eb8:	1aaa      	subs	r2, r5, r2
 8003eba:	1aba      	subs	r2, r7, r2
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	17d2      	asrs	r2, r2, #31
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	4373      	muls	r3, r6
 8003ecc:	1b5d      	subs	r5, r3, r5
 8003ece:	17ea      	asrs	r2, r5, #31
 8003ed0:	18ad      	adds	r5, r5, r2
 8003ed2:	4055      	eors	r5, r2
    add r12,r5
 8003ed4:	44ac      	add	ip, r5
    mov r2,r11  
 8003ed6:	465a      	mov	r2, fp

    mov r3,#3
 8003ed8:	2303      	movs	r3, #3
    lsl r3,#9
 8003eda:	025b      	lsls	r3, r3, #9


    ldr r6,[r2,r3]
 8003edc:	58d6      	ldr	r6, [r2, r3]
    uxth r7,r6
 8003ede:	b2b7      	uxth	r7, r6
    lsr r6,#16
 8003ee0:	0c36      	lsrs	r6, r6, #16

  
    
    mov r4,r8
 8003ee2:	4644      	mov	r4, r8
    lsr r4,#4
 8003ee4:	0924      	lsrs	r4, r4, #4

    mul r6,r4
 8003ee6:	4366      	muls	r6, r4
    mul r7,r4
 8003ee8:	4367      	muls	r7, r4



    ldr r4,[r1,r3]
 8003eea:	58cc      	ldr	r4, [r1, r3]
    uxth r5,r4
 8003eec:	b2a5      	uxth	r5, r4
    lsr r4,#16
 8003eee:	0c24      	lsrs	r4, r4, #16

    lsl r4,#3
 8003ef0:	00e4      	lsls	r4, r4, #3
    lsl r5,#3
 8003ef2:	00ed      	lsls	r5, r5, #3


        
    add r4,r8
 8003ef4:	4444      	add	r4, r8
    add r5,r8
 8003ef6:	4445      	add	r5, r8

    sub r4,r6
 8003ef8:	1ba4      	subs	r4, r4, r6
    sub r5,r7
 8003efa:	1bed      	subs	r5, r5, r7

    mov r11,r2    
 8003efc:	4693      	mov	fp, r2
    g r4
 8003efe:	222a      	movs	r2, #42	; 0x2a
 8003f00:	0193      	lsls	r3, r2, #6
 8003f02:	18d2      	adds	r2, r2, r3
 8003f04:	2303      	movs	r3, #3
 8003f06:	031b      	lsls	r3, r3, #12
 8003f08:	3301      	adds	r3, #1
 8003f0a:	00de      	lsls	r6, r3, #3
 8003f0c:	009f      	lsls	r7, r3, #2
 8003f0e:	4362      	muls	r2, r4
 8003f10:	0ed3      	lsrs	r3, r2, #27
 8003f12:	1c3a      	adds	r2, r7, #0
 8003f14:	435a      	muls	r2, r3
 8003f16:	1aa2      	subs	r2, r4, r2
 8003f18:	1aba      	subs	r2, r7, r2
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	17d2      	asrs	r2, r2, #31
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	2201      	movs	r2, #1
 8003f22:	401a      	ands	r2, r3
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	4373      	muls	r3, r6
 8003f2a:	1b1c      	subs	r4, r3, r4
 8003f2c:	17e2      	asrs	r2, r4, #31
 8003f2e:	18a4      	adds	r4, r4, r2
 8003f30:	4054      	eors	r4, r2
    add r10,r4
 8003f32:	44a2      	add	sl, r4
    g r5
 8003f34:	222a      	movs	r2, #42	; 0x2a
 8003f36:	0193      	lsls	r3, r2, #6
 8003f38:	18d2      	adds	r2, r2, r3
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	031b      	lsls	r3, r3, #12
 8003f3e:	3301      	adds	r3, #1
 8003f40:	00de      	lsls	r6, r3, #3
 8003f42:	009f      	lsls	r7, r3, #2
 8003f44:	436a      	muls	r2, r5
 8003f46:	0ed3      	lsrs	r3, r2, #27
 8003f48:	1c3a      	adds	r2, r7, #0
 8003f4a:	435a      	muls	r2, r3
 8003f4c:	1aaa      	subs	r2, r5, r2
 8003f4e:	1aba      	subs	r2, r7, r2
 8003f50:	3a01      	subs	r2, #1
 8003f52:	17d2      	asrs	r2, r2, #31
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	2201      	movs	r2, #1
 8003f58:	401a      	ands	r2, r3
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	4373      	muls	r3, r6
 8003f60:	1b5d      	subs	r5, r3, r5
 8003f62:	17ea      	asrs	r2, r5, #31
 8003f64:	18ad      	adds	r5, r5, r2
 8003f66:	4055      	eors	r5, r2
    add r12,r5
 8003f68:	44ac      	add	ip, r5
    mov r2,r11
 8003f6a:	465a      	mov	r2, fp

    mov r3,r8
 8003f6c:	4643      	mov	r3, r8
    lsr r3,#1
 8003f6e:	085b      	lsrs	r3, r3, #1

    mov r4,r10
 8003f70:	4654      	mov	r4, sl
    mov r5,r12
 8003f72:	4665      	mov	r5, ip
    
    sub r4,r3
 8003f74:	1ae4      	subs	r4, r4, r3
    sub r5,r3
 8003f76:	1aed      	subs	r5, r5, r3

    lsr r4,#31
 8003f78:	0fe4      	lsrs	r4, r4, #31
    lsr r5,#31
 8003f7a:	0fed      	lsrs	r5, r5, #31

    mov r3,#1
 8003f7c:	2301      	movs	r3, #1

    and r4,r3
 8003f7e:	401c      	ands	r4, r3
    mov r3,#7
 8003f80:	2307      	movs	r3, #7
    lsl r4,r3
 8003f82:	409c      	lsls	r4, r3
    and r5,r3
 8003f84:	401d      	ands	r5, r3
    mov r3,#6
 8003f86:	2306      	movs	r3, #6
    lsl r5,r3
 8003f88:	409d      	lsls	r5, r3

    orr r5,r4
 8003f8a:	4325      	orrs	r5, r4
    pop {r4}
 8003f8c:	bc10      	pop	{r4}

    orr r5,r4
 8003f8e:	4325      	orrs	r5, r4
    
    mov r0,r5
 8003f90:	1c28      	adds	r0, r5, #0

08003f92 <endl>:
endl:

    pop {r4,r7}
 8003f92:	bc90      	pop	{r4, r7}
    mov r8,r4
 8003f94:	46a0      	mov	r8, r4
    mov r10,r5
 8003f96:	46aa      	mov	sl, r5
    mov r11,r6
 8003f98:	46b3      	mov	fp, r6
    mov r12,r7
 8003f9a:	46bc      	mov	ip, r7

    pop {r4-r7,pc} 
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f9e <asm_helprec>:

.global	asm_helprec
.type	asm_helprec, %function
asm_helprec:

    push {r4-r7,lr}
 8003f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    key4bytes
 8003fa0:	c980      	ldmia	r1!, {r7}
 8003fa2:	2403      	movs	r4, #3
 8003fa4:	403c      	ands	r4, r7
 8003fa6:	08bf      	lsrs	r7, r7, #2
 8003fa8:	b487      	push	{r0, r1, r2, r7}
 8003faa:	1c21      	adds	r1, r4, #0
 8003fac:	f7ff f8e2 	bl	8003174 <asm_helprec_internal>
 8003fb0:	bc87      	pop	{r0, r1, r2, r7}
 8003fb2:	3004      	adds	r0, #4
 8003fb4:	3204      	adds	r2, #4
 8003fb6:	2403      	movs	r4, #3
 8003fb8:	403c      	ands	r4, r7
 8003fba:	08bf      	lsrs	r7, r7, #2
 8003fbc:	b487      	push	{r0, r1, r2, r7}
 8003fbe:	1c21      	adds	r1, r4, #0
 8003fc0:	f7ff f8d8 	bl	8003174 <asm_helprec_internal>
 8003fc4:	bc87      	pop	{r0, r1, r2, r7}
 8003fc6:	3004      	adds	r0, #4
 8003fc8:	3204      	adds	r2, #4
 8003fca:	2403      	movs	r4, #3
 8003fcc:	403c      	ands	r4, r7
 8003fce:	08bf      	lsrs	r7, r7, #2
 8003fd0:	b487      	push	{r0, r1, r2, r7}
 8003fd2:	1c21      	adds	r1, r4, #0
 8003fd4:	f7ff f8ce 	bl	8003174 <asm_helprec_internal>
 8003fd8:	bc87      	pop	{r0, r1, r2, r7}
 8003fda:	3004      	adds	r0, #4
 8003fdc:	3204      	adds	r2, #4
 8003fde:	2403      	movs	r4, #3
 8003fe0:	403c      	ands	r4, r7
 8003fe2:	08bf      	lsrs	r7, r7, #2
 8003fe4:	b487      	push	{r0, r1, r2, r7}
 8003fe6:	1c21      	adds	r1, r4, #0
 8003fe8:	f7ff f8c4 	bl	8003174 <asm_helprec_internal>
 8003fec:	bc87      	pop	{r0, r1, r2, r7}
 8003fee:	3004      	adds	r0, #4
 8003ff0:	3204      	adds	r2, #4
 8003ff2:	2403      	movs	r4, #3
 8003ff4:	403c      	ands	r4, r7
 8003ff6:	08bf      	lsrs	r7, r7, #2
 8003ff8:	b487      	push	{r0, r1, r2, r7}
 8003ffa:	1c21      	adds	r1, r4, #0
 8003ffc:	f7ff f8ba 	bl	8003174 <asm_helprec_internal>
 8004000:	bc87      	pop	{r0, r1, r2, r7}
 8004002:	3004      	adds	r0, #4
 8004004:	3204      	adds	r2, #4
 8004006:	2403      	movs	r4, #3
 8004008:	403c      	ands	r4, r7
 800400a:	08bf      	lsrs	r7, r7, #2
 800400c:	b487      	push	{r0, r1, r2, r7}
 800400e:	1c21      	adds	r1, r4, #0
 8004010:	f7ff f8b0 	bl	8003174 <asm_helprec_internal>
 8004014:	bc87      	pop	{r0, r1, r2, r7}
 8004016:	3004      	adds	r0, #4
 8004018:	3204      	adds	r2, #4
 800401a:	2403      	movs	r4, #3
 800401c:	403c      	ands	r4, r7
 800401e:	08bf      	lsrs	r7, r7, #2
 8004020:	b487      	push	{r0, r1, r2, r7}
 8004022:	1c21      	adds	r1, r4, #0
 8004024:	f7ff f8a6 	bl	8003174 <asm_helprec_internal>
 8004028:	bc87      	pop	{r0, r1, r2, r7}
 800402a:	3004      	adds	r0, #4
 800402c:	3204      	adds	r2, #4
 800402e:	2403      	movs	r4, #3
 8004030:	403c      	ands	r4, r7
 8004032:	08bf      	lsrs	r7, r7, #2
 8004034:	b487      	push	{r0, r1, r2, r7}
 8004036:	1c21      	adds	r1, r4, #0
 8004038:	f7ff f89c 	bl	8003174 <asm_helprec_internal>
 800403c:	bc87      	pop	{r0, r1, r2, r7}
 800403e:	3004      	adds	r0, #4
 8004040:	3204      	adds	r2, #4
 8004042:	2403      	movs	r4, #3
 8004044:	403c      	ands	r4, r7
 8004046:	08bf      	lsrs	r7, r7, #2
 8004048:	b487      	push	{r0, r1, r2, r7}
 800404a:	1c21      	adds	r1, r4, #0
 800404c:	f7ff f892 	bl	8003174 <asm_helprec_internal>
 8004050:	bc87      	pop	{r0, r1, r2, r7}
 8004052:	3004      	adds	r0, #4
 8004054:	3204      	adds	r2, #4
 8004056:	2403      	movs	r4, #3
 8004058:	403c      	ands	r4, r7
 800405a:	08bf      	lsrs	r7, r7, #2
 800405c:	b487      	push	{r0, r1, r2, r7}
 800405e:	1c21      	adds	r1, r4, #0
 8004060:	f7ff f888 	bl	8003174 <asm_helprec_internal>
 8004064:	bc87      	pop	{r0, r1, r2, r7}
 8004066:	3004      	adds	r0, #4
 8004068:	3204      	adds	r2, #4
 800406a:	2403      	movs	r4, #3
 800406c:	403c      	ands	r4, r7
 800406e:	08bf      	lsrs	r7, r7, #2
 8004070:	b487      	push	{r0, r1, r2, r7}
 8004072:	1c21      	adds	r1, r4, #0
 8004074:	f7ff f87e 	bl	8003174 <asm_helprec_internal>
 8004078:	bc87      	pop	{r0, r1, r2, r7}
 800407a:	3004      	adds	r0, #4
 800407c:	3204      	adds	r2, #4
 800407e:	2403      	movs	r4, #3
 8004080:	403c      	ands	r4, r7
 8004082:	08bf      	lsrs	r7, r7, #2
 8004084:	b487      	push	{r0, r1, r2, r7}
 8004086:	1c21      	adds	r1, r4, #0
 8004088:	f7ff f874 	bl	8003174 <asm_helprec_internal>
 800408c:	bc87      	pop	{r0, r1, r2, r7}
 800408e:	3004      	adds	r0, #4
 8004090:	3204      	adds	r2, #4
 8004092:	2403      	movs	r4, #3
 8004094:	403c      	ands	r4, r7
 8004096:	08bf      	lsrs	r7, r7, #2
 8004098:	b487      	push	{r0, r1, r2, r7}
 800409a:	1c21      	adds	r1, r4, #0
 800409c:	f7ff f86a 	bl	8003174 <asm_helprec_internal>
 80040a0:	bc87      	pop	{r0, r1, r2, r7}
 80040a2:	3004      	adds	r0, #4
 80040a4:	3204      	adds	r2, #4
 80040a6:	2403      	movs	r4, #3
 80040a8:	403c      	ands	r4, r7
 80040aa:	08bf      	lsrs	r7, r7, #2
 80040ac:	b487      	push	{r0, r1, r2, r7}
 80040ae:	1c21      	adds	r1, r4, #0
 80040b0:	f7ff f860 	bl	8003174 <asm_helprec_internal>
 80040b4:	bc87      	pop	{r0, r1, r2, r7}
 80040b6:	3004      	adds	r0, #4
 80040b8:	3204      	adds	r2, #4
 80040ba:	2403      	movs	r4, #3
 80040bc:	403c      	ands	r4, r7
 80040be:	08bf      	lsrs	r7, r7, #2
 80040c0:	b487      	push	{r0, r1, r2, r7}
 80040c2:	1c21      	adds	r1, r4, #0
 80040c4:	f7ff f856 	bl	8003174 <asm_helprec_internal>
 80040c8:	bc87      	pop	{r0, r1, r2, r7}
 80040ca:	3004      	adds	r0, #4
 80040cc:	3204      	adds	r2, #4
 80040ce:	2403      	movs	r4, #3
 80040d0:	403c      	ands	r4, r7
 80040d2:	08bf      	lsrs	r7, r7, #2
 80040d4:	b487      	push	{r0, r1, r2, r7}
 80040d6:	1c21      	adds	r1, r4, #0
 80040d8:	f7ff f84c 	bl	8003174 <asm_helprec_internal>
 80040dc:	bc87      	pop	{r0, r1, r2, r7}
 80040de:	3004      	adds	r0, #4
 80040e0:	3204      	adds	r2, #4
    key4bytes
 80040e2:	c980      	ldmia	r1!, {r7}
 80040e4:	2403      	movs	r4, #3
 80040e6:	403c      	ands	r4, r7
 80040e8:	08bf      	lsrs	r7, r7, #2
 80040ea:	b487      	push	{r0, r1, r2, r7}
 80040ec:	1c21      	adds	r1, r4, #0
 80040ee:	f7ff f841 	bl	8003174 <asm_helprec_internal>
 80040f2:	bc87      	pop	{r0, r1, r2, r7}
 80040f4:	3004      	adds	r0, #4
 80040f6:	3204      	adds	r2, #4
 80040f8:	2403      	movs	r4, #3
 80040fa:	403c      	ands	r4, r7
 80040fc:	08bf      	lsrs	r7, r7, #2
 80040fe:	b487      	push	{r0, r1, r2, r7}
 8004100:	1c21      	adds	r1, r4, #0
 8004102:	f7ff f837 	bl	8003174 <asm_helprec_internal>
 8004106:	bc87      	pop	{r0, r1, r2, r7}
 8004108:	3004      	adds	r0, #4
 800410a:	3204      	adds	r2, #4
 800410c:	2403      	movs	r4, #3
 800410e:	403c      	ands	r4, r7
 8004110:	08bf      	lsrs	r7, r7, #2
 8004112:	b487      	push	{r0, r1, r2, r7}
 8004114:	1c21      	adds	r1, r4, #0
 8004116:	f7ff f82d 	bl	8003174 <asm_helprec_internal>
 800411a:	bc87      	pop	{r0, r1, r2, r7}
 800411c:	3004      	adds	r0, #4
 800411e:	3204      	adds	r2, #4
 8004120:	2403      	movs	r4, #3
 8004122:	403c      	ands	r4, r7
 8004124:	08bf      	lsrs	r7, r7, #2
 8004126:	b487      	push	{r0, r1, r2, r7}
 8004128:	1c21      	adds	r1, r4, #0
 800412a:	f7ff f823 	bl	8003174 <asm_helprec_internal>
 800412e:	bc87      	pop	{r0, r1, r2, r7}
 8004130:	3004      	adds	r0, #4
 8004132:	3204      	adds	r2, #4
 8004134:	2403      	movs	r4, #3
 8004136:	403c      	ands	r4, r7
 8004138:	08bf      	lsrs	r7, r7, #2
 800413a:	b487      	push	{r0, r1, r2, r7}
 800413c:	1c21      	adds	r1, r4, #0
 800413e:	f7ff f819 	bl	8003174 <asm_helprec_internal>
 8004142:	bc87      	pop	{r0, r1, r2, r7}
 8004144:	3004      	adds	r0, #4
 8004146:	3204      	adds	r2, #4
 8004148:	2403      	movs	r4, #3
 800414a:	403c      	ands	r4, r7
 800414c:	08bf      	lsrs	r7, r7, #2
 800414e:	b487      	push	{r0, r1, r2, r7}
 8004150:	1c21      	adds	r1, r4, #0
 8004152:	f7ff f80f 	bl	8003174 <asm_helprec_internal>
 8004156:	bc87      	pop	{r0, r1, r2, r7}
 8004158:	3004      	adds	r0, #4
 800415a:	3204      	adds	r2, #4
 800415c:	2403      	movs	r4, #3
 800415e:	403c      	ands	r4, r7
 8004160:	08bf      	lsrs	r7, r7, #2
 8004162:	b487      	push	{r0, r1, r2, r7}
 8004164:	1c21      	adds	r1, r4, #0
 8004166:	f7ff f805 	bl	8003174 <asm_helprec_internal>
 800416a:	bc87      	pop	{r0, r1, r2, r7}
 800416c:	3004      	adds	r0, #4
 800416e:	3204      	adds	r2, #4
 8004170:	2403      	movs	r4, #3
 8004172:	403c      	ands	r4, r7
 8004174:	08bf      	lsrs	r7, r7, #2
 8004176:	b487      	push	{r0, r1, r2, r7}
 8004178:	1c21      	adds	r1, r4, #0
 800417a:	f7fe fffb 	bl	8003174 <asm_helprec_internal>
 800417e:	bc87      	pop	{r0, r1, r2, r7}
 8004180:	3004      	adds	r0, #4
 8004182:	3204      	adds	r2, #4
 8004184:	2403      	movs	r4, #3
 8004186:	403c      	ands	r4, r7
 8004188:	08bf      	lsrs	r7, r7, #2
 800418a:	b487      	push	{r0, r1, r2, r7}
 800418c:	1c21      	adds	r1, r4, #0
 800418e:	f7fe fff1 	bl	8003174 <asm_helprec_internal>
 8004192:	bc87      	pop	{r0, r1, r2, r7}
 8004194:	3004      	adds	r0, #4
 8004196:	3204      	adds	r2, #4
 8004198:	2403      	movs	r4, #3
 800419a:	403c      	ands	r4, r7
 800419c:	08bf      	lsrs	r7, r7, #2
 800419e:	b487      	push	{r0, r1, r2, r7}
 80041a0:	1c21      	adds	r1, r4, #0
 80041a2:	f7fe ffe7 	bl	8003174 <asm_helprec_internal>
 80041a6:	bc87      	pop	{r0, r1, r2, r7}
 80041a8:	3004      	adds	r0, #4
 80041aa:	3204      	adds	r2, #4
 80041ac:	2403      	movs	r4, #3
 80041ae:	403c      	ands	r4, r7
 80041b0:	08bf      	lsrs	r7, r7, #2
 80041b2:	b487      	push	{r0, r1, r2, r7}
 80041b4:	1c21      	adds	r1, r4, #0
 80041b6:	f7fe ffdd 	bl	8003174 <asm_helprec_internal>
 80041ba:	bc87      	pop	{r0, r1, r2, r7}
 80041bc:	3004      	adds	r0, #4
 80041be:	3204      	adds	r2, #4
 80041c0:	2403      	movs	r4, #3
 80041c2:	403c      	ands	r4, r7
 80041c4:	08bf      	lsrs	r7, r7, #2
 80041c6:	b487      	push	{r0, r1, r2, r7}
 80041c8:	1c21      	adds	r1, r4, #0
 80041ca:	f7fe ffd3 	bl	8003174 <asm_helprec_internal>
 80041ce:	bc87      	pop	{r0, r1, r2, r7}
 80041d0:	3004      	adds	r0, #4
 80041d2:	3204      	adds	r2, #4
 80041d4:	2403      	movs	r4, #3
 80041d6:	403c      	ands	r4, r7
 80041d8:	08bf      	lsrs	r7, r7, #2
 80041da:	b487      	push	{r0, r1, r2, r7}
 80041dc:	1c21      	adds	r1, r4, #0
 80041de:	f7fe ffc9 	bl	8003174 <asm_helprec_internal>
 80041e2:	bc87      	pop	{r0, r1, r2, r7}
 80041e4:	3004      	adds	r0, #4
 80041e6:	3204      	adds	r2, #4
 80041e8:	2403      	movs	r4, #3
 80041ea:	403c      	ands	r4, r7
 80041ec:	08bf      	lsrs	r7, r7, #2
 80041ee:	b487      	push	{r0, r1, r2, r7}
 80041f0:	1c21      	adds	r1, r4, #0
 80041f2:	f7fe ffbf 	bl	8003174 <asm_helprec_internal>
 80041f6:	bc87      	pop	{r0, r1, r2, r7}
 80041f8:	3004      	adds	r0, #4
 80041fa:	3204      	adds	r2, #4
 80041fc:	2403      	movs	r4, #3
 80041fe:	403c      	ands	r4, r7
 8004200:	08bf      	lsrs	r7, r7, #2
 8004202:	b487      	push	{r0, r1, r2, r7}
 8004204:	1c21      	adds	r1, r4, #0
 8004206:	f7fe ffb5 	bl	8003174 <asm_helprec_internal>
 800420a:	bc87      	pop	{r0, r1, r2, r7}
 800420c:	3004      	adds	r0, #4
 800420e:	3204      	adds	r2, #4
 8004210:	2403      	movs	r4, #3
 8004212:	403c      	ands	r4, r7
 8004214:	08bf      	lsrs	r7, r7, #2
 8004216:	b487      	push	{r0, r1, r2, r7}
 8004218:	1c21      	adds	r1, r4, #0
 800421a:	f7fe ffab 	bl	8003174 <asm_helprec_internal>
 800421e:	bc87      	pop	{r0, r1, r2, r7}
 8004220:	3004      	adds	r0, #4
 8004222:	3204      	adds	r2, #4
    key4bytes
 8004224:	c980      	ldmia	r1!, {r7}
 8004226:	2403      	movs	r4, #3
 8004228:	403c      	ands	r4, r7
 800422a:	08bf      	lsrs	r7, r7, #2
 800422c:	b487      	push	{r0, r1, r2, r7}
 800422e:	1c21      	adds	r1, r4, #0
 8004230:	f7fe ffa0 	bl	8003174 <asm_helprec_internal>
 8004234:	bc87      	pop	{r0, r1, r2, r7}
 8004236:	3004      	adds	r0, #4
 8004238:	3204      	adds	r2, #4
 800423a:	2403      	movs	r4, #3
 800423c:	403c      	ands	r4, r7
 800423e:	08bf      	lsrs	r7, r7, #2
 8004240:	b487      	push	{r0, r1, r2, r7}
 8004242:	1c21      	adds	r1, r4, #0
 8004244:	f7fe ff96 	bl	8003174 <asm_helprec_internal>
 8004248:	bc87      	pop	{r0, r1, r2, r7}
 800424a:	3004      	adds	r0, #4
 800424c:	3204      	adds	r2, #4
 800424e:	2403      	movs	r4, #3
 8004250:	403c      	ands	r4, r7
 8004252:	08bf      	lsrs	r7, r7, #2
 8004254:	b487      	push	{r0, r1, r2, r7}
 8004256:	1c21      	adds	r1, r4, #0
 8004258:	f7fe ff8c 	bl	8003174 <asm_helprec_internal>
 800425c:	bc87      	pop	{r0, r1, r2, r7}
 800425e:	3004      	adds	r0, #4
 8004260:	3204      	adds	r2, #4
 8004262:	2403      	movs	r4, #3
 8004264:	403c      	ands	r4, r7
 8004266:	08bf      	lsrs	r7, r7, #2
 8004268:	b487      	push	{r0, r1, r2, r7}
 800426a:	1c21      	adds	r1, r4, #0
 800426c:	f7fe ff82 	bl	8003174 <asm_helprec_internal>
 8004270:	bc87      	pop	{r0, r1, r2, r7}
 8004272:	3004      	adds	r0, #4
 8004274:	3204      	adds	r2, #4
 8004276:	2403      	movs	r4, #3
 8004278:	403c      	ands	r4, r7
 800427a:	08bf      	lsrs	r7, r7, #2
 800427c:	b487      	push	{r0, r1, r2, r7}
 800427e:	1c21      	adds	r1, r4, #0
 8004280:	f7fe ff78 	bl	8003174 <asm_helprec_internal>
 8004284:	bc87      	pop	{r0, r1, r2, r7}
 8004286:	3004      	adds	r0, #4
 8004288:	3204      	adds	r2, #4
 800428a:	2403      	movs	r4, #3
 800428c:	403c      	ands	r4, r7
 800428e:	08bf      	lsrs	r7, r7, #2
 8004290:	b487      	push	{r0, r1, r2, r7}
 8004292:	1c21      	adds	r1, r4, #0
 8004294:	f7fe ff6e 	bl	8003174 <asm_helprec_internal>
 8004298:	bc87      	pop	{r0, r1, r2, r7}
 800429a:	3004      	adds	r0, #4
 800429c:	3204      	adds	r2, #4
 800429e:	2403      	movs	r4, #3
 80042a0:	403c      	ands	r4, r7
 80042a2:	08bf      	lsrs	r7, r7, #2
 80042a4:	b487      	push	{r0, r1, r2, r7}
 80042a6:	1c21      	adds	r1, r4, #0
 80042a8:	f7fe ff64 	bl	8003174 <asm_helprec_internal>
 80042ac:	bc87      	pop	{r0, r1, r2, r7}
 80042ae:	3004      	adds	r0, #4
 80042b0:	3204      	adds	r2, #4
 80042b2:	2403      	movs	r4, #3
 80042b4:	403c      	ands	r4, r7
 80042b6:	08bf      	lsrs	r7, r7, #2
 80042b8:	b487      	push	{r0, r1, r2, r7}
 80042ba:	1c21      	adds	r1, r4, #0
 80042bc:	f7fe ff5a 	bl	8003174 <asm_helprec_internal>
 80042c0:	bc87      	pop	{r0, r1, r2, r7}
 80042c2:	3004      	adds	r0, #4
 80042c4:	3204      	adds	r2, #4
 80042c6:	2403      	movs	r4, #3
 80042c8:	403c      	ands	r4, r7
 80042ca:	08bf      	lsrs	r7, r7, #2
 80042cc:	b487      	push	{r0, r1, r2, r7}
 80042ce:	1c21      	adds	r1, r4, #0
 80042d0:	f7fe ff50 	bl	8003174 <asm_helprec_internal>
 80042d4:	bc87      	pop	{r0, r1, r2, r7}
 80042d6:	3004      	adds	r0, #4
 80042d8:	3204      	adds	r2, #4
 80042da:	2403      	movs	r4, #3
 80042dc:	403c      	ands	r4, r7
 80042de:	08bf      	lsrs	r7, r7, #2
 80042e0:	b487      	push	{r0, r1, r2, r7}
 80042e2:	1c21      	adds	r1, r4, #0
 80042e4:	f7fe ff46 	bl	8003174 <asm_helprec_internal>
 80042e8:	bc87      	pop	{r0, r1, r2, r7}
 80042ea:	3004      	adds	r0, #4
 80042ec:	3204      	adds	r2, #4
 80042ee:	2403      	movs	r4, #3
 80042f0:	403c      	ands	r4, r7
 80042f2:	08bf      	lsrs	r7, r7, #2
 80042f4:	b487      	push	{r0, r1, r2, r7}
 80042f6:	1c21      	adds	r1, r4, #0
 80042f8:	f7fe ff3c 	bl	8003174 <asm_helprec_internal>
 80042fc:	bc87      	pop	{r0, r1, r2, r7}
 80042fe:	3004      	adds	r0, #4
 8004300:	3204      	adds	r2, #4
 8004302:	2403      	movs	r4, #3
 8004304:	403c      	ands	r4, r7
 8004306:	08bf      	lsrs	r7, r7, #2
 8004308:	b487      	push	{r0, r1, r2, r7}
 800430a:	1c21      	adds	r1, r4, #0
 800430c:	f7fe ff32 	bl	8003174 <asm_helprec_internal>
 8004310:	bc87      	pop	{r0, r1, r2, r7}
 8004312:	3004      	adds	r0, #4
 8004314:	3204      	adds	r2, #4
 8004316:	2403      	movs	r4, #3
 8004318:	403c      	ands	r4, r7
 800431a:	08bf      	lsrs	r7, r7, #2
 800431c:	b487      	push	{r0, r1, r2, r7}
 800431e:	1c21      	adds	r1, r4, #0
 8004320:	f7fe ff28 	bl	8003174 <asm_helprec_internal>
 8004324:	bc87      	pop	{r0, r1, r2, r7}
 8004326:	3004      	adds	r0, #4
 8004328:	3204      	adds	r2, #4
 800432a:	2403      	movs	r4, #3
 800432c:	403c      	ands	r4, r7
 800432e:	08bf      	lsrs	r7, r7, #2
 8004330:	b487      	push	{r0, r1, r2, r7}
 8004332:	1c21      	adds	r1, r4, #0
 8004334:	f7fe ff1e 	bl	8003174 <asm_helprec_internal>
 8004338:	bc87      	pop	{r0, r1, r2, r7}
 800433a:	3004      	adds	r0, #4
 800433c:	3204      	adds	r2, #4
 800433e:	2403      	movs	r4, #3
 8004340:	403c      	ands	r4, r7
 8004342:	08bf      	lsrs	r7, r7, #2
 8004344:	b487      	push	{r0, r1, r2, r7}
 8004346:	1c21      	adds	r1, r4, #0
 8004348:	f7fe ff14 	bl	8003174 <asm_helprec_internal>
 800434c:	bc87      	pop	{r0, r1, r2, r7}
 800434e:	3004      	adds	r0, #4
 8004350:	3204      	adds	r2, #4
 8004352:	2403      	movs	r4, #3
 8004354:	403c      	ands	r4, r7
 8004356:	08bf      	lsrs	r7, r7, #2
 8004358:	b487      	push	{r0, r1, r2, r7}
 800435a:	1c21      	adds	r1, r4, #0
 800435c:	f7fe ff0a 	bl	8003174 <asm_helprec_internal>
 8004360:	bc87      	pop	{r0, r1, r2, r7}
 8004362:	3004      	adds	r0, #4
 8004364:	3204      	adds	r2, #4
    key4bytes
 8004366:	c980      	ldmia	r1!, {r7}
 8004368:	2403      	movs	r4, #3
 800436a:	403c      	ands	r4, r7
 800436c:	08bf      	lsrs	r7, r7, #2
 800436e:	b487      	push	{r0, r1, r2, r7}
 8004370:	1c21      	adds	r1, r4, #0
 8004372:	f7fe feff 	bl	8003174 <asm_helprec_internal>
 8004376:	bc87      	pop	{r0, r1, r2, r7}
 8004378:	3004      	adds	r0, #4
 800437a:	3204      	adds	r2, #4
 800437c:	2403      	movs	r4, #3
 800437e:	403c      	ands	r4, r7
 8004380:	08bf      	lsrs	r7, r7, #2
 8004382:	b487      	push	{r0, r1, r2, r7}
 8004384:	1c21      	adds	r1, r4, #0
 8004386:	f7fe fef5 	bl	8003174 <asm_helprec_internal>
 800438a:	bc87      	pop	{r0, r1, r2, r7}
 800438c:	3004      	adds	r0, #4
 800438e:	3204      	adds	r2, #4
 8004390:	2403      	movs	r4, #3
 8004392:	403c      	ands	r4, r7
 8004394:	08bf      	lsrs	r7, r7, #2
 8004396:	b487      	push	{r0, r1, r2, r7}
 8004398:	1c21      	adds	r1, r4, #0
 800439a:	f7fe feeb 	bl	8003174 <asm_helprec_internal>
 800439e:	bc87      	pop	{r0, r1, r2, r7}
 80043a0:	3004      	adds	r0, #4
 80043a2:	3204      	adds	r2, #4
 80043a4:	2403      	movs	r4, #3
 80043a6:	403c      	ands	r4, r7
 80043a8:	08bf      	lsrs	r7, r7, #2
 80043aa:	b487      	push	{r0, r1, r2, r7}
 80043ac:	1c21      	adds	r1, r4, #0
 80043ae:	f7fe fee1 	bl	8003174 <asm_helprec_internal>
 80043b2:	bc87      	pop	{r0, r1, r2, r7}
 80043b4:	3004      	adds	r0, #4
 80043b6:	3204      	adds	r2, #4
 80043b8:	2403      	movs	r4, #3
 80043ba:	403c      	ands	r4, r7
 80043bc:	08bf      	lsrs	r7, r7, #2
 80043be:	b487      	push	{r0, r1, r2, r7}
 80043c0:	1c21      	adds	r1, r4, #0
 80043c2:	f7fe fed7 	bl	8003174 <asm_helprec_internal>
 80043c6:	bc87      	pop	{r0, r1, r2, r7}
 80043c8:	3004      	adds	r0, #4
 80043ca:	3204      	adds	r2, #4
 80043cc:	2403      	movs	r4, #3
 80043ce:	403c      	ands	r4, r7
 80043d0:	08bf      	lsrs	r7, r7, #2
 80043d2:	b487      	push	{r0, r1, r2, r7}
 80043d4:	1c21      	adds	r1, r4, #0
 80043d6:	f7fe fecd 	bl	8003174 <asm_helprec_internal>
 80043da:	bc87      	pop	{r0, r1, r2, r7}
 80043dc:	3004      	adds	r0, #4
 80043de:	3204      	adds	r2, #4
 80043e0:	2403      	movs	r4, #3
 80043e2:	403c      	ands	r4, r7
 80043e4:	08bf      	lsrs	r7, r7, #2
 80043e6:	b487      	push	{r0, r1, r2, r7}
 80043e8:	1c21      	adds	r1, r4, #0
 80043ea:	f7fe fec3 	bl	8003174 <asm_helprec_internal>
 80043ee:	bc87      	pop	{r0, r1, r2, r7}
 80043f0:	3004      	adds	r0, #4
 80043f2:	3204      	adds	r2, #4
 80043f4:	2403      	movs	r4, #3
 80043f6:	403c      	ands	r4, r7
 80043f8:	08bf      	lsrs	r7, r7, #2
 80043fa:	b487      	push	{r0, r1, r2, r7}
 80043fc:	1c21      	adds	r1, r4, #0
 80043fe:	f7fe feb9 	bl	8003174 <asm_helprec_internal>
 8004402:	bc87      	pop	{r0, r1, r2, r7}
 8004404:	3004      	adds	r0, #4
 8004406:	3204      	adds	r2, #4
 8004408:	2403      	movs	r4, #3
 800440a:	403c      	ands	r4, r7
 800440c:	08bf      	lsrs	r7, r7, #2
 800440e:	b487      	push	{r0, r1, r2, r7}
 8004410:	1c21      	adds	r1, r4, #0
 8004412:	f7fe feaf 	bl	8003174 <asm_helprec_internal>
 8004416:	bc87      	pop	{r0, r1, r2, r7}
 8004418:	3004      	adds	r0, #4
 800441a:	3204      	adds	r2, #4
 800441c:	2403      	movs	r4, #3
 800441e:	403c      	ands	r4, r7
 8004420:	08bf      	lsrs	r7, r7, #2
 8004422:	b487      	push	{r0, r1, r2, r7}
 8004424:	1c21      	adds	r1, r4, #0
 8004426:	f7fe fea5 	bl	8003174 <asm_helprec_internal>
 800442a:	bc87      	pop	{r0, r1, r2, r7}
 800442c:	3004      	adds	r0, #4
 800442e:	3204      	adds	r2, #4
 8004430:	2403      	movs	r4, #3
 8004432:	403c      	ands	r4, r7
 8004434:	08bf      	lsrs	r7, r7, #2
 8004436:	b487      	push	{r0, r1, r2, r7}
 8004438:	1c21      	adds	r1, r4, #0
 800443a:	f7fe fe9b 	bl	8003174 <asm_helprec_internal>
 800443e:	bc87      	pop	{r0, r1, r2, r7}
 8004440:	3004      	adds	r0, #4
 8004442:	3204      	adds	r2, #4
 8004444:	2403      	movs	r4, #3
 8004446:	403c      	ands	r4, r7
 8004448:	08bf      	lsrs	r7, r7, #2
 800444a:	b487      	push	{r0, r1, r2, r7}
 800444c:	1c21      	adds	r1, r4, #0
 800444e:	f7fe fe91 	bl	8003174 <asm_helprec_internal>
 8004452:	bc87      	pop	{r0, r1, r2, r7}
 8004454:	3004      	adds	r0, #4
 8004456:	3204      	adds	r2, #4
 8004458:	2403      	movs	r4, #3
 800445a:	403c      	ands	r4, r7
 800445c:	08bf      	lsrs	r7, r7, #2
 800445e:	b487      	push	{r0, r1, r2, r7}
 8004460:	1c21      	adds	r1, r4, #0
 8004462:	f7fe fe87 	bl	8003174 <asm_helprec_internal>
 8004466:	bc87      	pop	{r0, r1, r2, r7}
 8004468:	3004      	adds	r0, #4
 800446a:	3204      	adds	r2, #4
 800446c:	2403      	movs	r4, #3
 800446e:	403c      	ands	r4, r7
 8004470:	08bf      	lsrs	r7, r7, #2
 8004472:	b487      	push	{r0, r1, r2, r7}
 8004474:	1c21      	adds	r1, r4, #0
 8004476:	f7fe fe7d 	bl	8003174 <asm_helprec_internal>
 800447a:	bc87      	pop	{r0, r1, r2, r7}
 800447c:	3004      	adds	r0, #4
 800447e:	3204      	adds	r2, #4
 8004480:	2403      	movs	r4, #3
 8004482:	403c      	ands	r4, r7
 8004484:	08bf      	lsrs	r7, r7, #2
 8004486:	b487      	push	{r0, r1, r2, r7}
 8004488:	1c21      	adds	r1, r4, #0
 800448a:	f7fe fe73 	bl	8003174 <asm_helprec_internal>
 800448e:	bc87      	pop	{r0, r1, r2, r7}
 8004490:	3004      	adds	r0, #4
 8004492:	3204      	adds	r2, #4
 8004494:	2403      	movs	r4, #3
 8004496:	403c      	ands	r4, r7
 8004498:	08bf      	lsrs	r7, r7, #2
 800449a:	b487      	push	{r0, r1, r2, r7}
 800449c:	1c21      	adds	r1, r4, #0
 800449e:	f7fe fe69 	bl	8003174 <asm_helprec_internal>
 80044a2:	bc87      	pop	{r0, r1, r2, r7}
 80044a4:	3004      	adds	r0, #4
 80044a6:	3204      	adds	r2, #4
    key4bytes
 80044a8:	c980      	ldmia	r1!, {r7}
 80044aa:	2403      	movs	r4, #3
 80044ac:	403c      	ands	r4, r7
 80044ae:	08bf      	lsrs	r7, r7, #2
 80044b0:	b487      	push	{r0, r1, r2, r7}
 80044b2:	1c21      	adds	r1, r4, #0
 80044b4:	f7fe fe5e 	bl	8003174 <asm_helprec_internal>
 80044b8:	bc87      	pop	{r0, r1, r2, r7}
 80044ba:	3004      	adds	r0, #4
 80044bc:	3204      	adds	r2, #4
 80044be:	2403      	movs	r4, #3
 80044c0:	403c      	ands	r4, r7
 80044c2:	08bf      	lsrs	r7, r7, #2
 80044c4:	b487      	push	{r0, r1, r2, r7}
 80044c6:	1c21      	adds	r1, r4, #0
 80044c8:	f7fe fe54 	bl	8003174 <asm_helprec_internal>
 80044cc:	bc87      	pop	{r0, r1, r2, r7}
 80044ce:	3004      	adds	r0, #4
 80044d0:	3204      	adds	r2, #4
 80044d2:	2403      	movs	r4, #3
 80044d4:	403c      	ands	r4, r7
 80044d6:	08bf      	lsrs	r7, r7, #2
 80044d8:	b487      	push	{r0, r1, r2, r7}
 80044da:	1c21      	adds	r1, r4, #0
 80044dc:	f7fe fe4a 	bl	8003174 <asm_helprec_internal>
 80044e0:	bc87      	pop	{r0, r1, r2, r7}
 80044e2:	3004      	adds	r0, #4
 80044e4:	3204      	adds	r2, #4
 80044e6:	2403      	movs	r4, #3
 80044e8:	403c      	ands	r4, r7
 80044ea:	08bf      	lsrs	r7, r7, #2
 80044ec:	b487      	push	{r0, r1, r2, r7}
 80044ee:	1c21      	adds	r1, r4, #0
 80044f0:	f7fe fe40 	bl	8003174 <asm_helprec_internal>
 80044f4:	bc87      	pop	{r0, r1, r2, r7}
 80044f6:	3004      	adds	r0, #4
 80044f8:	3204      	adds	r2, #4
 80044fa:	2403      	movs	r4, #3
 80044fc:	403c      	ands	r4, r7
 80044fe:	08bf      	lsrs	r7, r7, #2
 8004500:	b487      	push	{r0, r1, r2, r7}
 8004502:	1c21      	adds	r1, r4, #0
 8004504:	f7fe fe36 	bl	8003174 <asm_helprec_internal>
 8004508:	bc87      	pop	{r0, r1, r2, r7}
 800450a:	3004      	adds	r0, #4
 800450c:	3204      	adds	r2, #4
 800450e:	2403      	movs	r4, #3
 8004510:	403c      	ands	r4, r7
 8004512:	08bf      	lsrs	r7, r7, #2
 8004514:	b487      	push	{r0, r1, r2, r7}
 8004516:	1c21      	adds	r1, r4, #0
 8004518:	f7fe fe2c 	bl	8003174 <asm_helprec_internal>
 800451c:	bc87      	pop	{r0, r1, r2, r7}
 800451e:	3004      	adds	r0, #4
 8004520:	3204      	adds	r2, #4
 8004522:	2403      	movs	r4, #3
 8004524:	403c      	ands	r4, r7
 8004526:	08bf      	lsrs	r7, r7, #2
 8004528:	b487      	push	{r0, r1, r2, r7}
 800452a:	1c21      	adds	r1, r4, #0
 800452c:	f7fe fe22 	bl	8003174 <asm_helprec_internal>
 8004530:	bc87      	pop	{r0, r1, r2, r7}
 8004532:	3004      	adds	r0, #4
 8004534:	3204      	adds	r2, #4
 8004536:	2403      	movs	r4, #3
 8004538:	403c      	ands	r4, r7
 800453a:	08bf      	lsrs	r7, r7, #2
 800453c:	b487      	push	{r0, r1, r2, r7}
 800453e:	1c21      	adds	r1, r4, #0
 8004540:	f7fe fe18 	bl	8003174 <asm_helprec_internal>
 8004544:	bc87      	pop	{r0, r1, r2, r7}
 8004546:	3004      	adds	r0, #4
 8004548:	3204      	adds	r2, #4
 800454a:	2403      	movs	r4, #3
 800454c:	403c      	ands	r4, r7
 800454e:	08bf      	lsrs	r7, r7, #2
 8004550:	b487      	push	{r0, r1, r2, r7}
 8004552:	1c21      	adds	r1, r4, #0
 8004554:	f7fe fe0e 	bl	8003174 <asm_helprec_internal>
 8004558:	bc87      	pop	{r0, r1, r2, r7}
 800455a:	3004      	adds	r0, #4
 800455c:	3204      	adds	r2, #4
 800455e:	2403      	movs	r4, #3
 8004560:	403c      	ands	r4, r7
 8004562:	08bf      	lsrs	r7, r7, #2
 8004564:	b487      	push	{r0, r1, r2, r7}
 8004566:	1c21      	adds	r1, r4, #0
 8004568:	f7fe fe04 	bl	8003174 <asm_helprec_internal>
 800456c:	bc87      	pop	{r0, r1, r2, r7}
 800456e:	3004      	adds	r0, #4
 8004570:	3204      	adds	r2, #4
 8004572:	2403      	movs	r4, #3
 8004574:	403c      	ands	r4, r7
 8004576:	08bf      	lsrs	r7, r7, #2
 8004578:	b487      	push	{r0, r1, r2, r7}
 800457a:	1c21      	adds	r1, r4, #0
 800457c:	f7fe fdfa 	bl	8003174 <asm_helprec_internal>
 8004580:	bc87      	pop	{r0, r1, r2, r7}
 8004582:	3004      	adds	r0, #4
 8004584:	3204      	adds	r2, #4
 8004586:	2403      	movs	r4, #3
 8004588:	403c      	ands	r4, r7
 800458a:	08bf      	lsrs	r7, r7, #2
 800458c:	b487      	push	{r0, r1, r2, r7}
 800458e:	1c21      	adds	r1, r4, #0
 8004590:	f7fe fdf0 	bl	8003174 <asm_helprec_internal>
 8004594:	bc87      	pop	{r0, r1, r2, r7}
 8004596:	3004      	adds	r0, #4
 8004598:	3204      	adds	r2, #4
 800459a:	2403      	movs	r4, #3
 800459c:	403c      	ands	r4, r7
 800459e:	08bf      	lsrs	r7, r7, #2
 80045a0:	b487      	push	{r0, r1, r2, r7}
 80045a2:	1c21      	adds	r1, r4, #0
 80045a4:	f7fe fde6 	bl	8003174 <asm_helprec_internal>
 80045a8:	bc87      	pop	{r0, r1, r2, r7}
 80045aa:	3004      	adds	r0, #4
 80045ac:	3204      	adds	r2, #4
 80045ae:	2403      	movs	r4, #3
 80045b0:	403c      	ands	r4, r7
 80045b2:	08bf      	lsrs	r7, r7, #2
 80045b4:	b487      	push	{r0, r1, r2, r7}
 80045b6:	1c21      	adds	r1, r4, #0
 80045b8:	f7fe fddc 	bl	8003174 <asm_helprec_internal>
 80045bc:	bc87      	pop	{r0, r1, r2, r7}
 80045be:	3004      	adds	r0, #4
 80045c0:	3204      	adds	r2, #4
 80045c2:	2403      	movs	r4, #3
 80045c4:	403c      	ands	r4, r7
 80045c6:	08bf      	lsrs	r7, r7, #2
 80045c8:	b487      	push	{r0, r1, r2, r7}
 80045ca:	1c21      	adds	r1, r4, #0
 80045cc:	f7fe fdd2 	bl	8003174 <asm_helprec_internal>
 80045d0:	bc87      	pop	{r0, r1, r2, r7}
 80045d2:	3004      	adds	r0, #4
 80045d4:	3204      	adds	r2, #4
 80045d6:	2403      	movs	r4, #3
 80045d8:	403c      	ands	r4, r7
 80045da:	08bf      	lsrs	r7, r7, #2
 80045dc:	b487      	push	{r0, r1, r2, r7}
 80045de:	1c21      	adds	r1, r4, #0
 80045e0:	f7fe fdc8 	bl	8003174 <asm_helprec_internal>
 80045e4:	bc87      	pop	{r0, r1, r2, r7}
 80045e6:	3004      	adds	r0, #4
 80045e8:	3204      	adds	r2, #4
    key4bytes
 80045ea:	c980      	ldmia	r1!, {r7}
 80045ec:	2403      	movs	r4, #3
 80045ee:	403c      	ands	r4, r7
 80045f0:	08bf      	lsrs	r7, r7, #2
 80045f2:	b487      	push	{r0, r1, r2, r7}
 80045f4:	1c21      	adds	r1, r4, #0
 80045f6:	f7fe fdbd 	bl	8003174 <asm_helprec_internal>
 80045fa:	bc87      	pop	{r0, r1, r2, r7}
 80045fc:	3004      	adds	r0, #4
 80045fe:	3204      	adds	r2, #4
 8004600:	2403      	movs	r4, #3
 8004602:	403c      	ands	r4, r7
 8004604:	08bf      	lsrs	r7, r7, #2
 8004606:	b487      	push	{r0, r1, r2, r7}
 8004608:	1c21      	adds	r1, r4, #0
 800460a:	f7fe fdb3 	bl	8003174 <asm_helprec_internal>
 800460e:	bc87      	pop	{r0, r1, r2, r7}
 8004610:	3004      	adds	r0, #4
 8004612:	3204      	adds	r2, #4
 8004614:	2403      	movs	r4, #3
 8004616:	403c      	ands	r4, r7
 8004618:	08bf      	lsrs	r7, r7, #2
 800461a:	b487      	push	{r0, r1, r2, r7}
 800461c:	1c21      	adds	r1, r4, #0
 800461e:	f7fe fda9 	bl	8003174 <asm_helprec_internal>
 8004622:	bc87      	pop	{r0, r1, r2, r7}
 8004624:	3004      	adds	r0, #4
 8004626:	3204      	adds	r2, #4
 8004628:	2403      	movs	r4, #3
 800462a:	403c      	ands	r4, r7
 800462c:	08bf      	lsrs	r7, r7, #2
 800462e:	b487      	push	{r0, r1, r2, r7}
 8004630:	1c21      	adds	r1, r4, #0
 8004632:	f7fe fd9f 	bl	8003174 <asm_helprec_internal>
 8004636:	bc87      	pop	{r0, r1, r2, r7}
 8004638:	3004      	adds	r0, #4
 800463a:	3204      	adds	r2, #4
 800463c:	2403      	movs	r4, #3
 800463e:	403c      	ands	r4, r7
 8004640:	08bf      	lsrs	r7, r7, #2
 8004642:	b487      	push	{r0, r1, r2, r7}
 8004644:	1c21      	adds	r1, r4, #0
 8004646:	f7fe fd95 	bl	8003174 <asm_helprec_internal>
 800464a:	bc87      	pop	{r0, r1, r2, r7}
 800464c:	3004      	adds	r0, #4
 800464e:	3204      	adds	r2, #4
 8004650:	2403      	movs	r4, #3
 8004652:	403c      	ands	r4, r7
 8004654:	08bf      	lsrs	r7, r7, #2
 8004656:	b487      	push	{r0, r1, r2, r7}
 8004658:	1c21      	adds	r1, r4, #0
 800465a:	f7fe fd8b 	bl	8003174 <asm_helprec_internal>
 800465e:	bc87      	pop	{r0, r1, r2, r7}
 8004660:	3004      	adds	r0, #4
 8004662:	3204      	adds	r2, #4
 8004664:	2403      	movs	r4, #3
 8004666:	403c      	ands	r4, r7
 8004668:	08bf      	lsrs	r7, r7, #2
 800466a:	b487      	push	{r0, r1, r2, r7}
 800466c:	1c21      	adds	r1, r4, #0
 800466e:	f7fe fd81 	bl	8003174 <asm_helprec_internal>
 8004672:	bc87      	pop	{r0, r1, r2, r7}
 8004674:	3004      	adds	r0, #4
 8004676:	3204      	adds	r2, #4
 8004678:	2403      	movs	r4, #3
 800467a:	403c      	ands	r4, r7
 800467c:	08bf      	lsrs	r7, r7, #2
 800467e:	b487      	push	{r0, r1, r2, r7}
 8004680:	1c21      	adds	r1, r4, #0
 8004682:	f7fe fd77 	bl	8003174 <asm_helprec_internal>
 8004686:	bc87      	pop	{r0, r1, r2, r7}
 8004688:	3004      	adds	r0, #4
 800468a:	3204      	adds	r2, #4
 800468c:	2403      	movs	r4, #3
 800468e:	403c      	ands	r4, r7
 8004690:	08bf      	lsrs	r7, r7, #2
 8004692:	b487      	push	{r0, r1, r2, r7}
 8004694:	1c21      	adds	r1, r4, #0
 8004696:	f7fe fd6d 	bl	8003174 <asm_helprec_internal>
 800469a:	bc87      	pop	{r0, r1, r2, r7}
 800469c:	3004      	adds	r0, #4
 800469e:	3204      	adds	r2, #4
 80046a0:	2403      	movs	r4, #3
 80046a2:	403c      	ands	r4, r7
 80046a4:	08bf      	lsrs	r7, r7, #2
 80046a6:	b487      	push	{r0, r1, r2, r7}
 80046a8:	1c21      	adds	r1, r4, #0
 80046aa:	f7fe fd63 	bl	8003174 <asm_helprec_internal>
 80046ae:	bc87      	pop	{r0, r1, r2, r7}
 80046b0:	3004      	adds	r0, #4
 80046b2:	3204      	adds	r2, #4
 80046b4:	2403      	movs	r4, #3
 80046b6:	403c      	ands	r4, r7
 80046b8:	08bf      	lsrs	r7, r7, #2
 80046ba:	b487      	push	{r0, r1, r2, r7}
 80046bc:	1c21      	adds	r1, r4, #0
 80046be:	f7fe fd59 	bl	8003174 <asm_helprec_internal>
 80046c2:	bc87      	pop	{r0, r1, r2, r7}
 80046c4:	3004      	adds	r0, #4
 80046c6:	3204      	adds	r2, #4
 80046c8:	2403      	movs	r4, #3
 80046ca:	403c      	ands	r4, r7
 80046cc:	08bf      	lsrs	r7, r7, #2
 80046ce:	b487      	push	{r0, r1, r2, r7}
 80046d0:	1c21      	adds	r1, r4, #0
 80046d2:	f7fe fd4f 	bl	8003174 <asm_helprec_internal>
 80046d6:	bc87      	pop	{r0, r1, r2, r7}
 80046d8:	3004      	adds	r0, #4
 80046da:	3204      	adds	r2, #4
 80046dc:	2403      	movs	r4, #3
 80046de:	403c      	ands	r4, r7
 80046e0:	08bf      	lsrs	r7, r7, #2
 80046e2:	b487      	push	{r0, r1, r2, r7}
 80046e4:	1c21      	adds	r1, r4, #0
 80046e6:	f7fe fd45 	bl	8003174 <asm_helprec_internal>
 80046ea:	bc87      	pop	{r0, r1, r2, r7}
 80046ec:	3004      	adds	r0, #4
 80046ee:	3204      	adds	r2, #4
 80046f0:	2403      	movs	r4, #3
 80046f2:	403c      	ands	r4, r7
 80046f4:	08bf      	lsrs	r7, r7, #2
 80046f6:	b487      	push	{r0, r1, r2, r7}
 80046f8:	1c21      	adds	r1, r4, #0
 80046fa:	f7fe fd3b 	bl	8003174 <asm_helprec_internal>
 80046fe:	bc87      	pop	{r0, r1, r2, r7}
 8004700:	3004      	adds	r0, #4
 8004702:	3204      	adds	r2, #4
 8004704:	2403      	movs	r4, #3
 8004706:	403c      	ands	r4, r7
 8004708:	08bf      	lsrs	r7, r7, #2
 800470a:	b487      	push	{r0, r1, r2, r7}
 800470c:	1c21      	adds	r1, r4, #0
 800470e:	f7fe fd31 	bl	8003174 <asm_helprec_internal>
 8004712:	bc87      	pop	{r0, r1, r2, r7}
 8004714:	3004      	adds	r0, #4
 8004716:	3204      	adds	r2, #4
 8004718:	2403      	movs	r4, #3
 800471a:	403c      	ands	r4, r7
 800471c:	08bf      	lsrs	r7, r7, #2
 800471e:	b487      	push	{r0, r1, r2, r7}
 8004720:	1c21      	adds	r1, r4, #0
 8004722:	f7fe fd27 	bl	8003174 <asm_helprec_internal>
 8004726:	bc87      	pop	{r0, r1, r2, r7}
 8004728:	3004      	adds	r0, #4
 800472a:	3204      	adds	r2, #4
    key4bytes
 800472c:	c980      	ldmia	r1!, {r7}
 800472e:	2403      	movs	r4, #3
 8004730:	403c      	ands	r4, r7
 8004732:	08bf      	lsrs	r7, r7, #2
 8004734:	b487      	push	{r0, r1, r2, r7}
 8004736:	1c21      	adds	r1, r4, #0
 8004738:	f7fe fd1c 	bl	8003174 <asm_helprec_internal>
 800473c:	bc87      	pop	{r0, r1, r2, r7}
 800473e:	3004      	adds	r0, #4
 8004740:	3204      	adds	r2, #4
 8004742:	2403      	movs	r4, #3
 8004744:	403c      	ands	r4, r7
 8004746:	08bf      	lsrs	r7, r7, #2
 8004748:	b487      	push	{r0, r1, r2, r7}
 800474a:	1c21      	adds	r1, r4, #0
 800474c:	f7fe fd12 	bl	8003174 <asm_helprec_internal>
 8004750:	bc87      	pop	{r0, r1, r2, r7}
 8004752:	3004      	adds	r0, #4
 8004754:	3204      	adds	r2, #4
 8004756:	2403      	movs	r4, #3
 8004758:	403c      	ands	r4, r7
 800475a:	08bf      	lsrs	r7, r7, #2
 800475c:	b487      	push	{r0, r1, r2, r7}
 800475e:	1c21      	adds	r1, r4, #0
 8004760:	f7fe fd08 	bl	8003174 <asm_helprec_internal>
 8004764:	bc87      	pop	{r0, r1, r2, r7}
 8004766:	3004      	adds	r0, #4
 8004768:	3204      	adds	r2, #4
 800476a:	2403      	movs	r4, #3
 800476c:	403c      	ands	r4, r7
 800476e:	08bf      	lsrs	r7, r7, #2
 8004770:	b487      	push	{r0, r1, r2, r7}
 8004772:	1c21      	adds	r1, r4, #0
 8004774:	f7fe fcfe 	bl	8003174 <asm_helprec_internal>
 8004778:	bc87      	pop	{r0, r1, r2, r7}
 800477a:	3004      	adds	r0, #4
 800477c:	3204      	adds	r2, #4
 800477e:	2403      	movs	r4, #3
 8004780:	403c      	ands	r4, r7
 8004782:	08bf      	lsrs	r7, r7, #2
 8004784:	b487      	push	{r0, r1, r2, r7}
 8004786:	1c21      	adds	r1, r4, #0
 8004788:	f7fe fcf4 	bl	8003174 <asm_helprec_internal>
 800478c:	bc87      	pop	{r0, r1, r2, r7}
 800478e:	3004      	adds	r0, #4
 8004790:	3204      	adds	r2, #4
 8004792:	2403      	movs	r4, #3
 8004794:	403c      	ands	r4, r7
 8004796:	08bf      	lsrs	r7, r7, #2
 8004798:	b487      	push	{r0, r1, r2, r7}
 800479a:	1c21      	adds	r1, r4, #0
 800479c:	f7fe fcea 	bl	8003174 <asm_helprec_internal>
 80047a0:	bc87      	pop	{r0, r1, r2, r7}
 80047a2:	3004      	adds	r0, #4
 80047a4:	3204      	adds	r2, #4
 80047a6:	2403      	movs	r4, #3
 80047a8:	403c      	ands	r4, r7
 80047aa:	08bf      	lsrs	r7, r7, #2
 80047ac:	b487      	push	{r0, r1, r2, r7}
 80047ae:	1c21      	adds	r1, r4, #0
 80047b0:	f7fe fce0 	bl	8003174 <asm_helprec_internal>
 80047b4:	bc87      	pop	{r0, r1, r2, r7}
 80047b6:	3004      	adds	r0, #4
 80047b8:	3204      	adds	r2, #4
 80047ba:	2403      	movs	r4, #3
 80047bc:	403c      	ands	r4, r7
 80047be:	08bf      	lsrs	r7, r7, #2
 80047c0:	b487      	push	{r0, r1, r2, r7}
 80047c2:	1c21      	adds	r1, r4, #0
 80047c4:	f7fe fcd6 	bl	8003174 <asm_helprec_internal>
 80047c8:	bc87      	pop	{r0, r1, r2, r7}
 80047ca:	3004      	adds	r0, #4
 80047cc:	3204      	adds	r2, #4
 80047ce:	2403      	movs	r4, #3
 80047d0:	403c      	ands	r4, r7
 80047d2:	08bf      	lsrs	r7, r7, #2
 80047d4:	b487      	push	{r0, r1, r2, r7}
 80047d6:	1c21      	adds	r1, r4, #0
 80047d8:	f7fe fccc 	bl	8003174 <asm_helprec_internal>
 80047dc:	bc87      	pop	{r0, r1, r2, r7}
 80047de:	3004      	adds	r0, #4
 80047e0:	3204      	adds	r2, #4
 80047e2:	2403      	movs	r4, #3
 80047e4:	403c      	ands	r4, r7
 80047e6:	08bf      	lsrs	r7, r7, #2
 80047e8:	b487      	push	{r0, r1, r2, r7}
 80047ea:	1c21      	adds	r1, r4, #0
 80047ec:	f7fe fcc2 	bl	8003174 <asm_helprec_internal>
 80047f0:	bc87      	pop	{r0, r1, r2, r7}
 80047f2:	3004      	adds	r0, #4
 80047f4:	3204      	adds	r2, #4
 80047f6:	2403      	movs	r4, #3
 80047f8:	403c      	ands	r4, r7
 80047fa:	08bf      	lsrs	r7, r7, #2
 80047fc:	b487      	push	{r0, r1, r2, r7}
 80047fe:	1c21      	adds	r1, r4, #0
 8004800:	f7fe fcb8 	bl	8003174 <asm_helprec_internal>
 8004804:	bc87      	pop	{r0, r1, r2, r7}
 8004806:	3004      	adds	r0, #4
 8004808:	3204      	adds	r2, #4
 800480a:	2403      	movs	r4, #3
 800480c:	403c      	ands	r4, r7
 800480e:	08bf      	lsrs	r7, r7, #2
 8004810:	b487      	push	{r0, r1, r2, r7}
 8004812:	1c21      	adds	r1, r4, #0
 8004814:	f7fe fcae 	bl	8003174 <asm_helprec_internal>
 8004818:	bc87      	pop	{r0, r1, r2, r7}
 800481a:	3004      	adds	r0, #4
 800481c:	3204      	adds	r2, #4
 800481e:	2403      	movs	r4, #3
 8004820:	403c      	ands	r4, r7
 8004822:	08bf      	lsrs	r7, r7, #2
 8004824:	b487      	push	{r0, r1, r2, r7}
 8004826:	1c21      	adds	r1, r4, #0
 8004828:	f7fe fca4 	bl	8003174 <asm_helprec_internal>
 800482c:	bc87      	pop	{r0, r1, r2, r7}
 800482e:	3004      	adds	r0, #4
 8004830:	3204      	adds	r2, #4
 8004832:	2403      	movs	r4, #3
 8004834:	403c      	ands	r4, r7
 8004836:	08bf      	lsrs	r7, r7, #2
 8004838:	b487      	push	{r0, r1, r2, r7}
 800483a:	1c21      	adds	r1, r4, #0
 800483c:	f7fe fc9a 	bl	8003174 <asm_helprec_internal>
 8004840:	bc87      	pop	{r0, r1, r2, r7}
 8004842:	3004      	adds	r0, #4
 8004844:	3204      	adds	r2, #4
 8004846:	2403      	movs	r4, #3
 8004848:	403c      	ands	r4, r7
 800484a:	08bf      	lsrs	r7, r7, #2
 800484c:	b487      	push	{r0, r1, r2, r7}
 800484e:	1c21      	adds	r1, r4, #0
 8004850:	f7fe fc90 	bl	8003174 <asm_helprec_internal>
 8004854:	bc87      	pop	{r0, r1, r2, r7}
 8004856:	3004      	adds	r0, #4
 8004858:	3204      	adds	r2, #4
 800485a:	2403      	movs	r4, #3
 800485c:	403c      	ands	r4, r7
 800485e:	08bf      	lsrs	r7, r7, #2
 8004860:	b487      	push	{r0, r1, r2, r7}
 8004862:	1c21      	adds	r1, r4, #0
 8004864:	f7fe fc86 	bl	8003174 <asm_helprec_internal>
 8004868:	bc87      	pop	{r0, r1, r2, r7}
 800486a:	3004      	adds	r0, #4
 800486c:	3204      	adds	r2, #4
    key4bytes
 800486e:	c980      	ldmia	r1!, {r7}
 8004870:	2403      	movs	r4, #3
 8004872:	403c      	ands	r4, r7
 8004874:	08bf      	lsrs	r7, r7, #2
 8004876:	b487      	push	{r0, r1, r2, r7}
 8004878:	1c21      	adds	r1, r4, #0
 800487a:	f7fe fc7b 	bl	8003174 <asm_helprec_internal>
 800487e:	bc87      	pop	{r0, r1, r2, r7}
 8004880:	3004      	adds	r0, #4
 8004882:	3204      	adds	r2, #4
 8004884:	2403      	movs	r4, #3
 8004886:	403c      	ands	r4, r7
 8004888:	08bf      	lsrs	r7, r7, #2
 800488a:	b487      	push	{r0, r1, r2, r7}
 800488c:	1c21      	adds	r1, r4, #0
 800488e:	f7fe fc71 	bl	8003174 <asm_helprec_internal>
 8004892:	bc87      	pop	{r0, r1, r2, r7}
 8004894:	3004      	adds	r0, #4
 8004896:	3204      	adds	r2, #4
 8004898:	2403      	movs	r4, #3
 800489a:	403c      	ands	r4, r7
 800489c:	08bf      	lsrs	r7, r7, #2
 800489e:	b487      	push	{r0, r1, r2, r7}
 80048a0:	1c21      	adds	r1, r4, #0
 80048a2:	f7fe fc67 	bl	8003174 <asm_helprec_internal>
 80048a6:	bc87      	pop	{r0, r1, r2, r7}
 80048a8:	3004      	adds	r0, #4
 80048aa:	3204      	adds	r2, #4
 80048ac:	2403      	movs	r4, #3
 80048ae:	403c      	ands	r4, r7
 80048b0:	08bf      	lsrs	r7, r7, #2
 80048b2:	b487      	push	{r0, r1, r2, r7}
 80048b4:	1c21      	adds	r1, r4, #0
 80048b6:	f7fe fc5d 	bl	8003174 <asm_helprec_internal>
 80048ba:	bc87      	pop	{r0, r1, r2, r7}
 80048bc:	3004      	adds	r0, #4
 80048be:	3204      	adds	r2, #4
 80048c0:	2403      	movs	r4, #3
 80048c2:	403c      	ands	r4, r7
 80048c4:	08bf      	lsrs	r7, r7, #2
 80048c6:	b487      	push	{r0, r1, r2, r7}
 80048c8:	1c21      	adds	r1, r4, #0
 80048ca:	f7fe fc53 	bl	8003174 <asm_helprec_internal>
 80048ce:	bc87      	pop	{r0, r1, r2, r7}
 80048d0:	3004      	adds	r0, #4
 80048d2:	3204      	adds	r2, #4
 80048d4:	2403      	movs	r4, #3
 80048d6:	403c      	ands	r4, r7
 80048d8:	08bf      	lsrs	r7, r7, #2
 80048da:	b487      	push	{r0, r1, r2, r7}
 80048dc:	1c21      	adds	r1, r4, #0
 80048de:	f7fe fc49 	bl	8003174 <asm_helprec_internal>
 80048e2:	bc87      	pop	{r0, r1, r2, r7}
 80048e4:	3004      	adds	r0, #4
 80048e6:	3204      	adds	r2, #4
 80048e8:	2403      	movs	r4, #3
 80048ea:	403c      	ands	r4, r7
 80048ec:	08bf      	lsrs	r7, r7, #2
 80048ee:	b487      	push	{r0, r1, r2, r7}
 80048f0:	1c21      	adds	r1, r4, #0
 80048f2:	f7fe fc3f 	bl	8003174 <asm_helprec_internal>
 80048f6:	bc87      	pop	{r0, r1, r2, r7}
 80048f8:	3004      	adds	r0, #4
 80048fa:	3204      	adds	r2, #4
 80048fc:	2403      	movs	r4, #3
 80048fe:	403c      	ands	r4, r7
 8004900:	08bf      	lsrs	r7, r7, #2
 8004902:	b487      	push	{r0, r1, r2, r7}
 8004904:	1c21      	adds	r1, r4, #0
 8004906:	f7fe fc35 	bl	8003174 <asm_helprec_internal>
 800490a:	bc87      	pop	{r0, r1, r2, r7}
 800490c:	3004      	adds	r0, #4
 800490e:	3204      	adds	r2, #4
 8004910:	2403      	movs	r4, #3
 8004912:	403c      	ands	r4, r7
 8004914:	08bf      	lsrs	r7, r7, #2
 8004916:	b487      	push	{r0, r1, r2, r7}
 8004918:	1c21      	adds	r1, r4, #0
 800491a:	f7fe fc2b 	bl	8003174 <asm_helprec_internal>
 800491e:	bc87      	pop	{r0, r1, r2, r7}
 8004920:	3004      	adds	r0, #4
 8004922:	3204      	adds	r2, #4
 8004924:	2403      	movs	r4, #3
 8004926:	403c      	ands	r4, r7
 8004928:	08bf      	lsrs	r7, r7, #2
 800492a:	b487      	push	{r0, r1, r2, r7}
 800492c:	1c21      	adds	r1, r4, #0
 800492e:	f7fe fc21 	bl	8003174 <asm_helprec_internal>
 8004932:	bc87      	pop	{r0, r1, r2, r7}
 8004934:	3004      	adds	r0, #4
 8004936:	3204      	adds	r2, #4
 8004938:	2403      	movs	r4, #3
 800493a:	403c      	ands	r4, r7
 800493c:	08bf      	lsrs	r7, r7, #2
 800493e:	b487      	push	{r0, r1, r2, r7}
 8004940:	1c21      	adds	r1, r4, #0
 8004942:	f7fe fc17 	bl	8003174 <asm_helprec_internal>
 8004946:	bc87      	pop	{r0, r1, r2, r7}
 8004948:	3004      	adds	r0, #4
 800494a:	3204      	adds	r2, #4
 800494c:	2403      	movs	r4, #3
 800494e:	403c      	ands	r4, r7
 8004950:	08bf      	lsrs	r7, r7, #2
 8004952:	b487      	push	{r0, r1, r2, r7}
 8004954:	1c21      	adds	r1, r4, #0
 8004956:	f7fe fc0d 	bl	8003174 <asm_helprec_internal>
 800495a:	bc87      	pop	{r0, r1, r2, r7}
 800495c:	3004      	adds	r0, #4
 800495e:	3204      	adds	r2, #4
 8004960:	2403      	movs	r4, #3
 8004962:	403c      	ands	r4, r7
 8004964:	08bf      	lsrs	r7, r7, #2
 8004966:	b487      	push	{r0, r1, r2, r7}
 8004968:	1c21      	adds	r1, r4, #0
 800496a:	f7fe fc03 	bl	8003174 <asm_helprec_internal>
 800496e:	bc87      	pop	{r0, r1, r2, r7}
 8004970:	3004      	adds	r0, #4
 8004972:	3204      	adds	r2, #4
 8004974:	2403      	movs	r4, #3
 8004976:	403c      	ands	r4, r7
 8004978:	08bf      	lsrs	r7, r7, #2
 800497a:	b487      	push	{r0, r1, r2, r7}
 800497c:	1c21      	adds	r1, r4, #0
 800497e:	f7fe fbf9 	bl	8003174 <asm_helprec_internal>
 8004982:	bc87      	pop	{r0, r1, r2, r7}
 8004984:	3004      	adds	r0, #4
 8004986:	3204      	adds	r2, #4
 8004988:	2403      	movs	r4, #3
 800498a:	403c      	ands	r4, r7
 800498c:	08bf      	lsrs	r7, r7, #2
 800498e:	b487      	push	{r0, r1, r2, r7}
 8004990:	1c21      	adds	r1, r4, #0
 8004992:	f7fe fbef 	bl	8003174 <asm_helprec_internal>
 8004996:	bc87      	pop	{r0, r1, r2, r7}
 8004998:	3004      	adds	r0, #4
 800499a:	3204      	adds	r2, #4
 800499c:	2403      	movs	r4, #3
 800499e:	403c      	ands	r4, r7
 80049a0:	08bf      	lsrs	r7, r7, #2
 80049a2:	b487      	push	{r0, r1, r2, r7}
 80049a4:	1c21      	adds	r1, r4, #0
 80049a6:	f7fe fbe5 	bl	8003174 <asm_helprec_internal>
 80049aa:	bc87      	pop	{r0, r1, r2, r7}
 80049ac:	3004      	adds	r0, #4
 80049ae:	3204      	adds	r2, #4
    pop {r4-r7,pc}
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b2 <asm_rec>:

.global asm_rec   
.type asm_rec, %function

asm_rec:
    push {r4-r7,lr}
 80049b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80049b4:	4644      	mov	r4, r8
    push {r4}
 80049b6:	b410      	push	{r4}


    
        MOV r3,#3
 80049b8:	2303      	movs	r3, #3
    LSL r3,#16
 80049ba:	041b      	lsls	r3, r3, #16
    ADD r3,#16
 80049bc:	3310      	adds	r3, #16
    mov r8,r3
 80049be:	4698      	mov	r8, r3

    eor r4,r4
 80049c0:	4064      	eors	r4, r4
    eor r5,r5
 80049c2:	406d      	eors	r5, r5
    eor r6,r6
 80049c4:	4076      	eors	r6, r6
    eor r7,r7
 80049c6:	407f      	eors	r7, r7


    stm r0,{r4,r5,r6,r7}
 80049c8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    stm r0,{r4,r5,r6,r7}
 80049ca:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

    sub r0,#32
 80049cc:	3820      	subs	r0, #32


    eor r3,r3
 80049ce:	405b      	eors	r3, r3
    sub r0,#4
 80049d0:	3804      	subs	r0, #4


    setKey
 80049d2:	b401      	push	{r0}
 80049d4:	f7fe fd7c 	bl	80034d0 <asm_8bits_key>
 80049d8:	1c05      	adds	r5, r0, #0
 80049da:	bc01      	pop	{r0}
 80049dc:	2304      	movs	r3, #4
 80049de:	b421      	push	{r0, r5}
 80049e0:	f7fe fd76 	bl	80034d0 <asm_8bits_key>
 80049e4:	0204      	lsls	r4, r0, #8
 80049e6:	bc21      	pop	{r0, r5}
 80049e8:	4325      	orrs	r5, r4
 80049ea:	2304      	movs	r3, #4
 80049ec:	b421      	push	{r0, r5}
 80049ee:	f7fe fd6f 	bl	80034d0 <asm_8bits_key>
 80049f2:	0404      	lsls	r4, r0, #16
 80049f4:	bc21      	pop	{r0, r5}
 80049f6:	4325      	orrs	r5, r4
 80049f8:	2304      	movs	r3, #4
 80049fa:	b421      	push	{r0, r5}
 80049fc:	f7fe fd68 	bl	80034d0 <asm_8bits_key>
 8004a00:	0604      	lsls	r4, r0, #24
 8004a02:	bc21      	pop	{r0, r5}
 8004a04:	4325      	orrs	r5, r4
 8004a06:	3004      	adds	r0, #4
 8004a08:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004a0a:	2304      	movs	r3, #4
    setKey
 8004a0c:	b401      	push	{r0}
 8004a0e:	f7fe fd5f 	bl	80034d0 <asm_8bits_key>
 8004a12:	1c05      	adds	r5, r0, #0
 8004a14:	bc01      	pop	{r0}
 8004a16:	2304      	movs	r3, #4
 8004a18:	b421      	push	{r0, r5}
 8004a1a:	f7fe fd59 	bl	80034d0 <asm_8bits_key>
 8004a1e:	0204      	lsls	r4, r0, #8
 8004a20:	bc21      	pop	{r0, r5}
 8004a22:	4325      	orrs	r5, r4
 8004a24:	2304      	movs	r3, #4
 8004a26:	b421      	push	{r0, r5}
 8004a28:	f7fe fd52 	bl	80034d0 <asm_8bits_key>
 8004a2c:	0404      	lsls	r4, r0, #16
 8004a2e:	bc21      	pop	{r0, r5}
 8004a30:	4325      	orrs	r5, r4
 8004a32:	2304      	movs	r3, #4
 8004a34:	b421      	push	{r0, r5}
 8004a36:	f7fe fd4b 	bl	80034d0 <asm_8bits_key>
 8004a3a:	0604      	lsls	r4, r0, #24
 8004a3c:	bc21      	pop	{r0, r5}
 8004a3e:	4325      	orrs	r5, r4
 8004a40:	3004      	adds	r0, #4
 8004a42:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004a44:	2304      	movs	r3, #4
    setKey
 8004a46:	b401      	push	{r0}
 8004a48:	f7fe fd42 	bl	80034d0 <asm_8bits_key>
 8004a4c:	1c05      	adds	r5, r0, #0
 8004a4e:	bc01      	pop	{r0}
 8004a50:	2304      	movs	r3, #4
 8004a52:	b421      	push	{r0, r5}
 8004a54:	f7fe fd3c 	bl	80034d0 <asm_8bits_key>
 8004a58:	0204      	lsls	r4, r0, #8
 8004a5a:	bc21      	pop	{r0, r5}
 8004a5c:	4325      	orrs	r5, r4
 8004a5e:	2304      	movs	r3, #4
 8004a60:	b421      	push	{r0, r5}
 8004a62:	f7fe fd35 	bl	80034d0 <asm_8bits_key>
 8004a66:	0404      	lsls	r4, r0, #16
 8004a68:	bc21      	pop	{r0, r5}
 8004a6a:	4325      	orrs	r5, r4
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	b421      	push	{r0, r5}
 8004a70:	f7fe fd2e 	bl	80034d0 <asm_8bits_key>
 8004a74:	0604      	lsls	r4, r0, #24
 8004a76:	bc21      	pop	{r0, r5}
 8004a78:	4325      	orrs	r5, r4
 8004a7a:	3004      	adds	r0, #4
 8004a7c:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004a7e:	2304      	movs	r3, #4
    setKey
 8004a80:	b401      	push	{r0}
 8004a82:	f7fe fd25 	bl	80034d0 <asm_8bits_key>
 8004a86:	1c05      	adds	r5, r0, #0
 8004a88:	bc01      	pop	{r0}
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	b421      	push	{r0, r5}
 8004a8e:	f7fe fd1f 	bl	80034d0 <asm_8bits_key>
 8004a92:	0204      	lsls	r4, r0, #8
 8004a94:	bc21      	pop	{r0, r5}
 8004a96:	4325      	orrs	r5, r4
 8004a98:	2304      	movs	r3, #4
 8004a9a:	b421      	push	{r0, r5}
 8004a9c:	f7fe fd18 	bl	80034d0 <asm_8bits_key>
 8004aa0:	0404      	lsls	r4, r0, #16
 8004aa2:	bc21      	pop	{r0, r5}
 8004aa4:	4325      	orrs	r5, r4
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	b421      	push	{r0, r5}
 8004aaa:	f7fe fd11 	bl	80034d0 <asm_8bits_key>
 8004aae:	0604      	lsls	r4, r0, #24
 8004ab0:	bc21      	pop	{r0, r5}
 8004ab2:	4325      	orrs	r5, r4
 8004ab4:	3004      	adds	r0, #4
 8004ab6:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004ab8:	2304      	movs	r3, #4
    setKey
 8004aba:	b401      	push	{r0}
 8004abc:	f7fe fd08 	bl	80034d0 <asm_8bits_key>
 8004ac0:	1c05      	adds	r5, r0, #0
 8004ac2:	bc01      	pop	{r0}
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	b421      	push	{r0, r5}
 8004ac8:	f7fe fd02 	bl	80034d0 <asm_8bits_key>
 8004acc:	0204      	lsls	r4, r0, #8
 8004ace:	bc21      	pop	{r0, r5}
 8004ad0:	4325      	orrs	r5, r4
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	b421      	push	{r0, r5}
 8004ad6:	f7fe fcfb 	bl	80034d0 <asm_8bits_key>
 8004ada:	0404      	lsls	r4, r0, #16
 8004adc:	bc21      	pop	{r0, r5}
 8004ade:	4325      	orrs	r5, r4
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	b421      	push	{r0, r5}
 8004ae4:	f7fe fcf4 	bl	80034d0 <asm_8bits_key>
 8004ae8:	0604      	lsls	r4, r0, #24
 8004aea:	bc21      	pop	{r0, r5}
 8004aec:	4325      	orrs	r5, r4
 8004aee:	3004      	adds	r0, #4
 8004af0:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004af2:	2304      	movs	r3, #4
    setKey
 8004af4:	b401      	push	{r0}
 8004af6:	f7fe fceb 	bl	80034d0 <asm_8bits_key>
 8004afa:	1c05      	adds	r5, r0, #0
 8004afc:	bc01      	pop	{r0}
 8004afe:	2304      	movs	r3, #4
 8004b00:	b421      	push	{r0, r5}
 8004b02:	f7fe fce5 	bl	80034d0 <asm_8bits_key>
 8004b06:	0204      	lsls	r4, r0, #8
 8004b08:	bc21      	pop	{r0, r5}
 8004b0a:	4325      	orrs	r5, r4
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	b421      	push	{r0, r5}
 8004b10:	f7fe fcde 	bl	80034d0 <asm_8bits_key>
 8004b14:	0404      	lsls	r4, r0, #16
 8004b16:	bc21      	pop	{r0, r5}
 8004b18:	4325      	orrs	r5, r4
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	b421      	push	{r0, r5}
 8004b1e:	f7fe fcd7 	bl	80034d0 <asm_8bits_key>
 8004b22:	0604      	lsls	r4, r0, #24
 8004b24:	bc21      	pop	{r0, r5}
 8004b26:	4325      	orrs	r5, r4
 8004b28:	3004      	adds	r0, #4
 8004b2a:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004b2c:	2304      	movs	r3, #4
    setKey
 8004b2e:	b401      	push	{r0}
 8004b30:	f7fe fcce 	bl	80034d0 <asm_8bits_key>
 8004b34:	1c05      	adds	r5, r0, #0
 8004b36:	bc01      	pop	{r0}
 8004b38:	2304      	movs	r3, #4
 8004b3a:	b421      	push	{r0, r5}
 8004b3c:	f7fe fcc8 	bl	80034d0 <asm_8bits_key>
 8004b40:	0204      	lsls	r4, r0, #8
 8004b42:	bc21      	pop	{r0, r5}
 8004b44:	4325      	orrs	r5, r4
 8004b46:	2304      	movs	r3, #4
 8004b48:	b421      	push	{r0, r5}
 8004b4a:	f7fe fcc1 	bl	80034d0 <asm_8bits_key>
 8004b4e:	0404      	lsls	r4, r0, #16
 8004b50:	bc21      	pop	{r0, r5}
 8004b52:	4325      	orrs	r5, r4
 8004b54:	2304      	movs	r3, #4
 8004b56:	b421      	push	{r0, r5}
 8004b58:	f7fe fcba 	bl	80034d0 <asm_8bits_key>
 8004b5c:	0604      	lsls	r4, r0, #24
 8004b5e:	bc21      	pop	{r0, r5}
 8004b60:	4325      	orrs	r5, r4
 8004b62:	3004      	adds	r0, #4
 8004b64:	6005      	str	r5, [r0, #0]
    mov r3,#4
 8004b66:	2304      	movs	r3, #4
    setKey
 8004b68:	b401      	push	{r0}
 8004b6a:	f7fe fcb1 	bl	80034d0 <asm_8bits_key>
 8004b6e:	1c05      	adds	r5, r0, #0
 8004b70:	bc01      	pop	{r0}
 8004b72:	2304      	movs	r3, #4
 8004b74:	b421      	push	{r0, r5}
 8004b76:	f7fe fcab 	bl	80034d0 <asm_8bits_key>
 8004b7a:	0204      	lsls	r4, r0, #8
 8004b7c:	bc21      	pop	{r0, r5}
 8004b7e:	4325      	orrs	r5, r4
 8004b80:	2304      	movs	r3, #4
 8004b82:	b421      	push	{r0, r5}
 8004b84:	f7fe fca4 	bl	80034d0 <asm_8bits_key>
 8004b88:	0404      	lsls	r4, r0, #16
 8004b8a:	bc21      	pop	{r0, r5}
 8004b8c:	4325      	orrs	r5, r4
 8004b8e:	2304      	movs	r3, #4
 8004b90:	b421      	push	{r0, r5}
 8004b92:	f7fe fc9d 	bl	80034d0 <asm_8bits_key>
 8004b96:	0604      	lsls	r4, r0, #24
 8004b98:	bc21      	pop	{r0, r5}
 8004b9a:	4325      	orrs	r5, r4
 8004b9c:	3004      	adds	r0, #4
 8004b9e:	6005      	str	r5, [r0, #0]


    pop {r4}
 8004ba0:	bc10      	pop	{r4}
    mov r8,r4
 8004ba2:	46a0      	mov	r8, r4
    pop {r4-r7,pc} 
 8004ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba6:	bf00      	nop

08004ba8 <asm_ntt>:
@
.align 2    
.global	asm_ntt
.type	asm_ntt, %function
asm_ntt:
	push {r4-r7,lr}
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8004baa:	4644      	mov	r4, r8
    mov r5,r9
 8004bac:	464d      	mov	r5, r9
    mov r6,r10
 8004bae:	4656      	mov	r6, sl
    mov r7,r11
 8004bb0:	465f      	mov	r7, fp
    push {r4-r7}
 8004bb2:	b4f0      	push	{r4, r5, r6, r7}
    mov r4,r12
 8004bb4:	4664      	mov	r4, ip
    mov r5,r14
 8004bb6:	4675      	mov	r5, lr
    push {r4,r5}
 8004bb8:	b430      	push	{r4, r5}


    MOV r4,#3
 8004bba:	2403      	movs	r4, #3
    LSL r4,#12
 8004bbc:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 8004bbe:	3401      	adds	r4, #1
	MOV r14,r4
 8004bc0:	46a6      	mov	lr, r4
    LSL r3,r4,#2
 8004bc2:	00a3      	lsls	r3, r4, #2
    ADD r4,r3
 8004bc4:	18e4      	adds	r4, r4, r3
	MOV r8,r4
 8004bc6:	46a0      	mov	r8, r4
    MOV r4,#1
 8004bc8:	2401      	movs	r4, #1
    LSL r4,#18
 8004bca:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 8004bcc:	3c01      	subs	r4, #1
	MOV r10,r4
 8004bce:	46a2      	mov	sl, r4


	MOV r9,r1
 8004bd0:	4689      	mov	r9, r1
		

	MOV r4,#1
 8004bd2:	2401      	movs	r4, #1
    LSL  r4,#9
 8004bd4:	0264      	lsls	r4, r4, #9
        
	ADD r1,r4
 8004bd6:	1909      	adds	r1, r1, r4

	LSL r4,#2
 8004bd8:	00a4      	lsls	r4, r4, #2

    ADD r0,r4
 8004bda:	1900      	adds	r0, r0, r4

08004bdc <nttloop>:
	



nttloop:
    SUB r1,#2
 8004bdc:	3902      	subs	r1, #2
	SUB r0,#8
 8004bde:	3808      	subs	r0, #8
	

	doublefly 
 8004be0:	6804      	ldr	r4, [r0, #0]
 8004be2:	b2a3      	uxth	r3, r4
 8004be4:	0c24      	lsrs	r4, r4, #16
 8004be6:	1c1a      	adds	r2, r3, #0
 8004be8:	191b      	adds	r3, r3, r4
 8004bea:	469c      	mov	ip, r3
 8004bec:	4442      	add	r2, r8
 8004bee:	1b12      	subs	r2, r2, r4
 8004bf0:	464d      	mov	r5, r9
 8004bf2:	1b4f      	subs	r7, r1, r5
 8004bf4:	007f      	lsls	r7, r7, #1
 8004bf6:	19ed      	adds	r5, r5, r7
 8004bf8:	682f      	ldr	r7, [r5, #0]
 8004bfa:	b2bd      	uxth	r5, r7
 8004bfc:	0c3f      	lsrs	r7, r7, #16
 8004bfe:	436a      	muls	r2, r5
 8004c00:	4654      	mov	r4, sl
 8004c02:	4673      	mov	r3, lr
 8004c04:	1e9e      	subs	r6, r3, #2
 8004c06:	4356      	muls	r6, r2
 8004c08:	4026      	ands	r6, r4
 8004c0a:	435e      	muls	r6, r3
 8004c0c:	1992      	adds	r2, r2, r6
 8004c0e:	0c92      	lsrs	r2, r2, #18
 8004c10:	4693      	mov	fp, r2
 8004c12:	6846      	ldr	r6, [r0, #4]
 8004c14:	b2b5      	uxth	r5, r6
 8004c16:	0c36      	lsrs	r6, r6, #16
 8004c18:	1c2a      	adds	r2, r5, #0
 8004c1a:	19ad      	adds	r5, r5, r6
 8004c1c:	4442      	add	r2, r8
 8004c1e:	1b96      	subs	r6, r2, r6
 8004c20:	437e      	muls	r6, r7
 8004c22:	1e9f      	subs	r7, r3, #2
 8004c24:	4377      	muls	r7, r6
 8004c26:	4027      	ands	r7, r4
 8004c28:	435f      	muls	r7, r3
 8004c2a:	19f6      	adds	r6, r6, r7
 8004c2c:	0cb6      	lsrs	r6, r6, #18
 8004c2e:	1c1f      	adds	r7, r3, #0
 8004c30:	465c      	mov	r4, fp
 8004c32:	4663      	mov	r3, ip
 8004c34:	195b      	adds	r3, r3, r5
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	18d2      	adds	r2, r2, r3
 8004c3a:	0c12      	lsrs	r2, r2, #16
 8004c3c:	437a      	muls	r2, r7
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	19a4      	adds	r4, r4, r6
 8004c42:	00a2      	lsls	r2, r4, #2
 8004c44:	1912      	adds	r2, r2, r4
 8004c46:	0c12      	lsrs	r2, r2, #16
 8004c48:	437a      	muls	r2, r7
 8004c4a:	1aa4      	subs	r4, r4, r2
 8004c4c:	0424      	lsls	r4, r4, #16
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	6003      	str	r3, [r0, #0]
 8004c52:	4663      	mov	r3, ip
 8004c54:	4443      	add	r3, r8
 8004c56:	1b5b      	subs	r3, r3, r5
 8004c58:	880a      	ldrh	r2, [r1, #0]
 8004c5a:	4353      	muls	r3, r2
 8004c5c:	4655      	mov	r5, sl
 8004c5e:	1ebc      	subs	r4, r7, #2
 8004c60:	435c      	muls	r4, r3
 8004c62:	402c      	ands	r4, r5
 8004c64:	437c      	muls	r4, r7
 8004c66:	191b      	adds	r3, r3, r4
 8004c68:	0c9b      	lsrs	r3, r3, #18
 8004c6a:	465c      	mov	r4, fp
 8004c6c:	4444      	add	r4, r8
 8004c6e:	1ba4      	subs	r4, r4, r6
 8004c70:	4354      	muls	r4, r2
 8004c72:	1eba      	subs	r2, r7, #2
 8004c74:	4362      	muls	r2, r4
 8004c76:	402a      	ands	r2, r5
 8004c78:	437a      	muls	r2, r7
 8004c7a:	18a4      	adds	r4, r4, r2
 8004c7c:	0ca4      	lsrs	r4, r4, #18
 8004c7e:	0424      	lsls	r4, r4, #16
 8004c80:	4323      	orrs	r3, r4
 8004c82:	6043      	str	r3, [r0, #4]


	CMP r1,r9
 8004c84:	4549      	cmp	r1, r9
	BGT nttloop
 8004c86:	dca9      	bgt.n	8004bdc <nttloop>


    
		
    MOV r7,#0
 8004c88:	2700      	movs	r7, #0
	MOV r12,r7
 8004c8a:	46bc      	mov	ip, r7

08004c8c <outll2>:

outll2:
    MOV r4,#1
 8004c8c:	2401      	movs	r4, #1
    LSL r4,#8
 8004c8e:	0224      	lsls	r4, r4, #8
	ADD r1,r4
 8004c90:	1909      	adds	r1, r1, r4

	LSL r4,#3 
 8004c92:	00e4      	lsls	r4, r4, #3
		
	ADD r4,r12
 8004c94:	4464      	add	r4, ip
	ADD r0,r4
 8004c96:	1900      	adds	r0, r0, r4

08004c98 <l2loop>:

 

l2loop:

    SUB r1,#2
 8004c98:	3902      	subs	r1, #2
	SUB r0,#16	
 8004c9a:	3810      	subs	r0, #16
	

	LDR r4,[r0]	
 8004c9c:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8004c9e:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8004ca0:	0c24      	lsrs	r4, r4, #16
	LDR r6,[r0,#8]
 8004ca2:	6886      	ldr	r6, [r0, #8]
	UXTH r5,r6
 8004ca4:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8004ca6:	0c36      	lsrs	r6, r6, #16


	MOV r2,r3
 8004ca8:	1c1a      	adds	r2, r3, #0
	MOV r11,r4
 8004caa:	46a3      	mov	fp, r4


	ADD r2,r5
 8004cac:	1952      	adds	r2, r2, r5

	ADD r4,r6		
 8004cae:	19a4      	adds	r4, r4, r6



	LSL r4,#16
 8004cb0:	0424      	lsls	r4, r4, #16
	ORR r2,r4
 8004cb2:	4322      	orrs	r2, r4
	STR r2,[r0]
 8004cb4:	6002      	str	r2, [r0, #0]


	ADD r3,r8
 8004cb6:	4443      	add	r3, r8

	SUB r3,r5
 8004cb8:	1b5b      	subs	r3, r3, r5


	LDRH r2,[r1]
 8004cba:	880a      	ldrh	r2, [r1, #0]

	MUL r3,r2
 8004cbc:	4353      	muls	r3, r2


	MOV r7,r10
 8004cbe:	4657      	mov	r7, sl
    MOV r5,r14
 8004cc0:	4675      	mov	r5, lr


    montgomery r4,r5,r7,r3
 8004cc2:	1eac      	subs	r4, r5, #2
 8004cc4:	435c      	muls	r4, r3
 8004cc6:	403c      	ands	r4, r7
 8004cc8:	436c      	muls	r4, r5
 8004cca:	191b      	adds	r3, r3, r4
 8004ccc:	0c9b      	lsrs	r3, r3, #18


	MOV r4,r11
 8004cce:	465c      	mov	r4, fp

	ADD r4,r8
 8004cd0:	4444      	add	r4, r8

	SUB r4,r6
 8004cd2:	1ba4      	subs	r4, r4, r6

	MUL r4,r2
 8004cd4:	4354      	muls	r4, r2


    montgomery r2,r5,r7,r4
 8004cd6:	1eaa      	subs	r2, r5, #2
 8004cd8:	4362      	muls	r2, r4
 8004cda:	403a      	ands	r2, r7
 8004cdc:	436a      	muls	r2, r5
 8004cde:	18a4      	adds	r4, r4, r2
 8004ce0:	0ca4      	lsrs	r4, r4, #18

	LSL r4,#16
 8004ce2:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004ce4:	4323      	orrs	r3, r4
	STR r3,[r0,#8] 
 8004ce6:	6083      	str	r3, [r0, #8]


	CMP r1,r9
 8004ce8:	4549      	cmp	r1, r9
	BGT l2loop
 8004cea:	dcd5      	bgt.n	8004c98 <l2loop>


	MOV r5,r12
 8004cec:	4665      	mov	r5, ip
	SUB r0,r5
 8004cee:	1b40      	subs	r0, r0, r5
	ADD r5,#4
 8004cf0:	3504      	adds	r5, #4
	MOV r12,r5
 8004cf2:	46ac      	mov	ip, r5


	CMP r5,#4	
 8004cf4:	2d04      	cmp	r5, #4
	BLE outll2
 8004cf6:	ddc9      	ble.n	8004c8c <outll2>


    nop
 8004cf8:	46c0      	nop			; (mov r8, r8)

        	
    MOV r7,#0
 8004cfa:	2700      	movs	r7, #0
	MOV r10,r7
 8004cfc:	46ba      	mov	sl, r7

08004cfe <outll3>:

outll3:

	MOV r4,#128
 8004cfe:	2480      	movs	r4, #128	; 0x80
    ADD r1,r4
 8004d00:	1909      	adds	r1, r1, r4

    LSL r4,#4
 8004d02:	0124      	lsls	r4, r4, #4
    ADD r4,r10
 8004d04:	4454      	add	r4, sl
    ADD r0,r4
 8004d06:	1900      	adds	r0, r0, r4

08004d08 <l3loop>:

	

l3loop:

    SUB r1,#2
 8004d08:	3902      	subs	r1, #2
	SUB r0,#32	
 8004d0a:	3820      	subs	r0, #32
	

    butterfly #16
 8004d0c:	6804      	ldr	r4, [r0, #0]
 8004d0e:	b2a3      	uxth	r3, r4
 8004d10:	0c24      	lsrs	r4, r4, #16
 8004d12:	6906      	ldr	r6, [r0, #16]
 8004d14:	b2b5      	uxth	r5, r6
 8004d16:	0c36      	lsrs	r6, r6, #16
 8004d18:	469c      	mov	ip, r3
 8004d1a:	46a3      	mov	fp, r4
 8004d1c:	195b      	adds	r3, r3, r5
 8004d1e:	4677      	mov	r7, lr
 8004d20:	009a      	lsls	r2, r3, #2
 8004d22:	18d2      	adds	r2, r2, r3
 8004d24:	0c12      	lsrs	r2, r2, #16
 8004d26:	437a      	muls	r2, r7
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	19a4      	adds	r4, r4, r6
 8004d2c:	00a2      	lsls	r2, r4, #2
 8004d2e:	1912      	adds	r2, r2, r4
 8004d30:	0c12      	lsrs	r2, r2, #16
 8004d32:	437a      	muls	r2, r7
 8004d34:	1aa4      	subs	r4, r4, r2
 8004d36:	0424      	lsls	r4, r4, #16
 8004d38:	4323      	orrs	r3, r4
 8004d3a:	6003      	str	r3, [r0, #0]
 8004d3c:	4663      	mov	r3, ip
 8004d3e:	4443      	add	r3, r8
 8004d40:	1b5b      	subs	r3, r3, r5
 8004d42:	880a      	ldrh	r2, [r1, #0]
 8004d44:	4353      	muls	r3, r2
 8004d46:	2501      	movs	r5, #1
 8004d48:	04ad      	lsls	r5, r5, #18
 8004d4a:	3d01      	subs	r5, #1
 8004d4c:	1ebc      	subs	r4, r7, #2
 8004d4e:	435c      	muls	r4, r3
 8004d50:	402c      	ands	r4, r5
 8004d52:	437c      	muls	r4, r7
 8004d54:	191b      	adds	r3, r3, r4
 8004d56:	0c9b      	lsrs	r3, r3, #18
 8004d58:	465c      	mov	r4, fp
 8004d5a:	4444      	add	r4, r8
 8004d5c:	1ba4      	subs	r4, r4, r6
 8004d5e:	4354      	muls	r4, r2
 8004d60:	1eba      	subs	r2, r7, #2
 8004d62:	4362      	muls	r2, r4
 8004d64:	402a      	ands	r2, r5
 8004d66:	437a      	muls	r2, r7
 8004d68:	18a4      	adds	r4, r4, r2
 8004d6a:	0ca4      	lsrs	r4, r4, #18
 8004d6c:	0424      	lsls	r4, r4, #16
 8004d6e:	4323      	orrs	r3, r4
 8004d70:	6103      	str	r3, [r0, #16]
	

	CMP r1,r9
 8004d72:	4549      	cmp	r1, r9
	BGT l3loop
 8004d74:	dcc8      	bgt.n	8004d08 <l3loop>

    MOV r3,r10
 8004d76:	4653      	mov	r3, sl
	SUB r0,r3
 8004d78:	1ac0      	subs	r0, r0, r3
	ADD r3,#4
 8004d7a:	3304      	adds	r3, #4
	MOV r10,r3
 8004d7c:	469a      	mov	sl, r3

	CMP r3,#12
 8004d7e:	2b0c      	cmp	r3, #12
	BLE outll3
 8004d80:	ddbd      	ble.n	8004cfe <outll3>

    MOV r12,r5
 8004d82:	46ac      	mov	ip, r5


	nop
 8004d84:	46c0      	nop			; (mov r8, r8)
    
		
    MOV r7,#0
 8004d86:	2700      	movs	r7, #0
	MOV r10,r7
 8004d88:	46ba      	mov	sl, r7

08004d8a <outll4>:

outll4:
	MOV r4,#64 
 8004d8a:	2440      	movs	r4, #64	; 0x40
	ADD r1,r4
 8004d8c:	1909      	adds	r1, r1, r4

	LSL r4,#5 
 8004d8e:	0164      	lsls	r4, r4, #5
		
	ADD r4,r10
 8004d90:	4454      	add	r4, sl
	ADD r0,r4
 8004d92:	1900      	adds	r0, r0, r4

08004d94 <l4loop>:

 

l4loop:

    SUB r1,#2
 8004d94:	3902      	subs	r1, #2
	SUB r0,#64	
 8004d96:	3840      	subs	r0, #64	; 0x40
	
    lazy_butterfly #32
 8004d98:	6804      	ldr	r4, [r0, #0]
 8004d9a:	b2a3      	uxth	r3, r4
 8004d9c:	0c24      	lsrs	r4, r4, #16
 8004d9e:	2520      	movs	r5, #32
 8004da0:	5946      	ldr	r6, [r0, r5]
 8004da2:	b2b5      	uxth	r5, r6
 8004da4:	0c36      	lsrs	r6, r6, #16
 8004da6:	1c1a      	adds	r2, r3, #0
 8004da8:	46a3      	mov	fp, r4
 8004daa:	1952      	adds	r2, r2, r5
 8004dac:	19a4      	adds	r4, r4, r6
 8004dae:	0424      	lsls	r4, r4, #16
 8004db0:	4322      	orrs	r2, r4
 8004db2:	6002      	str	r2, [r0, #0]
 8004db4:	4443      	add	r3, r8
 8004db6:	1b5b      	subs	r3, r3, r5
 8004db8:	880a      	ldrh	r2, [r1, #0]
 8004dba:	4353      	muls	r3, r2
 8004dbc:	4667      	mov	r7, ip
 8004dbe:	4675      	mov	r5, lr
 8004dc0:	1eac      	subs	r4, r5, #2
 8004dc2:	435c      	muls	r4, r3
 8004dc4:	403c      	ands	r4, r7
 8004dc6:	436c      	muls	r4, r5
 8004dc8:	191b      	adds	r3, r3, r4
 8004dca:	0c9b      	lsrs	r3, r3, #18
 8004dcc:	465c      	mov	r4, fp
 8004dce:	4444      	add	r4, r8
 8004dd0:	1ba4      	subs	r4, r4, r6
 8004dd2:	4354      	muls	r4, r2
 8004dd4:	1eaa      	subs	r2, r5, #2
 8004dd6:	4362      	muls	r2, r4
 8004dd8:	403a      	ands	r2, r7
 8004dda:	436a      	muls	r2, r5
 8004ddc:	18a4      	adds	r4, r4, r2
 8004dde:	0ca4      	lsrs	r4, r4, #18
 8004de0:	2520      	movs	r5, #32
 8004de2:	0424      	lsls	r4, r4, #16
 8004de4:	4323      	orrs	r3, r4
 8004de6:	5143      	str	r3, [r0, r5]
	CMP r1,r9
 8004de8:	4549      	cmp	r1, r9
	BGT l4loop
 8004dea:	dcd3      	bgt.n	8004d94 <l4loop>


	MOV r5,r10
 8004dec:	4655      	mov	r5, sl
	SUB r0,r5
 8004dee:	1b40      	subs	r0, r0, r5
	ADD r5,#4
 8004df0:	3504      	adds	r5, #4
	MOV r10,r5
 8004df2:	46aa      	mov	sl, r5


	CMP r5,#28	
 8004df4:	2d1c      	cmp	r5, #28
	BLE outll4
 8004df6:	ddc8      	ble.n	8004d8a <outll4>




	nop
 8004df8:	46c0      	nop			; (mov r8, r8)
		
        MOV r7,#0
 8004dfa:	2700      	movs	r7, #0
	MOV r10,r7
 8004dfc:	46ba      	mov	sl, r7

08004dfe <outll5>:

outll5:
	MOV r4,#32
 8004dfe:	2420      	movs	r4, #32
	ADD r1,r4
 8004e00:	1909      	adds	r1, r1, r4

	LSL r4,#6
 8004e02:	01a4      	lsls	r4, r4, #6
		
	
	ADD r4,r10
 8004e04:	4454      	add	r4, sl
	ADD r0,r4
 8004e06:	1900      	adds	r0, r0, r4

08004e08 <l5loop>:



l5loop:
    SUB r1,#2
 8004e08:	3902      	subs	r1, #2
	SUB r0,#128	
 8004e0a:	3880      	subs	r0, #128	; 0x80

    butterfly #64
 8004e0c:	6804      	ldr	r4, [r0, #0]
 8004e0e:	b2a3      	uxth	r3, r4
 8004e10:	0c24      	lsrs	r4, r4, #16
 8004e12:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004e14:	b2b5      	uxth	r5, r6
 8004e16:	0c36      	lsrs	r6, r6, #16
 8004e18:	469c      	mov	ip, r3
 8004e1a:	46a3      	mov	fp, r4
 8004e1c:	195b      	adds	r3, r3, r5
 8004e1e:	4677      	mov	r7, lr
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	18d2      	adds	r2, r2, r3
 8004e24:	0c12      	lsrs	r2, r2, #16
 8004e26:	437a      	muls	r2, r7
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	19a4      	adds	r4, r4, r6
 8004e2c:	00a2      	lsls	r2, r4, #2
 8004e2e:	1912      	adds	r2, r2, r4
 8004e30:	0c12      	lsrs	r2, r2, #16
 8004e32:	437a      	muls	r2, r7
 8004e34:	1aa4      	subs	r4, r4, r2
 8004e36:	0424      	lsls	r4, r4, #16
 8004e38:	4323      	orrs	r3, r4
 8004e3a:	6003      	str	r3, [r0, #0]
 8004e3c:	4663      	mov	r3, ip
 8004e3e:	4443      	add	r3, r8
 8004e40:	1b5b      	subs	r3, r3, r5
 8004e42:	880a      	ldrh	r2, [r1, #0]
 8004e44:	4353      	muls	r3, r2
 8004e46:	2501      	movs	r5, #1
 8004e48:	04ad      	lsls	r5, r5, #18
 8004e4a:	3d01      	subs	r5, #1
 8004e4c:	1ebc      	subs	r4, r7, #2
 8004e4e:	435c      	muls	r4, r3
 8004e50:	402c      	ands	r4, r5
 8004e52:	437c      	muls	r4, r7
 8004e54:	191b      	adds	r3, r3, r4
 8004e56:	0c9b      	lsrs	r3, r3, #18
 8004e58:	465c      	mov	r4, fp
 8004e5a:	4444      	add	r4, r8
 8004e5c:	1ba4      	subs	r4, r4, r6
 8004e5e:	4354      	muls	r4, r2
 8004e60:	1eba      	subs	r2, r7, #2
 8004e62:	4362      	muls	r2, r4
 8004e64:	402a      	ands	r2, r5
 8004e66:	437a      	muls	r2, r7
 8004e68:	18a4      	adds	r4, r4, r2
 8004e6a:	0ca4      	lsrs	r4, r4, #18
 8004e6c:	0424      	lsls	r4, r4, #16
 8004e6e:	4323      	orrs	r3, r4
 8004e70:	6403      	str	r3, [r0, #64]	; 0x40


	CMP r1,r9
 8004e72:	4549      	cmp	r1, r9
	BGT l5loop
 8004e74:	dcc8      	bgt.n	8004e08 <l5loop>


	MOV r3,r10
 8004e76:	4653      	mov	r3, sl
	SUB r0,r3
 8004e78:	1ac0      	subs	r0, r0, r3
	ADD r3,#4
 8004e7a:	3304      	adds	r3, #4
	MOV r10,r3
 8004e7c:	469a      	mov	sl, r3


	CMP r3,#60
 8004e7e:	2b3c      	cmp	r3, #60	; 0x3c
	BLE outll5
 8004e80:	ddbd      	ble.n	8004dfe <outll5>


    MOV r12,r5
 8004e82:	46ac      	mov	ip, r5

	nop
 8004e84:	46c0      	nop			; (mov r8, r8)
		
    MOV r7,#0
 8004e86:	2700      	movs	r7, #0
	MOV r10,r7
 8004e88:	46ba      	mov	sl, r7

08004e8a <outll6>:

outll6:
	MOV r4,#16 
 8004e8a:	2410      	movs	r4, #16
	ADD r1,r4
 8004e8c:	1909      	adds	r1, r1, r4

	LSL r4,#7 
 8004e8e:	01e4      	lsls	r4, r4, #7
		
	ADD r4,r10
 8004e90:	4454      	add	r4, sl
	ADD r0,r4
 8004e92:	1900      	adds	r0, r0, r4

08004e94 <l6loop>:

 

l6loop:

	SUB r1,#2
 8004e94:	3902      	subs	r1, #2
    MOV r5,#128
 8004e96:	2580      	movs	r5, #128	; 0x80
    LSL r6,r5,#1
 8004e98:	006e      	lsls	r6, r5, #1
	SUB r0,r6	
 8004e9a:	1b80      	subs	r0, r0, r6
	
    lazy_butterfly #128
 8004e9c:	6804      	ldr	r4, [r0, #0]
 8004e9e:	b2a3      	uxth	r3, r4
 8004ea0:	0c24      	lsrs	r4, r4, #16
 8004ea2:	2580      	movs	r5, #128	; 0x80
 8004ea4:	5946      	ldr	r6, [r0, r5]
 8004ea6:	b2b5      	uxth	r5, r6
 8004ea8:	0c36      	lsrs	r6, r6, #16
 8004eaa:	1c1a      	adds	r2, r3, #0
 8004eac:	46a3      	mov	fp, r4
 8004eae:	1952      	adds	r2, r2, r5
 8004eb0:	19a4      	adds	r4, r4, r6
 8004eb2:	0424      	lsls	r4, r4, #16
 8004eb4:	4322      	orrs	r2, r4
 8004eb6:	6002      	str	r2, [r0, #0]
 8004eb8:	4443      	add	r3, r8
 8004eba:	1b5b      	subs	r3, r3, r5
 8004ebc:	880a      	ldrh	r2, [r1, #0]
 8004ebe:	4353      	muls	r3, r2
 8004ec0:	4667      	mov	r7, ip
 8004ec2:	4675      	mov	r5, lr
 8004ec4:	1eac      	subs	r4, r5, #2
 8004ec6:	435c      	muls	r4, r3
 8004ec8:	403c      	ands	r4, r7
 8004eca:	436c      	muls	r4, r5
 8004ecc:	191b      	adds	r3, r3, r4
 8004ece:	0c9b      	lsrs	r3, r3, #18
 8004ed0:	465c      	mov	r4, fp
 8004ed2:	4444      	add	r4, r8
 8004ed4:	1ba4      	subs	r4, r4, r6
 8004ed6:	4354      	muls	r4, r2
 8004ed8:	1eaa      	subs	r2, r5, #2
 8004eda:	4362      	muls	r2, r4
 8004edc:	403a      	ands	r2, r7
 8004ede:	436a      	muls	r2, r5
 8004ee0:	18a4      	adds	r4, r4, r2
 8004ee2:	0ca4      	lsrs	r4, r4, #18
 8004ee4:	2580      	movs	r5, #128	; 0x80
 8004ee6:	0424      	lsls	r4, r4, #16
 8004ee8:	4323      	orrs	r3, r4
 8004eea:	5143      	str	r3, [r0, r5]
    

	CMP r1,r9
 8004eec:	4549      	cmp	r1, r9
	BGT l6loop
 8004eee:	dcd1      	bgt.n	8004e94 <l6loop>


	MOV r7,r10
 8004ef0:	4657      	mov	r7, sl
	SUB r0,r7
 8004ef2:	1bc0      	subs	r0, r0, r7
	ADD r7,#4
 8004ef4:	3704      	adds	r7, #4
	MOV r10,r7
 8004ef6:	46ba      	mov	sl, r7


	CMP r7,#124	
 8004ef8:	2f7c      	cmp	r7, #124	; 0x7c
	BLE outll6
 8004efa:	ddc6      	ble.n	8004e8a <outll6>


		
    MOV r7,#0
 8004efc:	2700      	movs	r7, #0
	MOV r10,r7
 8004efe:	46ba      	mov	sl, r7

08004f00 <outll7>:

outll7:
	MOV r4,#8
 8004f00:	2408      	movs	r4, #8
	ADD r1,r4
 8004f02:	1909      	adds	r1, r1, r4

	LSL r4,#8
 8004f04:	0224      	lsls	r4, r4, #8
		
	
	ADD r4,r10
 8004f06:	4454      	add	r4, sl
	ADD r0,r4
 8004f08:	1900      	adds	r0, r0, r4

08004f0a <l7loop>:



l7loop:

    SUB r1,#2
 8004f0a:	3902      	subs	r1, #2
    MOV r5,#1
 8004f0c:	2501      	movs	r5, #1
    LSL r5,#8
 8004f0e:	022d      	lsls	r5, r5, #8
    LSL r6,r5,#1
 8004f10:	006e      	lsls	r6, r5, #1
	SUB r0,r6	
 8004f12:	1b80      	subs	r0, r0, r6
	
	
	LDR r4,[r0]	
 8004f14:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8004f16:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8004f18:	0c24      	lsrs	r4, r4, #16

	LDR r6,[r0,r5] 
 8004f1a:	5946      	ldr	r6, [r0, r5]
	UXTH r5,r6
 8004f1c:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8004f1e:	0c36      	lsrs	r6, r6, #16


	MOV r11,r3
 8004f20:	469b      	mov	fp, r3
	

	
	ADD r3,r5
 8004f22:	195b      	adds	r3, r3, r5

    

    MOV r7,r14
 8004f24:	4677      	mov	r7, lr

    barrett r3
 8004f26:	009a      	lsls	r2, r3, #2
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	0c12      	lsrs	r2, r2, #16
 8004f2c:	437a      	muls	r2, r7
 8004f2e:	1a9b      	subs	r3, r3, r2

    MOV r12,r4
 8004f30:	46a4      	mov	ip, r4
	ADD r4,r6		
 8004f32:	19a4      	adds	r4, r4, r6

    barrett r4
 8004f34:	00a2      	lsls	r2, r4, #2
 8004f36:	1912      	adds	r2, r2, r4
 8004f38:	0c12      	lsrs	r2, r2, #16
 8004f3a:	437a      	muls	r2, r7
 8004f3c:	1aa4      	subs	r4, r4, r2


	LSL r4,#16
 8004f3e:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004f40:	4323      	orrs	r3, r4
	STR r3,[r0]
 8004f42:	6003      	str	r3, [r0, #0]

	MOV r3,r11
 8004f44:	465b      	mov	r3, fp

	ADD r3,r8
 8004f46:	4443      	add	r3, r8

	SUB r3,r5
 8004f48:	1b5b      	subs	r3, r3, r5


	LDRH r2,[r1]
 8004f4a:	880a      	ldrh	r2, [r1, #0]

	MUL r3,r2
 8004f4c:	4353      	muls	r3, r2


	MOV r5,#1
 8004f4e:	2501      	movs	r5, #1
	LSL r5,#18
 8004f50:	04ad      	lsls	r5, r5, #18
	SUB r5,#1
 8004f52:	3d01      	subs	r5, #1


    montgomery r4,r7,r5,r3
 8004f54:	1ebc      	subs	r4, r7, #2
 8004f56:	435c      	muls	r4, r3
 8004f58:	402c      	ands	r4, r5
 8004f5a:	437c      	muls	r4, r7
 8004f5c:	191b      	adds	r3, r3, r4
 8004f5e:	0c9b      	lsrs	r3, r3, #18


	MOV r4,r12
 8004f60:	4664      	mov	r4, ip

	ADD r4,r8
 8004f62:	4444      	add	r4, r8

	SUB r4,r6
 8004f64:	1ba4      	subs	r4, r4, r6

	MUL r4,r2
 8004f66:	4354      	muls	r4, r2

    montgomery r2,r7,r5,r4
 8004f68:	1eba      	subs	r2, r7, #2
 8004f6a:	4362      	muls	r2, r4
 8004f6c:	402a      	ands	r2, r5
 8004f6e:	437a      	muls	r2, r7
 8004f70:	18a4      	adds	r4, r4, r2
 8004f72:	0ca4      	lsrs	r4, r4, #18


	LSL r4,#16
 8004f74:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004f76:	4323      	orrs	r3, r4
    MOV r7,#1
 8004f78:	2701      	movs	r7, #1
    LSL r7,#8
 8004f7a:	023f      	lsls	r7, r7, #8
	STR r3,[r0,r7] 
 8004f7c:	51c3      	str	r3, [r0, r7]


	CMP r1,r9
 8004f7e:	4549      	cmp	r1, r9
	BGT l7loop
 8004f80:	dcc3      	bgt.n	8004f0a <l7loop>


	MOV r7,r10
 8004f82:	4657      	mov	r7, sl
	SUB r0,r7
 8004f84:	1bc0      	subs	r0, r0, r7
	ADD r7,#4
 8004f86:	3704      	adds	r7, #4
	MOV r10,r7
 8004f88:	46ba      	mov	sl, r7



	CMP r7,#252
 8004f8a:	2ffc      	cmp	r7, #252	; 0xfc
	BLE outll7
 8004f8c:	ddb8      	ble.n	8004f00 <outll7>

    MOV r12,r5
 8004f8e:	46ac      	mov	ip, r5

	nop
 8004f90:	46c0      	nop			; (mov r8, r8)
		
    MOV r7,#0
 8004f92:	2700      	movs	r7, #0
	MOV r10,r7
 8004f94:	46ba      	mov	sl, r7

08004f96 <outll8>:

outll8:
	MOV r4,#4 
 8004f96:	2404      	movs	r4, #4
	ADD r1,r4
 8004f98:	1909      	adds	r1, r1, r4

	LSL r4,#9 
 8004f9a:	0264      	lsls	r4, r4, #9
		
	ADD r4,r10
 8004f9c:	4454      	add	r4, sl
	ADD r0,r4
 8004f9e:	1900      	adds	r0, r0, r4

08004fa0 <l8loop>:

 

l8loop:

    SUB r1,#2
 8004fa0:	3902      	subs	r1, #2
    MOV r5,#1
 8004fa2:	2501      	movs	r5, #1
    LSL r5,#9
 8004fa4:	026d      	lsls	r5, r5, #9
    LSL r6,r5,#1
 8004fa6:	006e      	lsls	r6, r5, #1
	SUB r0,r6	
 8004fa8:	1b80      	subs	r0, r0, r6
	
	LDR r4,[r0]	
 8004faa:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8004fac:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8004fae:	0c24      	lsrs	r4, r4, #16


	LDR r6,[r0,r5] 
 8004fb0:	5946      	ldr	r6, [r0, r5]
	UXTH r5,r6
 8004fb2:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8004fb4:	0c36      	lsrs	r6, r6, #16


	MOV r2,r3
 8004fb6:	1c1a      	adds	r2, r3, #0
	MOV r11,r4
 8004fb8:	46a3      	mov	fp, r4


	ADD r2,r5
 8004fba:	1952      	adds	r2, r2, r5

	ADD r4,r6		
 8004fbc:	19a4      	adds	r4, r4, r6

	

	LSL r4,#16
 8004fbe:	0424      	lsls	r4, r4, #16
	ORR r2,r4
 8004fc0:	4322      	orrs	r2, r4
	STR r2,[r0]
 8004fc2:	6002      	str	r2, [r0, #0]

	ADD r3,r8
 8004fc4:	4443      	add	r3, r8

	SUB r3,r5
 8004fc6:	1b5b      	subs	r3, r3, r5


	LDRH r2,[r1]
 8004fc8:	880a      	ldrh	r2, [r1, #0]

	MUL r3,r2
 8004fca:	4353      	muls	r3, r2

	MOV r7,r12
 8004fcc:	4667      	mov	r7, ip
    MOV r5,r14
 8004fce:	4675      	mov	r5, lr

    montgomery r4,r5,r7,r3
 8004fd0:	1eac      	subs	r4, r5, #2
 8004fd2:	435c      	muls	r4, r3
 8004fd4:	403c      	ands	r4, r7
 8004fd6:	436c      	muls	r4, r5
 8004fd8:	191b      	adds	r3, r3, r4
 8004fda:	0c9b      	lsrs	r3, r3, #18


	MOV r4,r11
 8004fdc:	465c      	mov	r4, fp

	ADD r4,r8
 8004fde:	4444      	add	r4, r8

	SUB r4,r6
 8004fe0:	1ba4      	subs	r4, r4, r6

	MUL r4,r2
 8004fe2:	4354      	muls	r4, r2

    montgomery r2,r5,r7,r4
 8004fe4:	1eaa      	subs	r2, r5, #2
 8004fe6:	4362      	muls	r2, r4
 8004fe8:	403a      	ands	r2, r7
 8004fea:	436a      	muls	r2, r5
 8004fec:	18a4      	adds	r4, r4, r2
 8004fee:	0ca4      	lsrs	r4, r4, #18

	LSL r4,#16
 8004ff0:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8004ff2:	4323      	orrs	r3, r4
    MOV r5,#1
 8004ff4:	2501      	movs	r5, #1
    LSL r5,#9
 8004ff6:	026d      	lsls	r5, r5, #9
	STR r3,[r0,r5] 
 8004ff8:	5143      	str	r3, [r0, r5]


	CMP r1,r9
 8004ffa:	4549      	cmp	r1, r9
	BGT l8loop
 8004ffc:	dcd0      	bgt.n	8004fa0 <l8loop>


	MOV r7,r10
 8004ffe:	4657      	mov	r7, sl
	SUB r0,r7
 8005000:	1bc0      	subs	r0, r0, r7
	ADD r7,#4
 8005002:	3704      	adds	r7, #4
	MOV r10,r7
 8005004:	46ba      	mov	sl, r7


    SUB r5,#4
 8005006:	3d04      	subs	r5, #4
	CMP r7,r5
 8005008:	42af      	cmp	r7, r5
	BLE outll8
 800500a:	ddc4      	ble.n	8004f96 <outll8>


    LDR r7,=0x3fc
 800500c:	f44f 777f 	mov.w	r7, #1020	; 0x3fc
    MOV r10,r0
 8005010:	4682      	mov	sl, r0
    ADD r0,r7
 8005012:	19c0      	adds	r0, r0, r7

08005014 <outll9>:

outll9:
	

	
	LDR r4,[r0]	
 8005014:	6804      	ldr	r4, [r0, #0]
	UXTH r3,r4
 8005016:	b2a3      	uxth	r3, r4
	LSR r4,#16
 8005018:	0c24      	lsrs	r4, r4, #16

    MOV r5,#1
 800501a:	2501      	movs	r5, #1
    LSL r5,#10
 800501c:	02ad      	lsls	r5, r5, #10
	LDR r6,[r0,r5] 
 800501e:	5946      	ldr	r6, [r0, r5]
	UXTH r5,r6
 8005020:	b2b5      	uxth	r5, r6
	LSR r6,#16
 8005022:	0c36      	lsrs	r6, r6, #16


	MOV r9,r3
 8005024:	4699      	mov	r9, r3
	MOV r11,r4
 8005026:	46a3      	mov	fp, r4

	
	ADD r3,r5
 8005028:	195b      	adds	r3, r3, r5

    MOV r7,r14
 800502a:	4677      	mov	r7, lr

    barrett r3
 800502c:	009a      	lsls	r2, r3, #2
 800502e:	18d2      	adds	r2, r2, r3
 8005030:	0c12      	lsrs	r2, r2, #16
 8005032:	437a      	muls	r2, r7
 8005034:	1a9b      	subs	r3, r3, r2
	ADD r4,r6		
 8005036:	19a4      	adds	r4, r4, r6
    barrett r4
 8005038:	00a2      	lsls	r2, r4, #2
 800503a:	1912      	adds	r2, r2, r4
 800503c:	0c12      	lsrs	r2, r2, #16
 800503e:	437a      	muls	r2, r7
 8005040:	1aa4      	subs	r4, r4, r2


	LSL r4,#16
 8005042:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 8005044:	4323      	orrs	r3, r4
	STR r3,[r0]
 8005046:	6003      	str	r3, [r0, #0]

	MOV r3,r9
 8005048:	464b      	mov	r3, r9

	ADD r3,r8
 800504a:	4443      	add	r3, r8

	SUB r3,r5	
 800504c:	1b5b      	subs	r3, r3, r5

    barrett r3
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	18d2      	adds	r2, r2, r3
 8005052:	0c12      	lsrs	r2, r2, #16
 8005054:	437a      	muls	r2, r7
 8005056:	1a9b      	subs	r3, r3, r2


	MOV r4,r11
 8005058:	465c      	mov	r4, fp

	ADD r4,r8
 800505a:	4444      	add	r4, r8

	SUB r4,r6
 800505c:	1ba4      	subs	r4, r4, r6

    barrett r4
 800505e:	00a2      	lsls	r2, r4, #2
 8005060:	1912      	adds	r2, r2, r4
 8005062:	0c12      	lsrs	r2, r2, #16
 8005064:	437a      	muls	r2, r7
 8005066:	1aa4      	subs	r4, r4, r2
    


	LSL r4,#16
 8005068:	0424      	lsls	r4, r4, #16
	ORR r3,r4
 800506a:	4323      	orrs	r3, r4
    MOV r7,#1
 800506c:	2701      	movs	r7, #1
    LSL r7,#10
 800506e:	02bf      	lsls	r7, r7, #10
	STR r3,[r0,r7]
 8005070:	51c3      	str	r3, [r0, r7]


	SUB r0,#4
 8005072:	3804      	subs	r0, #4
    CMP r0,r10
 8005074:	4550      	cmp	r0, sl

	BGE outll9
 8005076:	dacd      	bge.n	8005014 <outll9>

08005078 <endntt>:


endntt:
    pop {r4,r5}
 8005078:	bc30      	pop	{r4, r5}
    mov r12,r4
 800507a:	46a4      	mov	ip, r4
    mov r14,r5
 800507c:	46ae      	mov	lr, r5


    pop {r4-r7}
 800507e:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 8005080:	46a0      	mov	r8, r4
    mov r9,r5
 8005082:	46a9      	mov	r9, r5
    mov r10,r6
 8005084:	46b2      	mov	sl, r6
    mov r11,r7
 8005086:	46bb      	mov	fp, r7

	pop {r4-r7,pc}
 8005088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bx lr
 800508a:	4770      	bx	lr

0800508c <asm_mulcoef_otf>:
@

.global	asm_mulcoef_otf
.type	asm_mulcoef_otf, %function
asm_mulcoef_otf:
	push {r4-r7,lr}
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r3,r8
 800508e:	4643      	mov	r3, r8
    mov r4,r9
 8005090:	464c      	mov	r4, r9
    mov r5,r10
 8005092:	4655      	mov	r5, sl
    mov r6,r11
 8005094:	465e      	mov	r6, fp
    mov r7,r12
 8005096:	4667      	mov	r7, ip
    push {r3-r7}
 8005098:	b4f8      	push	{r3, r4, r5, r6, r7}
    

    MOV r4,#3
 800509a:	2403      	movs	r4, #3
    LSL r4,#12
 800509c:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 800509e:	3401      	adds	r4, #1
	MOV r9,r4
 80050a0:	46a1      	mov	r9, r4

    MOV r4,#1
 80050a2:	2401      	movs	r4, #1
    LSL r4,#18
 80050a4:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 80050a6:	3c01      	subs	r4, #1
	MOV r10,r4
 80050a8:	46a2      	mov	sl, r4
    
    mov r8,r0
 80050aa:	4680      	mov	r8, r0
    mov r4,#1
 80050ac:	2401      	movs	r4, #1
    lsl r4,#10
 80050ae:	02a4      	lsls	r4, r4, #10
    add r8,r4
 80050b0:	44a0      	add	r8, r4

    mov r11,r1
 80050b2:	468b      	mov	fp, r1

080050b4 <loopmcotf>:

loopmcotf:
    mov r12,r0
 80050b4:	4684      	mov	ip, r0

    ldm r0,{r2,r3}
 80050b6:	c80c      	ldmia	r0!, {r2, r3}
    ldm r1,{r4,r5}
 80050b8:	c930      	ldmia	r1!, {r4, r5}

	UXTH r6,r2
 80050ba:	b296      	uxth	r6, r2
	LSR r2,#16
 80050bc:	0c12      	lsrs	r2, r2, #16

	UXTH r7,r4
 80050be:	b2a7      	uxth	r7, r4
	LSR r4,#16
 80050c0:	0c24      	lsrs	r4, r4, #16

    mul r6,r7
 80050c2:	437e      	muls	r6, r7
    mul r2,r4
 80050c4:	4362      	muls	r2, r4

    mov r4,r10
 80050c6:	4654      	mov	r4, sl
    mov r0,r9
 80050c8:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 80050ca:	1e87      	subs	r7, r0, #2
 80050cc:	4377      	muls	r7, r6
 80050ce:	4027      	ands	r7, r4
 80050d0:	4347      	muls	r7, r0
 80050d2:	19f6      	adds	r6, r6, r7
 80050d4:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r2
 80050d6:	1e87      	subs	r7, r0, #2
 80050d8:	4357      	muls	r7, r2
 80050da:	4027      	ands	r7, r4
 80050dc:	4347      	muls	r7, r0
 80050de:	19d2      	adds	r2, r2, r7
 80050e0:	0c92      	lsrs	r2, r2, #18

    lsl r2,#16
 80050e2:	0412      	lsls	r2, r2, #16
    orr r2,r6
 80050e4:	4332      	orrs	r2, r6


	UXTH r6,r3
 80050e6:	b29e      	uxth	r6, r3
	LSR r3,#16
 80050e8:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 80050ea:	b2af      	uxth	r7, r5
	LSR r5,#16
 80050ec:	0c2d      	lsrs	r5, r5, #16

    mul r6,r7
 80050ee:	437e      	muls	r6, r7
    mul r3,r5
 80050f0:	436b      	muls	r3, r5


    montgomery 	r7, r0, r4, r6
 80050f2:	1e87      	subs	r7, r0, #2
 80050f4:	4377      	muls	r7, r6
 80050f6:	4027      	ands	r7, r4
 80050f8:	4347      	muls	r7, r0
 80050fa:	19f6      	adds	r6, r6, r7
 80050fc:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r3
 80050fe:	1e87      	subs	r7, r0, #2
 8005100:	435f      	muls	r7, r3
 8005102:	4027      	ands	r7, r4
 8005104:	4347      	muls	r7, r0
 8005106:	19db      	adds	r3, r3, r7
 8005108:	0c9b      	lsrs	r3, r3, #18

    lsl r3,#16
 800510a:	041b      	lsls	r3, r3, #16
    orr r3,r6
 800510c:	4333      	orrs	r3, r6

    mov r0,r12
 800510e:	4660      	mov	r0, ip

    stm r0, {r2,r3}
 8005110:	c00c      	stmia	r0!, {r2, r3}
            
    cmp r0,r8
 8005112:	4540      	cmp	r0, r8
    blt loopmcotf
 8005114:	dbce      	blt.n	80050b4 <loopmcotf>

@end first loop


    mov r1,r11
 8005116:	4659      	mov	r1, fp

    mov r4,#1
 8005118:	2401      	movs	r4, #1
    lsl r4,#10 
 800511a:	02a4      	lsls	r4, r4, #10
    add r8,r4
 800511c:	44a0      	add	r8, r4

0800511e <loopmc1>:

loopmc1:
    mov r12,r0
 800511e:	4684      	mov	ip, r0

    ldm r0,{r2,r3}
 8005120:	c80c      	ldmia	r0!, {r2, r3}
    ldm r1,{r4,r5}
 8005122:	c930      	ldmia	r1!, {r4, r5}

	UXTH r6,r2
 8005124:	b296      	uxth	r6, r2
	LSR r2,#16
 8005126:	0c12      	lsrs	r2, r2, #16

	UXTH r7,r4
 8005128:	b2a7      	uxth	r7, r4
	LSR r4,#16
 800512a:	0c24      	lsrs	r4, r4, #16

    mul r6,r7
 800512c:	437e      	muls	r6, r7
    mul r2,r4
 800512e:	4362      	muls	r2, r4

    mov r0,#7
 8005130:	2007      	movs	r0, #7
    mul r6,r0
 8005132:	4346      	muls	r6, r0
    mul r2,r0
 8005134:	4342      	muls	r2, r0

    mov r4,r10
 8005136:	4654      	mov	r4, sl
    mov r0,r9
 8005138:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 800513a:	1e87      	subs	r7, r0, #2
 800513c:	4377      	muls	r7, r6
 800513e:	4027      	ands	r7, r4
 8005140:	4347      	muls	r7, r0
 8005142:	19f6      	adds	r6, r6, r7
 8005144:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r2
 8005146:	1e87      	subs	r7, r0, #2
 8005148:	4357      	muls	r7, r2
 800514a:	4027      	ands	r7, r4
 800514c:	4347      	muls	r7, r0
 800514e:	19d2      	adds	r2, r2, r7
 8005150:	0c92      	lsrs	r2, r2, #18

    lsl r2,#16
 8005152:	0412      	lsls	r2, r2, #16
    orr r2,r6
 8005154:	4332      	orrs	r2, r6


	UXTH r6,r3
 8005156:	b29e      	uxth	r6, r3
	LSR r3,#16
 8005158:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 800515a:	b2af      	uxth	r7, r5
	LSR r5,#16
 800515c:	0c2d      	lsrs	r5, r5, #16
    


    mul r6,r7
 800515e:	437e      	muls	r6, r7
    mul r3,r5
 8005160:	436b      	muls	r3, r5

    mov r0,#7
 8005162:	2007      	movs	r0, #7
    mul r6,r0
 8005164:	4346      	muls	r6, r0
    mul r3,r0
 8005166:	4343      	muls	r3, r0

    mov r0,r9
 8005168:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 800516a:	1e87      	subs	r7, r0, #2
 800516c:	4377      	muls	r7, r6
 800516e:	4027      	ands	r7, r4
 8005170:	4347      	muls	r7, r0
 8005172:	19f6      	adds	r6, r6, r7
 8005174:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r3
 8005176:	1e87      	subs	r7, r0, #2
 8005178:	435f      	muls	r7, r3
 800517a:	4027      	ands	r7, r4
 800517c:	4347      	muls	r7, r0
 800517e:	19db      	adds	r3, r3, r7
 8005180:	0c9b      	lsrs	r3, r3, #18

    lsl r3,#16
 8005182:	041b      	lsls	r3, r3, #16
    orr r3,r6
 8005184:	4333      	orrs	r3, r6

    mov r0,r12
 8005186:	4660      	mov	r0, ip

    stm r0, {r2,r3}
 8005188:	c00c      	stmia	r0!, {r2, r3}
            
    cmp r0,r8
 800518a:	4540      	cmp	r0, r8
    blt loopmc1
 800518c:	dbc7      	blt.n	800511e <loopmc1>

    pop {r3-r7}
 800518e:	bcf8      	pop	{r3, r4, r5, r6, r7}

    mov r8,r3
 8005190:	4698      	mov	r8, r3
    mov r9,r4
 8005192:	46a1      	mov	r9, r4
    mov r10,r5
 8005194:	46aa      	mov	sl, r5
    mov r11,r6
 8005196:	46b3      	mov	fp, r6
    mov r12,r7
 8005198:	46bc      	mov	ip, r7

	pop {r4-r7,pc}
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800519c <asm_mulcoef>:
@

.global	asm_mulcoef
.type	asm_mulcoef, %function
asm_mulcoef:
	push {r4-r7,lr}
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 800519e:	4644      	mov	r4, r8
    mov r5,r9
 80051a0:	464d      	mov	r5, r9
    mov r6,r10
 80051a2:	4656      	mov	r6, sl
    mov r7,r12
 80051a4:	4667      	mov	r7, ip
    push {r4-r7}
 80051a6:	b4f0      	push	{r4, r5, r6, r7}
    

    MOV r4,#3
 80051a8:	2403      	movs	r4, #3
    LSL r4,#12
 80051aa:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 80051ac:	3401      	adds	r4, #1
	MOV r9,r4
 80051ae:	46a1      	mov	r9, r4

    MOV r4,#1
 80051b0:	2401      	movs	r4, #1
    LSL r4,#18
 80051b2:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 80051b4:	3c01      	subs	r4, #1
	MOV r10,r4
 80051b6:	46a2      	mov	sl, r4
    
    mov r8,r0
 80051b8:	4680      	mov	r8, r0
    mov r4,#1
 80051ba:	2401      	movs	r4, #1
    lsl r4,#11 
 80051bc:	02e4      	lsls	r4, r4, #11
    add r8,r4
 80051be:	44a0      	add	r8, r4

080051c0 <loopmc>:

loopmc:
    mov r12,r0
 80051c0:	4684      	mov	ip, r0

    ldm r0,{r2,r3}
 80051c2:	c80c      	ldmia	r0!, {r2, r3}
    ldm r1,{r4,r5}
 80051c4:	c930      	ldmia	r1!, {r4, r5}

	UXTH r6,r2
 80051c6:	b296      	uxth	r6, r2
	LSR r2,#16
 80051c8:	0c12      	lsrs	r2, r2, #16

	UXTH r7,r4
 80051ca:	b2a7      	uxth	r7, r4
	LSR r4,#16
 80051cc:	0c24      	lsrs	r4, r4, #16

    mul r6,r7
 80051ce:	437e      	muls	r6, r7
    mul r2,r4
 80051d0:	4362      	muls	r2, r4

    mov r4,r10
 80051d2:	4654      	mov	r4, sl
    mov r0,r9
 80051d4:	4648      	mov	r0, r9

    montgomery 	r7, r0, r4, r6
 80051d6:	1e87      	subs	r7, r0, #2
 80051d8:	4377      	muls	r7, r6
 80051da:	4027      	ands	r7, r4
 80051dc:	4347      	muls	r7, r0
 80051de:	19f6      	adds	r6, r6, r7
 80051e0:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r2
 80051e2:	1e87      	subs	r7, r0, #2
 80051e4:	4357      	muls	r7, r2
 80051e6:	4027      	ands	r7, r4
 80051e8:	4347      	muls	r7, r0
 80051ea:	19d2      	adds	r2, r2, r7
 80051ec:	0c92      	lsrs	r2, r2, #18

    lsl r2,#16
 80051ee:	0412      	lsls	r2, r2, #16
    orr r2,r6
 80051f0:	4332      	orrs	r2, r6


	UXTH r6,r3
 80051f2:	b29e      	uxth	r6, r3
	LSR r3,#16
 80051f4:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 80051f6:	b2af      	uxth	r7, r5
	LSR r5,#16
 80051f8:	0c2d      	lsrs	r5, r5, #16

    mul r6,r7
 80051fa:	437e      	muls	r6, r7
    mul r3,r5
 80051fc:	436b      	muls	r3, r5


    montgomery 	r7, r0, r4, r6
 80051fe:	1e87      	subs	r7, r0, #2
 8005200:	4377      	muls	r7, r6
 8005202:	4027      	ands	r7, r4
 8005204:	4347      	muls	r7, r0
 8005206:	19f6      	adds	r6, r6, r7
 8005208:	0cb6      	lsrs	r6, r6, #18
    montgomery 	r7, r0, r4, r3
 800520a:	1e87      	subs	r7, r0, #2
 800520c:	435f      	muls	r7, r3
 800520e:	4027      	ands	r7, r4
 8005210:	4347      	muls	r7, r0
 8005212:	19db      	adds	r3, r3, r7
 8005214:	0c9b      	lsrs	r3, r3, #18

    lsl r3,#16
 8005216:	041b      	lsls	r3, r3, #16
    orr r3,r6
 8005218:	4333      	orrs	r3, r6

    mov r0,r12
 800521a:	4660      	mov	r0, ip

    stm r0, {r2,r3}
 800521c:	c00c      	stmia	r0!, {r2, r3}
            
    cmp r0,r8
 800521e:	4540      	cmp	r0, r8
    blt loopmc
 8005220:	dbce      	blt.n	80051c0 <loopmc>

    pop {r4-r7}
 8005222:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 8005224:	46a0      	mov	r8, r4
    mov r9,r5
 8005226:	46a9      	mov	r9, r5
    mov r10,r6
 8005228:	46b2      	mov	sl, r6
    mov r12,r7
 800522a:	46bc      	mov	ip, r7

	pop {r4-r7,pc}
 800522c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800522e <test_butterfly>:


.global	test_butterfly
.type	test_butterfly, %function
test_butterfly:
	push {r4-r7,lr}
 800522e:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8005230:	4644      	mov	r4, r8
    mov r5,r11
 8005232:	465d      	mov	r5, fp
    mov r6,r12
 8005234:	4666      	mov	r6, ip
    mov r7,r14
 8005236:	4677      	mov	r7, lr
    push {r4-r7}
 8005238:	b4f0      	push	{r4, r5, r6, r7}

    
    butterfly #16
 800523a:	6804      	ldr	r4, [r0, #0]
 800523c:	b2a3      	uxth	r3, r4
 800523e:	0c24      	lsrs	r4, r4, #16
 8005240:	6906      	ldr	r6, [r0, #16]
 8005242:	b2b5      	uxth	r5, r6
 8005244:	0c36      	lsrs	r6, r6, #16
 8005246:	469c      	mov	ip, r3
 8005248:	46a3      	mov	fp, r4
 800524a:	195b      	adds	r3, r3, r5
 800524c:	4677      	mov	r7, lr
 800524e:	009a      	lsls	r2, r3, #2
 8005250:	18d2      	adds	r2, r2, r3
 8005252:	0c12      	lsrs	r2, r2, #16
 8005254:	437a      	muls	r2, r7
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	19a4      	adds	r4, r4, r6
 800525a:	00a2      	lsls	r2, r4, #2
 800525c:	1912      	adds	r2, r2, r4
 800525e:	0c12      	lsrs	r2, r2, #16
 8005260:	437a      	muls	r2, r7
 8005262:	1aa4      	subs	r4, r4, r2
 8005264:	0424      	lsls	r4, r4, #16
 8005266:	4323      	orrs	r3, r4
 8005268:	6003      	str	r3, [r0, #0]
 800526a:	4663      	mov	r3, ip
 800526c:	4443      	add	r3, r8
 800526e:	1b5b      	subs	r3, r3, r5
 8005270:	880a      	ldrh	r2, [r1, #0]
 8005272:	4353      	muls	r3, r2
 8005274:	2501      	movs	r5, #1
 8005276:	04ad      	lsls	r5, r5, #18
 8005278:	3d01      	subs	r5, #1
 800527a:	1ebc      	subs	r4, r7, #2
 800527c:	435c      	muls	r4, r3
 800527e:	402c      	ands	r4, r5
 8005280:	437c      	muls	r4, r7
 8005282:	191b      	adds	r3, r3, r4
 8005284:	0c9b      	lsrs	r3, r3, #18
 8005286:	465c      	mov	r4, fp
 8005288:	4444      	add	r4, r8
 800528a:	1ba4      	subs	r4, r4, r6
 800528c:	4354      	muls	r4, r2
 800528e:	1eba      	subs	r2, r7, #2
 8005290:	4362      	muls	r2, r4
 8005292:	402a      	ands	r2, r5
 8005294:	437a      	muls	r2, r7
 8005296:	18a4      	adds	r4, r4, r2
 8005298:	0ca4      	lsrs	r4, r4, #18
 800529a:	0424      	lsls	r4, r4, #16
 800529c:	4323      	orrs	r3, r4
 800529e:	6103      	str	r3, [r0, #16]

    pop {r4-r7}
 80052a0:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 80052a2:	46a0      	mov	r8, r4
    mov r11,r5
 80052a4:	46ab      	mov	fp, r5
    mov r12,r6
 80052a6:	46b4      	mov	ip, r6
    mov r14,r7
 80052a8:	46be      	mov	lr, r7

	pop {r4-r7,pc}
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ac <test_lazy_butterfly>:


.global	test_lazy_butterfly
.type	test_lazy_butterfly, %function
test_lazy_butterfly:
	push {r4-r7,lr}
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80052ae:	4644      	mov	r4, r8
    mov r5,r11
 80052b0:	465d      	mov	r5, fp
    mov r6,r12
 80052b2:	4666      	mov	r6, ip
    mov r7,r14
 80052b4:	4677      	mov	r7, lr
    push {r4-r7}
 80052b6:	b4f0      	push	{r4, r5, r6, r7}


    lazy_butterfly #16
 80052b8:	6804      	ldr	r4, [r0, #0]
 80052ba:	b2a3      	uxth	r3, r4
 80052bc:	0c24      	lsrs	r4, r4, #16
 80052be:	2510      	movs	r5, #16
 80052c0:	5946      	ldr	r6, [r0, r5]
 80052c2:	b2b5      	uxth	r5, r6
 80052c4:	0c36      	lsrs	r6, r6, #16
 80052c6:	1c1a      	adds	r2, r3, #0
 80052c8:	46a3      	mov	fp, r4
 80052ca:	1952      	adds	r2, r2, r5
 80052cc:	19a4      	adds	r4, r4, r6
 80052ce:	0424      	lsls	r4, r4, #16
 80052d0:	4322      	orrs	r2, r4
 80052d2:	6002      	str	r2, [r0, #0]
 80052d4:	4443      	add	r3, r8
 80052d6:	1b5b      	subs	r3, r3, r5
 80052d8:	880a      	ldrh	r2, [r1, #0]
 80052da:	4353      	muls	r3, r2
 80052dc:	4667      	mov	r7, ip
 80052de:	4675      	mov	r5, lr
 80052e0:	1eac      	subs	r4, r5, #2
 80052e2:	435c      	muls	r4, r3
 80052e4:	403c      	ands	r4, r7
 80052e6:	436c      	muls	r4, r5
 80052e8:	191b      	adds	r3, r3, r4
 80052ea:	0c9b      	lsrs	r3, r3, #18
 80052ec:	465c      	mov	r4, fp
 80052ee:	4444      	add	r4, r8
 80052f0:	1ba4      	subs	r4, r4, r6
 80052f2:	4354      	muls	r4, r2
 80052f4:	1eaa      	subs	r2, r5, #2
 80052f6:	4362      	muls	r2, r4
 80052f8:	403a      	ands	r2, r7
 80052fa:	436a      	muls	r2, r5
 80052fc:	18a4      	adds	r4, r4, r2
 80052fe:	0ca4      	lsrs	r4, r4, #18
 8005300:	2510      	movs	r5, #16
 8005302:	0424      	lsls	r4, r4, #16
 8005304:	4323      	orrs	r3, r4
 8005306:	5143      	str	r3, [r0, r5]
    
    pop {r4-r7}
 8005308:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 800530a:	46a0      	mov	r8, r4
    mov r11,r5
 800530c:	46ab      	mov	fp, r5
    mov r12,r6
 800530e:	46b4      	mov	ip, r6
    mov r14,r7
 8005310:	46be      	mov	lr, r7

	pop {r4-r7,pc}
 8005312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005314 <test_doublefly>:


.global	test_doublefly
.type	test_doublefly, %function
test_doublefly:
	push {r4-r7,lr}
 8005314:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r3,r9
 8005316:	464b      	mov	r3, r9
    mov r4,r8
 8005318:	4644      	mov	r4, r8
    mov r5,r11
 800531a:	465d      	mov	r5, fp
    mov r6,r12
 800531c:	4666      	mov	r6, ip
    mov r7,r14
 800531e:	4677      	mov	r7, lr
    push {r3-r7}
 8005320:	b4f8      	push	{r3, r4, r5, r6, r7}

    mov r9,r1
 8005322:	4689      	mov	r9, r1
    doublefly
 8005324:	6804      	ldr	r4, [r0, #0]
 8005326:	b2a3      	uxth	r3, r4
 8005328:	0c24      	lsrs	r4, r4, #16
 800532a:	1c1a      	adds	r2, r3, #0
 800532c:	191b      	adds	r3, r3, r4
 800532e:	469c      	mov	ip, r3
 8005330:	4442      	add	r2, r8
 8005332:	1b12      	subs	r2, r2, r4
 8005334:	464d      	mov	r5, r9
 8005336:	1b4f      	subs	r7, r1, r5
 8005338:	007f      	lsls	r7, r7, #1
 800533a:	19ed      	adds	r5, r5, r7
 800533c:	682f      	ldr	r7, [r5, #0]
 800533e:	b2bd      	uxth	r5, r7
 8005340:	0c3f      	lsrs	r7, r7, #16
 8005342:	436a      	muls	r2, r5
 8005344:	4654      	mov	r4, sl
 8005346:	4673      	mov	r3, lr
 8005348:	1e9e      	subs	r6, r3, #2
 800534a:	4356      	muls	r6, r2
 800534c:	4026      	ands	r6, r4
 800534e:	435e      	muls	r6, r3
 8005350:	1992      	adds	r2, r2, r6
 8005352:	0c92      	lsrs	r2, r2, #18
 8005354:	4693      	mov	fp, r2
 8005356:	6846      	ldr	r6, [r0, #4]
 8005358:	b2b5      	uxth	r5, r6
 800535a:	0c36      	lsrs	r6, r6, #16
 800535c:	1c2a      	adds	r2, r5, #0
 800535e:	19ad      	adds	r5, r5, r6
 8005360:	4442      	add	r2, r8
 8005362:	1b96      	subs	r6, r2, r6
 8005364:	437e      	muls	r6, r7
 8005366:	1e9f      	subs	r7, r3, #2
 8005368:	4377      	muls	r7, r6
 800536a:	4027      	ands	r7, r4
 800536c:	435f      	muls	r7, r3
 800536e:	19f6      	adds	r6, r6, r7
 8005370:	0cb6      	lsrs	r6, r6, #18
 8005372:	1c1f      	adds	r7, r3, #0
 8005374:	465c      	mov	r4, fp
 8005376:	4663      	mov	r3, ip
 8005378:	195b      	adds	r3, r3, r5
 800537a:	009a      	lsls	r2, r3, #2
 800537c:	18d2      	adds	r2, r2, r3
 800537e:	0c12      	lsrs	r2, r2, #16
 8005380:	437a      	muls	r2, r7
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	19a4      	adds	r4, r4, r6
 8005386:	00a2      	lsls	r2, r4, #2
 8005388:	1912      	adds	r2, r2, r4
 800538a:	0c12      	lsrs	r2, r2, #16
 800538c:	437a      	muls	r2, r7
 800538e:	1aa4      	subs	r4, r4, r2
 8005390:	0424      	lsls	r4, r4, #16
 8005392:	4323      	orrs	r3, r4
 8005394:	6003      	str	r3, [r0, #0]
 8005396:	4663      	mov	r3, ip
 8005398:	4443      	add	r3, r8
 800539a:	1b5b      	subs	r3, r3, r5
 800539c:	880a      	ldrh	r2, [r1, #0]
 800539e:	4353      	muls	r3, r2
 80053a0:	4655      	mov	r5, sl
 80053a2:	1ebc      	subs	r4, r7, #2
 80053a4:	435c      	muls	r4, r3
 80053a6:	402c      	ands	r4, r5
 80053a8:	437c      	muls	r4, r7
 80053aa:	191b      	adds	r3, r3, r4
 80053ac:	0c9b      	lsrs	r3, r3, #18
 80053ae:	465c      	mov	r4, fp
 80053b0:	4444      	add	r4, r8
 80053b2:	1ba4      	subs	r4, r4, r6
 80053b4:	4354      	muls	r4, r2
 80053b6:	1eba      	subs	r2, r7, #2
 80053b8:	4362      	muls	r2, r4
 80053ba:	402a      	ands	r2, r5
 80053bc:	437a      	muls	r2, r7
 80053be:	18a4      	adds	r4, r4, r2
 80053c0:	0ca4      	lsrs	r4, r4, #18
 80053c2:	0424      	lsls	r4, r4, #16
 80053c4:	4323      	orrs	r3, r4
 80053c6:	6043      	str	r3, [r0, #4]
    
    pop {r3-r7}
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    mov r9,r3
 80053ca:	4699      	mov	r9, r3
    mov r8,r4
 80053cc:	46a0      	mov	r8, r4
    mov r11,r5
 80053ce:	46ab      	mov	fp, r5
    mov r12,r6
 80053d0:	46b4      	mov	ip, r6
    mov r14,r7
 80053d2:	46be      	mov	lr, r7

	pop {r4-r7,pc}
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	bf00      	nop

080053d8 <asm_poly_add>:


.global	asm_poly_add
.type	asm_poly_add, %function
asm_poly_add    :
    push {r4-r7,lr}
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 80053da:	4644      	mov	r4, r8
    mov r5,r9
 80053dc:	464d      	mov	r5, r9
    push {r4,r5}
 80053de:	b430      	push	{r4, r5}
    MOV r4,#3
 80053e0:	2403      	movs	r4, #3
    LSL r4,#12
 80053e2:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 80053e4:	3401      	adds	r4, #1
	MOV r9,r4
 80053e6:	46a1      	mov	r9, r4

    mov r8,r0
 80053e8:	4680      	mov	r8, r0
    mov r2,#1
 80053ea:	2201      	movs	r2, #1
    lsl r2,#11
 80053ec:	02d2      	lsls	r2, r2, #11
    add r8,r2
 80053ee:	4490      	add	r8, r2

080053f0 <looppa>:
looppa:
    ldm r0,{r3,r4}
 80053f0:	c818      	ldmia	r0!, {r3, r4}
    ldm r1,{r5}
 80053f2:	c920      	ldmia	r1!, {r5}
    sub r0,#8
 80053f4:	3808      	subs	r0, #8

	UXTH r6,r3
 80053f6:	b29e      	uxth	r6, r3
	LSR r3,#16
 80053f8:	0c1b      	lsrs	r3, r3, #16

	UXTH r7,r5
 80053fa:	b2af      	uxth	r7, r5
	LSR r5,#16
 80053fc:	0c2d      	lsrs	r5, r5, #16

    add r3,r5
 80053fe:	195b      	adds	r3, r3, r5
    add r6,r7
 8005400:	19f6      	adds	r6, r6, r7

    mov r5,r9
 8005402:	464d      	mov	r5, r9

    barrett r7,r5,r3
 8005404:	009f      	lsls	r7, r3, #2
 8005406:	18ff      	adds	r7, r7, r3
 8005408:	0c3f      	lsrs	r7, r7, #16
 800540a:	436f      	muls	r7, r5
 800540c:	1bdb      	subs	r3, r3, r7
    barrett r7,r5,r6
 800540e:	00b7      	lsls	r7, r6, #2
 8005410:	19bf      	adds	r7, r7, r6
 8005412:	0c3f      	lsrs	r7, r7, #16
 8005414:	436f      	muls	r7, r5
 8005416:	1bf6      	subs	r6, r6, r7

    lsl r3,#16
 8005418:	041b      	lsls	r3, r3, #16
    orr r3,r6
 800541a:	4333      	orrs	r3, r6

    ldm r1,{r5}
 800541c:	c920      	ldmia	r1!, {r5}

	UXTH r6,r4
 800541e:	b2a6      	uxth	r6, r4
	LSR r4,#16
 8005420:	0c24      	lsrs	r4, r4, #16

	UXTH r7,r5
 8005422:	b2af      	uxth	r7, r5
	LSR r5,#16
 8005424:	0c2d      	lsrs	r5, r5, #16

    add r4,r5
 8005426:	1964      	adds	r4, r4, r5
    add r6,r7
 8005428:	19f6      	adds	r6, r6, r7

    mov r5,r9
 800542a:	464d      	mov	r5, r9

    barrett r7,r5,r4
 800542c:	00a7      	lsls	r7, r4, #2
 800542e:	193f      	adds	r7, r7, r4
 8005430:	0c3f      	lsrs	r7, r7, #16
 8005432:	436f      	muls	r7, r5
 8005434:	1be4      	subs	r4, r4, r7
    barrett r7,r5,r6
 8005436:	00b7      	lsls	r7, r6, #2
 8005438:	19bf      	adds	r7, r7, r6
 800543a:	0c3f      	lsrs	r7, r7, #16
 800543c:	436f      	muls	r7, r5
 800543e:	1bf6      	subs	r6, r6, r7

    lsl r4,#16
 8005440:	0424      	lsls	r4, r4, #16
    orr r4,r6
 8005442:	4334      	orrs	r4, r6

    stm r0,{r3,r4}       
 8005444:	c018      	stmia	r0!, {r3, r4}


    cmp r0,r8
 8005446:	4540      	cmp	r0, r8
    BLT looppa
 8005448:	dbd2      	blt.n	80053f0 <looppa>
        
    pop {r4,r5}
 800544a:	bc30      	pop	{r4, r5}
    mov r8,r4
 800544c:	46a0      	mov	r8, r4
    mov r9,r5
 800544e:	46a9      	mov	r9, r5

	pop {r4-r7,pc}
 8005450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bx lr
 8005452:	4770      	bx	lr

08005454 <asm_poly_pointwise>:


.global	asm_poly_pointwise
.type	asm_poly_pointwise, %function
asm_poly_pointwise    :
    push {r4-r7,lr}
 8005454:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov r4,r8
 8005456:	4644      	mov	r4, r8
    mov r5,r9
 8005458:	464d      	mov	r5, r9
    mov r6,r10
 800545a:	4656      	mov	r6, sl
    mov r7,r11
 800545c:	465f      	mov	r7, fp
    push {r4-r7}
 800545e:	b4f0      	push	{r4, r5, r6, r7}

    MOV r4,#1
 8005460:	2401      	movs	r4, #1
    LSL r4,#18
 8005462:	04a4      	lsls	r4, r4, #18
    SUB r4,#1
 8005464:	3c01      	subs	r4, #1
	MOV r11,r4
 8005466:	46a3      	mov	fp, r4

    mov r4,#24
 8005468:	2418      	movs	r4, #24
    lsl r4,#7
 800546a:	01e4      	lsls	r4, r4, #7
    mov r3,#114
 800546c:	2372      	movs	r3, #114	; 0x72
    orr r4,r3
 800546e:	431c      	orrs	r4, r3
    mov r10,r4
 8005470:	46a2      	mov	sl, r4

    MOV r4,#3
 8005472:	2403      	movs	r4, #3
    LSL r4,#12
 8005474:	0324      	lsls	r4, r4, #12
    ADD r4,#1
 8005476:	3401      	adds	r4, #1
	MOV r9,r4
 8005478:	46a1      	mov	r9, r4

    mov r8,r0
 800547a:	4680      	mov	r8, r0
    mov r4,#1
 800547c:	2401      	movs	r4, #1
    lsl r4,#11
 800547e:	02e4      	lsls	r4, r4, #11
    add r8,r4
 8005480:	44a0      	add	r8, r4

08005482 <looppp>:
    
    
looppp:
    
    ldm r2,{r5}
 8005482:	ca20      	ldmia	r2!, {r5}

    UXTH r4,r5
 8005484:	b2ac      	uxth	r4, r5
	LSR r5,#16
 8005486:	0c2d      	lsrs	r5, r5, #16


    mov r7, r10
 8005488:	4657      	mov	r7, sl
    
    mul r4,r7
 800548a:	437c      	muls	r4, r7
    mul r5,r7
 800548c:	437d      	muls	r5, r7

    
    mov r6,r9
 800548e:	464e      	mov	r6, r9
    mov r3,r11
 8005490:	465b      	mov	r3, fp
    montgomery r7,r6,r3 r4
 8005492:	1eb7      	subs	r7, r6, #2
 8005494:	4367      	muls	r7, r4
 8005496:	401f      	ands	r7, r3
 8005498:	4377      	muls	r7, r6
 800549a:	19e4      	adds	r4, r4, r7
 800549c:	0ca4      	lsrs	r4, r4, #18
    montgomery r7,r6,r3 r5
 800549e:	1eb7      	subs	r7, r6, #2
 80054a0:	436f      	muls	r7, r5
 80054a2:	401f      	ands	r7, r3
 80054a4:	4377      	muls	r7, r6
 80054a6:	19ed      	adds	r5, r5, r7
 80054a8:	0cad      	lsrs	r5, r5, #18

    
    ldm r1,{r7}
 80054aa:	c980      	ldmia	r1!, {r7}

    UXTH r3,r7
 80054ac:	b2bb      	uxth	r3, r7
	LSR r7,#16
 80054ae:	0c3f      	lsrs	r7, r7, #16
    
    mul r4,r3
 80054b0:	435c      	muls	r4, r3
    mul r5,r7
 80054b2:	437d      	muls	r5, r7

    mov r3,r11
 80054b4:	465b      	mov	r3, fp
    montgomery r7,r6,r3,r4
 80054b6:	1eb7      	subs	r7, r6, #2
 80054b8:	4367      	muls	r7, r4
 80054ba:	401f      	ands	r7, r3
 80054bc:	4377      	muls	r7, r6
 80054be:	19e4      	adds	r4, r4, r7
 80054c0:	0ca4      	lsrs	r4, r4, #18
    montgomery r7,r6,r3,r5
 80054c2:	1eb7      	subs	r7, r6, #2
 80054c4:	436f      	muls	r7, r5
 80054c6:	401f      	ands	r7, r3
 80054c8:	4377      	muls	r7, r6
 80054ca:	19ed      	adds	r5, r5, r7
 80054cc:	0cad      	lsrs	r5, r5, #18
    
    lsl r5,#16
 80054ce:	042d      	lsls	r5, r5, #16
    orr r5,r4   
 80054d0:	4325      	orrs	r5, r4

    stm r0,{r5}       
 80054d2:	c020      	stmia	r0!, {r5}


    cmp r0,r8
 80054d4:	4540      	cmp	r0, r8
    BLT looppp
 80054d6:	dbd4      	blt.n	8005482 <looppp>
       


    pop {r4-r7} 
 80054d8:	bcf0      	pop	{r4, r5, r6, r7}
    mov r8,r4
 80054da:	46a0      	mov	r8, r4
    mov r9,r5
 80054dc:	46a9      	mov	r9, r5
    mov r10,r6
 80054de:	46b2      	mov	sl, r6
    mov r11,r7
 80054e0:	46bb      	mov	fp, r7

	pop {r4-r7,pc}
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bx lr
 80054e4:	4770      	bx	lr
	...

080054e8 <__aeabi_uldivmod>:
 80054e8:	b953      	cbnz	r3, 8005500 <__aeabi_uldivmod+0x18>
 80054ea:	b94a      	cbnz	r2, 8005500 <__aeabi_uldivmod+0x18>
 80054ec:	2900      	cmp	r1, #0
 80054ee:	bf08      	it	eq
 80054f0:	2800      	cmpeq	r0, #0
 80054f2:	bf1c      	itt	ne
 80054f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80054f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80054fc:	f000 b96e 	b.w	80057dc <__aeabi_idiv0>
 8005500:	f1ad 0c08 	sub.w	ip, sp, #8
 8005504:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005508:	f000 f806 	bl	8005518 <__udivmoddi4>
 800550c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr

08005518 <__udivmoddi4>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	9d08      	ldr	r5, [sp, #32]
 800551e:	4604      	mov	r4, r0
 8005520:	468c      	mov	ip, r1
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8083 	bne.w	800562e <__udivmoddi4+0x116>
 8005528:	428a      	cmp	r2, r1
 800552a:	4617      	mov	r7, r2
 800552c:	d947      	bls.n	80055be <__udivmoddi4+0xa6>
 800552e:	fab2 f282 	clz	r2, r2
 8005532:	b142      	cbz	r2, 8005546 <__udivmoddi4+0x2e>
 8005534:	f1c2 0020 	rsb	r0, r2, #32
 8005538:	fa24 f000 	lsr.w	r0, r4, r0
 800553c:	4091      	lsls	r1, r2
 800553e:	4097      	lsls	r7, r2
 8005540:	ea40 0c01 	orr.w	ip, r0, r1
 8005544:	4094      	lsls	r4, r2
 8005546:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800554a:	0c23      	lsrs	r3, r4, #16
 800554c:	fbbc f6f8 	udiv	r6, ip, r8
 8005550:	fa1f fe87 	uxth.w	lr, r7
 8005554:	fb08 c116 	mls	r1, r8, r6, ip
 8005558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800555c:	fb06 f10e 	mul.w	r1, r6, lr
 8005560:	4299      	cmp	r1, r3
 8005562:	d909      	bls.n	8005578 <__udivmoddi4+0x60>
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800556a:	f080 8119 	bcs.w	80057a0 <__udivmoddi4+0x288>
 800556e:	4299      	cmp	r1, r3
 8005570:	f240 8116 	bls.w	80057a0 <__udivmoddi4+0x288>
 8005574:	3e02      	subs	r6, #2
 8005576:	443b      	add	r3, r7
 8005578:	1a5b      	subs	r3, r3, r1
 800557a:	b2a4      	uxth	r4, r4
 800557c:	fbb3 f0f8 	udiv	r0, r3, r8
 8005580:	fb08 3310 	mls	r3, r8, r0, r3
 8005584:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005588:	fb00 fe0e 	mul.w	lr, r0, lr
 800558c:	45a6      	cmp	lr, r4
 800558e:	d909      	bls.n	80055a4 <__udivmoddi4+0x8c>
 8005590:	193c      	adds	r4, r7, r4
 8005592:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005596:	f080 8105 	bcs.w	80057a4 <__udivmoddi4+0x28c>
 800559a:	45a6      	cmp	lr, r4
 800559c:	f240 8102 	bls.w	80057a4 <__udivmoddi4+0x28c>
 80055a0:	3802      	subs	r0, #2
 80055a2:	443c      	add	r4, r7
 80055a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80055a8:	eba4 040e 	sub.w	r4, r4, lr
 80055ac:	2600      	movs	r6, #0
 80055ae:	b11d      	cbz	r5, 80055b8 <__udivmoddi4+0xa0>
 80055b0:	40d4      	lsrs	r4, r2
 80055b2:	2300      	movs	r3, #0
 80055b4:	e9c5 4300 	strd	r4, r3, [r5]
 80055b8:	4631      	mov	r1, r6
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055be:	b902      	cbnz	r2, 80055c2 <__udivmoddi4+0xaa>
 80055c0:	deff      	udf	#255	; 0xff
 80055c2:	fab2 f282 	clz	r2, r2
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d150      	bne.n	800566c <__udivmoddi4+0x154>
 80055ca:	1bcb      	subs	r3, r1, r7
 80055cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80055d0:	fa1f f887 	uxth.w	r8, r7
 80055d4:	2601      	movs	r6, #1
 80055d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80055da:	0c21      	lsrs	r1, r4, #16
 80055dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80055e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80055e4:	fb08 f30c 	mul.w	r3, r8, ip
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d907      	bls.n	80055fc <__udivmoddi4+0xe4>
 80055ec:	1879      	adds	r1, r7, r1
 80055ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80055f2:	d202      	bcs.n	80055fa <__udivmoddi4+0xe2>
 80055f4:	428b      	cmp	r3, r1
 80055f6:	f200 80e9 	bhi.w	80057cc <__udivmoddi4+0x2b4>
 80055fa:	4684      	mov	ip, r0
 80055fc:	1ac9      	subs	r1, r1, r3
 80055fe:	b2a3      	uxth	r3, r4
 8005600:	fbb1 f0fe 	udiv	r0, r1, lr
 8005604:	fb0e 1110 	mls	r1, lr, r0, r1
 8005608:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800560c:	fb08 f800 	mul.w	r8, r8, r0
 8005610:	45a0      	cmp	r8, r4
 8005612:	d907      	bls.n	8005624 <__udivmoddi4+0x10c>
 8005614:	193c      	adds	r4, r7, r4
 8005616:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800561a:	d202      	bcs.n	8005622 <__udivmoddi4+0x10a>
 800561c:	45a0      	cmp	r8, r4
 800561e:	f200 80d9 	bhi.w	80057d4 <__udivmoddi4+0x2bc>
 8005622:	4618      	mov	r0, r3
 8005624:	eba4 0408 	sub.w	r4, r4, r8
 8005628:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800562c:	e7bf      	b.n	80055ae <__udivmoddi4+0x96>
 800562e:	428b      	cmp	r3, r1
 8005630:	d909      	bls.n	8005646 <__udivmoddi4+0x12e>
 8005632:	2d00      	cmp	r5, #0
 8005634:	f000 80b1 	beq.w	800579a <__udivmoddi4+0x282>
 8005638:	2600      	movs	r6, #0
 800563a:	e9c5 0100 	strd	r0, r1, [r5]
 800563e:	4630      	mov	r0, r6
 8005640:	4631      	mov	r1, r6
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	fab3 f683 	clz	r6, r3
 800564a:	2e00      	cmp	r6, #0
 800564c:	d14a      	bne.n	80056e4 <__udivmoddi4+0x1cc>
 800564e:	428b      	cmp	r3, r1
 8005650:	d302      	bcc.n	8005658 <__udivmoddi4+0x140>
 8005652:	4282      	cmp	r2, r0
 8005654:	f200 80b8 	bhi.w	80057c8 <__udivmoddi4+0x2b0>
 8005658:	1a84      	subs	r4, r0, r2
 800565a:	eb61 0103 	sbc.w	r1, r1, r3
 800565e:	2001      	movs	r0, #1
 8005660:	468c      	mov	ip, r1
 8005662:	2d00      	cmp	r5, #0
 8005664:	d0a8      	beq.n	80055b8 <__udivmoddi4+0xa0>
 8005666:	e9c5 4c00 	strd	r4, ip, [r5]
 800566a:	e7a5      	b.n	80055b8 <__udivmoddi4+0xa0>
 800566c:	f1c2 0320 	rsb	r3, r2, #32
 8005670:	fa20 f603 	lsr.w	r6, r0, r3
 8005674:	4097      	lsls	r7, r2
 8005676:	fa01 f002 	lsl.w	r0, r1, r2
 800567a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800567e:	40d9      	lsrs	r1, r3
 8005680:	4330      	orrs	r0, r6
 8005682:	0c03      	lsrs	r3, r0, #16
 8005684:	fbb1 f6fe 	udiv	r6, r1, lr
 8005688:	fa1f f887 	uxth.w	r8, r7
 800568c:	fb0e 1116 	mls	r1, lr, r6, r1
 8005690:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005694:	fb06 f108 	mul.w	r1, r6, r8
 8005698:	4299      	cmp	r1, r3
 800569a:	fa04 f402 	lsl.w	r4, r4, r2
 800569e:	d909      	bls.n	80056b4 <__udivmoddi4+0x19c>
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80056a6:	f080 808d 	bcs.w	80057c4 <__udivmoddi4+0x2ac>
 80056aa:	4299      	cmp	r1, r3
 80056ac:	f240 808a 	bls.w	80057c4 <__udivmoddi4+0x2ac>
 80056b0:	3e02      	subs	r6, #2
 80056b2:	443b      	add	r3, r7
 80056b4:	1a5b      	subs	r3, r3, r1
 80056b6:	b281      	uxth	r1, r0
 80056b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80056bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80056c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80056c4:	fb00 f308 	mul.w	r3, r0, r8
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d907      	bls.n	80056dc <__udivmoddi4+0x1c4>
 80056cc:	1879      	adds	r1, r7, r1
 80056ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80056d2:	d273      	bcs.n	80057bc <__udivmoddi4+0x2a4>
 80056d4:	428b      	cmp	r3, r1
 80056d6:	d971      	bls.n	80057bc <__udivmoddi4+0x2a4>
 80056d8:	3802      	subs	r0, #2
 80056da:	4439      	add	r1, r7
 80056dc:	1acb      	subs	r3, r1, r3
 80056de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80056e2:	e778      	b.n	80055d6 <__udivmoddi4+0xbe>
 80056e4:	f1c6 0c20 	rsb	ip, r6, #32
 80056e8:	fa03 f406 	lsl.w	r4, r3, r6
 80056ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80056f0:	431c      	orrs	r4, r3
 80056f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80056f6:	fa01 f306 	lsl.w	r3, r1, r6
 80056fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80056fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8005702:	431f      	orrs	r7, r3
 8005704:	0c3b      	lsrs	r3, r7, #16
 8005706:	fbb1 f9fe 	udiv	r9, r1, lr
 800570a:	fa1f f884 	uxth.w	r8, r4
 800570e:	fb0e 1119 	mls	r1, lr, r9, r1
 8005712:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005716:	fb09 fa08 	mul.w	sl, r9, r8
 800571a:	458a      	cmp	sl, r1
 800571c:	fa02 f206 	lsl.w	r2, r2, r6
 8005720:	fa00 f306 	lsl.w	r3, r0, r6
 8005724:	d908      	bls.n	8005738 <__udivmoddi4+0x220>
 8005726:	1861      	adds	r1, r4, r1
 8005728:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800572c:	d248      	bcs.n	80057c0 <__udivmoddi4+0x2a8>
 800572e:	458a      	cmp	sl, r1
 8005730:	d946      	bls.n	80057c0 <__udivmoddi4+0x2a8>
 8005732:	f1a9 0902 	sub.w	r9, r9, #2
 8005736:	4421      	add	r1, r4
 8005738:	eba1 010a 	sub.w	r1, r1, sl
 800573c:	b2bf      	uxth	r7, r7
 800573e:	fbb1 f0fe 	udiv	r0, r1, lr
 8005742:	fb0e 1110 	mls	r1, lr, r0, r1
 8005746:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800574a:	fb00 f808 	mul.w	r8, r0, r8
 800574e:	45b8      	cmp	r8, r7
 8005750:	d907      	bls.n	8005762 <__udivmoddi4+0x24a>
 8005752:	19e7      	adds	r7, r4, r7
 8005754:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8005758:	d22e      	bcs.n	80057b8 <__udivmoddi4+0x2a0>
 800575a:	45b8      	cmp	r8, r7
 800575c:	d92c      	bls.n	80057b8 <__udivmoddi4+0x2a0>
 800575e:	3802      	subs	r0, #2
 8005760:	4427      	add	r7, r4
 8005762:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005766:	eba7 0708 	sub.w	r7, r7, r8
 800576a:	fba0 8902 	umull	r8, r9, r0, r2
 800576e:	454f      	cmp	r7, r9
 8005770:	46c6      	mov	lr, r8
 8005772:	4649      	mov	r1, r9
 8005774:	d31a      	bcc.n	80057ac <__udivmoddi4+0x294>
 8005776:	d017      	beq.n	80057a8 <__udivmoddi4+0x290>
 8005778:	b15d      	cbz	r5, 8005792 <__udivmoddi4+0x27a>
 800577a:	ebb3 020e 	subs.w	r2, r3, lr
 800577e:	eb67 0701 	sbc.w	r7, r7, r1
 8005782:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005786:	40f2      	lsrs	r2, r6
 8005788:	ea4c 0202 	orr.w	r2, ip, r2
 800578c:	40f7      	lsrs	r7, r6
 800578e:	e9c5 2700 	strd	r2, r7, [r5]
 8005792:	2600      	movs	r6, #0
 8005794:	4631      	mov	r1, r6
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	462e      	mov	r6, r5
 800579c:	4628      	mov	r0, r5
 800579e:	e70b      	b.n	80055b8 <__udivmoddi4+0xa0>
 80057a0:	4606      	mov	r6, r0
 80057a2:	e6e9      	b.n	8005578 <__udivmoddi4+0x60>
 80057a4:	4618      	mov	r0, r3
 80057a6:	e6fd      	b.n	80055a4 <__udivmoddi4+0x8c>
 80057a8:	4543      	cmp	r3, r8
 80057aa:	d2e5      	bcs.n	8005778 <__udivmoddi4+0x260>
 80057ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80057b0:	eb69 0104 	sbc.w	r1, r9, r4
 80057b4:	3801      	subs	r0, #1
 80057b6:	e7df      	b.n	8005778 <__udivmoddi4+0x260>
 80057b8:	4608      	mov	r0, r1
 80057ba:	e7d2      	b.n	8005762 <__udivmoddi4+0x24a>
 80057bc:	4660      	mov	r0, ip
 80057be:	e78d      	b.n	80056dc <__udivmoddi4+0x1c4>
 80057c0:	4681      	mov	r9, r0
 80057c2:	e7b9      	b.n	8005738 <__udivmoddi4+0x220>
 80057c4:	4666      	mov	r6, ip
 80057c6:	e775      	b.n	80056b4 <__udivmoddi4+0x19c>
 80057c8:	4630      	mov	r0, r6
 80057ca:	e74a      	b.n	8005662 <__udivmoddi4+0x14a>
 80057cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80057d0:	4439      	add	r1, r7
 80057d2:	e713      	b.n	80055fc <__udivmoddi4+0xe4>
 80057d4:	3802      	subs	r0, #2
 80057d6:	443c      	add	r4, r7
 80057d8:	e724      	b.n	8005624 <__udivmoddi4+0x10c>
 80057da:	bf00      	nop

080057dc <__aeabi_idiv0>:
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop

080057e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057e4:	f001 fd08 	bl	80071f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057e8:	f000 f80a 	bl	8005800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057ec:	f000 f8b8 	bl	8005960 <MX_GPIO_Init>
  MX_DMA_Init();
 80057f0:	f000 f88e 	bl	8005910 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80057f4:	f000 f862 	bl	80058bc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  test_client();  // test_client.py
 80057f8:	f000 fad8 	bl	8005dac <test_client>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80057fc:	e7fe      	b.n	80057fc <main+0x1c>
	...

08005800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b094      	sub	sp, #80	; 0x50
 8005804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005806:	f107 0320 	add.w	r3, r7, #32
 800580a:	2230      	movs	r2, #48	; 0x30
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f003 ffec 	bl	80097ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	609a      	str	r2, [r3, #8]
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <SystemClock_Config+0xb4>)
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <SystemClock_Config+0xb4>)
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6413      	str	r3, [r2, #64]	; 0x40
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <SystemClock_Config+0xb4>)
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005840:	2300      	movs	r3, #0
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <SystemClock_Config+0xb8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <SystemClock_Config+0xb8>)
 800584a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <SystemClock_Config+0xb8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800585c:	2302      	movs	r3, #2
 800585e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005860:	2301      	movs	r3, #1
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005864:	2310      	movs	r3, #16
 8005866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005868:	2300      	movs	r3, #0
 800586a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800586c:	f107 0320 	add.w	r3, r7, #32
 8005870:	4618      	mov	r0, r3
 8005872:	f002 fbe3 	bl	800803c <HAL_RCC_OscConfig>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800587c:	f000 f88a 	bl	8005994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005880:	230f      	movs	r3, #15
 8005882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f002 fe46 	bl	800852c <HAL_RCC_ClockConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80058a6:	f000 f875 	bl	8005994 <Error_Handler>
  }
}
 80058aa:	bf00      	nop
 80058ac:	3750      	adds	r7, #80	; 0x50
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40007000 	.word	0x40007000

080058bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <MX_USART1_UART_Init+0x50>)
 80058c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80058cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058ce:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058d4:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058dc:	2200      	movs	r2, #0
 80058de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058e2:	220c      	movs	r2, #12
 80058e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058e6:	4b08      	ldr	r3, [pc, #32]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058f2:	4805      	ldr	r0, [pc, #20]	; (8005908 <MX_USART1_UART_Init+0x4c>)
 80058f4:	f002 ffea 	bl	80088cc <HAL_UART_Init>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80058fe:	f000 f849 	bl	8005994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200008e8 	.word	0x200008e8
 800590c:	40011000 	.word	0x40011000

08005910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <MX_DMA_Init+0x4c>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4a0f      	ldr	r2, [pc, #60]	; (800595c <MX_DMA_Init+0x4c>)
 8005920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005924:	6313      	str	r3, [r2, #48]	; 0x30
 8005926:	4b0d      	ldr	r3, [pc, #52]	; (800595c <MX_DMA_Init+0x4c>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005932:	2200      	movs	r2, #0
 8005934:	2100      	movs	r1, #0
 8005936:	203a      	movs	r0, #58	; 0x3a
 8005938:	f001 fdab 	bl	8007492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800593c:	203a      	movs	r0, #58	; 0x3a
 800593e:	f001 fdc4 	bl	80074ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	2046      	movs	r0, #70	; 0x46
 8005948:	f001 fda3 	bl	8007492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800594c:	2046      	movs	r0, #70	; 0x46
 800594e:	f001 fdbc 	bl	80074ca <HAL_NVIC_EnableIRQ>

}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800

08005960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <MX_GPIO_Init+0x30>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <MX_GPIO_Init+0x30>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6313      	str	r3, [r2, #48]	; 0x30
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <MX_GPIO_Init+0x30>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	687b      	ldr	r3, [r7, #4]

}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40023800 	.word	0x40023800

08005994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005998:	b672      	cpsid	i
}
 800599a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800599c:	e7fe      	b.n	800599c <Error_Handler+0x8>
	...

080059a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	4b10      	ldr	r3, [pc, #64]	; (80059ec <HAL_MspInit+0x4c>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	4a0f      	ldr	r2, [pc, #60]	; (80059ec <HAL_MspInit+0x4c>)
 80059b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b4:	6453      	str	r3, [r2, #68]	; 0x44
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <HAL_MspInit+0x4c>)
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059c2:	2300      	movs	r3, #0
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_MspInit+0x4c>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a08      	ldr	r2, [pc, #32]	; (80059ec <HAL_MspInit+0x4c>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_MspInit+0x4c>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40023800 	.word	0x40023800

080059f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a4c      	ldr	r2, [pc, #304]	; (8005b40 <HAL_UART_MspInit+0x150>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	f040 8091 	bne.w	8005b36 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	4b4a      	ldr	r3, [pc, #296]	; (8005b44 <HAL_UART_MspInit+0x154>)
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	4a49      	ldr	r2, [pc, #292]	; (8005b44 <HAL_UART_MspInit+0x154>)
 8005a1e:	f043 0310 	orr.w	r3, r3, #16
 8005a22:	6453      	str	r3, [r2, #68]	; 0x44
 8005a24:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_UART_MspInit+0x154>)
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <HAL_UART_MspInit+0x154>)
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	4a42      	ldr	r2, [pc, #264]	; (8005b44 <HAL_UART_MspInit+0x154>)
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005a40:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <HAL_UART_MspInit+0x154>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a52:	2302      	movs	r3, #2
 8005a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a56:	2301      	movs	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a5e:	2307      	movs	r3, #7
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a62:	f107 0314 	add.w	r3, r7, #20
 8005a66:	4619      	mov	r1, r3
 8005a68:	4837      	ldr	r0, [pc, #220]	; (8005b48 <HAL_UART_MspInit+0x158>)
 8005a6a:	f002 f94b 	bl	8007d04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005a6e:	4b37      	ldr	r3, [pc, #220]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a70:	4a37      	ldr	r2, [pc, #220]	; (8005b50 <HAL_UART_MspInit+0x160>)
 8005a72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a7c:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a82:	4b32      	ldr	r3, [pc, #200]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a88:	4b30      	ldr	r3, [pc, #192]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a90:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a96:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005aa2:	4b2a      	ldr	r3, [pc, #168]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005aa8:	4b28      	ldr	r3, [pc, #160]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005aae:	4827      	ldr	r0, [pc, #156]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005ab0:	f001 fd26 	bl	8007500 <HAL_DMA_Init>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005aba:	f7ff ff6b 	bl	8005994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a22      	ldr	r2, [pc, #136]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ac4:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <HAL_UART_MspInit+0x15c>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005aca:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005acc:	4a22      	ldr	r2, [pc, #136]	; (8005b58 <HAL_UART_MspInit+0x168>)
 8005ace:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ad6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aec:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005af2:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005af8:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005afe:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005b0a:	4812      	ldr	r0, [pc, #72]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005b0c:	f001 fcf8 	bl	8007500 <HAL_DMA_Init>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005b16:	f7ff ff3d 	bl	8005994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a0d      	ldr	r2, [pc, #52]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <HAL_UART_MspInit+0x164>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	2025      	movs	r0, #37	; 0x25
 8005b2c:	f001 fcb1 	bl	8007492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b30:	2025      	movs	r0, #37	; 0x25
 8005b32:	f001 fcca 	bl	80074ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005b36:	bf00      	nop
 8005b38:	3728      	adds	r7, #40	; 0x28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40020000 	.word	0x40020000
 8005b4c:	20000888 	.word	0x20000888
 8005b50:	40026440 	.word	0x40026440
 8005b54:	20000828 	.word	0x20000828
 8005b58:	400264b8 	.word	0x400264b8

08005b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b60:	e7fe      	b.n	8005b60 <NMI_Handler+0x4>

08005b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b66:	e7fe      	b.n	8005b66 <HardFault_Handler+0x4>

08005b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b6c:	e7fe      	b.n	8005b6c <MemManage_Handler+0x4>

08005b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b72:	e7fe      	b.n	8005b72 <BusFault_Handler+0x4>

08005b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b78:	e7fe      	b.n	8005b78 <UsageFault_Handler+0x4>

08005b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b96:	b480      	push	{r7}
 8005b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b9a:	bf00      	nop
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ba8:	f001 fb78 	bl	800729c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <USART1_IRQHandler+0x10>)
 8005bb6:	f002 ff99 	bl	8008aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200008e8 	.word	0x200008e8

08005bc4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005bc8:	4802      	ldr	r0, [pc, #8]	; (8005bd4 <DMA2_Stream2_IRQHandler+0x10>)
 8005bca:	f001 fe31 	bl	8007830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000888 	.word	0x20000888

08005bd8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005bdc:	4802      	ldr	r0, [pc, #8]	; (8005be8 <DMA2_Stream7_IRQHandler+0x10>)
 8005bde:	f001 fe27 	bl	8007830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000828 	.word	0x20000828

08005bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <SystemInit+0x20>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf6:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <SystemInit+0x20>)
 8005bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c00:	bf00      	nop
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	e000ed00 	.word	0xe000ed00

08005c10 <request>:
//    dma_transmit_setup();
//    dma_request_setup();
//}


void request(poly *sendx){
 8005c10:	b580      	push	{r7, lr}
 8005c12:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	6018      	str	r0, [r3, #0]
  unsigned char sendbytes[2048] = {0};
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	3304      	adds	r3, #4
 8005c26:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f003 fddd 	bl	80097ec <memset>
  //signal_host();
  dma_request(sendbytes, NEWHOPE_SENDABYTES);
 8005c32:	f107 0308 	add.w	r3, r7, #8
 8005c36:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 fa5a 	bl	80070f4 <dma_request>
  signal_host();
 8005c40:	f001 fa9c 	bl	800717c <signal_host>
  while (!dma_done());
 8005c44:	bf00      	nop
 8005c46:	f001 fa7b 	bl	8007140 <dma_done>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0fa      	beq.n	8005c46 <request+0x36>
  //signal_host();
  poly_frombytes_all(sendbytes,sendx);
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	f107 0208 	add.w	r2, r7, #8
 8005c56:	6819      	ldr	r1, [r3, #0]
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f000 fe41 	bl	80068e0 <poly_frombytes_all>
}
 8005c5e:	bf00      	nop
 8005c60:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <check_key>:

void check_key(unsigned char *key_b){
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  char out[5];
  int i,e=1;
 8005c70:	2301      	movs	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
  signal_host();
 8005c74:	f001 fa82 	bl	800717c <signal_host>
  for (i=0;i<32;i++){
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e018      	b.n	8005cb0 <check_key+0x48>
    if(key_b[i] != key_stored[i]){
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	491b      	ldr	r1, [pc, #108]	; (8005cf4 <check_key+0x8c>)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d00b      	beq.n	8005caa <check_key+0x42>
      out[0] = 'E';
 8005c92:	2345      	movs	r3, #69	; 0x45
 8005c94:	723b      	strb	r3, [r7, #8]
      out[1] = 'r';
 8005c96:	2372      	movs	r3, #114	; 0x72
 8005c98:	727b      	strb	r3, [r7, #9]
      out[2] = 'r';
 8005c9a:	2372      	movs	r3, #114	; 0x72
 8005c9c:	72bb      	strb	r3, [r7, #10]
      out[3] = 'o';
 8005c9e:	236f      	movs	r3, #111	; 0x6f
 8005ca0:	72fb      	strb	r3, [r7, #11]
      out[4] = 'r';
 8005ca2:	2372      	movs	r3, #114	; 0x72
 8005ca4:	733b      	strb	r3, [r7, #12]
      e= 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
  for (i=0;i<32;i++){
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3301      	adds	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b1f      	cmp	r3, #31
 8005cb4:	dde3      	ble.n	8005c7e <check_key+0x16>
    }
  } 
  if(e){
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <check_key+0x68>
    out[0] = 'D';
 8005cbc:	2344      	movs	r3, #68	; 0x44
 8005cbe:	723b      	strb	r3, [r7, #8]
    out[1] = 'o';
 8005cc0:	236f      	movs	r3, #111	; 0x6f
 8005cc2:	727b      	strb	r3, [r7, #9]
    out[2] = 'n';
 8005cc4:	236e      	movs	r3, #110	; 0x6e
 8005cc6:	72bb      	strb	r3, [r7, #10]
    out[3] = 'e';
 8005cc8:	2365      	movs	r3, #101	; 0x65
 8005cca:	72fb      	strb	r3, [r7, #11]
    out[4] = '!';
 8005ccc:	2321      	movs	r3, #33	; 0x21
 8005cce:	733b      	strb	r3, [r7, #12]
  }
  dma_transmit(out, 5); while (!dma_done());
 8005cd0:	f107 0308 	add.w	r3, r7, #8
 8005cd4:	2105      	movs	r1, #5
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fa1e 	bl	8007118 <dma_transmit>
 8005cdc:	bf00      	nop
 8005cde:	f001 fa2f 	bl	8007140 <dma_done>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0fa      	beq.n	8005cde <check_key+0x76>
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	0800988c 	.word	0x0800988c

08005cf8 <send_x>:

void send_x(poly *sendx){
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b0c6      	sub	sp, #280	; 0x118
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	6018      	str	r0, [r3, #0]
  unsigned char sendbytes[256];
  char out[5];
  int i,j;
  signal_host();
 8005d02:	f001 fa3b 	bl	800717c <signal_host>
  for(i=0;i<1024;i+=128){
 8005d06:	2300      	movs	r3, #0
 8005d08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d0c:	e043      	b.n	8005d96 <send_x+0x9e>
    for (j=0;j<256;j+=2){
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d14:	e02f      	b.n	8005d76 <send_x+0x7e>
      sendbytes[j] = sendx->v[i+j/2]  >> 8 ;
 8005d16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d1a:	0fda      	lsrs	r2, r3, #31
 8005d1c:	4413      	add	r3, r2
 8005d1e:	105b      	asrs	r3, r3, #1
 8005d20:	461a      	mov	r2, r3
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d26:	441a      	add	r2, r3
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	b2d9      	uxtb	r1, r3
 8005d36:	f107 0210 	add.w	r2, r7, #16
 8005d3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d3e:	4413      	add	r3, r2
 8005d40:	460a      	mov	r2, r1
 8005d42:	701a      	strb	r2, [r3, #0]
      sendbytes[j+1] = sendx->v[i+j/2]& 0xff;
 8005d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d48:	0fda      	lsrs	r2, r3, #31
 8005d4a:	4413      	add	r3, r2
 8005d4c:	105b      	asrs	r3, r3, #1
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d54:	441a      	add	r2, r3
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d62:	3301      	adds	r3, #1
 8005d64:	b2d1      	uxtb	r1, r2
 8005d66:	f107 0210 	add.w	r2, r7, #16
 8005d6a:	54d1      	strb	r1, [r2, r3]
    for (j=0;j<256;j+=2){
 8005d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d70:	3302      	adds	r3, #2
 8005d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	ddcb      	ble.n	8005d16 <send_x+0x1e>
    }
    dma_transmit(sendbytes, 256); //while (!dma_done());
 8005d7e:	f107 0310 	add.w	r3, r7, #16
 8005d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 f9c6 	bl	8007118 <dma_transmit>
  for(i=0;i<1024;i+=128){
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d90:	3380      	adds	r3, #128	; 0x80
 8005d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9e:	dbb6      	blt.n	8005d0e <send_x+0x16>
  }
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <test_client>:

int test_client(){
 8005dac:	b580      	push	{r7, lr}
 8005dae:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8005db2:	af00      	add	r7, sp, #0
  poly CMsendb,sendx;
  unsigned char key_b[32];
  int i;
  request(&sendx);
 8005db4:	f107 0320 	add.w	r3, r7, #32
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff29 	bl	8005c10 <request>
  newhope_sharedb(key_b, &CMsendb, &sendx);
 8005dbe:	f107 0220 	add.w	r2, r7, #32
 8005dc2:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fbe6 	bl	800659a <newhope_sharedb>


  send_x(&CMsendb);
 8005dce:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff ff90 	bl	8005cf8 <send_x>
  check_key(key_b);
 8005dd8:	463b      	mov	r3, r7
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff ff44 	bl	8005c68 <check_key>

  return 0;
 8005de0:	2300      	movs	r3, #0

}
 8005de2:	4618      	mov	r0, r3
 8005de4:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <crypto_core_chacha20>:
        unsigned char *out,
  const unsigned char *in,
  const unsigned char *k,
  const unsigned char *c
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b0a6      	sub	sp, #152	; 0x98
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
    uint32_t x[16];
    uint32_t j[16];
    uint8_t i;
  
    asm_init(x,k,in,c);
 8005dfa:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	f7fc fae6 	bl	80023d4 <asm_init>
    for (i = 0;i < 16;++i) j[i] = x[i];
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e0e:	e014      	b.n	8005e3a <crypto_core_chacha20+0x4e>
 8005e10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005e14:	f897 1097 	ldrb.w	r1, [r7, #151]	; 0x97
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005e1e:	4413      	add	r3, r2
 8005e20:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8005e24:	008b      	lsls	r3, r1, #2
 8005e26:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8005e2a:	440b      	add	r3, r1
 8005e2c:	f843 2c84 	str.w	r2, [r3, #-132]
 8005e30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005e34:	3301      	adds	r3, #1
 8005e36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d9e6      	bls.n	8005e10 <crypto_core_chacha20+0x24>
    asm_quarterround(x);
 8005e42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fc fad0 	bl	80023ec <asm_quarterround>
    asm_add_and_store(out, x, j);
 8005e4c:	f107 0214 	add.w	r2, r7, #20
 8005e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e54:	4619      	mov	r1, r3
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7fd f944 	bl	80030e4 <asm_add_and_store>
    return 0;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3798      	adds	r7, #152	; 0x98
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <crypto_stream_chacha20>:



int crypto_stream_chacha20(unsigned char *c,unsigned long long clen, const unsigned char *n, const unsigned char *k)
{
 8005e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e6c:	b0a6      	sub	sp, #152	; 0x98
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6178      	str	r0, [r7, #20]
 8005e72:	e9c7 2302 	strd	r2, r3, [r7, #8]
  unsigned char block[64];
  unsigned char kcopy[32];
  unsigned long long i;
  unsigned int u;

  if (!clen) return 0;
 8005e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <crypto_stream_chacha20+0x1a>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e0a7      	b.n	8005fd2 <crypto_stream_chacha20+0x16a>

  for (i = 0;i < 32;++i) kcopy[i] = k[i];
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8005e8e:	e017      	b.n	8005ec0 <crypto_stream_chacha20+0x58>
 8005e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e98:	4413      	add	r3, r2
 8005e9a:	7819      	ldrb	r1, [r3, #0]
 8005e9c:	f107 021c 	add.w	r2, r7, #28
 8005ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ea4:	4413      	add	r3, r2
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005eae:	1c51      	adds	r1, r2, #1
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	f143 0300 	adc.w	r3, r3, #0
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ebc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8005ec0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf08      	it	eq
 8005ec8:	2a20      	cmpeq	r2, #32
 8005eca:	d3e1      	bcc.n	8005e90 <crypto_stream_chacha20+0x28>
  asm_csc_for(in,n);
 8005ecc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ed0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fc fa75 	bl	80023c4 <asm_csc_for>

  while (clen >= 64) {
 8005eda:	e045      	b.n	8005f68 <crypto_stream_chacha20+0x100>
    
    crypto_core_chacha20(c,in,kcopy,sigma);
 8005edc:	f107 021c 	add.w	r2, r7, #28
 8005ee0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <crypto_stream_chacha20+0x174>)
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7ff ff80 	bl	8005dec <crypto_core_chacha20>
    u = 1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (i = 8;i < 16;++i) {
 8005ef2:	f04f 0208 	mov.w	r2, #8
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8005efe:	e022      	b.n	8005f46 <crypto_stream_chacha20+0xde>
      u += (unsigned int) in[i];
 8005f00:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f08:	4413      	add	r3, r2
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f12:	4413      	add	r3, r2
 8005f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      in[i] = u;
 8005f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f1c:	b2d9      	uxtb	r1, r3
 8005f1e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f26:	4413      	add	r3, r2
 8005f28:	460a      	mov	r2, r1
 8005f2a:	701a      	strb	r2, [r3, #0]
      u >>= 8;
 8005f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (i = 8;i < 16;++i) {
 8005f36:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005f3a:	f112 0801 	adds.w	r8, r2, #1
 8005f3e:	f143 0900 	adc.w	r9, r3, #0
 8005f42:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
 8005f46:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf08      	it	eq
 8005f4e:	2a10      	cmpeq	r2, #16
 8005f50:	d3d6      	bcc.n	8005f00 <crypto_stream_chacha20+0x98>
    }

    clen -= 64;
 8005f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f56:	f1b2 0a40 	subs.w	sl, r2, #64	; 0x40
 8005f5a:	f143 3bff 	adc.w	fp, r3, #4294967295	; 0xffffffff
 8005f5e:	e9c7 ab02 	strd	sl, fp, [r7, #8]
    c += 64;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3340      	adds	r3, #64	; 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  while (clen >= 64) {
 8005f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf08      	it	eq
 8005f70:	2a40      	cmpeq	r2, #64	; 0x40
 8005f72:	d2b3      	bcs.n	8005edc <crypto_stream_chacha20+0x74>
  }

  if (clen) {
 8005f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d029      	beq.n	8005fd0 <crypto_stream_chacha20+0x168>
    crypto_core_chacha20(block,in,kcopy,sigma);
 8005f7c:	f107 021c 	add.w	r2, r7, #28
 8005f80:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8005f84:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <crypto_stream_chacha20+0x174>)
 8005f8a:	f7ff ff2f 	bl	8005dec <crypto_core_chacha20>
    for (i = 0;i < clen;++i) c[i] = block[i];
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8005f9a:	e011      	b.n	8005fc0 <crypto_stream_chacha20+0x158>
 8005f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005fa8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005fac:	440a      	add	r2, r1
 8005fae:	7812      	ldrb	r2, [r2, #0]
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005fb6:	1c54      	adds	r4, r2, #1
 8005fb8:	f143 0500 	adc.w	r5, r3, #0
 8005fbc:	e9c7 4524 	strd	r4, r5, [r7, #144]	; 0x90
 8005fc0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	bf08      	it	eq
 8005fcc:	4290      	cmpeq	r0, r2
 8005fce:	d3e5      	bcc.n	8005f9c <crypto_stream_chacha20+0x134>
  }
  return 0;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3798      	adds	r7, #152	; 0x98
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fdc:	080098ac 	.word	0x080098ac

08005fe0 <helprec>:
#include "../new_hope/error_correction.h"

void helprec(poly *c, const poly *v, const unsigned char *seed, unsigned char nonce)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b0aa      	sub	sp, #168	; 0xa8
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	70fb      	strb	r3, [r7, #3]
  unsigned char rbit,rbit1;
  unsigned char rand[32];
  unsigned char n[8];
  int i;

  for(i=0;i<7;i++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ff4:	e00b      	b.n	800600e <helprec+0x2e>
    n[i] = 0;
 8005ff6:	f107 0214 	add.w	r2, r7, #20
 8005ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ffe:	4413      	add	r3, r2
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
  for(i=0;i<7;i++)
 8006004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006008:	3301      	adds	r3, #1
 800600a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800600e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006012:	2b06      	cmp	r3, #6
 8006014:	ddef      	ble.n	8005ff6 <helprec+0x16>
  n[7] = nonce;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	76fb      	strb	r3, [r7, #27]

  crypto_stream_chacha20(rand,32,n,seed);
 800601a:	f107 011c 	add.w	r1, r7, #28
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	f107 0314 	add.w	r3, r7, #20
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	f04f 0220 	mov.w	r2, #32
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	4608      	mov	r0, r1
 8006032:	f7ff ff19 	bl	8005e68 <crypto_stream_chacha20>

  asm_helprec((v->v),rand,(c->v));
 8006036:	f107 031c 	add.w	r3, r7, #28
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4619      	mov	r1, r3
 800603e:	68b8      	ldr	r0, [r7, #8]
 8006040:	f7fd ffad 	bl	8003f9e <asm_helprec>




}
 8006044:	bf00      	nop
 8006046:	37a0      	adds	r7, #160	; 0xa0
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <keccak_squeezefourblocks_asm>:


static void keccak_squeezefourblocks_asm(unsigned char *h,
                                 uint64_t *s, 
                                 unsigned int r)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
    KeccakF1600_StatePermute(s);
 8006058:	68b8      	ldr	r0, [r7, #8]
 800605a:	f7fa fed1 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h, 0,r );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f7fa fccb 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7fa fec8 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h+r, 0,r );
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	18d1      	adds	r1, r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	68b8      	ldr	r0, [r7, #8]
 800607c:	f7fa fcc0 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 8006080:	68b8      	ldr	r0, [r7, #8]
 8006082:	f7fa febd 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h+(2*r), 0,r );
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	18d1      	adds	r1, r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	68b8      	ldr	r0, [r7, #8]
 8006094:	f7fa fcb4 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    KeccakF1600_StatePermute(s);
 8006098:	68b8      	ldr	r0, [r7, #8]
 800609a:	f7fa feb1 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h+(3*r), 0,r );
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	18d1      	adds	r1, r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	68b8      	ldr	r0, [r7, #8]
 80060b0:	f7fa fca6 	bl	8000a00 <KeccakF1600_StateExtractBytes>


}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <keccak_squeezeblock_asm>:


static void keccak_squeezeblock_asm(unsigned char *h,
                                 uint64_t *s, 
                                 unsigned int r)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
    KeccakF1600_StatePermute(s);
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f7fa fe99 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, h, 0,r );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	68b8      	ldr	r0, [r7, #8]
 80060d6:	f7fa fc93 	bl	8000a00 <KeccakF1600_StateExtractBytes>
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <keccak_absorb_asm>:

static void keccak_absorb_asm(uint64_t *s,
                          unsigned int r,
                          const unsigned char *m, unsigned long long int mlen,
                          unsigned char p)
{
 80060e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e6:	b0b8      	sub	sp, #224	; 0xe0
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  unsigned long long i;
  unsigned char t[200];

  for (i = 0; i < 25; ++i)
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 80060fc:	e012      	b.n	8006124 <keccak_absorb_asm+0x42>
    s[i] = 0;
 80060fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	18d1      	adds	r1, r2, r3
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 25; ++i)
 8006114:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006118:	f112 0a01 	adds.w	sl, r2, #1
 800611c:	f143 0b00 	adc.w	fp, r3, #0
 8006120:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
 8006124:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf08      	it	eq
 800612c:	2a19      	cmpeq	r2, #25
 800612e:	d3e6      	bcc.n	80060fe <keccak_absorb_asm+0x1c>
  

  for (i = 0; i < r; ++i)
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 800613c:	e00e      	b.n	800615c <keccak_absorb_asm+0x7a>
    t[i] = 0;
 800613e:	f107 0210 	add.w	r2, r7, #16
 8006142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006146:	4413      	add	r3, r2
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < r; ++i)
 800614c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006150:	f112 0801 	adds.w	r8, r2, #1
 8006154:	f143 0900 	adc.w	r9, r3, #0
 8006158:	e9c7 8936 	strd	r8, r9, [r7, #216]	; 0xd8
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	461a      	mov	r2, r3
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006168:	4299      	cmp	r1, r3
 800616a:	bf08      	it	eq
 800616c:	4290      	cmpeq	r0, r2
 800616e:	d3e6      	bcc.n	800613e <keccak_absorb_asm+0x5c>
  for (i = 0; i < mlen; ++i)
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 800617c:	e012      	b.n	80061a4 <keccak_absorb_asm+0xc2>
    t[i] = m[i];
 800617e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	7819      	ldrb	r1, [r3, #0]
 8006188:	f107 0210 	add.w	r2, r7, #16
 800618c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006190:	4413      	add	r3, r2
 8006192:	460a      	mov	r2, r1
 8006194:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < mlen; ++i)
 8006196:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800619a:	1c54      	adds	r4, r2, #1
 800619c:	f143 0500 	adc.w	r5, r3, #0
 80061a0:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
 80061a4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80061a8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80061ac:	4299      	cmp	r1, r3
 80061ae:	bf08      	it	eq
 80061b0:	4290      	cmpeq	r0, r2
 80061b2:	d3e4      	bcc.n	800617e <keccak_absorb_asm+0x9c>
  t[i] = p;
 80061b4:	f107 0210 	add.w	r2, r7, #16
 80061b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061bc:	4413      	add	r3, r2
 80061be:	f897 2108 	ldrb.w	r2, [r7, #264]	; 0x108
 80061c2:	701a      	strb	r2, [r3, #0]
  t[r - 1] |= 128;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80061cc:	4413      	add	r3, r2
 80061ce:	f813 2cd0 	ldrb.w	r2, [r3, #-208]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80061e0:	440b      	add	r3, r1
 80061e2:	f803 2cd0 	strb.w	r2, [r3, #-208]
  KeccakF1600_StateXORBytes(s,t,0,r);
 80061e6:	f107 0110 	add.w	r1, r7, #16
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7fa fa06 	bl	8000600 <KeccakF1600_StateXORBytes>
}
 80061f4:	bf00      	nop
 80061f6:	37e0      	adds	r7, #224	; 0xe0
 80061f8:	46bd      	mov	sp, r7
 80061fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061fe <shake128_absorb_asm>:


void shake128_absorb_asm(uint64_t *s, const unsigned char *input, unsigned int inputByteLen)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af04      	add	r7, sp, #16
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
    
    keccak_absorb_asm(s, SHAKE128_RATE, input, inputByteLen, 0x1F);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	461a      	mov	r2, r3
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	211f      	movs	r1, #31
 8006214:	9102      	str	r1, [sp, #8]
 8006216:	e9cd 2300 	strd	r2, r3, [sp]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	21a8      	movs	r1, #168	; 0xa8
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff ff5f 	bl	80060e2 <keccak_absorb_asm>
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <shake128_squeezeblocks_asm>:



void shake128_squeezeblocks_asm(unsigned char *output, unsigned int nblocks, uint64_t *s)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
    char out[16];
    if (nblocks == 4){
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b04      	cmp	r3, #4
 800623c:	d105      	bne.n	800624a <shake128_squeezeblocks_asm+0x1e>
        keccak_squeezefourblocks_asm(output, s, SHAKE128_RATE);
 800623e:	22a8      	movs	r2, #168	; 0xa8
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff ff02 	bl	800604c <keccak_squeezefourblocks_asm>
    }
    else if (nblocks == 1){
        keccak_squeezeblock_asm(output, s, SHAKE128_RATE);
    }

}
 8006248:	e007      	b.n	800625a <shake128_squeezeblocks_asm+0x2e>
    else if (nblocks == 1){
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d104      	bne.n	800625a <shake128_squeezeblocks_asm+0x2e>
        keccak_squeezeblock_asm(output, s, SHAKE128_RATE);
 8006250:	22a8      	movs	r2, #168	; 0xa8
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ff31 	bl	80060bc <keccak_squeezeblock_asm>
}
 800625a:	bf00      	nop
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <sha3256>:

	

void sha3256(unsigned char *output, const unsigned char *input, unsigned int inputByteLen)
{
 8006262:	b590      	push	{r4, r7, lr}
 8006264:	b0df      	sub	sp, #380	; 0x17c
 8006266:	af04      	add	r7, sp, #16
 8006268:	f107 030c 	add.w	r3, r7, #12
 800626c:	6018      	str	r0, [r3, #0]
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	6019      	str	r1, [r3, #0]
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	601a      	str	r2, [r3, #0]
  uint64_t s[25];
  unsigned char t[SHA3_256_RATE];
  int i;

    KeccakF1600_StateInitialize(s);
 8006278:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800627c:	4618      	mov	r0, r3
 800627e:	f7fa f8bf 	bl	8000400 <KeccakF1600_StateInitialize>
    keccak_absorb_asm(s, SHA3_256_RATE, input, inputByteLen, 0x06);
 8006282:	1d3b      	adds	r3, r7, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	f107 0108 	add.w	r1, r7, #8
 8006290:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006294:	2406      	movs	r4, #6
 8006296:	9402      	str	r4, [sp, #8]
 8006298:	e9cd 2300 	strd	r2, r3, [sp]
 800629c:	680a      	ldr	r2, [r1, #0]
 800629e:	2188      	movs	r1, #136	; 0x88
 80062a0:	f7ff ff1f 	bl	80060e2 <keccak_absorb_asm>

    KeccakF1600_StatePermute(s);
 80062a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa fda9 	bl	8000e00 <KeccakF1600_StatePermute>
    KeccakF1600_StateExtractBytes(s, t, 0,SHA3_256_RATE );
 80062ae:	f107 0110 	add.w	r1, r7, #16
 80062b2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80062b6:	2388      	movs	r3, #136	; 0x88
 80062b8:	2200      	movs	r2, #0
 80062ba:	f7fa fba1 	bl	8000a00 <KeccakF1600_StateExtractBytes>
    for(i=0;i<32;i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80062c4:	e011      	b.n	80062ea <sha3256+0x88>
        output[i] = t[i];
 80062c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80062ca:	f107 020c 	add.w	r2, r7, #12
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	4413      	add	r3, r2
 80062d2:	f107 0110 	add.w	r1, r7, #16
 80062d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80062da:	440a      	add	r2, r1
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	701a      	strb	r2, [r3, #0]
    for(i=0;i<32;i++)
 80062e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80062e4:	3301      	adds	r3, #1
 80062e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80062ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80062ee:	2b1f      	cmp	r3, #31
 80062f0:	dde9      	ble.n	80062c6 <sha3256+0x64>
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd90      	pop	{r4, r7, pc}

080062fe <decode_ap>:
}



static void decode_ap(poly *pk, unsigned char *seed)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  int i;
  for(i=0;i<NEWHOPE_SEEDBYTES/2;i++){
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e01e      	b.n	800634c <decode_ap+0x4e>
    seed[i*2] = pk->v[(POLY_BYTES/2)+i] >> 8;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 7260 	add.w	r2, r3, #896	; 0x380
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800631a:	0a1b      	lsrs	r3, r3, #8
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4619      	mov	r1, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	440b      	add	r3, r1
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
    seed[(i*2)+1] = pk->v[(POLY_BYTES/2)+i] & 0xff;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 7260 	add.w	r2, r3, #896	; 0x380
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	3301      	adds	r3, #1
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	4413      	add	r3, r2
 8006342:	b2ca      	uxtb	r2, r1
 8006344:	701a      	strb	r2, [r3, #0]
  for(i=0;i<NEWHOPE_SEEDBYTES/2;i++){
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b0f      	cmp	r3, #15
 8006350:	dddd      	ble.n	800630e <decode_ap+0x10>
  }

  poly_amplify(pk);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f96a 	bl	800662c <poly_amplify>
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <encode_bp>:




static void encode_bp(poly *b, poly *c)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  int i;
  poly_densify(b);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fae4 	bl	8006938 <poly_densify>
  for(i=0;i<PARAM_N/8;i++)
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	e051      	b.n	800641a <encode_bp+0xba>
    b->v[(POLY_BYTES/2)+i] = (c->v[8*i+4] | (c->v[8*i+5] << 2) | (c->v[8*i+6] << 4) | (c->v[8*i+7] << 6))| (c->v[8*i] | (c->v[8*i+1] << 2) | (c->v[8*i+2] << 4) | (c->v[8*i+3] << 6))<<8  ;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	1d1a      	adds	r2, r3, #4
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006382:	b21a      	sxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	1d59      	adds	r1, r3, #5
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	b21b      	sxth	r3, r3
 8006394:	4313      	orrs	r3, r2
 8006396:	b21a      	sxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	1d99      	adds	r1, r3, #6
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	b21b      	sxth	r3, r3
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b21a      	sxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	1dd9      	adds	r1, r3, #7
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	b21b      	sxth	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b21a      	sxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	00d9      	lsls	r1, r3, #3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80063ca:	4618      	mov	r0, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	1c59      	adds	r1, r3, #1
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	ea40 0103 	orr.w	r1, r0, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	1c98      	adds	r0, r3, #2
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	4319      	orrs	r1, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	1cd8      	adds	r0, r3, #3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80063fa:	019b      	lsls	r3, r3, #6
 80063fc:	430b      	orrs	r3, r1
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	b21b      	sxth	r3, r3
 8006402:	4313      	orrs	r3, r2
 8006404:	b219      	sxth	r1, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 7260 	add.w	r2, r3, #896	; 0x380
 800640c:	b289      	uxth	r1, r1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<PARAM_N/8;i++)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b7f      	cmp	r3, #127	; 0x7f
 800641e:	ddaa      	ble.n	8006376 <encode_bp+0x16>
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <gen_a>:
}

// non static just for cycle count
//static void gen_a(poly *a, const unsigned char *seed)
void gen_a(poly *a, const unsigned char *seed)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
    poly_uniform(a,seed);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fc58 	bl	8006cec <poly_uniform>
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <newhope_sharedb_internal>:
}



void newhope_sharedb_internal(unsigned char *sharedkey, poly *send, poly *received)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	f6ad 0d58 	subw	sp, sp, #2136	; 0x858
 800644a:	af00      	add	r7, sp, #0
 800644c:	f107 030c 	add.w	r3, r7, #12
 8006450:	6018      	str	r0, [r3, #0]
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	601a      	str	r2, [r3, #0]
  poly a;
  unsigned char seed[NEWHOPE_SEEDBYTES];
  unsigned char noiseseed[32];
    int i;
  
  randombytes(noiseseed, 0);
 800645c:	f107 0114 	add.w	r1, r7, #20
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	4608      	mov	r0, r1
 800646a:	f000 fdb3 	bl	8006fd4 <randombytes>


  decode_ap(received,seed);
 800646e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	4611      	mov	r1, r2
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	f7ff ff41 	bl	80062fe <decode_ap>



  gen_a(&a, seed);
 800647c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ffcf 	bl	800642a <gen_a>

  poly_getnoise(send,noiseseed,0);
 800648c:	f107 0114 	add.w	r1, r7, #20
 8006490:	f107 0308 	add.w	r3, r7, #8
 8006494:	2200      	movs	r2, #0
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	f000 fcbc 	bl	8006e14 <poly_getnoise>
  poly_ntt(send);
 800649c:	f107 0308 	add.w	r3, r7, #8
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	f000 fd6d 	bl	8006f80 <poly_ntt>


  asm_poly_pointwise(&a, &a, send);
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80064ae:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	f7fe ffce 	bl	8005454 <asm_poly_pointwise>
 
  asm_poly_pointwise(send, received, send );
 80064b8:	f107 0208 	add.w	r2, r7, #8
 80064bc:	1d39      	adds	r1, r7, #4
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	6809      	ldr	r1, [r1, #0]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	f7fe ffc4 	bl	8005454 <asm_poly_pointwise>
  poly_bitrev(send);
 80064cc:	f107 0308 	add.w	r3, r7, #8
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	f000 fd49 	bl	8006f68 <poly_bitrev>
  poly_invntt(send);
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	f000 fd64 	bl	8006fa8 <poly_invntt>

  poly_getnoise(received,noiseseed,2);
 80064e0:	f107 0114 	add.w	r1, r7, #20
 80064e4:	1d3b      	adds	r3, r7, #4
 80064e6:	2202      	movs	r2, #2
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	f000 fc93 	bl	8006e14 <poly_getnoise>
  asm_poly_add(send, received);
 80064ee:	1d3a      	adds	r2, r7, #4
 80064f0:	f107 0308 	add.w	r3, r7, #8
 80064f4:	6811      	ldr	r1, [r2, #0]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	f7fe ff6e 	bl	80053d8 <asm_poly_add>


  poly_getnoise(received,noiseseed,1);
 80064fc:	f107 0114 	add.w	r1, r7, #20
 8006500:	1d3b      	adds	r3, r7, #4
 8006502:	2201      	movs	r2, #1
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f000 fc85 	bl	8006e14 <poly_getnoise>
  poly_ntt(received);
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f000 fd37 	bl	8006f80 <poly_ntt>

  asm_poly_add(&a, received);
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe ff5c 	bl	80053d8 <asm_poly_add>

  helprec(received, send, noiseseed, 3);
 8006520:	f107 0214 	add.w	r2, r7, #20
 8006524:	f107 0108 	add.w	r1, r7, #8
 8006528:	1d38      	adds	r0, r7, #4
 800652a:	2303      	movs	r3, #3
 800652c:	6809      	ldr	r1, [r1, #0]
 800652e:	6800      	ldr	r0, [r0, #0]
 8006530:	f7ff fd56 	bl	8005fe0 <helprec>


  
  asm_rec(sharedkey, send, received);
 8006534:	1d3a      	adds	r2, r7, #4
 8006536:	f107 0108 	add.w	r1, r7, #8
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	6809      	ldr	r1, [r1, #0]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	f7fe fa35 	bl	80049b2 <asm_rec>


  for(i = 0;i<1024;i++){
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800654e:	e011      	b.n	8006574 <newhope_sharedb_internal+0x130>
    send->v[i] = a.v[i];  
 8006550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006554:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8006558:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800655c:	f107 0308 	add.w	r3, r7, #8
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8006566:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i = 0;i<1024;i++){
 800656a:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 800656e:	3301      	adds	r3, #1
 8006570:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8006574:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	dbe8      	blt.n	8006550 <newhope_sharedb_internal+0x10c>
  }

  sha3256(sharedkey, sharedkey, 32);
 800657e:	f107 010c 	add.w	r1, r7, #12
 8006582:	f107 030c 	add.w	r3, r7, #12
 8006586:	2220      	movs	r2, #32
 8006588:	6809      	ldr	r1, [r1, #0]
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	f7ff fe69 	bl	8006262 <sha3256>

}
 8006590:	bf00      	nop
 8006592:	f607 0758 	addw	r7, r7, #2136	; 0x858
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <newhope_sharedb>:

void newhope_sharedb(unsigned char *sharedkey, poly *send, poly *received){
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
    
  newhope_sharedb_internal(sharedkey, send, received);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff ff4a 	bl	8006444 <newhope_sharedb_internal>

  encode_bp(send, received);
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	f7ff fed4 	bl	8006360 <encode_bp>

}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <bitrev_vector>:
  15,527,271,783,143,655,399,911,79,591,335,847,207,719,463,975,47,559,303,815,175,687,431,943,111,623,367,879,239,751,495,1007,
  31,543,287,799,159,671,415,927,95,607,351,863,223,735,479,991,63,575,319,831,191,703,447,959,127,639,383,895,255,767,511,1023
};

void bitrev_vector(uint16_t* poly)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    unsigned int i,r;
    uint16_t tmp;

    for(i = 0; i < 992; i++)
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e021      	b.n	8006612 <bitrev_vector+0x52>
    {
        r = bitrev_table[i];
 80065ce:	4a16      	ldr	r2, [pc, #88]	; (8006628 <bitrev_vector+0x68>)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d6:	613b      	str	r3, [r7, #16]
        if (i < r)
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d215      	bcs.n	800660c <bitrev_vector+0x4c>
        {
          tmp = poly[i];
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	81fb      	strh	r3, [r7, #14]
          poly[i] = poly[r];
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	441a      	add	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	440b      	add	r3, r1
 80065fc:	8812      	ldrh	r2, [r2, #0]
 80065fe:	801a      	strh	r2, [r3, #0]
          poly[r] = tmp;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4413      	add	r3, r2
 8006608:	89fa      	ldrh	r2, [r7, #14]
 800660a:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < 992; i++)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3301      	adds	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8006618:	d3d9      	bcc.n	80065ce <bitrev_vector+0xe>
        }
    }
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000004 	.word	0x20000004

0800662c <poly_amplify>:




void poly_amplify(poly *p)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  int i;
  for(i=(PARAM_N/8)-1;i>-1;i--)
 8006634:	237f      	movs	r3, #127	; 0x7f
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e147      	b.n	80068ca <poly_amplify+0x29e>
  {
    p->v[(8*i)+7] =  ((p->v[(7*i)+6] & 0xff) << 6) | (p->v[(7*i)+6])>> 10;   
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4613      	mov	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	1d9a      	adds	r2, r3, #6
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800664a:	019b      	lsls	r3, r3, #6
 800664c:	b21b      	sxth	r3, r3
 800664e:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8006652:	b219      	sxth	r1, r3
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4613      	mov	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	1d9a      	adds	r2, r3, #6
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006664:	0a9b      	lsrs	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	b21b      	sxth	r3, r3
 800666a:	430b      	orrs	r3, r1
 800666c:	b219      	sxth	r1, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1dda      	adds	r2, r3, #7
 8006674:	b289      	uxth	r1, r1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+6] =  ((p->v[7*i+6] & 0x300) << 4) | ((p->v[(7*i)+5] & 0xff) << 4) | p->v[7*i+5] >> 12;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4613      	mov	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	1d9a      	adds	r2, r3, #6
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	b21b      	sxth	r3, r3
 8006690:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006694:	b219      	sxth	r1, r3
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	1d5a      	adds	r2, r3, #5
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	b21b      	sxth	r3, r3
 80066aa:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80066ae:	b21b      	sxth	r3, r3
 80066b0:	430b      	orrs	r3, r1
 80066b2:	b219      	sxth	r1, r3
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	1d5a      	adds	r2, r3, #5
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066c4:	0b1b      	lsrs	r3, r3, #12
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	b21b      	sxth	r3, r3
 80066ca:	430b      	orrs	r3, r1
 80066cc:	b219      	sxth	r1, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	1d9a      	adds	r2, r3, #6
 80066d4:	b289      	uxth	r1, r1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+5] =  ((p->v[(7*i)+5] & 0xf00) << 2 )| ((p->v[7*i+4] & 0xff) << 2) | p->v[7*i+4] >> 14;
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	1d5a      	adds	r2, r3, #5
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	b21b      	sxth	r3, r3
 80066f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066f4:	b219      	sxth	r1, r3
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4613      	mov	r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	b21b      	sxth	r3, r3
 800670a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800670e:	b21b      	sxth	r3, r3
 8006710:	430b      	orrs	r3, r1
 8006712:	b219      	sxth	r1, r3
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	1d1a      	adds	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006724:	0b9b      	lsrs	r3, r3, #14
 8006726:	b29b      	uxth	r3, r3
 8006728:	b21b      	sxth	r3, r3
 800672a:	430b      	orrs	r3, r1
 800672c:	b219      	sxth	r1, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	1d5a      	adds	r2, r3, #5
 8006734:	b289      	uxth	r1, r1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+4] =  (p->v[(7*i)+4] & 0x3f00) | (p->v[(7*i)+3] & 0xff);
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4613      	mov	r3, r2
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	1d1a      	adds	r2, r3, #4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800674c:	b21b      	sxth	r3, r3
 800674e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006752:	b219      	sxth	r1, r3
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	1cda      	adds	r2, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006764:	b21b      	sxth	r3, r3
 8006766:	b2db      	uxtb	r3, r3
 8006768:	b21b      	sxth	r3, r3
 800676a:	430b      	orrs	r3, r1
 800676c:	b219      	sxth	r1, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	b289      	uxth	r1, r1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+3] =  ((p->v[7*i+3] >>2) & 0x3fc0) | (p->v[(7*i)+2] &0xff ) >> 2;
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4613      	mov	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	1cda      	adds	r2, r3, #3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	b29b      	uxth	r3, r3
 8006790:	b21b      	sxth	r3, r3
 8006792:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8006796:	b219      	sxth	r1, r3
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067a8:	109b      	asrs	r3, r3, #2
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	430b      	orrs	r3, r1
 80067b4:	b219      	sxth	r1, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	1cda      	adds	r2, r3, #3
 80067bc:	b289      	uxth	r1, r1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+2] =  ((p->v[(7*i)+2] & 3) << 12) | ((p->v[(7*i)+2] >> 8) << 4) | (p->v[(7*i)+1] & 240) >> 4;
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	b21b      	sxth	r3, r3
 80067d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067dc:	b219      	sxth	r1, r3
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	1c9a      	adds	r2, r3, #2
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	b21b      	sxth	r3, r3
 80067f6:	430b      	orrs	r3, r1
 80067f8:	b219      	sxth	r1, r3
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4613      	mov	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800680a:	111b      	asrs	r3, r3, #4
 800680c:	b21b      	sxth	r3, r3
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	b21b      	sxth	r3, r3
 8006814:	430b      	orrs	r3, r1
 8006816:	b219      	sxth	r1, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	1c9a      	adds	r2, r3, #2
 800681e:	b289      	uxth	r1, r1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+1] =  ((p->v[(7*i)+1] & 0xf) << 10) | ((p->v[7*i+1] >> 8) << 2) |  ((p->v[(7*i)+0] >> 6) & 3);
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4613      	mov	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	b21b      	sxth	r3, r3
 800683a:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800683e:	b219      	sxth	r1, r3
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	b29b      	uxth	r3, r3
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	b21b      	sxth	r3, r3
 8006858:	430b      	orrs	r3, r1
 800685a:	b219      	sxth	r1, r3
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	1a9a      	subs	r2, r3, r2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	b29b      	uxth	r3, r3
 800686e:	b21b      	sxth	r3, r3
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	b21b      	sxth	r3, r3
 8006876:	430b      	orrs	r3, r1
 8006878:	b219      	sxth	r1, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	b289      	uxth	r1, r1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(8*i)+0] =  p->v[7*i+0]>>8 | (p->v[7*i+0]&63)<<8;
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	1a9a      	subs	r2, r3, r2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	b29b      	uxth	r3, r3
 800689a:	b219      	sxth	r1, r3
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	1a9a      	subs	r2, r3, r2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80068b2:	b21b      	sxth	r3, r3
 80068b4:	430b      	orrs	r3, r1
 80068b6:	b219      	sxth	r1, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	00da      	lsls	r2, r3, #3
 80068bc:	b289      	uxth	r1, r1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=(PARAM_N/8)-1;i>-1;i--)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f6bf aeb4 	bge.w	800663a <poly_amplify+0xe>
  }
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <poly_frombytes_all>:
  }
}


void poly_frombytes_all(unsigned char *r, poly *p)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  int i;
  for(i=0;i<PARAM_N;i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	e018      	b.n	8006922 <poly_frombytes_all+0x42>
  {
    p->v[i] = (r[2*i] << 8) | r[2*i+1];
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	461a      	mov	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	b21a      	sxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	3301      	adds	r3, #1
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	440b      	add	r3, r1
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b21b      	sxth	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	b21b      	sxth	r3, r3
 8006912:	b299      	uxth	r1, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<PARAM_N;i++)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006928:	dbe2      	blt.n	80068f0 <poly_frombytes_all+0x10>
  }
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <poly_densify>:


void poly_densify(poly *p)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  int i;
  uint16_t t0,t1,t2,t3,t4,t5,t6,t7,m;
  int16_t c;
  for(i=0;i<PARAM_N/8;i++)
 8006940:	2300      	movs	r3, #0
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e1c9      	b.n	8006cda <poly_densify+0x3a2>
  {
    t0 = barrett_reduce(p->v[8*i+0]); //Make sure that coefficients have only 14 bits
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	00da      	lsls	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fbb1 	bl	80070b8 <barrett_reduce>
 8006956:	4603      	mov	r3, r0
 8006958:	837b      	strh	r3, [r7, #26]
    t1 = barrett_reduce(p->v[8*i+1]);
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fba6 	bl	80070b8 <barrett_reduce>
 800696c:	4603      	mov	r3, r0
 800696e:	833b      	strh	r3, [r7, #24]
    t2 = barrett_reduce(p->v[8*i+2]);
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	1c9a      	adds	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fb9b 	bl	80070b8 <barrett_reduce>
 8006982:	4603      	mov	r3, r0
 8006984:	82fb      	strh	r3, [r7, #22]
    t3 = barrett_reduce(p->v[8*i+3]);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	1cda      	adds	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fb90 	bl	80070b8 <barrett_reduce>
 8006998:	4603      	mov	r3, r0
 800699a:	82bb      	strh	r3, [r7, #20]
    t4 = barrett_reduce(p->v[8*i+4]); //Make sure that coefficients have only 14 bits
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fb85 	bl	80070b8 <barrett_reduce>
 80069ae:	4603      	mov	r3, r0
 80069b0:	827b      	strh	r3, [r7, #18]
    t5 = barrett_reduce(p->v[8*i+5]);
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	1d5a      	adds	r2, r3, #5
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fb7a 	bl	80070b8 <barrett_reduce>
 80069c4:	4603      	mov	r3, r0
 80069c6:	823b      	strh	r3, [r7, #16]
    t6 = barrett_reduce(p->v[8*i+6]);
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	1d9a      	adds	r2, r3, #6
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fb6f 	bl	80070b8 <barrett_reduce>
 80069da:	4603      	mov	r3, r0
 80069dc:	81fb      	strh	r3, [r7, #14]
    t7 = barrett_reduce(p->v[8*i+7]);
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	1dda      	adds	r2, r3, #7
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fb64 	bl	80070b8 <barrett_reduce>
 80069f0:	4603      	mov	r3, r0
 80069f2:	81bb      	strh	r3, [r7, #12]

    m = t0 - PARAM_Q;
 80069f4:	8b7b      	ldrh	r3, [r7, #26]
 80069f6:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80069fa:	3b01      	subs	r3, #1
 80069fc:	817b      	strh	r3, [r7, #10]
    c = m;
 80069fe:	897b      	ldrh	r3, [r7, #10]
 8006a00:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006a02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a06:	13db      	asrs	r3, r3, #15
 8006a08:	813b      	strh	r3, [r7, #8]
    t0 = m ^ ((t0^m)&c); // <Make sure that coefficients are in [0,q]
 8006a0a:	8b7a      	ldrh	r2, [r7, #26]
 8006a0c:	897b      	ldrh	r3, [r7, #10]
 8006a0e:	4053      	eors	r3, r2
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b21a      	sxth	r2, r3
 8006a14:	893b      	ldrh	r3, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	b21a      	sxth	r2, r3
 8006a1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a1e:	4053      	eors	r3, r2
 8006a20:	b21b      	sxth	r3, r3
 8006a22:	837b      	strh	r3, [r7, #26]

    m = t1 - PARAM_Q;
 8006a24:	8b3b      	ldrh	r3, [r7, #24]
 8006a26:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	817b      	strh	r3, [r7, #10]
    c = m;
 8006a2e:	897b      	ldrh	r3, [r7, #10]
 8006a30:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006a32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a36:	13db      	asrs	r3, r3, #15
 8006a38:	813b      	strh	r3, [r7, #8]
    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]
 8006a3a:	8b3a      	ldrh	r2, [r7, #24]
 8006a3c:	897b      	ldrh	r3, [r7, #10]
 8006a3e:	4053      	eors	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	b21a      	sxth	r2, r3
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	4013      	ands	r3, r2
 8006a48:	b21a      	sxth	r2, r3
 8006a4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a4e:	4053      	eors	r3, r2
 8006a50:	b21b      	sxth	r3, r3
 8006a52:	833b      	strh	r3, [r7, #24]

    m = t2 - PARAM_Q;
 8006a54:	8afb      	ldrh	r3, [r7, #22]
 8006a56:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	817b      	strh	r3, [r7, #10]
    c = m;
 8006a5e:	897b      	ldrh	r3, [r7, #10]
 8006a60:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006a62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a66:	13db      	asrs	r3, r3, #15
 8006a68:	813b      	strh	r3, [r7, #8]
    t2 = m ^ ((t2^m)&c); // <Make sure that coefficients are in [0,q]
 8006a6a:	8afa      	ldrh	r2, [r7, #22]
 8006a6c:	897b      	ldrh	r3, [r7, #10]
 8006a6e:	4053      	eors	r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	b21a      	sxth	r2, r3
 8006a74:	893b      	ldrh	r3, [r7, #8]
 8006a76:	4013      	ands	r3, r2
 8006a78:	b21a      	sxth	r2, r3
 8006a7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a7e:	4053      	eors	r3, r2
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	82fb      	strh	r3, [r7, #22]

    m = t3 - PARAM_Q;
 8006a84:	8abb      	ldrh	r3, [r7, #20]
 8006a86:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	817b      	strh	r3, [r7, #10]
    c = m;
 8006a8e:	897b      	ldrh	r3, [r7, #10]
 8006a90:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006a92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a96:	13db      	asrs	r3, r3, #15
 8006a98:	813b      	strh	r3, [r7, #8]
    t3 = m ^ ((t3^m)&c); // <Make sure that coefficients are in [0,q]
 8006a9a:	8aba      	ldrh	r2, [r7, #20]
 8006a9c:	897b      	ldrh	r3, [r7, #10]
 8006a9e:	4053      	eors	r3, r2
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	b21a      	sxth	r2, r3
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006aae:	4053      	eors	r3, r2
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	82bb      	strh	r3, [r7, #20]


    m = t4 - PARAM_Q;
 8006ab4:	8a7b      	ldrh	r3, [r7, #18]
 8006ab6:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006aba:	3b01      	subs	r3, #1
 8006abc:	817b      	strh	r3, [r7, #10]
    c = m;
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006ac2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006ac6:	13db      	asrs	r3, r3, #15
 8006ac8:	813b      	strh	r3, [r7, #8]
    t4 = m ^ ((t4^m)&c); // <Make sure that coefficients are in [0,q]
 8006aca:	8a7a      	ldrh	r2, [r7, #18]
 8006acc:	897b      	ldrh	r3, [r7, #10]
 8006ace:	4053      	eors	r3, r2
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	b21a      	sxth	r2, r3
 8006ad4:	893b      	ldrh	r3, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	b21a      	sxth	r2, r3
 8006ada:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ade:	4053      	eors	r3, r2
 8006ae0:	b21b      	sxth	r3, r3
 8006ae2:	827b      	strh	r3, [r7, #18]

    m = t5 - PARAM_Q;
 8006ae4:	8a3b      	ldrh	r3, [r7, #16]
 8006ae6:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006aea:	3b01      	subs	r3, #1
 8006aec:	817b      	strh	r3, [r7, #10]
    c = m;
 8006aee:	897b      	ldrh	r3, [r7, #10]
 8006af0:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006af2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006af6:	13db      	asrs	r3, r3, #15
 8006af8:	813b      	strh	r3, [r7, #8]
    t5 = m ^ ((t5^m)&c); // <Make sure that coefficients are in [0,q]
 8006afa:	8a3a      	ldrh	r2, [r7, #16]
 8006afc:	897b      	ldrh	r3, [r7, #10]
 8006afe:	4053      	eors	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	b21a      	sxth	r2, r3
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	b21a      	sxth	r2, r3
 8006b0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b0e:	4053      	eors	r3, r2
 8006b10:	b21b      	sxth	r3, r3
 8006b12:	823b      	strh	r3, [r7, #16]

    m = t6 - PARAM_Q;
 8006b14:	89fb      	ldrh	r3, [r7, #14]
 8006b16:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	817b      	strh	r3, [r7, #10]
    c = m;
 8006b1e:	897b      	ldrh	r3, [r7, #10]
 8006b20:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006b22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006b26:	13db      	asrs	r3, r3, #15
 8006b28:	813b      	strh	r3, [r7, #8]
    t6 = m ^ ((t6^m)&c); // <Make sure that coefficients are in [0,q]
 8006b2a:	89fa      	ldrh	r2, [r7, #14]
 8006b2c:	897b      	ldrh	r3, [r7, #10]
 8006b2e:	4053      	eors	r3, r2
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	b21a      	sxth	r2, r3
 8006b34:	893b      	ldrh	r3, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	b21a      	sxth	r2, r3
 8006b3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b3e:	4053      	eors	r3, r2
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	81fb      	strh	r3, [r7, #14]

    m = t7 - PARAM_Q;
 8006b44:	89bb      	ldrh	r3, [r7, #12]
 8006b46:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	817b      	strh	r3, [r7, #10]
    c = m;
 8006b4e:	897b      	ldrh	r3, [r7, #10]
 8006b50:	813b      	strh	r3, [r7, #8]
    c >>= 15;
 8006b52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006b56:	13db      	asrs	r3, r3, #15
 8006b58:	813b      	strh	r3, [r7, #8]
    t7 = m ^ ((t7^m)&c); // <Make sure that coefficients are in [0,q]
 8006b5a:	89ba      	ldrh	r2, [r7, #12]
 8006b5c:	897b      	ldrh	r3, [r7, #10]
 8006b5e:	4053      	eors	r3, r2
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	b21a      	sxth	r2, r3
 8006b64:	893b      	ldrh	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b21a      	sxth	r2, r3
 8006b6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b6e:	4053      	eors	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	81bb      	strh	r3, [r7, #12]

    p->v[(7*i)+0] = ((t0 & 0xff)<<8) | ((t0 >> 8) | ((  t1 << 6)& 0xff)) ;
 8006b74:	8b7b      	ldrh	r3, [r7, #26]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b21a      	sxth	r2, r3
 8006b7a:	8b7b      	ldrh	r3, [r7, #26]
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	b219      	sxth	r1, r3
 8006b82:	8b3b      	ldrh	r3, [r7, #24]
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	b21b      	sxth	r3, r3
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	b21b      	sxth	r3, r3
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b219      	sxth	r1, r3
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	4613      	mov	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	1a9a      	subs	r2, r3, r2
 8006b9c:	b289      	uxth	r1, r1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(7*i)+1] = ((t1 >> 2)<<8)   | ((t1 >> 10) | ((t2 << 4)& 0xff)) ;
 8006ba4:	8b3b      	ldrh	r3, [r7, #24]
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	b21a      	sxth	r2, r3
 8006bae:	8b3b      	ldrh	r3, [r7, #24]
 8006bb0:	0a9b      	lsrs	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	b219      	sxth	r1, r3
 8006bb6:	8afb      	ldrh	r3, [r7, #22]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	b21b      	sxth	r3, r3
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	b21b      	sxth	r3, r3
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b219      	sxth	r1, r3
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	b289      	uxth	r1, r1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(7*i)+2] = ((t2 >> 4)<<8)   | ((t2 >> 12) | ((t3 << 2)& 0xff));
 8006bda:	8afb      	ldrh	r3, [r7, #22]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	b21a      	sxth	r2, r3
 8006be4:	8afb      	ldrh	r3, [r7, #22]
 8006be6:	0b1b      	lsrs	r3, r3, #12
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	b219      	sxth	r1, r3
 8006bec:	8abb      	ldrh	r3, [r7, #20]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	b21b      	sxth	r3, r3
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	b21b      	sxth	r3, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	b219      	sxth	r1, r3
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	4613      	mov	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	1c9a      	adds	r2, r3, #2
 8006c08:	b289      	uxth	r1, r1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(7*i)+3] = ((t3 >> 6)<<8)   | (t4 & 0xff);
 8006c10:	8abb      	ldrh	r3, [r7, #20]
 8006c12:	099b      	lsrs	r3, r3, #6
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	b21a      	sxth	r2, r3
 8006c1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	b21b      	sxth	r3, r3
 8006c22:	4313      	orrs	r3, r2
 8006c24:	b219      	sxth	r1, r3
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	1cda      	adds	r2, r3, #3
 8006c30:	b289      	uxth	r1, r1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(7*i)+4] = (((t4 >> 8) | (t5 << 6))<<8)  | ((t5 >> 2) & 0xff); 
 8006c38:	8a7b      	ldrh	r3, [r7, #18]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	8a3b      	ldrh	r3, [r7, #16]
 8006c42:	019b      	lsls	r3, r3, #6
 8006c44:	4313      	orrs	r3, r2
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	b21a      	sxth	r2, r3
 8006c4a:	8a3b      	ldrh	r3, [r7, #16]
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	b21b      	sxth	r3, r3
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	b21b      	sxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b219      	sxth	r1, r3
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	b289      	uxth	r1, r1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(7*i)+5] = (((t5 >> 10) | (t6 << 4))<<8) | ((t6 >> 4) & 0xff);
 8006c6c:	8a3b      	ldrh	r3, [r7, #16]
 8006c6e:	0a9b      	lsrs	r3, r3, #10
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	89fb      	ldrh	r3, [r7, #14]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b21a      	sxth	r2, r3
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b21b      	sxth	r3, r3
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	b21b      	sxth	r3, r3
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	b219      	sxth	r1, r3
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	4613      	mov	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	1d5a      	adds	r2, r3, #5
 8006c98:	b289      	uxth	r1, r1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    p->v[(7*i)+6] = (((t6 >> 12) | (t7 << 2))<<8) | ((t7 >> 6)& 0xff);
 8006ca0:	89fb      	ldrh	r3, [r7, #14]
 8006ca2:	0b1b      	lsrs	r3, r3, #12
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	89bb      	ldrh	r3, [r7, #12]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4313      	orrs	r3, r2
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	b21a      	sxth	r2, r3
 8006cb2:	89bb      	ldrh	r3, [r7, #12]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	b21b      	sxth	r3, r3
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	b21b      	sxth	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b219      	sxth	r1, r3
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	1d9a      	adds	r2, r3, #6
 8006ccc:	b289      	uxth	r1, r1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<PARAM_N/8;i++)
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cde:	f77f ae32 	ble.w	8006946 <poly_densify+0xe>
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <poly_uniform>:



void poly_uniform(poly *a, const unsigned char *seed)
{
 8006cec:	b5b0      	push	{r4, r5, r7, lr}
 8006cee:	b0ba      	sub	sp, #232	; 0xe8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	466b      	mov	r3, sp
 8006cf8:	461d      	mov	r5, r3
  unsigned int pos=0, ctr=0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint16_t val;
  uint64_t state[25];                   
  unsigned int nblocks=4;
 8006d06:	2304      	movs	r3, #4
 8006d08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t buf[SHAKE128_RATE*nblocks];
 8006d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d10:	22a8      	movs	r2, #168	; 0xa8
 8006d12:	fb02 f403 	mul.w	r4, r2, r3
 8006d16:	4623      	mov	r3, r4
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f04f 0100 	mov.w	r1, #0
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	00cb      	lsls	r3, r1, #3
 8006d2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006d32:	00c2      	lsls	r2, r0, #3
 8006d34:	4620      	mov	r0, r4
 8006d36:	f04f 0100 	mov.w	r1, #0
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	00cb      	lsls	r3, r1, #3
 8006d44:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006d48:	00c2      	lsls	r2, r0, #3
 8006d4a:	1de3      	adds	r3, r4, #7
 8006d4c:	08db      	lsrs	r3, r3, #3
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	ebad 0d03 	sub.w	sp, sp, r3
 8006d54:	466b      	mov	r3, sp
 8006d56:	3300      	adds	r3, #0
 8006d58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  shake128_absorb_asm(state, seed, NEWHOPE_SEEDBYTES);
 8006d5c:	f107 0308 	add.w	r3, r7, #8
 8006d60:	2220      	movs	r2, #32
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fa4a 	bl	80061fe <shake128_absorb_asm>
  
  shake128_squeezeblocks_asm((unsigned char *) buf, nblocks, state);
 8006d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d6e:	f107 0208 	add.w	r2, r7, #8
 8006d72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fa58 	bl	800622c <shake128_squeezeblocks_asm>

  while(ctr < PARAM_N)
 8006d7c:	e040      	b.n	8006e00 <poly_uniform+0x114>
  {
    val = (buf[pos] | ((uint16_t) buf[pos+1] << 8));
 8006d7e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d86:	4413      	add	r3, r2
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	b21a      	sxth	r2, r3
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d90:	3301      	adds	r3, #1
 8006d92:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b21b      	sxth	r3, r3
 8006da0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    if(val < 5*PARAM_Q)
 8006da4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8006da8:	f24f 0204 	movw	r2, #61444	; 0xf004
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d809      	bhi.n	8006dc4 <poly_uniform+0xd8>
      a->v[ctr++] = val;
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	f8b7 10d2 	ldrh.w	r1, [r7, #210]	; 0xd2
 8006dc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    pos += 2;
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	3302      	adds	r3, #2
 8006dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(pos > SHAKE128_RATE*nblocks-2)
 8006dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd2:	22a8      	movs	r2, #168	; 0xa8
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	3b02      	subs	r3, #2
 8006dda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d90e      	bls.n	8006e00 <poly_uniform+0x114>
    {
      nblocks=1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      shake128_squeezeblocks_asm((unsigned char *) buf,nblocks,state);
 8006de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dec:	f107 0208 	add.w	r2, r7, #8
 8006df0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fa19 	bl	800622c <shake128_squeezeblocks_asm>
      pos = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  while(ctr < PARAM_N)
 8006e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e08:	d3b9      	bcc.n	8006d7e <poly_uniform+0x92>
 8006e0a:	46ad      	mov	sp, r5
    }
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	37e8      	adds	r7, #232	; 0xe8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bdb0      	pop	{r4, r5, r7, pc}

08006e14 <poly_getnoise>:

void poly_getnoise(poly *r, unsigned char *seed, unsigned char nonce)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8006e1a:	af02      	add	r7, sp, #8
 8006e1c:	f107 030c 	add.w	r3, r7, #12
 8006e20:	6018      	str	r0, [r3, #0]
 8006e22:	f107 0308 	add.w	r3, r7, #8
 8006e26:	6019      	str	r1, [r3, #0]
 8006e28:	1dfb      	adds	r3, r7, #7
 8006e2a:	701a      	strb	r2, [r3, #0]
  unsigned char buf[PARAM_N];
  unsigned char n[8];
  int i,j,k;

  uint32_t *tp, t,d, a, b;
  tp = (uint32_t *) buf;
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

  for(i=1;i<8;i++)
 8006e34:	2301      	movs	r3, #1
 8006e36:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8006e3a:	e00b      	b.n	8006e54 <poly_getnoise+0x40>
    n[i] = 0;
 8006e3c:	f107 0210 	add.w	r2, r7, #16
 8006e40:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006e44:	4413      	add	r3, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
  for(i=1;i<8;i++)
 8006e4a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006e4e:	3301      	adds	r3, #1
 8006e50:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8006e54:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006e58:	2b07      	cmp	r3, #7
 8006e5a:	ddef      	ble.n	8006e3c <poly_getnoise+0x28>
  n[0] = nonce;
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	1dfa      	adds	r2, r7, #7
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
  for (k=0;k<4;k++){
 8006e66:	2300      	movs	r3, #0
 8006e68:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8006e6c:	e072      	b.n	8006f54 <poly_getnoise+0x140>
      crypto_stream_chacha20(buf,PARAM_N,n,seed);
 8006e6e:	f107 0118 	add.w	r1, r7, #24
 8006e72:	f107 0308 	add.w	r3, r7, #8
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	9301      	str	r3, [sp, #4]
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	f7fe ffed 	bl	8005e68 <crypto_stream_chacha20>

      for(i=0;i<PARAM_N/4;i++){
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8006e94:	e055      	b.n	8006f42 <poly_getnoise+0x12e>

        t = tp[i];
 8006e96:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8006ea0:	4413      	add	r3, r2
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        d = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
        for(j=0;j<8;j++){
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8006eb4:	e011      	b.n	8006eda <poly_getnoise+0xc6>
          d += (t >> j) & 0x01010101;
 8006eb6:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8006eba:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006ec6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8006eca:	4413      	add	r3, r2
 8006ecc:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
        for(j=0;j<8;j++){
 8006ed0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8006eda:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8006ede:	2b07      	cmp	r3, #7
 8006ee0:	dde9      	ble.n	8006eb6 <poly_getnoise+0xa2>
        }
        a = ((d >> 8) & 0xff) + (d & 0xff);
 8006ee2:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        b = (d >> 24) + ((d >> 16) & 0xff);
 8006ef6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006efa:	0e1a      	lsrs	r2, r3, #24
 8006efc:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
        r->v[i+k*(PARAM_N/4)] = PARAM_Q + a - b;
 8006f0a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8006f1e:	0211      	lsls	r1, r2, #8
 8006f20:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8006f24:	440a      	add	r2, r1
 8006f26:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b299      	uxth	r1, r3
 8006f2e:	f107 030c 	add.w	r3, r7, #12
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for(i=0;i<PARAM_N/4;i++){
 8006f38:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8006f42:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8006f46:	2bff      	cmp	r3, #255	; 0xff
 8006f48:	dda5      	ble.n	8006e96 <poly_getnoise+0x82>
  for (k=0;k<4;k++){
 8006f4a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8006f54:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	dd88      	ble.n	8006e6e <poly_getnoise+0x5a>
      }
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <poly_bitrev>:


void poly_bitrev(poly *r)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  bitrev_vector(r->v);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fb24 	bl	80065c0 <bitrev_vector>
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <poly_ntt>:


void poly_ntt(poly *r)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  asm_mulcoef_otf(r->v, omegas_montgomery); 
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4906      	ldr	r1, [pc, #24]	; (8006fa4 <poly_ntt+0x24>)
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe f87d 	bl	800508c <asm_mulcoef_otf>
  asm_ntt((uint16_t *)r->v, omegas_montgomery);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4903      	ldr	r1, [pc, #12]	; (8006fa4 <poly_ntt+0x24>)
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fd fe06 	bl	8004ba8 <asm_ntt>
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	080098bc 	.word	0x080098bc

08006fa8 <poly_invntt>:

void poly_invntt(poly *r)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  asm_ntt((uint16_t *)r->v, omegas_inv_montgomery);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4906      	ldr	r1, [pc, #24]	; (8006fcc <poly_invntt+0x24>)
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fd fdf7 	bl	8004ba8 <asm_ntt>
  asm_mulcoef(r->v, psis_inv_montgomery);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4904      	ldr	r1, [pc, #16]	; (8006fd0 <poly_invntt+0x28>)
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe f8ec 	bl	800519c <asm_mulcoef>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	08009cbc 	.word	0x08009cbc
 8006fd0:	0800a0bc 	.word	0x0800a0bc

08006fd4 <randombytes>:

/* Should be replaced by a secure source of randomness followed by a call to SHA-3*/


void randombytes(unsigned char *x,unsigned long long xlen)
{
 8006fd4:	b4b0      	push	{r4, r5, r7}
 8006fd6:	b09f      	sub	sp, #124	; 0x7c
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	e9c7 2300 	strd	r2, r3, [r7]
  int i;
  unsigned char a[32] = {160,168,20,235,215,132,214,153,241,122,10,29,232,59,88,218,161,54,250,5,108,190,135,52,243,20,150,168,242,201,99,202};
 8006fe0:	4b32      	ldr	r3, [pc, #200]	; (80070ac <randombytes+0xd8>)
 8006fe2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char b[32] = {123,191,73,222,176,209,3,73,220,117,251,159,99,65,99,133,31,35,236,102,76,23,91,24,201,253,69,169,172,43,4,0};
 8006ff4:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <randombytes+0xdc>)
 8006ff6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007000:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char c[32] = {46,202,34,101,97,180,47,34,48,181,211,80,44,146,180,168,173,17,189,131,36,44,249,222,248,63,227,115,153,173,176,148};  
 8007008:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <randombytes+0xe0>)
 800700a:	f107 0414 	add.w	r4, r7, #20
 800700e:	461d      	mov	r5, r3
 8007010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  
  if (xlen == 0){
 800701c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007020:	4313      	orrs	r3, r2
 8007022:	d112      	bne.n	800704a <randombytes+0x76>
    for (i=0;i<32;i++){
 8007024:	2300      	movs	r3, #0
 8007026:	677b      	str	r3, [r7, #116]	; 0x74
 8007028:	e00b      	b.n	8007042 <randombytes+0x6e>
        x[i] = a[i]; 
 800702a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8007034:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007036:	440a      	add	r2, r1
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	701a      	strb	r2, [r3, #0]
    for (i=0;i<32;i++){
 800703c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703e:	3301      	adds	r3, #1
 8007040:	677b      	str	r3, [r7, #116]	; 0x74
 8007042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007044:	2b1f      	cmp	r3, #31
 8007046:	ddf0      	ble.n	800702a <randombytes+0x56>
    }
  }

  //return sha3256(x, result_of_RNG, 32);

}
 8007048:	e02a      	b.n	80070a0 <randombytes+0xcc>
  else if (xlen ==1){
 800704a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf08      	it	eq
 8007052:	2a01      	cmpeq	r2, #1
 8007054:	d112      	bne.n	800707c <randombytes+0xa8>
     for (i=0;i<32;i++){
 8007056:	2300      	movs	r3, #0
 8007058:	677b      	str	r3, [r7, #116]	; 0x74
 800705a:	e00b      	b.n	8007074 <randombytes+0xa0>
        x[i] = b[i]; 
 800705c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8007066:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007068:	440a      	add	r2, r1
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	701a      	strb	r2, [r3, #0]
     for (i=0;i<32;i++){
 800706e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007070:	3301      	adds	r3, #1
 8007072:	677b      	str	r3, [r7, #116]	; 0x74
 8007074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007076:	2b1f      	cmp	r3, #31
 8007078:	ddf0      	ble.n	800705c <randombytes+0x88>
}
 800707a:	e011      	b.n	80070a0 <randombytes+0xcc>
     for (i=0;i<32;i++){
 800707c:	2300      	movs	r3, #0
 800707e:	677b      	str	r3, [r7, #116]	; 0x74
 8007080:	e00b      	b.n	800709a <randombytes+0xc6>
        x[i] = c[i]; 
 8007082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f107 0114 	add.w	r1, r7, #20
 800708c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800708e:	440a      	add	r2, r1
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
     for (i=0;i<32;i++){
 8007094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007096:	3301      	adds	r3, #1
 8007098:	677b      	str	r3, [r7, #116]	; 0x74
 800709a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709c:	2b1f      	cmp	r3, #31
 800709e:	ddf0      	ble.n	8007082 <randombytes+0xae>
}
 80070a0:	bf00      	nop
 80070a2:	377c      	adds	r7, #124	; 0x7c
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bcb0      	pop	{r4, r5, r7}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	08009814 	.word	0x08009814
 80070b0:	08009834 	.word	0x08009834
 80070b4:	08009854 	.word	0x08009854

080070b8 <barrett_reduce>:
  return a >> 18;
}


uint16_t barrett_reduce(uint16_t a)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	80fb      	strh	r3, [r7, #6]
  uint32_t u;

  u = ((uint32_t) a * 5) >> 16;
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	60fb      	str	r3, [r7, #12]
  u *= PARAM_Q;
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	031b      	lsls	r3, r3, #12
 80070d8:	4413      	add	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  a -= u;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	88fa      	ldrh	r2, [r7, #6]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	80fb      	strh	r3, [r7, #6]
  return a;
 80070e6:	88fb      	ldrh	r3, [r7, #6]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <dma_request>:
    dma_enable_transfer_complete_interrupt(DMA1, DMA_CHANNEL4);
}*/

//void dma_request(void* buffer, const int datasize)
void dma_request(unsigned char* buffer, const int datasize)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]

    dma_enable_channel(DMA1, DMA_CHANNEL5);
    //signal_host();
    usart_enable_rx_dma(USART2);*/

	HAL_UART_Receive_DMA(&huart1, buffer, datasize);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	4803      	ldr	r0, [pc, #12]	; (8007114 <dma_request+0x20>)
 8007108:	f001 fcbf 	bl	8008a8a <HAL_UART_Receive_DMA>
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	200008e8 	.word	0x200008e8

08007118 <dma_transmit>:

//void dma_transmit(const void* buffer, const int datasize)
void dma_transmit(const unsigned char *buffer, const int datasize)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
    usart_enable_tx_dma(USART2);*/
//	uint8_t buffer_tx[datasize];
//	for(int i=0;i<datasize;i++) {
//		buffer_tx[i] = buffer[i];
//	}
	HAL_UART_Transmit(&huart1, buffer, datasize, 99999);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	b29a      	uxth	r2, r3
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <dma_transmit+0x20>)
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4804      	ldr	r0, [pc, #16]	; (800713c <dma_transmit+0x24>)
 800712c:	f001 fc1b 	bl	8008966 <HAL_UART_Transmit>
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	0001869f 	.word	0x0001869f
 800713c:	200008e8 	.word	0x200008e8

08007140 <dma_done>:

int dma_done(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
    return (huart1.gState == HAL_UART_STATE_READY & huart1.RxState == HAL_UART_STATE_READY);
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <dma_done+0x38>)
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b20      	cmp	r3, #32
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <dma_done+0x38>)
 8007158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b20      	cmp	r3, #32
 8007160:	bf0c      	ite	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	2300      	movne	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4013      	ands	r3, r2
 800716a:	b2db      	uxtb	r3, r3
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	200008e8 	.word	0x200008e8

0800717c <signal_host>:
    dma_clear_interrupt_flags(DMA1, DMA_CHANNEL5, DMA_TCIF);
    dma_disable_channel(DMA1, DMA_CHANNEL4);
    dma_disable_channel(DMA1, DMA_CHANNEL5);
}*/

void signal_host(void) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0

	uint8_t buffer_tx[1] = {10};
 8007182:	230a      	movs	r3, #10
 8007184:	713b      	strb	r3, [r7, #4]
	//HAL_UART_Transmit(&huart1, "Hello World", 11, 99999);
	HAL_UART_Transmit(&huart1, buffer_tx, 1, 99999);
 8007186:	1d39      	adds	r1, r7, #4
 8007188:	4b04      	ldr	r3, [pc, #16]	; (800719c <signal_host+0x20>)
 800718a:	2201      	movs	r2, #1
 800718c:	4804      	ldr	r0, [pc, #16]	; (80071a0 <signal_host+0x24>)
 800718e:	f001 fbea 	bl	8008966 <HAL_UART_Transmit>
	//usart_send_blocking(USART2, '\n');
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	0001869f 	.word	0x0001869f
 80071a0:	200008e8 	.word	0x200008e8

080071a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80071a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80071a8:	480d      	ldr	r0, [pc, #52]	; (80071e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80071aa:	490e      	ldr	r1, [pc, #56]	; (80071e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80071ac:	4a0e      	ldr	r2, [pc, #56]	; (80071e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80071ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80071b0:	e002      	b.n	80071b8 <LoopCopyDataInit>

080071b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80071b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80071b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80071b6:	3304      	adds	r3, #4

080071b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80071b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80071ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80071bc:	d3f9      	bcc.n	80071b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80071be:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80071c0:	4c0b      	ldr	r4, [pc, #44]	; (80071f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80071c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80071c4:	e001      	b.n	80071ca <LoopFillZerobss>

080071c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80071c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80071c8:	3204      	adds	r2, #4

080071ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80071ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80071cc:	d3fb      	bcc.n	80071c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80071ce:	f7fe fd0d 	bl	8005bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071d2:	f002 fae7 	bl	80097a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071d6:	f7fe fb03 	bl	80057e0 <main>
  bx  lr    
 80071da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80071dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80071e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80071e4:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 80071e8:	0800a8d4 	.word	0x0800a8d4
  ldr r2, =_sbss
 80071ec:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 80071f0:	20000930 	.word	0x20000930

080071f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071f4:	e7fe      	b.n	80071f4 <ADC_IRQHandler>
	...

080071f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071fc:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <HAL_Init+0x40>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a0d      	ldr	r2, [pc, #52]	; (8007238 <HAL_Init+0x40>)
 8007202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <HAL_Init+0x40>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a0a      	ldr	r2, [pc, #40]	; (8007238 <HAL_Init+0x40>)
 800720e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <HAL_Init+0x40>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a07      	ldr	r2, [pc, #28]	; (8007238 <HAL_Init+0x40>)
 800721a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007220:	2003      	movs	r0, #3
 8007222:	f000 f92b 	bl	800747c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007226:	2000      	movs	r0, #0
 8007228:	f000 f808 	bl	800723c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800722c:	f7fe fbb8 	bl	80059a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40023c00 	.word	0x40023c00

0800723c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <HAL_InitTick+0x54>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b12      	ldr	r3, [pc, #72]	; (8007294 <HAL_InitTick+0x58>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	4619      	mov	r1, r3
 800724e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007252:	fbb3 f3f1 	udiv	r3, r3, r1
 8007256:	fbb2 f3f3 	udiv	r3, r2, r3
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f943 	bl	80074e6 <HAL_SYSTICK_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e00e      	b.n	8007288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b0f      	cmp	r3, #15
 800726e:	d80a      	bhi.n	8007286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007270:	2200      	movs	r2, #0
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007278:	f000 f90b 	bl	8007492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800727c:	4a06      	ldr	r2, [pc, #24]	; (8007298 <HAL_InitTick+0x5c>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e000      	b.n	8007288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20000000 	.word	0x20000000
 8007294:	20000808 	.word	0x20000808
 8007298:	20000804 	.word	0x20000804

0800729c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <HAL_IncTick+0x20>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <HAL_IncTick+0x24>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4413      	add	r3, r2
 80072ac:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <HAL_IncTick+0x24>)
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000808 	.word	0x20000808
 80072c0:	2000092c 	.word	0x2000092c

080072c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  return uwTick;
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <HAL_GetTick+0x14>)
 80072ca:	681b      	ldr	r3, [r3, #0]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	2000092c 	.word	0x2000092c

080072dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <__NVIC_SetPriorityGrouping+0x44>)
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072f8:	4013      	ands	r3, r2
 80072fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800730e:	4a04      	ldr	r2, [pc, #16]	; (8007320 <__NVIC_SetPriorityGrouping+0x44>)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	60d3      	str	r3, [r2, #12]
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	e000ed00 	.word	0xe000ed00

08007324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <__NVIC_GetPriorityGrouping+0x18>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f003 0307 	and.w	r3, r3, #7
}
 8007332:	4618      	mov	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	e000ed00 	.word	0xe000ed00

08007340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800734a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734e:	2b00      	cmp	r3, #0
 8007350:	db0b      	blt.n	800736a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	f003 021f 	and.w	r2, r3, #31
 8007358:	4907      	ldr	r1, [pc, #28]	; (8007378 <__NVIC_EnableIRQ+0x38>)
 800735a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	2001      	movs	r0, #1
 8007362:	fa00 f202 	lsl.w	r2, r0, r2
 8007366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e000e100 	.word	0xe000e100

0800737c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738c:	2b00      	cmp	r3, #0
 800738e:	db0a      	blt.n	80073a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	b2da      	uxtb	r2, r3
 8007394:	490c      	ldr	r1, [pc, #48]	; (80073c8 <__NVIC_SetPriority+0x4c>)
 8007396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800739a:	0112      	lsls	r2, r2, #4
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	440b      	add	r3, r1
 80073a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073a4:	e00a      	b.n	80073bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	4908      	ldr	r1, [pc, #32]	; (80073cc <__NVIC_SetPriority+0x50>)
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	3b04      	subs	r3, #4
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	440b      	add	r3, r1
 80073ba:	761a      	strb	r2, [r3, #24]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	e000e100 	.word	0xe000e100
 80073cc:	e000ed00 	.word	0xe000ed00

080073d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b089      	sub	sp, #36	; 0x24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f1c3 0307 	rsb	r3, r3, #7
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	bf28      	it	cs
 80073ee:	2304      	movcs	r3, #4
 80073f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3304      	adds	r3, #4
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d902      	bls.n	8007400 <NVIC_EncodePriority+0x30>
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3b03      	subs	r3, #3
 80073fe:	e000      	b.n	8007402 <NVIC_EncodePriority+0x32>
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	43da      	mvns	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	401a      	ands	r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	fa01 f303 	lsl.w	r3, r1, r3
 8007422:	43d9      	mvns	r1, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007428:	4313      	orrs	r3, r2
         );
}
 800742a:	4618      	mov	r0, r3
 800742c:	3724      	adds	r7, #36	; 0x24
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007448:	d301      	bcc.n	800744e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800744a:	2301      	movs	r3, #1
 800744c:	e00f      	b.n	800746e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800744e:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <SysTick_Config+0x40>)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3b01      	subs	r3, #1
 8007454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007456:	210f      	movs	r1, #15
 8007458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800745c:	f7ff ff8e 	bl	800737c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <SysTick_Config+0x40>)
 8007462:	2200      	movs	r2, #0
 8007464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007466:	4b04      	ldr	r3, [pc, #16]	; (8007478 <SysTick_Config+0x40>)
 8007468:	2207      	movs	r2, #7
 800746a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	e000e010 	.word	0xe000e010

0800747c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ff29 	bl	80072dc <__NVIC_SetPriorityGrouping>
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	4603      	mov	r3, r0
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80074a4:	f7ff ff3e 	bl	8007324 <__NVIC_GetPriorityGrouping>
 80074a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	6978      	ldr	r0, [r7, #20]
 80074b0:	f7ff ff8e 	bl	80073d0 <NVIC_EncodePriority>
 80074b4:	4602      	mov	r2, r0
 80074b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ba:	4611      	mov	r1, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff ff5d 	bl	800737c <__NVIC_SetPriority>
}
 80074c2:	bf00      	nop
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	4603      	mov	r3, r0
 80074d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7ff ff31 	bl	8007340 <__NVIC_EnableIRQ>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff ffa2 	bl	8007438 <SysTick_Config>
 80074f4:	4603      	mov	r3, r0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800750c:	f7ff feda 	bl	80072c4 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e099      	b.n	8007650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800753c:	e00f      	b.n	800755e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800753e:	f7ff fec1 	bl	80072c4 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b05      	cmp	r3, #5
 800754a:	d908      	bls.n	800755e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2203      	movs	r2, #3
 8007556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e078      	b.n	8007650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e8      	bne.n	800753e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4b38      	ldr	r3, [pc, #224]	; (8007658 <HAL_DMA_Init+0x158>)
 8007578:	4013      	ands	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800758a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d107      	bne.n	80075c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	4313      	orrs	r3, r2
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0307 	bic.w	r3, r3, #7
 80075de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d117      	bne.n	8007622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fb01 	bl	8007c0c <DMA_CheckFifoParam>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d008      	beq.n	8007622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2240      	movs	r2, #64	; 0x40
 8007614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800761e:	2301      	movs	r3, #1
 8007620:	e016      	b.n	8007650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fab8 	bl	8007ba0 <DMA_CalcBaseAndBitshift>
 8007630:	4603      	mov	r3, r0
 8007632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007638:	223f      	movs	r2, #63	; 0x3f
 800763a:	409a      	lsls	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	f010803f 	.word	0xf010803f

0800765c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_DMA_Start_IT+0x26>
 800767e:	2302      	movs	r3, #2
 8007680:	e040      	b.n	8007704 <HAL_DMA_Start_IT+0xa8>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b01      	cmp	r3, #1
 8007694:	d12f      	bne.n	80076f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2202      	movs	r2, #2
 800769a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fa4a 	bl	8007b44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b4:	223f      	movs	r2, #63	; 0x3f
 80076b6:	409a      	lsls	r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0216 	orr.w	r2, r2, #22
 80076ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0208 	orr.w	r2, r2, #8
 80076e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e005      	b.n	8007702 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076fe:	2302      	movs	r3, #2
 8007700:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007718:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800771a:	f7ff fdd3 	bl	80072c4 <HAL_GetTick>
 800771e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d008      	beq.n	800773e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2280      	movs	r2, #128	; 0x80
 8007730:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e052      	b.n	80077e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0216 	bic.w	r2, r2, #22
 800774c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800775c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <HAL_DMA_Abort+0x62>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0208 	bic.w	r2, r2, #8
 800777c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800778e:	e013      	b.n	80077b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007790:	f7ff fd98 	bl	80072c4 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b05      	cmp	r3, #5
 800779c:	d90c      	bls.n	80077b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2203      	movs	r2, #3
 80077b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e015      	b.n	80077e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e4      	bne.n	8007790 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ca:	223f      	movs	r2, #63	; 0x3f
 80077cc:	409a      	lsls	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d004      	beq.n	800780a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2280      	movs	r2, #128	; 0x80
 8007804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e00c      	b.n	8007824 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2205      	movs	r2, #5
 800780e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800783c:	4b92      	ldr	r3, [pc, #584]	; (8007a88 <HAL_DMA_IRQHandler+0x258>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a92      	ldr	r2, [pc, #584]	; (8007a8c <HAL_DMA_IRQHandler+0x25c>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	0a9b      	lsrs	r3, r3, #10
 8007848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785a:	2208      	movs	r2, #8
 800785c:	409a      	lsls	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01a      	beq.n	800789c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d013      	beq.n	800789c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0204 	bic.w	r2, r2, #4
 8007882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007888:	2208      	movs	r2, #8
 800788a:	409a      	lsls	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007894:	f043 0201 	orr.w	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d012      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078be:	2201      	movs	r2, #1
 80078c0:	409a      	lsls	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	f043 0202 	orr.w	r2, r3, #2
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d6:	2204      	movs	r2, #4
 80078d8:	409a      	lsls	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4013      	ands	r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d012      	beq.n	8007908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	2204      	movs	r2, #4
 80078f6:	409a      	lsls	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f043 0204 	orr.w	r2, r3, #4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800790c:	2210      	movs	r2, #16
 800790e:	409a      	lsls	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d043      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d03c      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792a:	2210      	movs	r2, #16
 800792c:	409a      	lsls	r2, r3
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d018      	beq.n	8007972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d108      	bne.n	8007960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d024      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
 800795e:	e01f      	b.n	80079a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01b      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
 8007970:	e016      	b.n	80079a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d107      	bne.n	8007990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0208 	bic.w	r2, r2, #8
 800798e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a4:	2220      	movs	r2, #32
 80079a6:	409a      	lsls	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 808e 	beq.w	8007ace <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8086 	beq.w	8007ace <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c6:	2220      	movs	r2, #32
 80079c8:	409a      	lsls	r2, r3
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d136      	bne.n	8007a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0216 	bic.w	r2, r2, #22
 80079e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695a      	ldr	r2, [r3, #20]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <HAL_DMA_IRQHandler+0x1da>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d007      	beq.n	8007a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0208 	bic.w	r2, r2, #8
 8007a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1e:	223f      	movs	r2, #63	; 0x3f
 8007a20:	409a      	lsls	r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d07d      	beq.n	8007b3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
        }
        return;
 8007a46:	e078      	b.n	8007b3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d01c      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d108      	bne.n	8007a76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d030      	beq.n	8007ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
 8007a74:	e02b      	b.n	8007ace <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d027      	beq.n	8007ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
 8007a86:	e022      	b.n	8007ace <HAL_DMA_IRQHandler+0x29e>
 8007a88:	20000000 	.word	0x20000000
 8007a8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10f      	bne.n	8007abe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0210 	bic.w	r2, r2, #16
 8007aac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d032      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d022      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3301      	adds	r3, #1
 8007afe:	60bb      	str	r3, [r7, #8]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d307      	bcc.n	8007b16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f2      	bne.n	8007afa <HAL_DMA_IRQHandler+0x2ca>
 8007b14:	e000      	b.n	8007b18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007b16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
 8007b38:	e000      	b.n	8007b3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8007b3a:	bf00      	nop
    }
  }
}
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop

08007b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d108      	bne.n	8007b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007b82:	e007      	b.n	8007b94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	60da      	str	r2, [r3, #12]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	3b10      	subs	r3, #16
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <DMA_CalcBaseAndBitshift+0x64>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	091b      	lsrs	r3, r3, #4
 8007bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007bba:	4a13      	ldr	r2, [pc, #76]	; (8007c08 <DMA_CalcBaseAndBitshift+0x68>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d909      	bls.n	8007be2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	1d1a      	adds	r2, r3, #4
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	659a      	str	r2, [r3, #88]	; 0x58
 8007be0:	e007      	b.n	8007bf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	aaaaaaab 	.word	0xaaaaaaab
 8007c08:	0800a8bc 	.word	0x0800a8bc

08007c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d11f      	bne.n	8007c66 <DMA_CheckFifoParam+0x5a>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d856      	bhi.n	8007cda <DMA_CheckFifoParam+0xce>
 8007c2c:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <DMA_CheckFifoParam+0x28>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c57 	.word	0x08007c57
 8007c3c:	08007c45 	.word	0x08007c45
 8007c40:	08007cdb 	.word	0x08007cdb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d046      	beq.n	8007cde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c54:	e043      	b.n	8007cde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c5e:	d140      	bne.n	8007ce2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c64:	e03d      	b.n	8007ce2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6e:	d121      	bne.n	8007cb4 <DMA_CheckFifoParam+0xa8>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d837      	bhi.n	8007ce6 <DMA_CheckFifoParam+0xda>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <DMA_CheckFifoParam+0x70>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007c8d 	.word	0x08007c8d
 8007c80:	08007c93 	.word	0x08007c93
 8007c84:	08007c8d 	.word	0x08007c8d
 8007c88:	08007ca5 	.word	0x08007ca5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c90:	e030      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d025      	beq.n	8007cea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ca2:	e022      	b.n	8007cea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cac:	d11f      	bne.n	8007cee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007cb2:	e01c      	b.n	8007cee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d903      	bls.n	8007cc2 <DMA_CheckFifoParam+0xb6>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d003      	beq.n	8007cc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007cc0:	e018      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc6:	e015      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd8:	e00b      	b.n	8007cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e00a      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e008      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e006      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007ce6:	bf00      	nop
 8007ce8:	e004      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007cea:	bf00      	nop
 8007cec:	e002      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8007cf2:	bf00      	nop
    }
  } 
  
  return status; 
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop

08007d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b089      	sub	sp, #36	; 0x24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e16b      	b.n	8007ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d20:	2201      	movs	r2, #1
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4013      	ands	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	f040 815a 	bne.w	8007ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d005      	beq.n	8007d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d130      	bne.n	8007db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	2203      	movs	r2, #3
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	43db      	mvns	r3, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	fa02 f303 	lsl.w	r3, r2, r3
 8007d94:	43db      	mvns	r3, r3
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	091b      	lsrs	r3, r3, #4
 8007da2:	f003 0201 	and.w	r2, r3, #1
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d017      	beq.n	8007df4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	2203      	movs	r2, #3
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d123      	bne.n	8007e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	08da      	lsrs	r2, r3, #3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3208      	adds	r2, #8
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f003 0307 	and.w	r3, r3, #7
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	220f      	movs	r2, #15
 8007e18:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4013      	ands	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	08da      	lsrs	r2, r3, #3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3208      	adds	r2, #8
 8007e42:	69b9      	ldr	r1, [r7, #24]
 8007e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	2203      	movs	r2, #3
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 0203 	and.w	r2, r3, #3
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80b4 	beq.w	8007ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b60      	ldr	r3, [pc, #384]	; (8008010 <HAL_GPIO_Init+0x30c>)
 8007e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e92:	4a5f      	ldr	r2, [pc, #380]	; (8008010 <HAL_GPIO_Init+0x30c>)
 8007e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e98:	6453      	str	r3, [r2, #68]	; 0x44
 8007e9a:	4b5d      	ldr	r3, [pc, #372]	; (8008010 <HAL_GPIO_Init+0x30c>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ea6:	4a5b      	ldr	r2, [pc, #364]	; (8008014 <HAL_GPIO_Init+0x310>)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	3302      	adds	r3, #2
 8007eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	220f      	movs	r2, #15
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a52      	ldr	r2, [pc, #328]	; (8008018 <HAL_GPIO_Init+0x314>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d02b      	beq.n	8007f2a <HAL_GPIO_Init+0x226>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a51      	ldr	r2, [pc, #324]	; (800801c <HAL_GPIO_Init+0x318>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d025      	beq.n	8007f26 <HAL_GPIO_Init+0x222>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a50      	ldr	r2, [pc, #320]	; (8008020 <HAL_GPIO_Init+0x31c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d01f      	beq.n	8007f22 <HAL_GPIO_Init+0x21e>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a4f      	ldr	r2, [pc, #316]	; (8008024 <HAL_GPIO_Init+0x320>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d019      	beq.n	8007f1e <HAL_GPIO_Init+0x21a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a4e      	ldr	r2, [pc, #312]	; (8008028 <HAL_GPIO_Init+0x324>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d013      	beq.n	8007f1a <HAL_GPIO_Init+0x216>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a4d      	ldr	r2, [pc, #308]	; (800802c <HAL_GPIO_Init+0x328>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00d      	beq.n	8007f16 <HAL_GPIO_Init+0x212>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a4c      	ldr	r2, [pc, #304]	; (8008030 <HAL_GPIO_Init+0x32c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d007      	beq.n	8007f12 <HAL_GPIO_Init+0x20e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a4b      	ldr	r2, [pc, #300]	; (8008034 <HAL_GPIO_Init+0x330>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d101      	bne.n	8007f0e <HAL_GPIO_Init+0x20a>
 8007f0a:	2307      	movs	r3, #7
 8007f0c:	e00e      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	e00c      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f12:	2306      	movs	r3, #6
 8007f14:	e00a      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f16:	2305      	movs	r3, #5
 8007f18:	e008      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f1a:	2304      	movs	r3, #4
 8007f1c:	e006      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e004      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e002      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <HAL_GPIO_Init+0x228>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	f002 0203 	and.w	r2, r2, #3
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	4093      	lsls	r3, r2
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f3c:	4935      	ldr	r1, [pc, #212]	; (8008014 <HAL_GPIO_Init+0x310>)
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	089b      	lsrs	r3, r3, #2
 8007f42:	3302      	adds	r3, #2
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f4a:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	43db      	mvns	r3, r3
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	4013      	ands	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f6e:	4a32      	ldr	r2, [pc, #200]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f74:	4b30      	ldr	r3, [pc, #192]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	4013      	ands	r3, r2
 8007f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f98:	4a27      	ldr	r2, [pc, #156]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f9e:	4b26      	ldr	r3, [pc, #152]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4013      	ands	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fc2:	4a1d      	ldr	r2, [pc, #116]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fc8:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fec:	4a12      	ldr	r2, [pc, #72]	; (8008038 <HAL_GPIO_Init+0x334>)
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b0f      	cmp	r3, #15
 8007ffc:	f67f ae90 	bls.w	8007d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	3724      	adds	r7, #36	; 0x24
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40023800 	.word	0x40023800
 8008014:	40013800 	.word	0x40013800
 8008018:	40020000 	.word	0x40020000
 800801c:	40020400 	.word	0x40020400
 8008020:	40020800 	.word	0x40020800
 8008024:	40020c00 	.word	0x40020c00
 8008028:	40021000 	.word	0x40021000
 800802c:	40021400 	.word	0x40021400
 8008030:	40021800 	.word	0x40021800
 8008034:	40021c00 	.word	0x40021c00
 8008038:	40013c00 	.word	0x40013c00

0800803c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e264      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d075      	beq.n	8008146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800805a:	4ba3      	ldr	r3, [pc, #652]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
 8008062:	2b04      	cmp	r3, #4
 8008064:	d00c      	beq.n	8008080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008066:	4ba0      	ldr	r3, [pc, #640]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800806e:	2b08      	cmp	r3, #8
 8008070:	d112      	bne.n	8008098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008072:	4b9d      	ldr	r3, [pc, #628]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807e:	d10b      	bne.n	8008098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008080:	4b99      	ldr	r3, [pc, #612]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d05b      	beq.n	8008144 <HAL_RCC_OscConfig+0x108>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d157      	bne.n	8008144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e23f      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a0:	d106      	bne.n	80080b0 <HAL_RCC_OscConfig+0x74>
 80080a2:	4b91      	ldr	r3, [pc, #580]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a90      	ldr	r2, [pc, #576]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	e01d      	b.n	80080ec <HAL_RCC_OscConfig+0xb0>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080b8:	d10c      	bne.n	80080d4 <HAL_RCC_OscConfig+0x98>
 80080ba:	4b8b      	ldr	r3, [pc, #556]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a8a      	ldr	r2, [pc, #552]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	4b88      	ldr	r3, [pc, #544]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a87      	ldr	r2, [pc, #540]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	e00b      	b.n	80080ec <HAL_RCC_OscConfig+0xb0>
 80080d4:	4b84      	ldr	r3, [pc, #528]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a83      	ldr	r2, [pc, #524]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	4b81      	ldr	r3, [pc, #516]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a80      	ldr	r2, [pc, #512]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80080e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d013      	beq.n	800811c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f4:	f7ff f8e6 	bl	80072c4 <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080fc:	f7ff f8e2 	bl	80072c4 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b64      	cmp	r3, #100	; 0x64
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e204      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800810e:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0xc0>
 800811a:	e014      	b.n	8008146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800811c:	f7ff f8d2 	bl	80072c4 <HAL_GetTick>
 8008120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008122:	e008      	b.n	8008136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008124:	f7ff f8ce 	bl	80072c4 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b64      	cmp	r3, #100	; 0x64
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e1f0      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008136:	4b6c      	ldr	r3, [pc, #432]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f0      	bne.n	8008124 <HAL_RCC_OscConfig+0xe8>
 8008142:	e000      	b.n	8008146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d063      	beq.n	800821a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008152:	4b65      	ldr	r3, [pc, #404]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 030c 	and.w	r3, r3, #12
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800815e:	4b62      	ldr	r3, [pc, #392]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008166:	2b08      	cmp	r3, #8
 8008168:	d11c      	bne.n	80081a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800816a:	4b5f      	ldr	r3, [pc, #380]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d116      	bne.n	80081a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008176:	4b5c      	ldr	r3, [pc, #368]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_RCC_OscConfig+0x152>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d001      	beq.n	800818e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e1c4      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818e:	4b56      	ldr	r3, [pc, #344]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4952      	ldr	r1, [pc, #328]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081a2:	e03a      	b.n	800821a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d020      	beq.n	80081ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081ac:	4b4f      	ldr	r3, [pc, #316]	; (80082ec <HAL_RCC_OscConfig+0x2b0>)
 80081ae:	2201      	movs	r2, #1
 80081b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b2:	f7ff f887 	bl	80072c4 <HAL_GetTick>
 80081b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081b8:	e008      	b.n	80081cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ba:	f7ff f883 	bl	80072c4 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e1a5      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081cc:	4b46      	ldr	r3, [pc, #280]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0f0      	beq.n	80081ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d8:	4b43      	ldr	r3, [pc, #268]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4940      	ldr	r1, [pc, #256]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	600b      	str	r3, [r1, #0]
 80081ec:	e015      	b.n	800821a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ee:	4b3f      	ldr	r3, [pc, #252]	; (80082ec <HAL_RCC_OscConfig+0x2b0>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f4:	f7ff f866 	bl	80072c4 <HAL_GetTick>
 80081f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081fa:	e008      	b.n	800820e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081fc:	f7ff f862 	bl	80072c4 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d901      	bls.n	800820e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e184      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800820e:	4b36      	ldr	r3, [pc, #216]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f0      	bne.n	80081fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0308 	and.w	r3, r3, #8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d030      	beq.n	8008288 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d016      	beq.n	800825c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800822e:	4b30      	ldr	r3, [pc, #192]	; (80082f0 <HAL_RCC_OscConfig+0x2b4>)
 8008230:	2201      	movs	r2, #1
 8008232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008234:	f7ff f846 	bl	80072c4 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800823c:	f7ff f842 	bl	80072c4 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e164      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800824e:	4b26      	ldr	r3, [pc, #152]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 8008250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f0      	beq.n	800823c <HAL_RCC_OscConfig+0x200>
 800825a:	e015      	b.n	8008288 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800825c:	4b24      	ldr	r3, [pc, #144]	; (80082f0 <HAL_RCC_OscConfig+0x2b4>)
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008262:	f7ff f82f 	bl	80072c4 <HAL_GetTick>
 8008266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008268:	e008      	b.n	800827c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800826a:	f7ff f82b 	bl	80072c4 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e14d      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800827c:	4b1a      	ldr	r3, [pc, #104]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 800827e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f0      	bne.n	800826a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80a0 	beq.w	80083d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800829a:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10f      	bne.n	80082c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	4a0e      	ldr	r2, [pc, #56]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80082b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b4:	6413      	str	r3, [r2, #64]	; 0x40
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <HAL_RCC_OscConfig+0x2ac>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_RCC_OscConfig+0x2b8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d121      	bne.n	8008316 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <HAL_RCC_OscConfig+0x2b8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a07      	ldr	r2, [pc, #28]	; (80082f4 <HAL_RCC_OscConfig+0x2b8>)
 80082d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082de:	f7fe fff1 	bl	80072c4 <HAL_GetTick>
 80082e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e4:	e011      	b.n	800830a <HAL_RCC_OscConfig+0x2ce>
 80082e6:	bf00      	nop
 80082e8:	40023800 	.word	0x40023800
 80082ec:	42470000 	.word	0x42470000
 80082f0:	42470e80 	.word	0x42470e80
 80082f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082f8:	f7fe ffe4 	bl	80072c4 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e106      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800830a:	4b85      	ldr	r3, [pc, #532]	; (8008520 <HAL_RCC_OscConfig+0x4e4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0f0      	beq.n	80082f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d106      	bne.n	800832c <HAL_RCC_OscConfig+0x2f0>
 800831e:	4b81      	ldr	r3, [pc, #516]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	4a80      	ldr	r2, [pc, #512]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008324:	f043 0301 	orr.w	r3, r3, #1
 8008328:	6713      	str	r3, [r2, #112]	; 0x70
 800832a:	e01c      	b.n	8008366 <HAL_RCC_OscConfig+0x32a>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	2b05      	cmp	r3, #5
 8008332:	d10c      	bne.n	800834e <HAL_RCC_OscConfig+0x312>
 8008334:	4b7b      	ldr	r3, [pc, #492]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008338:	4a7a      	ldr	r2, [pc, #488]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 800833a:	f043 0304 	orr.w	r3, r3, #4
 800833e:	6713      	str	r3, [r2, #112]	; 0x70
 8008340:	4b78      	ldr	r3, [pc, #480]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008344:	4a77      	ldr	r2, [pc, #476]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008346:	f043 0301 	orr.w	r3, r3, #1
 800834a:	6713      	str	r3, [r2, #112]	; 0x70
 800834c:	e00b      	b.n	8008366 <HAL_RCC_OscConfig+0x32a>
 800834e:	4b75      	ldr	r3, [pc, #468]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	4a74      	ldr	r2, [pc, #464]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	6713      	str	r3, [r2, #112]	; 0x70
 800835a:	4b72      	ldr	r3, [pc, #456]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	4a71      	ldr	r2, [pc, #452]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008360:	f023 0304 	bic.w	r3, r3, #4
 8008364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d015      	beq.n	800839a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836e:	f7fe ffa9 	bl	80072c4 <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008374:	e00a      	b.n	800838c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008376:	f7fe ffa5 	bl	80072c4 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e0c5      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800838c:	4b65      	ldr	r3, [pc, #404]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0ee      	beq.n	8008376 <HAL_RCC_OscConfig+0x33a>
 8008398:	e014      	b.n	80083c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800839a:	f7fe ff93 	bl	80072c4 <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083a0:	e00a      	b.n	80083b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083a2:	f7fe ff8f 	bl	80072c4 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e0af      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083b8:	4b5a      	ldr	r3, [pc, #360]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1ee      	bne.n	80083a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d105      	bne.n	80083d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ca:	4b56      	ldr	r3, [pc, #344]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	4a55      	ldr	r2, [pc, #340]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 80083d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 809b 	beq.w	8008516 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083e0:	4b50      	ldr	r3, [pc, #320]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 030c 	and.w	r3, r3, #12
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d05c      	beq.n	80084a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d141      	bne.n	8008478 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f4:	4b4c      	ldr	r3, [pc, #304]	; (8008528 <HAL_RCC_OscConfig+0x4ec>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fa:	f7fe ff63 	bl	80072c4 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008400:	e008      	b.n	8008414 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008402:	f7fe ff5f 	bl	80072c4 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d901      	bls.n	8008414 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e081      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008414:	4b43      	ldr	r3, [pc, #268]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f0      	bne.n	8008402 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	019b      	lsls	r3, r3, #6
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	3b01      	subs	r3, #1
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	061b      	lsls	r3, r3, #24
 8008444:	4937      	ldr	r1, [pc, #220]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 8008446:	4313      	orrs	r3, r2
 8008448:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800844a:	4b37      	ldr	r3, [pc, #220]	; (8008528 <HAL_RCC_OscConfig+0x4ec>)
 800844c:	2201      	movs	r2, #1
 800844e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008450:	f7fe ff38 	bl	80072c4 <HAL_GetTick>
 8008454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008456:	e008      	b.n	800846a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008458:	f7fe ff34 	bl	80072c4 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d901      	bls.n	800846a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e056      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800846a:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0f0      	beq.n	8008458 <HAL_RCC_OscConfig+0x41c>
 8008476:	e04e      	b.n	8008516 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008478:	4b2b      	ldr	r3, [pc, #172]	; (8008528 <HAL_RCC_OscConfig+0x4ec>)
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800847e:	f7fe ff21 	bl	80072c4 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008486:	f7fe ff1d 	bl	80072c4 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e03f      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008498:	4b22      	ldr	r3, [pc, #136]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <HAL_RCC_OscConfig+0x44a>
 80084a4:	e037      	b.n	8008516 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e032      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084b2:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <HAL_RCC_OscConfig+0x4e8>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d028      	beq.n	8008512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d121      	bne.n	8008512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d8:	429a      	cmp	r2, r3
 80084da:	d11a      	bne.n	8008512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084e2:	4013      	ands	r3, r2
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d111      	bne.n	8008512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	3b01      	subs	r3, #1
 80084fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084fe:	429a      	cmp	r2, r3
 8008500:	d107      	bne.n	8008512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800850e:	429a      	cmp	r2, r3
 8008510:	d001      	beq.n	8008516 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e000      	b.n	8008518 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40007000 	.word	0x40007000
 8008524:	40023800 	.word	0x40023800
 8008528:	42470060 	.word	0x42470060

0800852c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e0cc      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008540:	4b68      	ldr	r3, [pc, #416]	; (80086e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d90c      	bls.n	8008568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800854e:	4b65      	ldr	r3, [pc, #404]	; (80086e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	b2d2      	uxtb	r2, r2
 8008554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008556:	4b63      	ldr	r3, [pc, #396]	; (80086e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e0b8      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d020      	beq.n	80085b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008580:	4b59      	ldr	r3, [pc, #356]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	4a58      	ldr	r2, [pc, #352]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800858a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008598:	4b53      	ldr	r3, [pc, #332]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	4a52      	ldr	r2, [pc, #328]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 800859e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085a4:	4b50      	ldr	r3, [pc, #320]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	494d      	ldr	r1, [pc, #308]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d044      	beq.n	800864c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d107      	bne.n	80085da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ca:	4b47      	ldr	r3, [pc, #284]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d119      	bne.n	800860a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e07f      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d003      	beq.n	80085ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d107      	bne.n	80085fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ea:	4b3f      	ldr	r3, [pc, #252]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e06f      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085fa:	4b3b      	ldr	r3, [pc, #236]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e067      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800860a:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f023 0203 	bic.w	r2, r3, #3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	4934      	ldr	r1, [pc, #208]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008618:	4313      	orrs	r3, r2
 800861a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800861c:	f7fe fe52 	bl	80072c4 <HAL_GetTick>
 8008620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008622:	e00a      	b.n	800863a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008624:	f7fe fe4e 	bl	80072c4 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d901      	bls.n	800863a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e04f      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800863a:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 020c 	and.w	r2, r3, #12
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	429a      	cmp	r2, r3
 800864a:	d1eb      	bne.n	8008624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800864c:	4b25      	ldr	r3, [pc, #148]	; (80086e4 <HAL_RCC_ClockConfig+0x1b8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d20c      	bcs.n	8008674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800865a:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <HAL_RCC_ClockConfig+0x1b8>)
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d001      	beq.n	8008674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e032      	b.n	80086da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008680:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4916      	ldr	r1, [pc, #88]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	4313      	orrs	r3, r2
 8008690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	490e      	ldr	r1, [pc, #56]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086b2:	f000 f821 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <HAL_RCC_ClockConfig+0x1bc>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	091b      	lsrs	r3, r3, #4
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	490a      	ldr	r1, [pc, #40]	; (80086ec <HAL_RCC_ClockConfig+0x1c0>)
 80086c4:	5ccb      	ldrb	r3, [r1, r3]
 80086c6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ca:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <HAL_RCC_ClockConfig+0x1c4>)
 80086cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <HAL_RCC_ClockConfig+0x1c8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fdb2 	bl	800723c <HAL_InitTick>

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	40023c00 	.word	0x40023c00
 80086e8:	40023800 	.word	0x40023800
 80086ec:	08009874 	.word	0x08009874
 80086f0:	20000000 	.word	0x20000000
 80086f4:	20000804 	.word	0x20000804

080086f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086f8:	b5b0      	push	{r4, r5, r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086fe:	2100      	movs	r1, #0
 8008700:	6079      	str	r1, [r7, #4]
 8008702:	2100      	movs	r1, #0
 8008704:	60f9      	str	r1, [r7, #12]
 8008706:	2100      	movs	r1, #0
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800870a:	2100      	movs	r1, #0
 800870c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800870e:	4952      	ldr	r1, [pc, #328]	; (8008858 <HAL_RCC_GetSysClockFreq+0x160>)
 8008710:	6889      	ldr	r1, [r1, #8]
 8008712:	f001 010c 	and.w	r1, r1, #12
 8008716:	2908      	cmp	r1, #8
 8008718:	d00d      	beq.n	8008736 <HAL_RCC_GetSysClockFreq+0x3e>
 800871a:	2908      	cmp	r1, #8
 800871c:	f200 8094 	bhi.w	8008848 <HAL_RCC_GetSysClockFreq+0x150>
 8008720:	2900      	cmp	r1, #0
 8008722:	d002      	beq.n	800872a <HAL_RCC_GetSysClockFreq+0x32>
 8008724:	2904      	cmp	r1, #4
 8008726:	d003      	beq.n	8008730 <HAL_RCC_GetSysClockFreq+0x38>
 8008728:	e08e      	b.n	8008848 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800872a:	4b4c      	ldr	r3, [pc, #304]	; (800885c <HAL_RCC_GetSysClockFreq+0x164>)
 800872c:	60bb      	str	r3, [r7, #8]
       break;
 800872e:	e08e      	b.n	800884e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008730:	4b4b      	ldr	r3, [pc, #300]	; (8008860 <HAL_RCC_GetSysClockFreq+0x168>)
 8008732:	60bb      	str	r3, [r7, #8]
      break;
 8008734:	e08b      	b.n	800884e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008736:	4948      	ldr	r1, [pc, #288]	; (8008858 <HAL_RCC_GetSysClockFreq+0x160>)
 8008738:	6849      	ldr	r1, [r1, #4]
 800873a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800873e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008740:	4945      	ldr	r1, [pc, #276]	; (8008858 <HAL_RCC_GetSysClockFreq+0x160>)
 8008742:	6849      	ldr	r1, [r1, #4]
 8008744:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008748:	2900      	cmp	r1, #0
 800874a:	d024      	beq.n	8008796 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800874c:	4942      	ldr	r1, [pc, #264]	; (8008858 <HAL_RCC_GetSysClockFreq+0x160>)
 800874e:	6849      	ldr	r1, [r1, #4]
 8008750:	0989      	lsrs	r1, r1, #6
 8008752:	4608      	mov	r0, r1
 8008754:	f04f 0100 	mov.w	r1, #0
 8008758:	f240 14ff 	movw	r4, #511	; 0x1ff
 800875c:	f04f 0500 	mov.w	r5, #0
 8008760:	ea00 0204 	and.w	r2, r0, r4
 8008764:	ea01 0305 	and.w	r3, r1, r5
 8008768:	493d      	ldr	r1, [pc, #244]	; (8008860 <HAL_RCC_GetSysClockFreq+0x168>)
 800876a:	fb01 f003 	mul.w	r0, r1, r3
 800876e:	2100      	movs	r1, #0
 8008770:	fb01 f102 	mul.w	r1, r1, r2
 8008774:	1844      	adds	r4, r0, r1
 8008776:	493a      	ldr	r1, [pc, #232]	; (8008860 <HAL_RCC_GetSysClockFreq+0x168>)
 8008778:	fba2 0101 	umull	r0, r1, r2, r1
 800877c:	1863      	adds	r3, r4, r1
 800877e:	4619      	mov	r1, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	461a      	mov	r2, r3
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	f7fc feae 	bl	80054e8 <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4613      	mov	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e04a      	b.n	800882c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008796:	4b30      	ldr	r3, [pc, #192]	; (8008858 <HAL_RCC_GetSysClockFreq+0x160>)
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	099b      	lsrs	r3, r3, #6
 800879c:	461a      	mov	r2, r3
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80087a6:	f04f 0100 	mov.w	r1, #0
 80087aa:	ea02 0400 	and.w	r4, r2, r0
 80087ae:	ea03 0501 	and.w	r5, r3, r1
 80087b2:	4620      	mov	r0, r4
 80087b4:	4629      	mov	r1, r5
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	014b      	lsls	r3, r1, #5
 80087c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80087c4:	0142      	lsls	r2, r0, #5
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	1b00      	subs	r0, r0, r4
 80087cc:	eb61 0105 	sbc.w	r1, r1, r5
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	018b      	lsls	r3, r1, #6
 80087da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80087de:	0182      	lsls	r2, r0, #6
 80087e0:	1a12      	subs	r2, r2, r0
 80087e2:	eb63 0301 	sbc.w	r3, r3, r1
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 0100 	mov.w	r1, #0
 80087ee:	00d9      	lsls	r1, r3, #3
 80087f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087f4:	00d0      	lsls	r0, r2, #3
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	1912      	adds	r2, r2, r4
 80087fc:	eb45 0303 	adc.w	r3, r5, r3
 8008800:	f04f 0000 	mov.w	r0, #0
 8008804:	f04f 0100 	mov.w	r1, #0
 8008808:	0299      	lsls	r1, r3, #10
 800880a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800880e:	0290      	lsls	r0, r2, #10
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4610      	mov	r0, r2
 8008816:	4619      	mov	r1, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	461a      	mov	r2, r3
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	f7fc fe62 	bl	80054e8 <__aeabi_uldivmod>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4613      	mov	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <HAL_RCC_GetSysClockFreq+0x160>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	0c1b      	lsrs	r3, r3, #16
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	3301      	adds	r3, #1
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	fbb2 f3f3 	udiv	r3, r2, r3
 8008844:	60bb      	str	r3, [r7, #8]
      break;
 8008846:	e002      	b.n	800884e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <HAL_RCC_GetSysClockFreq+0x164>)
 800884a:	60bb      	str	r3, [r7, #8]
      break;
 800884c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800884e:	68bb      	ldr	r3, [r7, #8]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bdb0      	pop	{r4, r5, r7, pc}
 8008858:	40023800 	.word	0x40023800
 800885c:	00f42400 	.word	0x00f42400
 8008860:	017d7840 	.word	0x017d7840

08008864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008868:	4b03      	ldr	r3, [pc, #12]	; (8008878 <HAL_RCC_GetHCLKFreq+0x14>)
 800886a:	681b      	ldr	r3, [r3, #0]
}
 800886c:	4618      	mov	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000000 	.word	0x20000000

0800887c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008880:	f7ff fff0 	bl	8008864 <HAL_RCC_GetHCLKFreq>
 8008884:	4602      	mov	r2, r0
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	0a9b      	lsrs	r3, r3, #10
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	4903      	ldr	r1, [pc, #12]	; (80088a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008892:	5ccb      	ldrb	r3, [r1, r3]
 8008894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008898:	4618      	mov	r0, r3
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40023800 	.word	0x40023800
 80088a0:	08009884 	.word	0x08009884

080088a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088a8:	f7ff ffdc 	bl	8008864 <HAL_RCC_GetHCLKFreq>
 80088ac:	4602      	mov	r2, r0
 80088ae:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	0b5b      	lsrs	r3, r3, #13
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	4903      	ldr	r1, [pc, #12]	; (80088c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088ba:	5ccb      	ldrb	r3, [r1, r3]
 80088bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40023800 	.word	0x40023800
 80088c8:	08009884 	.word	0x08009884

080088cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e03f      	b.n	800895e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7fd f87c 	bl	80059f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2224      	movs	r2, #36	; 0x24
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800890e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fd7f 	bl	8009414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695a      	ldr	r2, [r3, #20]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b08a      	sub	sp, #40	; 0x28
 800896a:	af02      	add	r7, sp, #8
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	603b      	str	r3, [r7, #0]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b20      	cmp	r3, #32
 8008984:	d17c      	bne.n	8008a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_UART_Transmit+0x2c>
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e075      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UART_Transmit+0x3e>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e06e      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2221      	movs	r2, #33	; 0x21
 80089b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ba:	f7fe fc83 	bl	80072c4 <HAL_GetTick>
 80089be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d4:	d108      	bne.n	80089e8 <HAL_UART_Transmit+0x82>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	e003      	b.n	80089f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80089f8:	e02a      	b.n	8008a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fb01 	bl	800900c <UART_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e036      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	e007      	b.n	8008a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1cf      	bne.n	80089fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2200      	movs	r2, #0
 8008a62:	2140      	movs	r1, #64	; 0x40
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fad1 	bl	800900c <UART_WaitOnFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e006      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e000      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a80:	2302      	movs	r3, #2
  }
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	4613      	mov	r3, r2
 8008a96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d11d      	bne.n	8008ae0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <HAL_UART_Receive_DMA+0x26>
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e016      	b.n	8008ae2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_UART_Receive_DMA+0x38>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e00f      	b.n	8008ae2 <HAL_UART_Receive_DMA+0x58>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fae2 	bl	80090a0 <UART_Start_Receive_DMA>
 8008adc:	4603      	mov	r3, r0
 8008ade:	e000      	b.n	8008ae2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ae0:	2302      	movs	r3, #2
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10d      	bne.n	8008b3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d008      	beq.n	8008b3e <HAL_UART_IRQHandler+0x52>
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fbd5 	bl	80092e6 <UART_Receive_IT>
      return;
 8008b3c:	e17c      	b.n	8008e38 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80b1 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x1bc>
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <HAL_UART_IRQHandler+0x70>
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 80a6 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <HAL_UART_IRQHandler+0x90>
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d005      	beq.n	8008b7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	f043 0201 	orr.w	r2, r3, #1
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <HAL_UART_IRQHandler+0xb0>
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b94:	f043 0202 	orr.w	r2, r3, #2
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <HAL_UART_IRQHandler+0xd0>
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb4:	f043 0204 	orr.w	r2, r3, #4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00f      	beq.n	8008be6 <HAL_UART_IRQHandler+0xfa>
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <HAL_UART_IRQHandler+0xee>
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	f043 0208 	orr.w	r2, r3, #8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 811f 	beq.w	8008e2e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d007      	beq.n	8008c0a <HAL_UART_IRQHandler+0x11e>
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb6e 	bl	80092e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b40      	cmp	r3, #64	; 0x40
 8008c16:	bf0c      	ite	eq
 8008c18:	2301      	moveq	r3, #1
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <HAL_UART_IRQHandler+0x146>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d031      	beq.n	8008c96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 faae 	bl	8009194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d123      	bne.n	8008c8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d013      	beq.n	8008c86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	4a77      	ldr	r2, [pc, #476]	; (8008e40 <HAL_UART_IRQHandler+0x354>)
 8008c64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fdbe 	bl	80077ec <HAL_DMA_Abort_IT>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d016      	beq.n	8008ca4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	e00e      	b.n	8008ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8fa 	bl	8008e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8c:	e00a      	b.n	8008ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f8f6 	bl	8008e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c94:	e006      	b.n	8008ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8f2 	bl	8008e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008ca2:	e0c4      	b.n	8008e2e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca4:	bf00      	nop
    return;
 8008ca6:	e0c2      	b.n	8008e2e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f040 80a2 	bne.w	8008df6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 809c 	beq.w	8008df6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8096 	beq.w	8008df6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cea:	2b40      	cmp	r3, #64	; 0x40
 8008cec:	d14f      	bne.n	8008d8e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008cf8:	8a3b      	ldrh	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8099 	beq.w	8008e32 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d04:	8a3a      	ldrh	r2, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	f080 8093 	bcs.w	8008e32 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	8a3a      	ldrh	r2, [r7, #16]
 8008d10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d1c:	d02b      	beq.n	8008d76 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d2c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0201 	bic.w	r2, r2, #1
 8008d3c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695a      	ldr	r2, [r3, #20]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d4c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0210 	bic.w	r2, r2, #16
 8008d6a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fccb 	bl	800770c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f884 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008d8c:	e051      	b.n	8008e32 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d047      	beq.n	8008e36 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008da6:	8a7b      	ldrh	r3, [r7, #18]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d044      	beq.n	8008e36 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0201 	bic.w	r2, r2, #1
 8008dca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68da      	ldr	r2, [r3, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0210 	bic.w	r2, r2, #16
 8008de8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dea:	8a7b      	ldrh	r3, [r7, #18]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f850 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008df4:	e01f      	b.n	8008e36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d008      	beq.n	8008e12 <HAL_UART_IRQHandler+0x326>
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa03 	bl	8009216 <UART_Transmit_IT>
    return;
 8008e10:	e012      	b.n	8008e38 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00d      	beq.n	8008e38 <HAL_UART_IRQHandler+0x34c>
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa45 	bl	80092b6 <UART_EndTransmit_IT>
    return;
 8008e2c:	e004      	b.n	8008e38 <HAL_UART_IRQHandler+0x34c>
    return;
 8008e2e:	bf00      	nop
 8008e30:	e002      	b.n	8008e38 <HAL_UART_IRQHandler+0x34c>
      return;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_UART_IRQHandler+0x34c>
      return;
 8008e36:	bf00      	nop
  }
}
 8008e38:	3728      	adds	r7, #40	; 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	080091ef 	.word	0x080091ef

08008e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d12a      	bne.n	8008f1e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008edc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695a      	ldr	r2, [r3, #20]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	695a      	ldr	r2, [r3, #20]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008efc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d107      	bne.n	8008f1e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0210 	bic.w	r2, r2, #16
 8008f1c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d106      	bne.n	8008f34 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff ffb1 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f32:	e002      	b.n	8008f3a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff ff8f 	bl	8008e58 <HAL_UART_RxCpltCallback>
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d108      	bne.n	8008f6a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4619      	mov	r1, r3
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff ff96 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f68:	e002      	b.n	8008f70 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff ff7e 	bl	8008e6c <HAL_UART_RxHalfCpltCallback>
}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f94:	2b80      	cmp	r3, #128	; 0x80
 8008f96:	bf0c      	ite	eq
 8008f98:	2301      	moveq	r3, #1
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b21      	cmp	r3, #33	; 0x21
 8008faa:	d108      	bne.n	8008fbe <UART_DMAError+0x46>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008fb8:	68b8      	ldr	r0, [r7, #8]
 8008fba:	f000 f8d5 	bl	8009168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc8:	2b40      	cmp	r3, #64	; 0x40
 8008fca:	bf0c      	ite	eq
 8008fcc:	2301      	moveq	r3, #1
 8008fce:	2300      	movne	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b22      	cmp	r3, #34	; 0x22
 8008fde:	d108      	bne.n	8008ff2 <UART_DMAError+0x7a>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008fec:	68b8      	ldr	r0, [r7, #8]
 8008fee:	f000 f8d1 	bl	8009194 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	f043 0210 	orr.w	r2, r3, #16
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ffe:	68b8      	ldr	r0, [r7, #8]
 8009000:	f7ff ff3e 	bl	8008e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	4613      	mov	r3, r2
 800901a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800901c:	e02c      	b.n	8009078 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009024:	d028      	beq.n	8009078 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <UART_WaitOnFlagUntilTimeout+0x30>
 800902c:	f7fe f94a 	bl	80072c4 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	429a      	cmp	r2, r3
 800903a:	d21d      	bcs.n	8009078 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800904a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	695a      	ldr	r2, [r3, #20]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e00f      	b.n	8009098 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	4013      	ands	r3, r2
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	429a      	cmp	r2, r3
 8009086:	bf0c      	ite	eq
 8009088:	2301      	moveq	r3, #1
 800908a:	2300      	movne	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	461a      	mov	r2, r3
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	429a      	cmp	r2, r3
 8009094:	d0c3      	beq.n	800901e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	88fa      	ldrh	r2, [r7, #6]
 80090b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2222      	movs	r2, #34	; 0x22
 80090c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	4a23      	ldr	r2, [pc, #140]	; (800915c <UART_Start_Receive_DMA+0xbc>)
 80090ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	4a22      	ldr	r2, [pc, #136]	; (8009160 <UART_Start_Receive_DMA+0xc0>)
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	4a21      	ldr	r2, [pc, #132]	; (8009164 <UART_Start_Receive_DMA+0xc4>)
 80090de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	2200      	movs	r2, #0
 80090e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4619      	mov	r1, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	f7fe faac 	bl	800765c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	613b      	str	r3, [r7, #16]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009130:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	695a      	ldr	r2, [r3, #20]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	695a      	ldr	r2, [r3, #20]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009150:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	08008ead 	.word	0x08008ead
 8009160:	08008f43 	.word	0x08008f43
 8009164:	08008f79 	.word	0x08008f79

08009168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800917e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68da      	ldr	r2, [r3, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d107      	bne.n	80091d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0210 	bic.w	r2, r2, #16
 80091d2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff fe39 	bl	8008e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b21      	cmp	r3, #33	; 0x21
 8009228:	d13e      	bne.n	80092a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009232:	d114      	bne.n	800925e <UART_Transmit_IT+0x48>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d110      	bne.n	800925e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009250:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	621a      	str	r2, [r3, #32]
 800925c:	e008      	b.n	8009270 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	1c59      	adds	r1, r3, #1
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6211      	str	r1, [r2, #32]
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009274:	b29b      	uxth	r3, r3
 8009276:	3b01      	subs	r3, #1
 8009278:	b29b      	uxth	r3, r3
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4619      	mov	r1, r3
 800927e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10f      	bne.n	80092a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009292:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e000      	b.n	80092aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092a8:	2302      	movs	r3, #2
  }
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff fdb4 	bl	8008e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b22      	cmp	r3, #34	; 0x22
 80092f8:	f040 8087 	bne.w	800940a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009304:	d117      	bne.n	8009336 <UART_Receive_IT+0x50>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d113      	bne.n	8009336 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	b29b      	uxth	r3, r3
 8009320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009324:	b29a      	uxth	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932e:	1c9a      	adds	r2, r3, #2
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	629a      	str	r2, [r3, #40]	; 0x28
 8009334:	e026      	b.n	8009384 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800933c:	2300      	movs	r3, #0
 800933e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009348:	d007      	beq.n	800935a <UART_Receive_IT+0x74>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <UART_Receive_IT+0x82>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d106      	bne.n	8009368 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	b2da      	uxtb	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	e008      	b.n	800937a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009374:	b2da      	uxtb	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4619      	mov	r1, r3
 8009392:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009394:	2b00      	cmp	r3, #0
 8009396:	d136      	bne.n	8009406 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0220 	bic.w	r2, r2, #32
 80093a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695a      	ldr	r2, [r3, #20]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0201 	bic.w	r2, r2, #1
 80093c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d10e      	bne.n	80093f6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0210 	bic.w	r2, r2, #16
 80093e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff fd50 	bl	8008e94 <HAL_UARTEx_RxEventCallback>
 80093f4:	e002      	b.n	80093fc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fd2e 	bl	8008e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	e002      	b.n	800940c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	e000      	b.n	800940c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800940a:	2302      	movs	r3, #2
  }
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	b09f      	sub	sp, #124	; 0x7c
 800941a:	af00      	add	r7, sp, #0
 800941c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800941e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	68d9      	ldr	r1, [r3, #12]
 800942c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	ea40 0301 	orr.w	r3, r0, r1
 8009434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	431a      	orrs	r2, r3
 8009440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	431a      	orrs	r2, r3
 8009446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4313      	orrs	r3, r2
 800944c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800944e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009458:	f021 010c 	bic.w	r1, r1, #12
 800945c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009462:	430b      	orrs	r3, r1
 8009464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009472:	6999      	ldr	r1, [r3, #24]
 8009474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	ea40 0301 	orr.w	r3, r0, r1
 800947c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800947e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4bc5      	ldr	r3, [pc, #788]	; (8009798 <UART_SetConfig+0x384>)
 8009484:	429a      	cmp	r2, r3
 8009486:	d004      	beq.n	8009492 <UART_SetConfig+0x7e>
 8009488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4bc3      	ldr	r3, [pc, #780]	; (800979c <UART_SetConfig+0x388>)
 800948e:	429a      	cmp	r2, r3
 8009490:	d103      	bne.n	800949a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009492:	f7ff fa07 	bl	80088a4 <HAL_RCC_GetPCLK2Freq>
 8009496:	6778      	str	r0, [r7, #116]	; 0x74
 8009498:	e002      	b.n	80094a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800949a:	f7ff f9ef 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800949e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a8:	f040 80b6 	bne.w	8009618 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ae:	461c      	mov	r4, r3
 80094b0:	f04f 0500 	mov.w	r5, #0
 80094b4:	4622      	mov	r2, r4
 80094b6:	462b      	mov	r3, r5
 80094b8:	1891      	adds	r1, r2, r2
 80094ba:	6439      	str	r1, [r7, #64]	; 0x40
 80094bc:	415b      	adcs	r3, r3
 80094be:	647b      	str	r3, [r7, #68]	; 0x44
 80094c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094c4:	1912      	adds	r2, r2, r4
 80094c6:	eb45 0303 	adc.w	r3, r5, r3
 80094ca:	f04f 0000 	mov.w	r0, #0
 80094ce:	f04f 0100 	mov.w	r1, #0
 80094d2:	00d9      	lsls	r1, r3, #3
 80094d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094d8:	00d0      	lsls	r0, r2, #3
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	1911      	adds	r1, r2, r4
 80094e0:	6639      	str	r1, [r7, #96]	; 0x60
 80094e2:	416b      	adcs	r3, r5
 80094e4:	667b      	str	r3, [r7, #100]	; 0x64
 80094e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	461a      	mov	r2, r3
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	1891      	adds	r1, r2, r2
 80094f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80094f4:	415b      	adcs	r3, r3
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009500:	f7fb fff2 	bl	80054e8 <__aeabi_uldivmod>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4ba5      	ldr	r3, [pc, #660]	; (80097a0 <UART_SetConfig+0x38c>)
 800950a:	fba3 2302 	umull	r2, r3, r3, r2
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	011e      	lsls	r6, r3, #4
 8009512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009514:	461c      	mov	r4, r3
 8009516:	f04f 0500 	mov.w	r5, #0
 800951a:	4622      	mov	r2, r4
 800951c:	462b      	mov	r3, r5
 800951e:	1891      	adds	r1, r2, r2
 8009520:	6339      	str	r1, [r7, #48]	; 0x30
 8009522:	415b      	adcs	r3, r3
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
 8009526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800952a:	1912      	adds	r2, r2, r4
 800952c:	eb45 0303 	adc.w	r3, r5, r3
 8009530:	f04f 0000 	mov.w	r0, #0
 8009534:	f04f 0100 	mov.w	r1, #0
 8009538:	00d9      	lsls	r1, r3, #3
 800953a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800953e:	00d0      	lsls	r0, r2, #3
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	1911      	adds	r1, r2, r4
 8009546:	65b9      	str	r1, [r7, #88]	; 0x58
 8009548:	416b      	adcs	r3, r5
 800954a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800954c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	461a      	mov	r2, r3
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	1891      	adds	r1, r2, r2
 8009558:	62b9      	str	r1, [r7, #40]	; 0x28
 800955a:	415b      	adcs	r3, r3
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800955e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009562:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009566:	f7fb ffbf 	bl	80054e8 <__aeabi_uldivmod>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4b8c      	ldr	r3, [pc, #560]	; (80097a0 <UART_SetConfig+0x38c>)
 8009570:	fba3 1302 	umull	r1, r3, r3, r2
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	2164      	movs	r1, #100	; 0x64
 8009578:	fb01 f303 	mul.w	r3, r1, r3
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	3332      	adds	r3, #50	; 0x32
 8009582:	4a87      	ldr	r2, [pc, #540]	; (80097a0 <UART_SetConfig+0x38c>)
 8009584:	fba2 2303 	umull	r2, r3, r2, r3
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009590:	441e      	add	r6, r3
 8009592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009594:	4618      	mov	r0, r3
 8009596:	f04f 0100 	mov.w	r1, #0
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	1894      	adds	r4, r2, r2
 80095a0:	623c      	str	r4, [r7, #32]
 80095a2:	415b      	adcs	r3, r3
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24
 80095a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095aa:	1812      	adds	r2, r2, r0
 80095ac:	eb41 0303 	adc.w	r3, r1, r3
 80095b0:	f04f 0400 	mov.w	r4, #0
 80095b4:	f04f 0500 	mov.w	r5, #0
 80095b8:	00dd      	lsls	r5, r3, #3
 80095ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095be:	00d4      	lsls	r4, r2, #3
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	1814      	adds	r4, r2, r0
 80095c6:	653c      	str	r4, [r7, #80]	; 0x50
 80095c8:	414b      	adcs	r3, r1
 80095ca:	657b      	str	r3, [r7, #84]	; 0x54
 80095cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	461a      	mov	r2, r3
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	1891      	adds	r1, r2, r2
 80095d8:	61b9      	str	r1, [r7, #24]
 80095da:	415b      	adcs	r3, r3
 80095dc:	61fb      	str	r3, [r7, #28]
 80095de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095e6:	f7fb ff7f 	bl	80054e8 <__aeabi_uldivmod>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4b6c      	ldr	r3, [pc, #432]	; (80097a0 <UART_SetConfig+0x38c>)
 80095f0:	fba3 1302 	umull	r1, r3, r3, r2
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	2164      	movs	r1, #100	; 0x64
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	3332      	adds	r3, #50	; 0x32
 8009602:	4a67      	ldr	r2, [pc, #412]	; (80097a0 <UART_SetConfig+0x38c>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	f003 0207 	and.w	r2, r3, #7
 800960e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4432      	add	r2, r6
 8009614:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009616:	e0b9      	b.n	800978c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800961a:	461c      	mov	r4, r3
 800961c:	f04f 0500 	mov.w	r5, #0
 8009620:	4622      	mov	r2, r4
 8009622:	462b      	mov	r3, r5
 8009624:	1891      	adds	r1, r2, r2
 8009626:	6139      	str	r1, [r7, #16]
 8009628:	415b      	adcs	r3, r3
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009630:	1912      	adds	r2, r2, r4
 8009632:	eb45 0303 	adc.w	r3, r5, r3
 8009636:	f04f 0000 	mov.w	r0, #0
 800963a:	f04f 0100 	mov.w	r1, #0
 800963e:	00d9      	lsls	r1, r3, #3
 8009640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009644:	00d0      	lsls	r0, r2, #3
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	eb12 0804 	adds.w	r8, r2, r4
 800964e:	eb43 0905 	adc.w	r9, r3, r5
 8009652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4618      	mov	r0, r3
 8009658:	f04f 0100 	mov.w	r1, #0
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	008b      	lsls	r3, r1, #2
 8009666:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800966a:	0082      	lsls	r2, r0, #2
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7fb ff3a 	bl	80054e8 <__aeabi_uldivmod>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4b49      	ldr	r3, [pc, #292]	; (80097a0 <UART_SetConfig+0x38c>)
 800967a:	fba3 2302 	umull	r2, r3, r3, r2
 800967e:	095b      	lsrs	r3, r3, #5
 8009680:	011e      	lsls	r6, r3, #4
 8009682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009684:	4618      	mov	r0, r3
 8009686:	f04f 0100 	mov.w	r1, #0
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	1894      	adds	r4, r2, r2
 8009690:	60bc      	str	r4, [r7, #8]
 8009692:	415b      	adcs	r3, r3
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800969a:	1812      	adds	r2, r2, r0
 800969c:	eb41 0303 	adc.w	r3, r1, r3
 80096a0:	f04f 0400 	mov.w	r4, #0
 80096a4:	f04f 0500 	mov.w	r5, #0
 80096a8:	00dd      	lsls	r5, r3, #3
 80096aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096ae:	00d4      	lsls	r4, r2, #3
 80096b0:	4622      	mov	r2, r4
 80096b2:	462b      	mov	r3, r5
 80096b4:	1814      	adds	r4, r2, r0
 80096b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80096b8:	414b      	adcs	r3, r1
 80096ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f04f 0100 	mov.w	r1, #0
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	008b      	lsls	r3, r1, #2
 80096d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096d4:	0082      	lsls	r2, r0, #2
 80096d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80096da:	f7fb ff05 	bl	80054e8 <__aeabi_uldivmod>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <UART_SetConfig+0x38c>)
 80096e4:	fba3 1302 	umull	r1, r3, r3, r2
 80096e8:	095b      	lsrs	r3, r3, #5
 80096ea:	2164      	movs	r1, #100	; 0x64
 80096ec:	fb01 f303 	mul.w	r3, r1, r3
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	3332      	adds	r3, #50	; 0x32
 80096f6:	4a2a      	ldr	r2, [pc, #168]	; (80097a0 <UART_SetConfig+0x38c>)
 80096f8:	fba2 2303 	umull	r2, r3, r2, r3
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009702:	441e      	add	r6, r3
 8009704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009706:	4618      	mov	r0, r3
 8009708:	f04f 0100 	mov.w	r1, #0
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	1894      	adds	r4, r2, r2
 8009712:	603c      	str	r4, [r7, #0]
 8009714:	415b      	adcs	r3, r3
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800971c:	1812      	adds	r2, r2, r0
 800971e:	eb41 0303 	adc.w	r3, r1, r3
 8009722:	f04f 0400 	mov.w	r4, #0
 8009726:	f04f 0500 	mov.w	r5, #0
 800972a:	00dd      	lsls	r5, r3, #3
 800972c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009730:	00d4      	lsls	r4, r2, #3
 8009732:	4622      	mov	r2, r4
 8009734:	462b      	mov	r3, r5
 8009736:	eb12 0a00 	adds.w	sl, r2, r0
 800973a:	eb43 0b01 	adc.w	fp, r3, r1
 800973e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	4618      	mov	r0, r3
 8009744:	f04f 0100 	mov.w	r1, #0
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	008b      	lsls	r3, r1, #2
 8009752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009756:	0082      	lsls	r2, r0, #2
 8009758:	4650      	mov	r0, sl
 800975a:	4659      	mov	r1, fp
 800975c:	f7fb fec4 	bl	80054e8 <__aeabi_uldivmod>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <UART_SetConfig+0x38c>)
 8009766:	fba3 1302 	umull	r1, r3, r3, r2
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	2164      	movs	r1, #100	; 0x64
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	3332      	adds	r3, #50	; 0x32
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <UART_SetConfig+0x38c>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4432      	add	r2, r6
 800978a:	609a      	str	r2, [r3, #8]
}
 800978c:	bf00      	nop
 800978e:	377c      	adds	r7, #124	; 0x7c
 8009790:	46bd      	mov	sp, r7
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	bf00      	nop
 8009798:	40011000 	.word	0x40011000
 800979c:	40011400 	.word	0x40011400
 80097a0:	51eb851f 	.word	0x51eb851f

080097a4 <__libc_init_array>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	4d0d      	ldr	r5, [pc, #52]	; (80097dc <__libc_init_array+0x38>)
 80097a8:	4c0d      	ldr	r4, [pc, #52]	; (80097e0 <__libc_init_array+0x3c>)
 80097aa:	1b64      	subs	r4, r4, r5
 80097ac:	10a4      	asrs	r4, r4, #2
 80097ae:	2600      	movs	r6, #0
 80097b0:	42a6      	cmp	r6, r4
 80097b2:	d109      	bne.n	80097c8 <__libc_init_array+0x24>
 80097b4:	4d0b      	ldr	r5, [pc, #44]	; (80097e4 <__libc_init_array+0x40>)
 80097b6:	4c0c      	ldr	r4, [pc, #48]	; (80097e8 <__libc_init_array+0x44>)
 80097b8:	f000 f820 	bl	80097fc <_init>
 80097bc:	1b64      	subs	r4, r4, r5
 80097be:	10a4      	asrs	r4, r4, #2
 80097c0:	2600      	movs	r6, #0
 80097c2:	42a6      	cmp	r6, r4
 80097c4:	d105      	bne.n	80097d2 <__libc_init_array+0x2e>
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097cc:	4798      	blx	r3
 80097ce:	3601      	adds	r6, #1
 80097d0:	e7ee      	b.n	80097b0 <__libc_init_array+0xc>
 80097d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d6:	4798      	blx	r3
 80097d8:	3601      	adds	r6, #1
 80097da:	e7f2      	b.n	80097c2 <__libc_init_array+0x1e>
 80097dc:	0800a8cc 	.word	0x0800a8cc
 80097e0:	0800a8cc 	.word	0x0800a8cc
 80097e4:	0800a8cc 	.word	0x0800a8cc
 80097e8:	0800a8d0 	.word	0x0800a8d0

080097ec <memset>:
 80097ec:	4402      	add	r2, r0
 80097ee:	4603      	mov	r3, r0
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d100      	bne.n	80097f6 <memset+0xa>
 80097f4:	4770      	bx	lr
 80097f6:	f803 1b01 	strb.w	r1, [r3], #1
 80097fa:	e7f9      	b.n	80097f0 <memset+0x4>

080097fc <_init>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr

08009808 <_fini>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr
